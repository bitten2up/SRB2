use ::libc;
extern "C" {
    fn abs(_: libc::c_int) -> libc::c_int;
    fn strncpy(
        _: *mut libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> *mut libc::c_char;
    fn strlcpy(
        _: *mut libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> libc::c_ulong;
    static mut cv_debug: int32_t;
    static mut devparm: boolean;
    fn sizeu1(num: size_t) -> *mut libc::c_char;
    fn va(format: *const libc::c_char, _: ...) -> *mut libc::c_char;
    fn CONS_Debug(debugflags: int32_t, fmt: *const libc::c_char, _: ...);
    fn CONS_Alert(level: alerttype_t, fmt: *const libc::c_char, _: ...);
    fn CONS_Printf(fmt: *const libc::c_char, _: ...);
    fn I_Error(error: *const libc::c_char, _: ...) -> !;
    static mut botingame: boolean;
    static mut ultimatemode: uint8_t;
    static mut gamestate: gamestate_t;
    fn FixedSqrt(x: fixed_t) -> fixed_t;
    fn FixedHypot(x: fixed_t, y: fixed_t) -> fixed_t;
    static mut finesine: [fixed_t; 10240];
    static mut finecosine: *mut fixed_t;
    fn AngleFixed(af: angle_t) -> fixed_t;
    fn FixedAngle(fa: fixed_t) -> angle_t;
    fn FixedAngleC(fa: fixed_t, factor: fixed_t) -> angle_t;
    fn Tag_Find(list: *const taglist_t, tag: mtag_t) -> boolean;
    fn Tag_FindLineSpecial(special: int16_t, tag: mtag_t) -> int32_t;
    static mut S_sfx: [sfxinfo_t; 0];
    fn A_CapeChase();
    fn S_StopSoundByNum(sfxnum: sfxenum_t);
    fn P_MobjCheckWater(mobj: *mut mobj_t);
    fn P_SetScale(mobj: *mut mobj_t, newscale: fixed_t);
    fn P_XYMovement(mo: *mut mobj_t);
    static mut stoppedclock: boolean;
    static mut CV_OnOff: [CV_PossibleValue_t; 0];
    fn CV_Set(var: *mut consvar_t, value: *const libc::c_char);
    fn CV_SetValue(var: *mut consvar_t, value: int32_t);
    static mut cv_1upsound: consvar_t;
    fn S_StartCaption(sfx_id: sfxenum_t, cnum: int32_t, lifespan: uint16_t);
    fn S_StartSound(origin: *const libc::c_void, sound_id: sfxenum_t);
    fn S_StopSound(origin: *mut libc::c_void);
    fn S_SpeedMusic(speed: libc::c_float) -> boolean;
    fn S_SetMusicPosition(position: uint32_t) -> boolean;
    static mut music_stack_noposition: boolean;
    static mut music_stack_fadeout: uint32_t;
    static mut music_stack_fadein: uint32_t;
    fn S_RetainMusic(
        mname: *const libc::c_char,
        mflags: uint16_t,
        looping: boolean,
        position: uint32_t,
        status: uint16_t,
    );
    fn S_RecallMusic(status: uint16_t, fromfirst: boolean) -> boolean;
    fn S_ChangeMusicEx(
        mmusic: *const libc::c_char,
        mflags: uint16_t,
        looping: boolean,
        position: uint32_t,
        prefadems: uint32_t,
        fadeinms: uint32_t,
    );
    fn S_StopMusic();
    fn S_SetInternalMusicVolume(volume: int32_t);
    fn S_StopFadingMusic();
    fn S_FadeMusicFromVolume(
        target_volume: uint8_t,
        source_volume: int16_t,
        ms: uint32_t,
    ) -> boolean;
    static mut states: [state_t; 6735];
    static mut mobjinfo: [mobjinfo_t; 1163];
    static mut ticruned: int32_t;
    static mut ticmiss: int32_t;
    static mut cv_seenames: consvar_t;
    static mut cv_allowseenames: consvar_t;
    static mut cursaveslot: int32_t;
    static mut marathonmode: marathonmode_t;
    static mut metalrecording: boolean;
    static mut modeattacking: uint8_t;
    static mut netgame: boolean;
    static mut addedtogame: boolean;
    static mut multiplayer: boolean;
    static mut gametyperules: uint32_t;
    static mut splitscreen: boolean;
    static mut menuactive: boolean;
    static mut paused: uint8_t;
    static mut window_notinfocus: uint8_t;
    static mut postimgtype: postimg_t;
    static mut postimgparam: int32_t;
    static mut postimgtype2: postimg_t;
    static mut postimgparam2: int32_t;
    static mut consoleplayer: int32_t;
    static mut displayplayer: int32_t;
    static mut secondarydisplayplayer: int32_t;
    static mut sstage_start: int16_t;
    static mut sstage_end: int16_t;
    static mut smpstage_start: int16_t;
    static mut smpstage_end: int16_t;
    static mut tutorialmode: boolean;
    static mut quake: quake;
    static mut mapheaderinfo: [*mut mapheader_t; 1035];
    static mut stagefailed: boolean;
    static mut emeralds: uint16_t;
    static mut bluescore: uint32_t;
    static mut redscore: uint32_t;
    static mut CheckForBustableBlocks: boolean;
    static mut CheckForBouncySector: boolean;
    static mut CheckForQuicksand: boolean;
    static mut flashingtics: uint16_t;
    static mut tailsflytics: uint16_t;
    static mut extralifetics: uint16_t;
    static mut use1upSound: uint8_t;
    static mut maxXtraLife: uint8_t;
    static mut useContinues: uint8_t;
    static mut hunt1: *mut mobj_t;
    static mut hunt2: *mut mobj_t;
    static mut hunt3: *mut mobj_t;
    static mut countdown: uint32_t;
    static mut countdown2: uint32_t;
    static mut gravity: fixed_t;
    static mut hidetime: tic_t;
    fn P_GetFirstWaypoint(sequence: uint8_t) -> *mut mobj_t;
    fn P_GetPreviousWaypoint(current: *mut mobj_t, wrap: boolean) -> *mut mobj_t;
    fn P_GetNextWaypoint(current: *mut mobj_t, wrap: boolean) -> *mut mobj_t;
    static mut mapmusposition: uint32_t;
    static mut mapmusflags: uint16_t;
    static mut mapmusname: [libc::c_char; 7];
    static mut gamemap: int16_t;
    static mut cv_allowexitlevel: consvar_t;
    static mut cv_countdowntime: consvar_t;
    static mut cv_allowteamchange: consvar_t;
    static mut cv_respawntime: consvar_t;
    static mut cv_coopstarposts: consvar_t;
    static mut cv_cooplives: consvar_t;
    static mut cv_playersforexit: consvar_t;
    static mut cv_exitmove: consvar_t;
    static mut cv_startinglives: consvar_t;
    fn D_SendExitLevel(cheat: boolean);
    static mut server: boolean;
    fn Playing() -> boolean;
    static mut demoplayback: boolean;
    static mut demo_forwardmove_rng: boolean;
    static mut objectplacing: boolean;
    static mut seenplayer: *mut player_t;
    static mut player_names: [[libc::c_char; 22]; 32];
    static mut players: [player_t; 32];
    static mut playeringame: [boolean; 32];
    static mut gameovertics: int32_t;
    static mut ammoremovaltics: uint8_t;
    static mut timeinmap: tic_t;
    static mut cv_pauseifunfocused: consvar_t;
    static mut cv_useranalog: [consvar_t; 2];
    static mut cv_analog: [consvar_t; 2];
    static mut cv_directionchar: [consvar_t; 2];
    static mut cv_cam_shiftfacing: [consvar_t; 2];
    static mut ticcmd_oldangleturn: [int16_t; 2];
    static mut ticcmd_centerviewdown: [boolean; 2];
    fn G_ClipAimingPitch(aiming: *mut int32_t) -> int16_t;
    static mut localangle: angle_t;
    static mut localangle2: angle_t;
    static mut localaiming: int32_t;
    static mut localaiming2: int32_t;
    fn G_IsSpecialStage(mapnum: int32_t) -> boolean;
    fn G_GametypeUsesLives() -> boolean;
    fn G_GametypeUsesCoopLives() -> boolean;
    fn G_GametypeUsesCoopStarposts() -> boolean;
    fn G_GametypeHasTeams() -> boolean;
    fn G_GametypeHasSpectators() -> boolean;
    fn G_RingSlingerGametype() -> boolean;
    fn G_PlatformGametype() -> boolean;
    fn G_CoopGametype() -> boolean;
    fn G_TagGametype() -> boolean;
    fn G_CompetitionGametype() -> boolean;
    fn G_EnoughPlayersFinished() -> boolean;
    fn G_UseContinue();
    fn G_AddTempNightsRecords(
        player: *mut player_t,
        pscore: uint32_t,
        ptime: tic_t,
        mare: uint8_t,
    );
    static mut maptol: uint32_t;
    fn G_GhostAddSpin();
    fn G_GhostAddRev();
    fn G_GhostAddColor(color: ghostcolor_t);
    fn G_GhostAddThok();
    static mut thlist: [thinker_t; 0];
    static mut cv_movebob: consvar_t;
    fn P_SpawnMobj(
        x: fixed_t,
        y: fixed_t,
        z: fixed_t,
        type_0: mobjtype_t,
    ) -> *mut mobj_t;
    fn P_RemoveMobj(th: *mut mobj_t);
    fn P_MobjWasRemoved(th: *mut mobj_t) -> boolean;
    fn P_SetPlayerMobjState(mobj: *mut mobj_t, state: statenum_t) -> boolean;
    fn P_SetMobjState(mobj: *mut mobj_t, state: statenum_t) -> boolean;
    fn P_HandleMinecartSegments(mobj: *mut mobj_t);
    fn P_RailThinker(mobj: *mut mobj_t) -> boolean;
    fn P_MobjFloorZ(
        mobj: *mut mobj_t,
        sector: *mut sector_t,
        boundsec: *mut sector_t,
        x: fixed_t,
        y: fixed_t,
        line: *mut line_t,
        lowest: boolean,
        perfect: boolean,
    ) -> fixed_t;
    fn P_MobjCeilingZ(
        mobj: *mut mobj_t,
        sector: *mut sector_t,
        boundsec: *mut sector_t,
        x: fixed_t,
        y: fixed_t,
        line: *mut line_t,
        lowest: boolean,
        perfect: boolean,
    ) -> fixed_t;
    fn P_CameraFloorZ(
        mobj: *mut camera_t,
        sector: *mut sector_t,
        boundsec: *mut sector_t,
        x: fixed_t,
        y: fixed_t,
        line: *mut line_t,
        lowest: boolean,
        perfect: boolean,
    ) -> fixed_t;
    fn P_CameraCeilingZ(
        mobj: *mut camera_t,
        sector: *mut sector_t,
        boundsec: *mut sector_t,
        x: fixed_t,
        y: fixed_t,
        line: *mut line_t,
        lowest: boolean,
        perfect: boolean,
    ) -> fixed_t;
    fn P_CheckDeathPitCollide(mo: *mut mobj_t) -> boolean;
    fn P_CheckSolidLava(rover: *mut ffloor_t) -> boolean;
    fn P_SpawnMobjFromMobj(
        mobj: *mut mobj_t,
        xofs: fixed_t,
        yofs: fixed_t,
        zofs: fixed_t,
        type_0: mobjtype_t,
    ) -> *mut mobj_t;
    fn P_SpawnXYZMissile(
        source: *mut mobj_t,
        dest: *mut mobj_t,
        type_0: mobjtype_t,
        x: fixed_t,
        y: fixed_t,
        z: fixed_t,
    ) -> *mut mobj_t;
    fn P_SpawnPointMissile(
        source: *mut mobj_t,
        xa: fixed_t,
        ya: fixed_t,
        za: fixed_t,
        type_0: mobjtype_t,
        x: fixed_t,
        y: fixed_t,
        z: fixed_t,
    ) -> *mut mobj_t;
    fn P_SPMAngle(
        source: *mut mobj_t,
        type_0: mobjtype_t,
        angle: angle_t,
        aimtype: uint8_t,
        flags2: uint32_t,
    ) -> *mut mobj_t;
    fn P_ColorTeamMissile(missile: *mut mobj_t, source: *mut player_t);
    fn P_MobjFlip(mobj: *mut mobj_t) -> int8_t;
    fn P_CalcChasePostImg(player: *mut player_t, thiscam: *mut camera_t);
    fn P_CameraThinker(
        player: *mut player_t,
        thiscam: *mut camera_t,
        resetcalled: boolean,
    ) -> boolean;
    fn P_FlashPal(pl: *mut player_t, type_0: uint16_t, duration: uint16_t);
    static mut var1: int32_t;
    static mut var2: int32_t;
    static mut tmthing: *mut mobj_t;
    fn P_UnsetThingPosition(thing: *mut mobj_t);
    fn P_SetThingPosition(thing: *mut mobj_t);
    fn P_CheckMove(
        thing: *mut mobj_t,
        x: fixed_t,
        y: fixed_t,
        allowdropoff: boolean,
    ) -> boolean;
    fn P_TryMove(
        thing: *mut mobj_t,
        x: fixed_t,
        y: fixed_t,
        allowdropoff: boolean,
    ) -> boolean;
    fn P_MoveOrigin(thing: *mut mobj_t, x: fixed_t, y: fixed_t, z: fixed_t) -> boolean;
    fn P_CheckSight(t1: *mut mobj_t, t2: *mut mobj_t) -> boolean;
    fn P_RadiusAttack(
        spot: *mut mobj_t,
        source: *mut mobj_t,
        damagedist: fixed_t,
        damagetype: uint8_t,
        sightcheck: boolean,
    );
    static mut bmapwidth: int32_t;
    static mut bmapheight: int32_t;
    static mut bmaporgx: fixed_t;
    static mut bmaporgy: fixed_t;
    fn P_DamageMobj(
        target: *mut mobj_t,
        inflictor: *mut mobj_t,
        source: *mut mobj_t,
        damage: int32_t,
        damagetype: uint8_t,
    ) -> boolean;
    fn P_KillMobj(
        target: *mut mobj_t,
        inflictor: *mut mobj_t,
        source: *mut mobj_t,
        damagetype: uint8_t,
    );
    fn P_PlayerEmeraldBurst(player: *mut player_t, toss: boolean);
    fn P_PlayerFlagBurst(player: *mut player_t, toss: boolean);
    fn P_CheckSurvivors();
    fn P_CheckRacers() -> boolean;
    fn P_SetMobjStateNF(mobj: *mut mobj_t, state: statenum_t) -> boolean;
    fn P_MobjInsidePolyobj(po: *mut polyobj_t, mo: *mut mobj_t) -> boolean;
    fn P_PointInsidePolyobj(po: *mut polyobj_t, x: fixed_t, y: fixed_t) -> boolean;
    fn P_SetTarget2(mo: *mut *mut mobj_t, target: *mut mobj_t) -> *mut mobj_t;
    fn P_RemoveThinkerDelayed(thinker: *mut thinker_t);
    static mut leveltime: tic_t;
    fn P_AproxDistance(dx: fixed_t, dy: fixed_t) -> fixed_t;
    fn P_PointOnLineSide(x: fixed_t, y: fixed_t, line: *mut line_t) -> int32_t;
    fn P_BlockThingsIterator(
        x: int32_t,
        y: int32_t,
        func: Option::<unsafe extern "C" fn(*mut mobj_t) -> boolean>,
    ) -> boolean;
    static mut tmbbox: [fixed_t; 4];
    static mut polyblocklinks: *mut *mut polymaplink_t;
    fn P_RunNightserizeExecutors(actor: *mut mobj_t);
    fn P_PlayerInSpecialSector(player: *mut player_t);
    fn P_PlayerTouchingSectorSpecialFlag(
        player: *mut player_t,
        flag: sectorspecialflags_t,
    ) -> *mut sector_t;
    fn P_RunNightsCapsuleTouchExecutors(
        actor: *mut mobj_t,
        entering: boolean,
        enoughspheres: boolean,
    );
    fn P_RunDeNightserizeExecutors(actor: *mut mobj_t);
    fn EV_StartCrumble(
        sector: *mut sector_t,
        rover: *mut ffloor_t,
        floating: boolean,
        player: *mut player_t,
        origalpha: fixed_t,
        crumblereturn: boolean,
    ) -> int32_t;
    fn EV_CrumbleChain(sec: *mut sector_t, rover: *mut ffloor_t);
    fn P_LinedefExecute(tag: int16_t, actor: *mut mobj_t, caller: *mut sector_t);
    fn T_Scroll(s: *mut scroll_t);
    static mut lines: *mut line_t;
    fn R_ResetMobjInterpolationState(mobj: *mut mobj_t);
    static mut udmf: boolean;
    static mut sectors: *mut sector_t;
    fn P_SwitchSpheresBonusMode(bonustime: boolean);
    static mut validcount: size_t;
    fn R_PointToAngle(x: fixed_t, y: fixed_t) -> angle_t;
    fn R_PointToAngle2(
        px2: fixed_t,
        py2: fixed_t,
        px1: fixed_t,
        py1: fixed_t,
    ) -> angle_t;
    fn R_PointToDist2(px2: fixed_t, py2: fixed_t, px1: fixed_t, py1: fixed_t) -> fixed_t;
    fn R_PointInSubsector(x: fixed_t, y: fixed_t) -> *mut subsector_t;
    fn R_PointInSubsectorOrNull(x: fixed_t, y: fixed_t) -> *mut subsector_t;
    static mut cv_chasecam: consvar_t;
    static mut cv_chasecam2: consvar_t;
    static mut cv_tailspickup: consvar_t;
    static mut skins: [skin_t; 32];
    fn P_GetSkinSprite2(
        skin: *mut skin_t,
        spr2: uint8_t,
        player: *mut player_t,
    ) -> uint8_t;
    static mut skyflatnum: int32_t;
    fn P_RandomFixed() -> fixed_t;
    fn P_RandomByte() -> uint8_t;
    fn P_RandomKey(a: int32_t) -> int32_t;
    fn P_RandomRange(a: int32_t, b: int32_t) -> int32_t;
    fn P_GetSlopeZAt(slope: *const pslope_t, x: fixed_t, y: fixed_t) -> fixed_t;
    fn P_GetSectorFloorZAt(sector: *const sector_t, x: fixed_t, y: fixed_t) -> fixed_t;
    fn P_GetSectorCeilingZAt(sector: *const sector_t, x: fixed_t, y: fixed_t) -> fixed_t;
    fn P_GetFFloorTopZAt(ffloor: *const ffloor_t, x: fixed_t, y: fixed_t) -> fixed_t;
    fn P_GetFFloorBottomZAt(ffloor: *const ffloor_t, x: fixed_t, y: fixed_t) -> fixed_t;
    fn P_QuantizeMomentumToSlope(momentum: *mut vector3_t, slope: *mut pslope_t);
    fn P_ReverseQuantizeMomentumToSlope(momentum: *mut vector3_t, slope: *mut pslope_t);
    fn HU_SetCEchoDuration(seconds: int32_t);
    fn HU_SetCEchoFlags(flags: int32_t);
    fn HU_DoCEcho(msg: *const libc::c_char);
    fn LUA_HookPlayer(_: *mut player_t, hook: libc::c_int) -> libc::c_int;
    fn LUA_HookPlayerCanDamage(_: *mut player_t, _: *mut mobj_t) -> libc::c_int;
    fn LUA_HookTeamSwitch(
        _: *mut player_t,
        newteam: libc::c_int,
        fromspectators: boolean,
        tryingautobalance: boolean,
        tryingscramble: boolean,
    ) -> libc::c_int;
    fn LUA_HookViewpointSwitch(
        player: *mut player_t,
        newdisplayplayer: *mut player_t,
        forced: boolean,
    ) -> libc::c_int;
    fn LUA_HookFollowMobj(_: *mut player_t, _: *mut mobj_t) -> libc::c_int;
    fn LUA_HookShouldJingleContinue(
        _: *mut player_t,
        musname: *const libc::c_char,
    ) -> libc::c_int;
    fn LUA_HookPlayerHeight(player: *mut player_t) -> fixed_t;
    fn LUA_HookPlayerCanEnterSpinGaps(player: *mut player_t) -> libc::c_int;
    fn B_CheckRespawn(player: *mut player_t) -> boolean;
    fn B_HandleFlightIndicator(player: *mut player_t);
}
pub type __int8_t = libc::c_schar;
pub type __uint8_t = libc::c_uchar;
pub type __int16_t = libc::c_short;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type int8_t = __int8_t;
pub type int16_t = __int16_t;
pub type int32_t = __int32_t;
pub type int64_t = __int64_t;
pub type uint8_t = __uint8_t;
pub type uint16_t = __uint16_t;
pub type uint32_t = __uint32_t;
pub type uint64_t = __uint64_t;
pub type size_t = libc::c_ulong;
pub type boolean = int32_t;
pub type C2RustUnnamed = libc::c_uint;
pub const true_0: C2RustUnnamed = 1;
pub const false_0: C2RustUnnamed = 0;
pub type postimg_t = libc::c_uint;
pub const postimg_heat: postimg_t = 4;
pub const postimg_flip: postimg_t = 3;
pub const postimg_motion: postimg_t = 2;
pub const postimg_water: postimg_t = 1;
pub const postimg_none: postimg_t = 0;
pub type lumpnum_t = uint32_t;
pub type tic_t = uint32_t;
pub type C2RustUnnamed_0 = libc::c_uint;
pub const NUMSUPERCOLORS: C2RustUnnamed_0 = 9;
pub const MAXSKINCOLORS: C2RustUnnamed_0 = 1182;
pub const SKINCOLOR_LASTFREESLOT: C2RustUnnamed_0 = 1181;
pub const SKINCOLOR_FIRSTFREESLOT: C2RustUnnamed_0 = 158;
pub const SKINCOLOR_SUPERTAN5: C2RustUnnamed_0 = 157;
pub const SKINCOLOR_SUPERTAN4: C2RustUnnamed_0 = 156;
pub const SKINCOLOR_SUPERTAN3: C2RustUnnamed_0 = 155;
pub const SKINCOLOR_SUPERTAN2: C2RustUnnamed_0 = 154;
pub const SKINCOLOR_SUPERTAN1: C2RustUnnamed_0 = 153;
pub const SKINCOLOR_SUPERRUST5: C2RustUnnamed_0 = 152;
pub const SKINCOLOR_SUPERRUST4: C2RustUnnamed_0 = 151;
pub const SKINCOLOR_SUPERRUST3: C2RustUnnamed_0 = 150;
pub const SKINCOLOR_SUPERRUST2: C2RustUnnamed_0 = 149;
pub const SKINCOLOR_SUPERRUST1: C2RustUnnamed_0 = 148;
pub const SKINCOLOR_SUPERPURPLE5: C2RustUnnamed_0 = 147;
pub const SKINCOLOR_SUPERPURPLE4: C2RustUnnamed_0 = 146;
pub const SKINCOLOR_SUPERPURPLE3: C2RustUnnamed_0 = 145;
pub const SKINCOLOR_SUPERPURPLE2: C2RustUnnamed_0 = 144;
pub const SKINCOLOR_SUPERPURPLE1: C2RustUnnamed_0 = 143;
pub const SKINCOLOR_SUPERSKY5: C2RustUnnamed_0 = 142;
pub const SKINCOLOR_SUPERSKY4: C2RustUnnamed_0 = 141;
pub const SKINCOLOR_SUPERSKY3: C2RustUnnamed_0 = 140;
pub const SKINCOLOR_SUPERSKY2: C2RustUnnamed_0 = 139;
pub const SKINCOLOR_SUPERSKY1: C2RustUnnamed_0 = 138;
pub const SKINCOLOR_SUPERPERIDOT5: C2RustUnnamed_0 = 137;
pub const SKINCOLOR_SUPERPERIDOT4: C2RustUnnamed_0 = 136;
pub const SKINCOLOR_SUPERPERIDOT3: C2RustUnnamed_0 = 135;
pub const SKINCOLOR_SUPERPERIDOT2: C2RustUnnamed_0 = 134;
pub const SKINCOLOR_SUPERPERIDOT1: C2RustUnnamed_0 = 133;
pub const SKINCOLOR_SUPERGOLD5: C2RustUnnamed_0 = 132;
pub const SKINCOLOR_SUPERGOLD4: C2RustUnnamed_0 = 131;
pub const SKINCOLOR_SUPERGOLD3: C2RustUnnamed_0 = 130;
pub const SKINCOLOR_SUPERGOLD2: C2RustUnnamed_0 = 129;
pub const SKINCOLOR_SUPERGOLD1: C2RustUnnamed_0 = 128;
pub const SKINCOLOR_SUPERORANGE5: C2RustUnnamed_0 = 127;
pub const SKINCOLOR_SUPERORANGE4: C2RustUnnamed_0 = 126;
pub const SKINCOLOR_SUPERORANGE3: C2RustUnnamed_0 = 125;
pub const SKINCOLOR_SUPERORANGE2: C2RustUnnamed_0 = 124;
pub const SKINCOLOR_SUPERORANGE1: C2RustUnnamed_0 = 123;
pub const SKINCOLOR_SUPERRED5: C2RustUnnamed_0 = 122;
pub const SKINCOLOR_SUPERRED4: C2RustUnnamed_0 = 121;
pub const SKINCOLOR_SUPERRED3: C2RustUnnamed_0 = 120;
pub const SKINCOLOR_SUPERRED2: C2RustUnnamed_0 = 119;
pub const SKINCOLOR_SUPERRED1: C2RustUnnamed_0 = 118;
pub const SKINCOLOR_SUPERSILVER5: C2RustUnnamed_0 = 117;
pub const SKINCOLOR_SUPERSILVER4: C2RustUnnamed_0 = 116;
pub const SKINCOLOR_SUPERSILVER3: C2RustUnnamed_0 = 115;
pub const SKINCOLOR_SUPERSILVER2: C2RustUnnamed_0 = 114;
pub const SKINCOLOR_SUPERSILVER1: C2RustUnnamed_0 = 113;
pub const FIRSTSUPERCOLOR: C2RustUnnamed_0 = 113;
pub const SKINCOLOR_VOLCANIC: C2RustUnnamed_0 = 112;
pub const SKINCOLOR_SANGRIA: C2RustUnnamed_0 = 111;
pub const SKINCOLOR_FANCY: C2RustUnnamed_0 = 110;
pub const SKINCOLOR_ROSY: C2RustUnnamed_0 = 109;
pub const SKINCOLOR_TAFFY: C2RustUnnamed_0 = 108;
pub const SKINCOLOR_RASPBERRY: C2RustUnnamed_0 = 107;
pub const SKINCOLOR_PLUM: C2RustUnnamed_0 = 106;
pub const SKINCOLOR_EVENTIDE: C2RustUnnamed_0 = 105;
pub const SKINCOLOR_MAUVE: C2RustUnnamed_0 = 104;
pub const SKINCOLOR_LILAC: C2RustUnnamed_0 = 103;
pub const SKINCOLOR_ROYAL: C2RustUnnamed_0 = 102;
pub const SKINCOLOR_VIOLET: C2RustUnnamed_0 = 101;
pub const SKINCOLOR_NEON: C2RustUnnamed_0 = 100;
pub const SKINCOLOR_MAGENTA: C2RustUnnamed_0 = 99;
pub const SKINCOLOR_SIBERITE: C2RustUnnamed_0 = 98;
pub const SKINCOLOR_BUBBLEGUM: C2RustUnnamed_0 = 97;
pub const SKINCOLOR_FUCHSIA: C2RustUnnamed_0 = 96;
pub const SKINCOLOR_NOBLE: C2RustUnnamed_0 = 95;
pub const SKINCOLOR_PURPLE: C2RustUnnamed_0 = 94;
pub const SKINCOLOR_PASTEL: C2RustUnnamed_0 = 93;
pub const SKINCOLOR_MAJESTY: C2RustUnnamed_0 = 92;
pub const SKINCOLOR_DUSK: C2RustUnnamed_0 = 91;
pub const SKINCOLOR_VAPOR: C2RustUnnamed_0 = 90;
pub const SKINCOLOR_GALAXY: C2RustUnnamed_0 = 89;
pub const SKINCOLOR_MIDNIGHT: C2RustUnnamed_0 = 88;
pub const SKINCOLOR_COBALT: C2RustUnnamed_0 = 87;
pub const SKINCOLOR_BLUE: C2RustUnnamed_0 = 86;
pub const SKINCOLOR_CORNFLOWER: C2RustUnnamed_0 = 85;
pub const SKINCOLOR_ARCTIC: C2RustUnnamed_0 = 84;
pub const SKINCOLOR_SAPPHIRE: C2RustUnnamed_0 = 83;
pub const SKINCOLOR_DAYBREAK: C2RustUnnamed_0 = 82;
pub const SKINCOLOR_ICY: C2RustUnnamed_0 = 81;
pub const SKINCOLOR_DREAM: C2RustUnnamed_0 = 80;
pub const SKINCOLOR_CERULEAN: C2RustUnnamed_0 = 79;
pub const SKINCOLOR_MARINE: C2RustUnnamed_0 = 78;
pub const SKINCOLOR_SKY: C2RustUnnamed_0 = 77;
pub const SKINCOLOR_AQUAMARINE: C2RustUnnamed_0 = 76;
pub const SKINCOLOR_TURQUOISE: C2RustUnnamed_0 = 75;
pub const SKINCOLOR_CYAN: C2RustUnnamed_0 = 74;
pub const SKINCOLOR_WAVE: C2RustUnnamed_0 = 73;
pub const SKINCOLOR_OCEAN: C2RustUnnamed_0 = 72;
pub const SKINCOLOR_TEAL: C2RustUnnamed_0 = 71;
pub const SKINCOLOR_AQUA: C2RustUnnamed_0 = 70;
pub const SKINCOLOR_BOTTLE: C2RustUnnamed_0 = 69;
pub const SKINCOLOR_ISLAND: C2RustUnnamed_0 = 68;
pub const SKINCOLOR_SEAFOAM: C2RustUnnamed_0 = 67;
pub const SKINCOLOR_EMERALD: C2RustUnnamed_0 = 66;
pub const SKINCOLOR_MASTER: C2RustUnnamed_0 = 65;
pub const SKINCOLOR_MINT: C2RustUnnamed_0 = 64;
pub const SKINCOLOR_JADE: C2RustUnnamed_0 = 63;
pub const SKINCOLOR_SHAMROCK: C2RustUnnamed_0 = 62;
pub const SKINCOLOR_FOREST: C2RustUnnamed_0 = 61;
pub const SKINCOLOR_GREEN: C2RustUnnamed_0 = 60;
pub const SKINCOLOR_CHARTREUSE: C2RustUnnamed_0 = 59;
pub const SKINCOLOR_HEADLIGHT: C2RustUnnamed_0 = 58;
pub const SKINCOLOR_APPLE: C2RustUnnamed_0 = 57;
pub const SKINCOLOR_PERIDOT: C2RustUnnamed_0 = 56;
pub const SKINCOLOR_LIME: C2RustUnnamed_0 = 55;
pub const SKINCOLOR_LEMON: C2RustUnnamed_0 = 54;
pub const SKINCOLOR_PEAR: C2RustUnnamed_0 = 53;
pub const SKINCOLOR_OLIVE: C2RustUnnamed_0 = 52;
pub const SKINCOLOR_YELLOW: C2RustUnnamed_0 = 51;
pub const SKINCOLOR_GOLDENROD: C2RustUnnamed_0 = 50;
pub const SKINCOLOR_SANDY: C2RustUnnamed_0 = 49;
pub const SKINCOLOR_GOLD: C2RustUnnamed_0 = 48;
pub const SKINCOLOR_TOPAZ: C2RustUnnamed_0 = 47;
pub const SKINCOLOR_TANGERINE: C2RustUnnamed_0 = 46;
pub const SKINCOLOR_RUST: C2RustUnnamed_0 = 45;
pub const SKINCOLOR_ORANGE: C2RustUnnamed_0 = 44;
pub const SKINCOLOR_APRICOT: C2RustUnnamed_0 = 43;
pub const SKINCOLOR_COPPER: C2RustUnnamed_0 = 42;
pub const SKINCOLOR_SUNSET: C2RustUnnamed_0 = 41;
pub const SKINCOLOR_FOUNDATION: C2RustUnnamed_0 = 40;
pub const SKINCOLOR_QUAIL: C2RustUnnamed_0 = 39;
pub const SKINCOLOR_PEACHY: C2RustUnnamed_0 = 38;
pub const SKINCOLOR_KETCHUP: C2RustUnnamed_0 = 37;
pub const SKINCOLOR_GARNET: C2RustUnnamed_0 = 36;
pub const SKINCOLOR_FLAME: C2RustUnnamed_0 = 35;
pub const SKINCOLOR_CRIMSON: C2RustUnnamed_0 = 34;
pub const SKINCOLOR_RED: C2RustUnnamed_0 = 33;
pub const SKINCOLOR_PEPPER: C2RustUnnamed_0 = 32;
pub const SKINCOLOR_SALMON: C2RustUnnamed_0 = 31;
pub const SKINCOLOR_CHERRY: C2RustUnnamed_0 = 30;
pub const SKINCOLOR_RUBY: C2RustUnnamed_0 = 29;
pub const SKINCOLOR_LAVENDER: C2RustUnnamed_0 = 28;
pub const SKINCOLOR_EGGPLANT: C2RustUnnamed_0 = 27;
pub const SKINCOLOR_AZURE: C2RustUnnamed_0 = 26;
pub const SKINCOLOR_MOSS: C2RustUnnamed_0 = 25;
pub const SKINCOLOR_ROSEBUSH: C2RustUnnamed_0 = 24;
pub const SKINCOLOR_BEIGE: C2RustUnnamed_0 = 23;
pub const SKINCOLOR_TAN: C2RustUnnamed_0 = 22;
pub const SKINCOLOR_ECRU: C2RustUnnamed_0 = 21;
pub const SKINCOLOR_SEPIA: C2RustUnnamed_0 = 20;
pub const SKINCOLOR_BRONZE: C2RustUnnamed_0 = 19;
pub const SKINCOLOR_BOULDER: C2RustUnnamed_0 = 18;
pub const SKINCOLOR_BROWN: C2RustUnnamed_0 = 17;
pub const SKINCOLOR_LATTE: C2RustUnnamed_0 = 16;
pub const SKINCOLOR_YOGURT: C2RustUnnamed_0 = 15;
pub const SKINCOLOR_ROSEWOOD: C2RustUnnamed_0 = 14;
pub const SKINCOLOR_PINK: C2RustUnnamed_0 = 13;
pub const SKINCOLOR_BLUEBELL: C2RustUnnamed_0 = 12;
pub const SKINCOLOR_MOONSTONE: C2RustUnnamed_0 = 11;
pub const SKINCOLOR_SLATE: C2RustUnnamed_0 = 10;
pub const SKINCOLOR_AETHER: C2RustUnnamed_0 = 9;
pub const SKINCOLOR_BLACK: C2RustUnnamed_0 = 8;
pub const SKINCOLOR_JET: C2RustUnnamed_0 = 7;
pub const SKINCOLOR_CARBON: C2RustUnnamed_0 = 6;
pub const SKINCOLOR_SILVER: C2RustUnnamed_0 = 5;
pub const SKINCOLOR_GREY: C2RustUnnamed_0 = 4;
pub const SKINCOLOR_CLOUDY: C2RustUnnamed_0 = 3;
pub const SKINCOLOR_BONE: C2RustUnnamed_0 = 2;
pub const SKINCOLOR_WHITE: C2RustUnnamed_0 = 1;
pub const SKINCOLOR_NONE: C2RustUnnamed_0 = 0;
pub type gamestate_t = libc::c_uint;
pub const GS_WAITINGPLAYERS: gamestate_t = 13;
pub const GS_DEDICATEDSERVER: gamestate_t = 12;
pub const GS_CUTSCENE: gamestate_t = 11;
pub const GS_ENDING: gamestate_t = 10;
pub const GS_INTRO: gamestate_t = 9;
pub const GS_GAMEEND: gamestate_t = 8;
pub const GS_EVALUATION: gamestate_t = 7;
pub const GS_CREDITS: gamestate_t = 6;
pub const GS_TIMEATTACK: gamestate_t = 5;
pub const GS_TITLESCREEN: gamestate_t = 4;
pub const GS_CONTINUING: gamestate_t = 3;
pub const GS_INTERMISSION: gamestate_t = 2;
pub const GS_LEVEL: gamestate_t = 1;
pub const GS_NULL: gamestate_t = 0;
pub type alerttype_t = libc::c_uint;
pub const CONS_ERROR: alerttype_t = 2;
pub const CONS_WARNING: alerttype_t = 1;
pub const CONS_NOTICE: alerttype_t = 0;
pub type fixed_t = int32_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct vector2_t {
    pub x: fixed_t,
    pub y: fixed_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct vector3_t {
    pub x: fixed_t,
    pub y: fixed_t,
    pub z: fixed_t,
}
pub type C2RustUnnamed_1 = libc::c_uint;
pub const BT_CUSTOM3: C2RustUnnamed_1 = 32768;
pub const BT_CUSTOM2: C2RustUnnamed_1 = 16384;
pub const BT_CUSTOM1: C2RustUnnamed_1 = 8192;
pub const BT_FIRENORMAL: C2RustUnnamed_1 = 4096;
pub const BT_JUMP: C2RustUnnamed_1 = 2048;
pub const BT_TOSSFLAG: C2RustUnnamed_1 = 1024;
pub const BT_CAMRIGHT: C2RustUnnamed_1 = 512;
pub const BT_CAMLEFT: C2RustUnnamed_1 = 256;
pub const BT_SPIN: C2RustUnnamed_1 = 128;
pub const BT_ATTACK: C2RustUnnamed_1 = 64;
pub const BT_WEAPONPREV: C2RustUnnamed_1 = 32;
pub const BT_WEAPONNEXT: C2RustUnnamed_1 = 16;
pub const BT_WEAPONMASK: C2RustUnnamed_1 = 15;
#[derive(Copy, Clone)]
#[repr(C, packed)]
pub struct ticcmd_t {
    pub forwardmove: int8_t,
    pub sidemove: int8_t,
    pub angleturn: int16_t,
    pub aiming: int16_t,
    pub buttons: uint16_t,
    pub latency: uint8_t,
}
pub type angle_t = uint32_t;
pub type actionf_v = Option::<unsafe extern "C" fn() -> ()>;
pub type actionf_p1 = Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub union actionf_t {
    pub acv: actionf_v,
    pub acp1: actionf_p1,
}
pub type think_t = actionf_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct thinker_s {
    pub prev: *mut thinker_s,
    pub next: *mut thinker_s,
    pub function: think_t,
    pub references: int32_t,
}
pub type thinker_t = thinker_s;
pub type mtag_t = int16_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct taglist_t {
    pub tags: *mut mtag_t,
    pub count: uint16_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct mapthing_t {
    pub x: int16_t,
    pub y: int16_t,
    pub angle: int16_t,
    pub pitch: int16_t,
    pub roll: int16_t,
    pub type_0: uint16_t,
    pub options: uint16_t,
    pub z: int16_t,
    pub extrainfo: uint8_t,
    pub tags: taglist_t,
    pub scale: fixed_t,
    pub spritexscale: fixed_t,
    pub spriteyscale: fixed_t,
    pub args: [int32_t; 10],
    pub stringargs: [*mut libc::c_char; 2],
    pub mobj: *mut mobj_s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct mobj_s {
    pub thinker: thinker_t,
    pub x: fixed_t,
    pub y: fixed_t,
    pub z: fixed_t,
    pub old_x: fixed_t,
    pub old_y: fixed_t,
    pub old_z: fixed_t,
    pub old_x2: fixed_t,
    pub old_y2: fixed_t,
    pub old_z2: fixed_t,
    pub snext: *mut mobj_s,
    pub sprev: *mut *mut mobj_s,
    pub angle: angle_t,
    pub pitch: angle_t,
    pub roll: angle_t,
    pub old_angle: angle_t,
    pub old_pitch: angle_t,
    pub old_roll: angle_t,
    pub old_angle2: angle_t,
    pub old_pitch2: angle_t,
    pub old_roll2: angle_t,
    pub spriteroll: angle_t,
    pub old_spriteroll: angle_t,
    pub old_spriteroll2: angle_t,
    pub sprite: spritenum_t,
    pub frame: uint32_t,
    pub sprite2: uint8_t,
    pub anim_duration: uint16_t,
    pub renderflags: uint32_t,
    pub blendmode: int32_t,
    pub spritexscale: fixed_t,
    pub spriteyscale: fixed_t,
    pub spritexoffset: fixed_t,
    pub spriteyoffset: fixed_t,
    pub old_spritexscale: fixed_t,
    pub old_spriteyscale: fixed_t,
    pub old_spritexoffset: fixed_t,
    pub old_spriteyoffset: fixed_t,
    pub floorspriteslope: *mut pslope_s,
    pub touching_sectorlist: *mut msecnode_s,
    pub subsector: *mut subsector_s,
    pub floorz: fixed_t,
    pub ceilingz: fixed_t,
    pub floorrover: *mut ffloor_s,
    pub ceilingrover: *mut ffloor_s,
    pub radius: fixed_t,
    pub height: fixed_t,
    pub momx: fixed_t,
    pub momy: fixed_t,
    pub momz: fixed_t,
    pub pmomz: fixed_t,
    pub tics: int32_t,
    pub state: *mut state_t,
    pub flags: uint32_t,
    pub flags2: uint32_t,
    pub eflags: uint16_t,
    pub skin: *mut libc::c_void,
    pub color: uint16_t,
    pub drawonlyforplayer: *mut player_s,
    pub dontdrawforviewmobj: *mut mobj_s,
    pub bnext: *mut mobj_s,
    pub bprev: *mut *mut mobj_s,
    pub hnext: *mut mobj_s,
    pub hprev: *mut mobj_s,
    pub type_0: mobjtype_t,
    pub info: *const mobjinfo_t,
    pub health: int32_t,
    pub movedir: angle_t,
    pub movecount: int32_t,
    pub target: *mut mobj_s,
    pub reactiontime: int32_t,
    pub threshold: int32_t,
    pub player: *mut player_s,
    pub lastlook: int32_t,
    pub spawnpoint: *mut mapthing_t,
    pub tracer: *mut mobj_s,
    pub friction: fixed_t,
    pub movefactor: fixed_t,
    pub fuse: int32_t,
    pub watertop: fixed_t,
    pub waterbottom: fixed_t,
    pub mobjnum: uint32_t,
    pub scale: fixed_t,
    pub old_scale: fixed_t,
    pub old_scale2: fixed_t,
    pub destscale: fixed_t,
    pub scalespeed: fixed_t,
    pub extravalue1: int32_t,
    pub extravalue2: int32_t,
    pub cusval: int32_t,
    pub cvmem: int32_t,
    pub standingslope: *mut pslope_s,
    pub resetinterp: boolean,
    pub colorized: boolean,
    pub mirrored: boolean,
    pub shadowscale: fixed_t,
    pub dispoffset: int32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct pslope_s {
    pub id: uint16_t,
    pub next: *mut pslope_s,
    pub o: vector3_t,
    pub normal: vector3_t,
    pub d: vector2_t,
    pub zdelta: fixed_t,
    pub zangle: angle_t,
    pub xydirection: angle_t,
    pub flags: uint8_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct player_s {
    pub mo: *mut mobj_t,
    pub cmd: ticcmd_t,
    pub playerstate: playerstate_t,
    pub camerascale: fixed_t,
    pub shieldscale: fixed_t,
    pub viewz: fixed_t,
    pub viewheight: fixed_t,
    pub deltaviewheight: fixed_t,
    pub bob: fixed_t,
    pub viewrollangle: angle_t,
    pub angleturn: int16_t,
    pub oldrelangleturn: int16_t,
    pub aiming: angle_t,
    pub drawangle: angle_t,
    pub old_drawangle: angle_t,
    pub old_drawangle2: angle_t,
    pub rings: int16_t,
    pub spheres: int16_t,
    pub pity: int8_t,
    pub currentweapon: int32_t,
    pub ringweapons: int32_t,
    pub ammoremoval: uint16_t,
    pub ammoremovaltimer: tic_t,
    pub ammoremovalweapon: int32_t,
    pub powers: [uint16_t; 30],
    pub pflags: pflags_t,
    pub panim: panim_t,
    pub stronganim: uint8_t,
    pub flashcount: uint16_t,
    pub flashpal: uint16_t,
    pub skincolor: uint16_t,
    pub skin: int32_t,
    pub availabilities: uint32_t,
    pub score: uint32_t,
    pub recordscore: uint32_t,
    pub dashspeed: fixed_t,
    pub normalspeed: fixed_t,
    pub runspeed: fixed_t,
    pub thrustfactor: uint8_t,
    pub accelstart: uint8_t,
    pub acceleration: uint8_t,
    pub charability: uint8_t,
    pub charability2: uint8_t,
    pub charflags: uint32_t,
    pub thokitem: mobjtype_t,
    pub spinitem: mobjtype_t,
    pub revitem: mobjtype_t,
    pub followitem: mobjtype_t,
    pub followmobj: *mut mobj_t,
    pub actionspd: fixed_t,
    pub mindash: fixed_t,
    pub maxdash: fixed_t,
    pub jumpfactor: fixed_t,
    pub height: fixed_t,
    pub spinheight: fixed_t,
    pub lives: int8_t,
    pub continues: int8_t,
    pub xtralife: int8_t,
    pub gotcontinue: uint8_t,
    pub speed: fixed_t,
    pub secondjump: uint8_t,
    pub fly1: uint8_t,
    pub scoreadd: uint8_t,
    pub glidetime: tic_t,
    pub climbing: uint8_t,
    pub deadtimer: int32_t,
    pub exiting: tic_t,
    pub homing: uint8_t,
    pub dashmode: tic_t,
    pub skidtime: tic_t,
    pub cmomx: fixed_t,
    pub cmomy: fixed_t,
    pub rmomx: fixed_t,
    pub rmomy: fixed_t,
    pub numboxes: int16_t,
    pub totalring: int16_t,
    pub realtime: tic_t,
    pub laps: uint8_t,
    pub ctfteam: int32_t,
    pub gotflag: uint16_t,
    pub weapondelay: int32_t,
    pub tossdelay: int32_t,
    pub starpostx: int16_t,
    pub starposty: int16_t,
    pub starpostz: int16_t,
    pub starpostnum: int32_t,
    pub starposttime: tic_t,
    pub starpostangle: angle_t,
    pub starpostscale: fixed_t,
    pub angle_pos: angle_t,
    pub old_angle_pos: angle_t,
    pub axis1: *mut mobj_t,
    pub axis2: *mut mobj_t,
    pub bumpertime: tic_t,
    pub flyangle: int32_t,
    pub drilltimer: tic_t,
    pub linkcount: int32_t,
    pub linktimer: tic_t,
    pub anotherflyangle: int32_t,
    pub nightstime: tic_t,
    pub drillmeter: int32_t,
    pub drilldelay: uint8_t,
    pub bonustime: boolean,
    pub capsule: *mut mobj_t,
    pub drone: *mut mobj_t,
    pub oldscale: fixed_t,
    pub mare: uint8_t,
    pub marelap: uint8_t,
    pub marebonuslap: uint8_t,
    pub marebegunat: tic_t,
    pub startedtime: tic_t,
    pub finishedtime: tic_t,
    pub lapbegunat: tic_t,
    pub lapstartedtime: tic_t,
    pub finishedspheres: int16_t,
    pub finishedrings: int16_t,
    pub marescore: uint32_t,
    pub lastmarescore: uint32_t,
    pub totalmarescore: uint32_t,
    pub lastmare: uint8_t,
    pub lastmarelap: uint8_t,
    pub lastmarebonuslap: uint8_t,
    pub totalmarelap: uint8_t,
    pub totalmarebonuslap: uint8_t,
    pub maxlink: int32_t,
    pub texttimer: uint8_t,
    pub textvar: uint8_t,
    pub lastsidehit: int16_t,
    pub lastlinehit: int16_t,
    pub losstime: tic_t,
    pub timeshit: uint8_t,
    pub onconveyor: int32_t,
    pub awayviewmobj: *mut mobj_t,
    pub awayviewtics: int32_t,
    pub awayviewaiming: angle_t,
    pub spectator: boolean,
    pub outofcoop: boolean,
    pub removing: boolean,
    pub bot: uint8_t,
    pub botleader: *mut player_s,
    pub lastbuttons: uint16_t,
    pub botmem: botmem_t,
    pub blocked: boolean,
    pub jointime: tic_t,
    pub quittime: tic_t,
}
pub type botmem_t = botmem_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct botmem_s {
    pub lastForward: boolean,
    pub lastBlocked: boolean,
    pub blocked: boolean,
    pub catchup_tics: uint8_t,
    pub thinkstate: uint8_t,
}
pub type mobj_t = mobj_s;
pub type mobjtype_t = mobj_type;
pub type mobj_type = libc::c_uint;
pub const NUMMOBJTYPES: mobj_type = 1163;
pub const MT_LASTFREESLOT: mobj_type = 1162;
pub const MT_FIRSTFREESLOT: mobj_type = 651;
pub const MT_RAY: mobj_type = 650;
pub const MT_NAMECHECK: mobj_type = 649;
pub const MT_YELLOWBRICKDEBRIS: mobj_type = 648;
pub const MT_BLUEBRICKDEBRIS: mobj_type = 647;
pub const MT_REDBRICKDEBRIS: mobj_type = 646;
pub const MT_WOODDEBRIS: mobj_type = 645;
pub const MT_BRICKDEBRIS: mobj_type = 644;
pub const MT_GFZDEBRIS: mobj_type = 643;
pub const MT_ROCKCRUMBLE16: mobj_type = 642;
pub const MT_ROCKCRUMBLE15: mobj_type = 641;
pub const MT_ROCKCRUMBLE14: mobj_type = 640;
pub const MT_ROCKCRUMBLE13: mobj_type = 639;
pub const MT_ROCKCRUMBLE12: mobj_type = 638;
pub const MT_ROCKCRUMBLE11: mobj_type = 637;
pub const MT_ROCKCRUMBLE10: mobj_type = 636;
pub const MT_ROCKCRUMBLE9: mobj_type = 635;
pub const MT_ROCKCRUMBLE8: mobj_type = 634;
pub const MT_ROCKCRUMBLE7: mobj_type = 633;
pub const MT_ROCKCRUMBLE6: mobj_type = 632;
pub const MT_ROCKCRUMBLE5: mobj_type = 631;
pub const MT_ROCKCRUMBLE4: mobj_type = 630;
pub const MT_ROCKCRUMBLE3: mobj_type = 629;
pub const MT_ROCKCRUMBLE2: mobj_type = 628;
pub const MT_ROCKCRUMBLE1: mobj_type = 627;
pub const MT_FALLINGROCK: mobj_type = 626;
pub const MT_ROCKSPAWNER: mobj_type = 625;
pub const MT_DUST: mobj_type = 624;
pub const MT_UWEXPLODE: mobj_type = 623;
pub const MT_EXPLODE: mobj_type = 622;
pub const MT_SPARK: mobj_type = 621;
pub const MT_SKYBOX: mobj_type = 620;
pub const MT_POLYSPAWN: mobj_type = 619;
pub const MT_POLYANCHOR: mobj_type = 618;
pub const MT_ANGLEMAN: mobj_type = 617;
pub const MT_OVERLAY: mobj_type = 616;
pub const MT_GHOST: mobj_type = 615;
pub const MT_PUSH: mobj_type = 614;
pub const MT_TUBEWAYPOINT: mobj_type = 613;
pub const MT_CRUMBLEOBJ: mobj_type = 612;
pub const MT_ALTVIEWMAN: mobj_type = 611;
pub const MT_TELEPORTMAN: mobj_type = 610;
pub const MT_HANGSTER: mobj_type = 609;
pub const MT_SPINBOBERT_FIRE2: mobj_type = 608;
pub const MT_SPINBOBERT_FIRE1: mobj_type = 607;
pub const MT_SPINBOBERT: mobj_type = 606;
pub const MT_CACOFIRE: mobj_type = 605;
pub const MT_CACOSHARD: mobj_type = 604;
pub const MT_CACOLANTERN: mobj_type = 603;
pub const MT_SMASHINGSPIKEBALL: mobj_type = 602;
pub const MT_BUGGLE: mobj_type = 601;
pub const MT_BUMBLEBORE: mobj_type = 600;
pub const MT_HIVEELEMENTAL: mobj_type = 599;
pub const MT_POPSHOT_TRAIL: mobj_type = 598;
pub const MT_POPSHOT: mobj_type = 597;
pub const MT_POPHAT: mobj_type = 596;
pub const MT_PENGUINATOR: mobj_type = 595;
pub const MT_SHLEEP: mobj_type = 594;
pub const MT_PIAN: mobj_type = 593;
pub const MT_NIGHTOPIANHELPER: mobj_type = 592;
pub const MT_IDEYAANCHOR: mobj_type = 591;
pub const MT_EGGCAPSULE: mobj_type = 590;
pub const MT_NIGHTSLINKFREEZE: mobj_type = 589;
pub const MT_NIGHTSEXTRATIME: mobj_type = 588;
pub const MT_NIGHTSHELPER: mobj_type = 587;
pub const MT_NIGHTSDRILLREFILL: mobj_type = 586;
pub const MT_NIGHTSSUPERLOOP: mobj_type = 585;
pub const MT_FLINGNIGHTSSTAR: mobj_type = 584;
pub const MT_NIGHTSSTAR: mobj_type = 583;
pub const MT_FLINGNIGHTSCHIP: mobj_type = 582;
pub const MT_NIGHTSCHIP: mobj_type = 581;
pub const MT_NIGHTSCORE: mobj_type = 580;
pub const MT_HOOPCENTER: mobj_type = 579;
pub const MT_HOOPCOLLIDE: mobj_type = 578;
pub const MT_HOOP: mobj_type = 577;
pub const MT_NIGHTSBUMPER: mobj_type = 576;
pub const MT_NIGHTSLOOPHELPER: mobj_type = 575;
pub const MT_NIGHTSPARKLE: mobj_type = 574;
pub const MT_NIGHTSDRONE_GOAL: mobj_type = 573;
pub const MT_NIGHTSDRONE_SPARKLING: mobj_type = 572;
pub const MT_NIGHTSDRONE_MAN: mobj_type = 571;
pub const MT_NIGHTSDRONE: mobj_type = 570;
pub const MT_AXISTRANSFERLINE: mobj_type = 569;
pub const MT_AXISTRANSFER: mobj_type = 568;
pub const MT_AXIS: mobj_type = 567;
pub const MT_TOAD: mobj_type = 566;
pub const MT_MARIOBUSH2: mobj_type = 565;
pub const MT_MARIOBUSH1: mobj_type = 564;
pub const MT_AXE: mobj_type = 563;
pub const MT_KOOPAFLAME: mobj_type = 562;
pub const MT_KOOPA: mobj_type = 561;
pub const MT_HAMMER: mobj_type = 560;
pub const MT_PUMATRAIL: mobj_type = 559;
pub const MT_PUMA: mobj_type = 558;
pub const MT_SHELL: mobj_type = 557;
pub const MT_FIREBALLTRAIL: mobj_type = 556;
pub const MT_FIREBALL: mobj_type = 555;
pub const MT_FIREFLOWER: mobj_type = 554;
pub const MT_BLUEGOOMBA: mobj_type = 553;
pub const MT_GOOMBA: mobj_type = 552;
pub const MT_FLINGCOIN: mobj_type = 551;
pub const MT_COIN: mobj_type = 550;
pub const MT_THROWNGRENADE: mobj_type = 549;
pub const MT_THROWNEXPLOSION: mobj_type = 548;
pub const MT_THROWNSCATTER: mobj_type = 547;
pub const MT_THROWNAUTOMATIC: mobj_type = 546;
pub const MT_THROWNINFINITY: mobj_type = 545;
pub const MT_THROWNBOUNCE: mobj_type = 544;
pub const MT_GRENADEPICKUP: mobj_type = 543;
pub const MT_SCATTERPICKUP: mobj_type = 542;
pub const MT_EXPLODEPICKUP: mobj_type = 541;
pub const MT_AUTOPICKUP: mobj_type = 540;
pub const MT_RAILPICKUP: mobj_type = 539;
pub const MT_BOUNCEPICKUP: mobj_type = 538;
pub const MT_GRENADERING: mobj_type = 537;
pub const MT_SCATTERRING: mobj_type = 536;
pub const MT_EXPLOSIONRING: mobj_type = 535;
pub const MT_AUTOMATICRING: mobj_type = 534;
pub const MT_INFINITYRING: mobj_type = 533;
pub const MT_RAILRING: mobj_type = 532;
pub const MT_BOUNCERING: mobj_type = 531;
pub const MT_REDRING: mobj_type = 530;
pub const MT_LHRT: mobj_type = 529;
pub const MT_CORK: mobj_type = 528;
pub const MT_AMBIENT: mobj_type = 527;
pub const MT_FINISHFLAG: mobj_type = 526;
pub const MT_GOTFLAG: mobj_type = 525;
pub const MT_TAG: mobj_type = 524;
pub const MT_LOCKONINF: mobj_type = 523;
pub const MT_LOCKON: mobj_type = 522;
pub const MT_GOTEMERALD: mobj_type = 521;
pub const MT_DROWNNUMBERS: mobj_type = 520;
pub const MT_SCORE: mobj_type = 519;
pub const MT_PARTICLEGEN: mobj_type = 518;
pub const MT_PARTICLE: mobj_type = 517;
pub const MT_TFOG: mobj_type = 516;
pub const MT_SPINDUST: mobj_type = 515;
pub const MT_WATERZAP: mobj_type = 514;
pub const MT_EXTRALARGEBUBBLE: mobj_type = 513;
pub const MT_MEDIUMBUBBLE: mobj_type = 512;
pub const MT_SMALLBUBBLE: mobj_type = 511;
pub const MT_SMOKE: mobj_type = 510;
pub const MT_LAVASPLISH: mobj_type = 509;
pub const MT_SPLISH: mobj_type = 508;
pub const MT_SNOWFLAKE: mobj_type = 507;
pub const MT_RAIN: mobj_type = 506;
pub const MT_SEED: mobj_type = 505;
pub const MT_SECRETFLICKY_02_CENTER: mobj_type = 504;
pub const MT_SECRETFLICKY_02: mobj_type = 503;
pub const MT_SECRETFLICKY_01_CENTER: mobj_type = 502;
pub const MT_SECRETFLICKY_01: mobj_type = 501;
pub const MT_FLICKY_16_CENTER: mobj_type = 500;
pub const MT_FLICKY_16: mobj_type = 499;
pub const MT_FLICKY_15_CENTER: mobj_type = 498;
pub const MT_FLICKY_15: mobj_type = 497;
pub const MT_FLICKY_14_CENTER: mobj_type = 496;
pub const MT_FLICKY_14: mobj_type = 495;
pub const MT_FLICKY_13_CENTER: mobj_type = 494;
pub const MT_FLICKY_13: mobj_type = 493;
pub const MT_FLICKY_12_CENTER: mobj_type = 492;
pub const MT_FLICKY_12: mobj_type = 491;
pub const MT_FLICKY_11_CENTER: mobj_type = 490;
pub const MT_FLICKY_11: mobj_type = 489;
pub const MT_FLICKY_10_CENTER: mobj_type = 488;
pub const MT_FLICKY_10: mobj_type = 487;
pub const MT_FLICKY_09_CENTER: mobj_type = 486;
pub const MT_FLICKY_09: mobj_type = 485;
pub const MT_FLICKY_08_CENTER: mobj_type = 484;
pub const MT_FLICKY_08: mobj_type = 483;
pub const MT_FLICKY_07_CENTER: mobj_type = 482;
pub const MT_FLICKY_07: mobj_type = 481;
pub const MT_FLICKY_06_CENTER: mobj_type = 480;
pub const MT_FLICKY_06: mobj_type = 479;
pub const MT_FLICKY_05_CENTER: mobj_type = 478;
pub const MT_FLICKY_05: mobj_type = 477;
pub const MT_FLICKY_04_CENTER: mobj_type = 476;
pub const MT_FLICKY_04: mobj_type = 475;
pub const MT_FLICKY_03_CENTER: mobj_type = 474;
pub const MT_FLICKY_03: mobj_type = 473;
pub const MT_FLICKY_02_CENTER: mobj_type = 472;
pub const MT_FLICKY_02: mobj_type = 471;
pub const MT_FLICKY_01_CENTER: mobj_type = 470;
pub const MT_FLICKY_01: mobj_type = 469;
pub const MT_SUPERSPARK: mobj_type = 468;
pub const MT_IVSP: mobj_type = 467;
pub const MT_THUNDERCOIN_SPARK: mobj_type = 466;
pub const MT_THUNDERCOIN_ORB: mobj_type = 465;
pub const MT_BUBBLEWRAP_ORB: mobj_type = 464;
pub const MT_FLAMEAURA_ORB: mobj_type = 463;
pub const MT_PITY_ORB: mobj_type = 462;
pub const MT_WHIRLWIND_ORB: mobj_type = 461;
pub const MT_ARMAGEDDON_ORB: mobj_type = 460;
pub const MT_FORCE_ORB: mobj_type = 459;
pub const MT_ATTRACT_ORB: mobj_type = 458;
pub const MT_ELEMENTAL_ORB: mobj_type = 457;
pub const MT_EGGSTATUE2: mobj_type = 456;
pub const MT_DBALL: mobj_type = 455;
pub const MT_PALMTREE_TOP: mobj_type = 454;
pub const MT_PALMTREE_TRUNK: mobj_type = 453;
pub const MT_BIG_PALMTREE_TOP: mobj_type = 452;
pub const MT_BIG_PALMTREE_TRUNK: mobj_type = 451;
pub const MT_BSZCLOVER: mobj_type = 450;
pub const MT_BSZSHRUB: mobj_type = 449;
pub const MT_BSZVINE_ORANGE: mobj_type = 448;
pub const MT_BSZVINE_YELLOW: mobj_type = 447;
pub const MT_BSZVINE_CYAN: mobj_type = 446;
pub const MT_BSZVINE_BLUE: mobj_type = 445;
pub const MT_BSZVINE_PURPLE: mobj_type = 444;
pub const MT_BSZVINE_RED: mobj_type = 443;
pub const MT_BSZBUSH_ORANGE: mobj_type = 442;
pub const MT_BSZBUSH_YELLOW: mobj_type = 441;
pub const MT_BSZBUSH_CYAN: mobj_type = 440;
pub const MT_BSZBUSH_BLUE: mobj_type = 439;
pub const MT_BSZBUSH_PURPLE: mobj_type = 438;
pub const MT_BSZBUSH_RED: mobj_type = 437;
pub const MT_BSZCLUSTER_ORANGE: mobj_type = 436;
pub const MT_BSZCLUSTER_YELLOW: mobj_type = 435;
pub const MT_BSZCLUSTER_CYAN: mobj_type = 434;
pub const MT_BSZCLUSTER_BLUE: mobj_type = 433;
pub const MT_BSZCLUSTER_PURPLE: mobj_type = 432;
pub const MT_BSZCLUSTER_RED: mobj_type = 431;
pub const MT_BSZTULIP_ORANGE: mobj_type = 430;
pub const MT_BSZTULIP_YELLOW: mobj_type = 429;
pub const MT_BSZTULIP_CYAN: mobj_type = 428;
pub const MT_BSZTULIP_BLUE: mobj_type = 427;
pub const MT_BSZTULIP_PURPLE: mobj_type = 426;
pub const MT_BSZTULIP_RED: mobj_type = 425;
pub const MT_BSZSHORTFLOWER_ORANGE: mobj_type = 424;
pub const MT_BSZSHORTFLOWER_YELLOW: mobj_type = 423;
pub const MT_BSZSHORTFLOWER_CYAN: mobj_type = 422;
pub const MT_BSZSHORTFLOWER_BLUE: mobj_type = 421;
pub const MT_BSZSHORTFLOWER_PURPLE: mobj_type = 420;
pub const MT_BSZSHORTFLOWER_RED: mobj_type = 419;
pub const MT_BSZFLOWER_ORANGE: mobj_type = 418;
pub const MT_BSZFLOWER_YELLOW: mobj_type = 417;
pub const MT_BSZFLOWER_CYAN: mobj_type = 416;
pub const MT_BSZFLOWER_BLUE: mobj_type = 415;
pub const MT_BSZFLOWER_PURPLE: mobj_type = 414;
pub const MT_BSZFLOWER_RED: mobj_type = 413;
pub const MT_BSZTALLFLOWER_ORANGE: mobj_type = 412;
pub const MT_BSZTALLFLOWER_YELLOW: mobj_type = 411;
pub const MT_BSZTALLFLOWER_CYAN: mobj_type = 410;
pub const MT_BSZTALLFLOWER_BLUE: mobj_type = 409;
pub const MT_BSZTALLFLOWER_PURPLE: mobj_type = 408;
pub const MT_BSZTALLFLOWER_RED: mobj_type = 407;
pub const MT_HHZSTALAGMITE_SHORT: mobj_type = 406;
pub const MT_HHZSTALAGMITE_TALL: mobj_type = 405;
pub const MT_HHZTENTACLE2: mobj_type = 404;
pub const MT_HHZTENTACLE1: mobj_type = 403;
pub const MT_HHZGRASS: mobj_type = 402;
pub const MT_HHZSHROOM: mobj_type = 401;
pub const MT_HHZTREE_PART: mobj_type = 400;
pub const MT_HHZTREE_TOP: mobj_type = 399;
pub const MT_JACKO3: mobj_type = 398;
pub const MT_JACKO2: mobj_type = 397;
pub const MT_JACKO1: mobj_type = 396;
pub const MT_CDLHRT: mobj_type = 395;
pub const MT_ROSY: mobj_type = 394;
pub const MT_FHZICE2: mobj_type = 393;
pub const MT_FHZICE1: mobj_type = 392;
pub const MT_XMASBUSH: mobj_type = 391;
pub const MT_XMASBERRYBUSH: mobj_type = 390;
pub const MT_XMASBLUEBERRYBUSH: mobj_type = 389;
pub const MT_MISTLETOE: mobj_type = 388;
pub const MT_HANGSTAR: mobj_type = 387;
pub const MT_LAMPPOST2: mobj_type = 386;
pub const MT_LAMPPOST1: mobj_type = 385;
pub const MT_SNOWMANHAT: mobj_type = 384;
pub const MT_SNOWMAN: mobj_type = 383;
pub const MT_CANDYCANE: mobj_type = 382;
pub const MT_XMASPOLE: mobj_type = 381;
pub const MT_STALAGMITE9: mobj_type = 380;
pub const MT_STALAGMITE8: mobj_type = 379;
pub const MT_STALAGMITE7: mobj_type = 378;
pub const MT_STALAGMITE6: mobj_type = 377;
pub const MT_STALAGMITE5: mobj_type = 376;
pub const MT_STALAGMITE4: mobj_type = 375;
pub const MT_STALAGMITE3: mobj_type = 374;
pub const MT_STALAGMITE2: mobj_type = 373;
pub const MT_STALAGMITE1: mobj_type = 372;
pub const MT_STALAGMITE0: mobj_type = 371;
pub const MT_BLUEGARGOYLE: mobj_type = 370;
pub const MT_GREENFLAME: mobj_type = 369;
pub const MT_TARGET: mobj_type = 368;
pub const MT_GLAREGOYLELONG: mobj_type = 367;
pub const MT_GLAREGOYLEDOWN: mobj_type = 366;
pub const MT_GLAREGOYLEUP: mobj_type = 365;
pub const MT_GLAREGOYLE: mobj_type = 364;
pub const MT_WALLVINE_SHORT: mobj_type = 363;
pub const MT_WALLVINE_LONG: mobj_type = 362;
pub const MT_TORCHFLOWER: mobj_type = 361;
pub const MT_JUNGLEPALM: mobj_type = 360;
pub const MT_BIGFERN: mobj_type = 359;
pub const MT_BIGFERNLEAF: mobj_type = 358;
pub const MT_ROLLOUTROCK: mobj_type = 357;
pub const MT_ROLLOUTSPAWN: mobj_type = 356;
pub const MT_LAVAFALLROCK: mobj_type = 355;
pub const MT_LAVAFALL_LAVA: mobj_type = 354;
pub const MT_LAVAFALL: mobj_type = 353;
pub const MT_FLAMEJETFLAMEB: mobj_type = 352;
pub const MT_FJSPINAXISB: mobj_type = 351;
pub const MT_FJSPINAXISA: mobj_type = 350;
pub const MT_FLAMEJETFLAME: mobj_type = 349;
pub const MT_VERTICALFLAMEJET: mobj_type = 348;
pub const MT_FLAMEJET: mobj_type = 347;
pub const MT_MINECARTSWITCHPOINT: mobj_type = 346;
pub const MT_TRAINSTEAMSPAWNER: mobj_type = 345;
pub const MT_TRAINDUSTSPAWNER: mobj_type = 344;
pub const MT_TRAINSEG: mobj_type = 343;
pub const MT_TRAINCAMEOSPAWNER: mobj_type = 342;
pub const MT_SALOONDOORCENTER: mobj_type = 341;
pub const MT_SALOONDOOR: mobj_type = 340;
pub const MT_MINECARTSPARK: mobj_type = 339;
pub const MT_MINECARTSIDEMARK: mobj_type = 338;
pub const MT_MINECARTENDSOLID: mobj_type = 337;
pub const MT_MINECARTEND: mobj_type = 336;
pub const MT_MINECARTSPAWNER: mobj_type = 335;
pub const MT_MINECARTSEG: mobj_type = 334;
pub const MT_MINECART: mobj_type = 333;
pub const MT_ARIDDUST: mobj_type = 332;
pub const MT_DUSTLAYER: mobj_type = 331;
pub const MT_DUSTDEVIL: mobj_type = 330;
pub const MT_PROXIMITYTNT: mobj_type = 329;
pub const MT_TNTBARREL: mobj_type = 328;
pub const MT_OILLAMP: mobj_type = 327;
pub const MT_ARIDSIGN_SHARPTURN: mobj_type = 326;
pub const MT_ARIDSIGN_CACTI: mobj_type = 325;
pub const MT_ARIDSIGN_CAUTION: mobj_type = 324;
pub const MT_CACTISMALLSEG: mobj_type = 323;
pub const MT_CACTITINYSEG: mobj_type = 322;
pub const MT_CACTI11: mobj_type = 321;
pub const MT_CACTI10: mobj_type = 320;
pub const MT_CACTI9: mobj_type = 319;
pub const MT_CACTI8: mobj_type = 318;
pub const MT_CACTI7: mobj_type = 317;
pub const MT_CACTI6: mobj_type = 316;
pub const MT_CACTI5: mobj_type = 315;
pub const MT_CACTI4: mobj_type = 314;
pub const MT_CACTI3: mobj_type = 313;
pub const MT_CACTI2: mobj_type = 312;
pub const MT_CACTI1: mobj_type = 311;
pub const MT_LITTLETUMBLEWEED: mobj_type = 310;
pub const MT_BIGTUMBLEWEED: mobj_type = 309;
pub const MT_BRAMBLES: mobj_type = 308;
pub const MT_SUSPICIOUSFACESTABBERSTATUE: mobj_type = 307;
pub const MT_FACESTABBERSTATUE: mobj_type = 306;
pub const MT_CRAWLASTATUE: mobj_type = 305;
pub const MT_WAVINGFLAGSEG2: mobj_type = 304;
pub const MT_WAVINGFLAGSEG1: mobj_type = 303;
pub const MT_WAVINGFLAG2: mobj_type = 302;
pub const MT_WAVINGFLAG1: mobj_type = 301;
pub const MT_FIRETORCH: mobj_type = 300;
pub const MT_FLAMEHOLDER: mobj_type = 299;
pub const MT_CANDLEPRICKET: mobj_type = 298;
pub const MT_CANDLE: mobj_type = 297;
pub const MT_CEZBUSH2: mobj_type = 296;
pub const MT_CEZBUSH1: mobj_type = 295;
pub const MT_PINETREE: mobj_type = 294;
pub const MT_CEZBANNER2: mobj_type = 293;
pub const MT_CEZBANNER1: mobj_type = 292;
pub const MT_CEZPOLE2: mobj_type = 291;
pub const MT_CEZPOLE1: mobj_type = 290;
pub const MT_CEZFLOWER: mobj_type = 289;
pub const MT_BIGFIREBAR: mobj_type = 288;
pub const MT_SMALLFIREBAR: mobj_type = 287;
pub const MT_REDSPRINGBALL: mobj_type = 286;
pub const MT_YELLOWSPRINGBALL: mobj_type = 285;
pub const MT_BIGGRABCHAIN: mobj_type = 284;
pub const MT_SMALLGRABCHAIN: mobj_type = 283;
pub const MT_BIGMACE: mobj_type = 282;
pub const MT_SMALLMACE: mobj_type = 281;
pub const MT_BIGMACECHAIN: mobj_type = 280;
pub const MT_SMALLMACECHAIN: mobj_type = 279;
pub const MT_CUSTOMMACEPOINT: mobj_type = 278;
pub const MT_FIREBARPOINT: mobj_type = 277;
pub const MT_HIDDEN_SLING: mobj_type = 276;
pub const MT_CHAINPOINT: mobj_type = 275;
pub const MT_SPRINGBALLPOINT: mobj_type = 274;
pub const MT_CHAINMACEPOINT: mobj_type = 273;
pub const MT_MACEPOINT: mobj_type = 272;
pub const MT_EGGSTATUE: mobj_type = 271;
pub const MT_FLAMEPARTICLE: mobj_type = 270;
pub const MT_FLAME: mobj_type = 269;
pub const MT_CHAIN: mobj_type = 268;
pub const MT_LIGHTBEAM: mobj_type = 267;
pub const MT_DSZ2STALAGMITE: mobj_type = 266;
pub const MT_DSZSTALAGMITE: mobj_type = 265;
pub const MT_ANIMALGAESEG: mobj_type = 264;
pub const MT_ANIMALGAETOP: mobj_type = 263;
pub const MT_KELP: mobj_type = 262;
pub const MT_BLUECRYSTAL: mobj_type = 261;
pub const MT_CORAL5: mobj_type = 260;
pub const MT_CORAL4: mobj_type = 259;
pub const MT_CORAL3: mobj_type = 258;
pub const MT_CORAL2: mobj_type = 257;
pub const MT_CORAL1: mobj_type = 256;
pub const MT_WATERDROP: mobj_type = 255;
pub const MT_WATERDRIP: mobj_type = 254;
pub const MT_SEAWEED: mobj_type = 253;
pub const MT_BIGGARGOYLE: mobj_type = 252;
pub const MT_GARGOYLE: mobj_type = 251;
pub const MT_ALARM: mobj_type = 250;
pub const MT_THZTREEBRANCH: mobj_type = 249;
pub const MT_THZTREE: mobj_type = 248;
pub const MT_THZFLOWER3: mobj_type = 247;
pub const MT_THZFLOWER2: mobj_type = 246;
pub const MT_THZFLOWER1: mobj_type = 245;
pub const MT_SPRINGTREE: mobj_type = 244;
pub const MT_BUSHREDTREE: mobj_type = 243;
pub const MT_BUSHTREE: mobj_type = 242;
pub const MT_POLYGONTREE: mobj_type = 241;
pub const MT_FHZPINKTREE: mobj_type = 240;
pub const MT_FHZTREE: mobj_type = 239;
pub const MT_CHECKERSUNSETTREE: mobj_type = 238;
pub const MT_CHECKERTREE: mobj_type = 237;
pub const MT_GFZCHERRYTREE: mobj_type = 236;
pub const MT_GFZBERRYTREE: mobj_type = 235;
pub const MT_GFZTREE: mobj_type = 234;
pub const MT_BUSH: mobj_type = 233;
pub const MT_BERRYBUSH: mobj_type = 232;
pub const MT_BLUEBERRYBUSH: mobj_type = 231;
pub const MT_GFZFLOWER3: mobj_type = 230;
pub const MT_GFZFLOWER2: mobj_type = 229;
pub const MT_GFZFLOWER1: mobj_type = 228;
pub const MT_TUTORIALFLOWERF: mobj_type = 227;
pub const MT_TUTORIALFLOWER: mobj_type = 226;
pub const MT_TUTORIALLEAF: mobj_type = 225;
pub const MT_TUTORIALPLANT: mobj_type = 224;
pub const MT_LETTER: mobj_type = 223;
pub const MT_DEMONFIRE: mobj_type = 222;
pub const MT_ARROW: mobj_type = 221;
pub const MT_CANNONBALLDECOR: mobj_type = 220;
pub const MT_CANNONBALL: mobj_type = 219;
pub const MT_TURRETLASER: mobj_type = 218;
pub const MT_JETTBULLET: mobj_type = 217;
pub const MT_MINE: mobj_type = 216;
pub const MT_ENERGYBALL: mobj_type = 215;
pub const MT_TORPEDO2: mobj_type = 214;
pub const MT_TORPEDO: mobj_type = 213;
pub const MT_LASER: mobj_type = 212;
pub const MT_ROCKET: mobj_type = 211;
pub const MT_THUNDERCOIN_ICON: mobj_type = 210;
pub const MT_BUBBLEWRAP_ICON: mobj_type = 209;
pub const MT_FLAMEAURA_ICON: mobj_type = 208;
pub const MT_SCORE10K_ICON: mobj_type = 207;
pub const MT_SCORE1K_ICON: mobj_type = 206;
pub const MT_RECYCLER_ICON: mobj_type = 205;
pub const MT_GRAVITY_ICON: mobj_type = 204;
pub const MT_MIXUP_ICON: mobj_type = 203;
pub const MT_EGGMAN_ICON: mobj_type = 202;
pub const MT_1UP_ICON: mobj_type = 201;
pub const MT_INVULN_ICON: mobj_type = 200;
pub const MT_SNEAKERS_ICON: mobj_type = 199;
pub const MT_ELEMENTAL_ICON: mobj_type = 198;
pub const MT_WHIRLWIND_ICON: mobj_type = 197;
pub const MT_ARMAGEDDON_ICON: mobj_type = 196;
pub const MT_FORCE_ICON: mobj_type = 195;
pub const MT_ATTRACT_ICON: mobj_type = 194;
pub const MT_PITY_ICON: mobj_type = 193;
pub const MT_RING_ICON: mobj_type = 192;
pub const MT_RING_BLUEBOX: mobj_type = 191;
pub const MT_RING_REDBOX: mobj_type = 190;
pub const MT_THUNDERCOIN_GOLDBOX: mobj_type = 189;
pub const MT_BUBBLEWRAP_GOLDBOX: mobj_type = 188;
pub const MT_FLAMEAURA_GOLDBOX: mobj_type = 187;
pub const MT_GRAVITY_GOLDBOX: mobj_type = 186;
pub const MT_EGGMAN_GOLDBOX: mobj_type = 185;
pub const MT_INVULN_GOLDBOX: mobj_type = 184;
pub const MT_SNEAKERS_GOLDBOX: mobj_type = 183;
pub const MT_ELEMENTAL_GOLDBOX: mobj_type = 182;
pub const MT_WHIRLWIND_GOLDBOX: mobj_type = 181;
pub const MT_ARMAGEDDON_GOLDBOX: mobj_type = 180;
pub const MT_FORCE_GOLDBOX: mobj_type = 179;
pub const MT_ATTRACT_GOLDBOX: mobj_type = 178;
pub const MT_PITY_GOLDBOX: mobj_type = 177;
pub const MT_THUNDERCOIN_BOX: mobj_type = 176;
pub const MT_BUBBLEWRAP_BOX: mobj_type = 175;
pub const MT_FLAMEAURA_BOX: mobj_type = 174;
pub const MT_SCORE10K_BOX: mobj_type = 173;
pub const MT_SCORE1K_BOX: mobj_type = 172;
pub const MT_RECYCLER_BOX: mobj_type = 171;
pub const MT_GRAVITY_BOX: mobj_type = 170;
pub const MT_MYSTERY_BOX: mobj_type = 169;
pub const MT_MIXUP_BOX: mobj_type = 168;
pub const MT_EGGMAN_BOX: mobj_type = 167;
pub const MT_1UP_BOX: mobj_type = 166;
pub const MT_INVULN_BOX: mobj_type = 165;
pub const MT_SNEAKERS_BOX: mobj_type = 164;
pub const MT_ELEMENTAL_BOX: mobj_type = 163;
pub const MT_WHIRLWIND_BOX: mobj_type = 162;
pub const MT_ARMAGEDDON_BOX: mobj_type = 161;
pub const MT_FORCE_BOX: mobj_type = 160;
pub const MT_ATTRACT_BOX: mobj_type = 159;
pub const MT_PITY_BOX: mobj_type = 158;
pub const MT_RING_BOX: mobj_type = 157;
pub const MT_BOXSPARKLE: mobj_type = 156;
pub const MT_CANNONLAUNCHER: mobj_type = 155;
pub const MT_BLASTEXECUTOR: mobj_type = 154;
pub const MT_BIGMINE: mobj_type = 153;
pub const MT_STARPOST: mobj_type = 152;
pub const MT_WALLSPIKEBASE: mobj_type = 151;
pub const MT_WALLSPIKE: mobj_type = 150;
pub const MT_SPIKE: mobj_type = 149;
pub const MT_SPINFIRE: mobj_type = 148;
pub const MT_SPIKEBALL: mobj_type = 147;
pub const MT_SIGN: mobj_type = 146;
pub const MT_BUBBLES: mobj_type = 145;
pub const MT_REDBOOSTER: mobj_type = 144;
pub const MT_YELLOWBOOSTER: mobj_type = 143;
pub const MT_BOOSTERROLLER: mobj_type = 142;
pub const MT_BOOSTERSEG: mobj_type = 141;
pub const MT_BLUEHORIZ: mobj_type = 140;
pub const MT_REDHORIZ: mobj_type = 139;
pub const MT_YELLOWHORIZ: mobj_type = 138;
pub const MT_BLUEDIAG: mobj_type = 137;
pub const MT_REDDIAG: mobj_type = 136;
pub const MT_YELLOWDIAG: mobj_type = 135;
pub const MT_BLUESPRING: mobj_type = 134;
pub const MT_REDSPRING: mobj_type = 133;
pub const MT_YELLOWSPRING: mobj_type = 132;
pub const MT_BALLOON: mobj_type = 131;
pub const MT_BUMPER: mobj_type = 130;
pub const MT_STEAM: mobj_type = 129;
pub const MT_FAN: mobj_type = 128;
pub const MT_FLINGEMERALD: mobj_type = 127;
pub const MT_EMERALDSPAWN: mobj_type = 126;
pub const MT_EMERHUNT: mobj_type = 125;
pub const MT_EMERALD7: mobj_type = 124;
pub const MT_EMERALD6: mobj_type = 123;
pub const MT_EMERALD5: mobj_type = 122;
pub const MT_EMERALD4: mobj_type = 121;
pub const MT_EMERALD3: mobj_type = 120;
pub const MT_EMERALD2: mobj_type = 119;
pub const MT_EMERALD1: mobj_type = 118;
pub const MT_EMBLEM: mobj_type = 117;
pub const MT_BLUEFLAG: mobj_type = 116;
pub const MT_REDFLAG: mobj_type = 115;
pub const MT_TOKEN: mobj_type = 114;
pub const MT_BLUETEAMRING: mobj_type = 113;
pub const MT_REDTEAMRING: mobj_type = 112;
pub const MT_BOMBSPHERE: mobj_type = 111;
pub const MT_FLINGBLUESPHERE: mobj_type = 110;
pub const MT_BLUESPHERE: mobj_type = 109;
pub const MT_FLINGRING: mobj_type = 108;
pub const MT_RING: mobj_type = 107;
pub const MT_MSGATHER: mobj_type = 106;
pub const MT_MSSHIELD_FRONT: mobj_type = 105;
pub const MT_METALSONIC_BATTLE: mobj_type = 104;
pub const MT_METALSONIC_RACE: mobj_type = 103;
pub const MT_CYBRAKDEMON_VILE_EXPLOSION: mobj_type = 102;
pub const MT_CYBRAKDEMON_NAPALM_FLAMES: mobj_type = 101;
pub const MT_CYBRAKDEMON_NAPALM_BOMB_SMALL: mobj_type = 100;
pub const MT_CYBRAKDEMON_NAPALM_BOMB_LARGE: mobj_type = 99;
pub const MT_CYBRAKDEMON_TARGET_DOT: mobj_type = 98;
pub const MT_CYBRAKDEMON_TARGET_RETICULE: mobj_type = 97;
pub const MT_CYBRAKDEMON_FLAMEREST: mobj_type = 96;
pub const MT_CYBRAKDEMON_FLAMESHOT: mobj_type = 95;
pub const MT_CYBRAKDEMON_MISSILE: mobj_type = 94;
pub const MT_CYBRAKDEMON_ELECTRIC_BARRIER: mobj_type = 93;
pub const MT_CYBRAKDEMON: mobj_type = 92;
pub const MT_BLACKEGGMAN_MISSILE: mobj_type = 91;
pub const MT_BLACKEGGMAN_GOOPFIRE: mobj_type = 90;
pub const MT_BLACKEGGMAN_HELPER: mobj_type = 89;
pub const MT_BLACKEGGMAN: mobj_type = 88;
pub const MT_FANGWAYPOINT: mobj_type = 87;
pub const MT_FSGNB: mobj_type = 86;
pub const MT_FSGNA: mobj_type = 85;
pub const MT_TNTDUST: mobj_type = 84;
pub const MT_FBOMB: mobj_type = 83;
pub const MT_PROJECTORLIGHT: mobj_type = 82;
pub const MT_VWREB: mobj_type = 81;
pub const MT_VWREF: mobj_type = 80;
pub const MT_BROKENROBOT: mobj_type = 79;
pub const MT_FANG: mobj_type = 78;
pub const MT_EGGROBO1JET: mobj_type = 77;
pub const MT_EGGROBO1: mobj_type = 76;
pub const MT_JETFLAME: mobj_type = 75;
pub const MT_EGGMOBILE4_MACE: mobj_type = 74;
pub const MT_EGGMOBILE4: mobj_type = 73;
pub const MT_SHOCKWAVE: mobj_type = 72;
pub const MT_FAKEMOBILE: mobj_type = 71;
pub const MT_EGGMOBILE3: mobj_type = 70;
pub const MT_GOOPTRAIL: mobj_type = 69;
pub const MT_GOOP: mobj_type = 68;
pub const MT_EGGMOBILE2_POGO: mobj_type = 67;
pub const MT_EGGMOBILE2: mobj_type = 66;
pub const MT_EGGMOBILE_FIRE: mobj_type = 65;
pub const MT_EGGMOBILE_TARGET: mobj_type = 64;
pub const MT_EGGMOBILE_BALL: mobj_type = 63;
pub const MT_JETFUME1: mobj_type = 62;
pub const MT_EGGMOBILE: mobj_type = 61;
pub const MT_BOSSJUNK: mobj_type = 60;
pub const MT_BOSS9GATHERPOINT: mobj_type = 59;
pub const MT_BOSS3WAYPOINT: mobj_type = 58;
pub const MT_EGGTRAP: mobj_type = 57;
pub const MT_BOSSFLYPOINT: mobj_type = 56;
pub const MT_SONIC3KBOSSEXPLODE: mobj_type = 55;
pub const MT_BOSSEXPLODE: mobj_type = 54;
pub const MT_DRAGONMINE: mobj_type = 53;
pub const MT_DRAGONTAIL: mobj_type = 52;
pub const MT_DRAGONWING: mobj_type = 51;
pub const MT_DRAGONBOMBER: mobj_type = 50;
pub const MT_PTERABYTE: mobj_type = 49;
pub const MT_PTERABYTEWAYPOINT: mobj_type = 48;
pub const MT_PTERABYTESPAWNER: mobj_type = 47;
pub const MT_PYREFLY_FIRE: mobj_type = 46;
pub const MT_PYREFLY: mobj_type = 45;
pub const MT_CANARIVORE_GAS: mobj_type = 44;
pub const MT_CANARIVORE: mobj_type = 43;
pub const MT_UNIBALL: mobj_type = 42;
pub const MT_UNIDUS: mobj_type = 41;
pub const MT_YELLOWSHELL: mobj_type = 40;
pub const MT_SPRINGSHELL: mobj_type = 39;
pub const MT_MINUSDIRT: mobj_type = 38;
pub const MT_MINUS: mobj_type = 37;
pub const MT_SNAPPER_HEAD: mobj_type = 36;
pub const MT_SNAPPER_LEG: mobj_type = 35;
pub const MT_GSNAPPER: mobj_type = 34;
pub const MT_EGGSHIELD: mobj_type = 33;
pub const MT_EGGGUARD: mobj_type = 32;
pub const MT_FACESTABBERSPEAR: mobj_type = 31;
pub const MT_FACESTABBER: mobj_type = 30;
pub const MT_ROBOHOOD: mobj_type = 29;
pub const MT_POINTYBALL: mobj_type = 28;
pub const MT_POINTY: mobj_type = 27;
pub const MT_VULTURE: mobj_type = 26;
pub const MT_SNAILER: mobj_type = 25;
pub const MT_JETJAW: mobj_type = 24;
pub const MT_BANPSPRING: mobj_type = 23;
pub const MT_BANPYURA: mobj_type = 22;
pub const MT_CRUSHCHAIN: mobj_type = 21;
pub const MT_CRUSHCLAW: mobj_type = 20;
pub const MT_CRUSHSTACEAN: mobj_type = 19;
pub const MT_SPINCUSHION: mobj_type = 18;
pub const MT_POPUPTURRET: mobj_type = 17;
pub const MT_TURRET: mobj_type = 16;
pub const MT_SKIM: mobj_type = 15;
pub const MT_DETON: mobj_type = 14;
pub const MT_CRAWLACOMMANDER: mobj_type = 13;
pub const MT_JETTGUNNER: mobj_type = 12;
pub const MT_JETTBOMBER: mobj_type = 11;
pub const MT_REDBUZZ: mobj_type = 10;
pub const MT_GOLDBUZZ: mobj_type = 9;
pub const MT_GFZFISH: mobj_type = 8;
pub const MT_REDCRAWLA: mobj_type = 7;
pub const MT_BLUECRAWLA: mobj_type = 6;
pub const MT_METALJETFUME: mobj_type = 5;
pub const MT_TAILSOVERLAY: mobj_type = 4;
pub const MT_PLAYER: mobj_type = 3;
pub const MT_THOK: mobj_type = 2;
pub const MT_UNKNOWN: mobj_type = 1;
pub const MT_NULL: mobj_type = 0;
pub type panim_t = libc::c_uint;
pub const PA_RIDE: panim_t = 13;
pub const PA_ABILITY2: panim_t = 12;
pub const PA_ABILITY: panim_t = 11;
pub const PA_FALL: panim_t = 10;
pub const PA_SPRING: panim_t = 9;
pub const PA_JUMP: panim_t = 8;
pub const PA_ROLL: panim_t = 7;
pub const PA_PAIN: panim_t = 6;
pub const PA_DASH: panim_t = 5;
pub const PA_RUN: panim_t = 4;
pub const PA_WALK: panim_t = 3;
pub const PA_EDGE: panim_t = 2;
pub const PA_IDLE: panim_t = 1;
pub const PA_ETC: panim_t = 0;
pub type pflags_t = libc::c_uint;
pub const PF_FINISHED: pflags_t = 1073741824;
pub const PF_CANCARRY: pflags_t = 536870912;
pub const PF_FORCESTRAFE: pflags_t = 268435456;
pub const PF_TAGIT: pflags_t = 134217728;
pub const PF_GAMETYPEOVER: pflags_t = 67108864;
pub const PF_DRILLING: pflags_t = 33554432;
pub const PF_TRANSFERTOCLOSEST: pflags_t = 16777216;
pub const PF_SLIDING: pflags_t = 8388608;
pub const PF_BOUNCING: pflags_t = 4194304;
pub const PF_GLIDING: pflags_t = 2097152;
pub const PF_SHIELDABILITY: pflags_t = 1048576;
pub const PF_THOKKED: pflags_t = 524288;
pub const PF_STARTDASH: pflags_t = 262144;
pub const PF_SPINNING: pflags_t = 131072;
pub const PF_NOJUMPDAMAGE: pflags_t = 65536;
pub const PF_JUMPED: pflags_t = 32768;
pub const PF_STARTJUMP: pflags_t = 16384;
pub const PF_APPLYAUTOBRAKE: pflags_t = 8192;
pub const PF_FULLSTASIS: pflags_t = 6144;
pub const PF_JUMPSTASIS: pflags_t = 4096;
pub const PF_STASIS: pflags_t = 2048;
pub const PF_WPNDOWN: pflags_t = 1024;
pub const PF_JUMPDOWN: pflags_t = 512;
pub const PF_SPINDOWN: pflags_t = 256;
pub const PF_ATTACKDOWN: pflags_t = 128;
pub const PF_INVIS: pflags_t = 64;
pub const PF_NOCLIP: pflags_t = 32;
pub const PF_GODMODE: pflags_t = 16;
pub const PF_AUTOBRAKE: pflags_t = 8;
pub const PF_DIRECTIONCHAR: pflags_t = 4;
pub const PF_ANALOGMODE: pflags_t = 2;
pub const PF_FLIPCAM: pflags_t = 1;
pub type playerstate_t = libc::c_uint;
pub const PST_REBORN: playerstate_t = 2;
pub const PST_DEAD: playerstate_t = 1;
pub const PST_LIVE: playerstate_t = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct mobjinfo_t {
    pub doomednum: int32_t,
    pub spawnstate: statenum_t,
    pub spawnhealth: int32_t,
    pub seestate: statenum_t,
    pub seesound: sfxenum_t,
    pub reactiontime: int32_t,
    pub attacksound: sfxenum_t,
    pub painstate: statenum_t,
    pub painchance: int32_t,
    pub painsound: sfxenum_t,
    pub meleestate: statenum_t,
    pub missilestate: statenum_t,
    pub deathstate: statenum_t,
    pub xdeathstate: statenum_t,
    pub deathsound: sfxenum_t,
    pub speed: fixed_t,
    pub radius: fixed_t,
    pub height: fixed_t,
    pub dispoffset: int32_t,
    pub mass: int32_t,
    pub damage: int32_t,
    pub activesound: sfxenum_t,
    pub flags: uint32_t,
    pub raisestate: statenum_t,
}
pub type statenum_t = state;
pub type state = libc::c_uint;
pub const NUMSTATES: state = 6735;
pub const S_LASTFREESLOT: state = 6734;
pub const S_FIRSTFREESLOT: state = 2639;
pub const S_NAMECHECK: state = 2638;
pub const S_YELLOWBRICKDEBRIS: state = 2637;
pub const S_BLUEBRICKDEBRIS: state = 2636;
pub const S_REDBRICKDEBRIS: state = 2635;
pub const S_WOODDEBRIS: state = 2634;
pub const S_BRICKDEBRIS: state = 2633;
pub const S_GFZDEBRIS: state = 2632;
pub const S_ROCKCRUMBLEP: state = 2631;
pub const S_ROCKCRUMBLEO: state = 2630;
pub const S_ROCKCRUMBLEN: state = 2629;
pub const S_ROCKCRUMBLEM: state = 2628;
pub const S_ROCKCRUMBLEL: state = 2627;
pub const S_ROCKCRUMBLEK: state = 2626;
pub const S_ROCKCRUMBLEJ: state = 2625;
pub const S_ROCKCRUMBLEI: state = 2624;
pub const S_ROCKCRUMBLEH: state = 2623;
pub const S_ROCKCRUMBLEG: state = 2622;
pub const S_ROCKCRUMBLEF: state = 2621;
pub const S_ROCKCRUMBLEE: state = 2620;
pub const S_ROCKCRUMBLED: state = 2619;
pub const S_ROCKCRUMBLEC: state = 2618;
pub const S_ROCKCRUMBLEB: state = 2617;
pub const S_ROCKCRUMBLEA: state = 2616;
pub const S_ROCKSPAWN: state = 2615;
pub const S_DUST4: state = 2614;
pub const S_DUST3: state = 2613;
pub const S_DUST2: state = 2612;
pub const S_DUST1: state = 2611;
pub const S_WPLD6: state = 2610;
pub const S_WPLD5: state = 2609;
pub const S_WPLD4: state = 2608;
pub const S_WPLD3: state = 2607;
pub const S_WPLD2: state = 2606;
pub const S_WPLD1: state = 2605;
pub const S_XPLD_EGGTRAP: state = 2604;
pub const S_XPLD6: state = 2603;
pub const S_XPLD5: state = 2602;
pub const S_XPLD4: state = 2601;
pub const S_XPLD3: state = 2600;
pub const S_XPLD2: state = 2599;
pub const S_XPLD1: state = 2598;
pub const S_XPLD_FLICKY: state = 2597;
pub const S_SPRK3: state = 2596;
pub const S_SPRK2: state = 2595;
pub const S_SPRK1: state = 2594;
pub const S_CRUMBLE2: state = 2593;
pub const S_CRUMBLE1: state = 2592;
pub const S_HANGSTER_RETURN3: state = 2591;
pub const S_HANGSTER_RETURN2: state = 2590;
pub const S_HANGSTER_RETURN1: state = 2589;
pub const S_HANGSTER_ARCUP3: state = 2588;
pub const S_HANGSTER_ARCUP2: state = 2587;
pub const S_HANGSTER_ARCUP1: state = 2586;
pub const S_HANGSTER_FLYREPEAT: state = 2585;
pub const S_HANGSTER_FLY4: state = 2584;
pub const S_HANGSTER_FLY3: state = 2583;
pub const S_HANGSTER_FLY2: state = 2582;
pub const S_HANGSTER_FLY1: state = 2581;
pub const S_HANGSTER_ARC3: state = 2580;
pub const S_HANGSTER_ARC2: state = 2579;
pub const S_HANGSTER_ARC1: state = 2578;
pub const S_HANGSTER_SWOOP2: state = 2577;
pub const S_HANGSTER_SWOOP1: state = 2576;
pub const S_HANGSTER_LOOK: state = 2575;
pub const S_SPINBOBERT_FIRE_TRAIL3: state = 2574;
pub const S_SPINBOBERT_FIRE_TRAIL2: state = 2573;
pub const S_SPINBOBERT_FIRE_TRAIL1: state = 2572;
pub const S_SPINBOBERT_FIRE_GHOST: state = 2571;
pub const S_SPINBOBERT_FIRE_MOVE: state = 2570;
pub const S_SPINBOBERT_MOVE_DOWN: state = 2569;
pub const S_SPINBOBERT_MOVE_FLIPDOWN: state = 2568;
pub const S_SPINBOBERT_MOVE_UP: state = 2567;
pub const S_SPINBOBERT_MOVE_FLIPUP: state = 2566;
pub const S_CACOFIRE_EXPLODE4: state = 2565;
pub const S_CACOFIRE_EXPLODE3: state = 2564;
pub const S_CACOFIRE_EXPLODE2: state = 2563;
pub const S_CACOFIRE_EXPLODE1: state = 2562;
pub const S_CACOFIRE3: state = 2561;
pub const S_CACOFIRE2: state = 2560;
pub const S_CACOFIRE1: state = 2559;
pub const S_CACOSHARD2_2: state = 2558;
pub const S_CACOSHARD2_1: state = 2557;
pub const S_CACOSHARD1_2: state = 2556;
pub const S_CACOSHARD1_1: state = 2555;
pub const S_CACOSHARD_RANDOMIZE: state = 2554;
pub const S_CACO_DIE_FALL: state = 2553;
pub const S_CACO_DIE_SHATTER: state = 2552;
pub const S_CACO_DIE_SCREAM: state = 2551;
pub const S_CACO_DIE_GIB2: state = 2550;
pub const S_CACO_DIE_GIB1: state = 2549;
pub const S_CACO_DIE_FLAGS: state = 2548;
pub const S_CACO_CLOSE: state = 2547;
pub const S_CACO_SHOOT2: state = 2546;
pub const S_CACO_SHOOT1: state = 2545;
pub const S_CACO_SHOOT_SOUND: state = 2544;
pub const S_CACO_PREPARE3: state = 2543;
pub const S_CACO_PREPARE2: state = 2542;
pub const S_CACO_PREPARE1: state = 2541;
pub const S_CACO_PREPARE_SOUND: state = 2540;
pub const S_CACO_RANDOM: state = 2539;
pub const S_CACO_CHASE_REPEAT: state = 2538;
pub const S_CACO_CHASE: state = 2537;
pub const S_CACO_ROAR: state = 2536;
pub const S_CACO_WAKE4: state = 2535;
pub const S_CACO_WAKE3: state = 2534;
pub const S_CACO_WAKE2: state = 2533;
pub const S_CACO_WAKE1: state = 2532;
pub const S_CACO_LOOK: state = 2531;
pub const S_SMASHSPIKE_RISE2: state = 2530;
pub const S_SMASHSPIKE_RISE1: state = 2529;
pub const S_SMASHSPIKE_STOMP2: state = 2528;
pub const S_SMASHSPIKE_STOMP1: state = 2527;
pub const S_SMASHSPIKE_FALL: state = 2526;
pub const S_SMASHSPIKE_EASE2: state = 2525;
pub const S_SMASHSPIKE_EASE1: state = 2524;
pub const S_SMASHSPIKE_FLOAT: state = 2523;
pub const S_BUGGLEFLY: state = 2522;
pub const S_BUGGLEIDLE: state = 2521;
pub const S_BUMBLEBORE_DIE: state = 2520;
pub const S_BUMBLEBORE_STUCK2: state = 2519;
pub const S_BUMBLEBORE_STUCK1: state = 2518;
pub const S_BUMBLEBORE_FALL2: state = 2517;
pub const S_BUMBLEBORE_FALL1: state = 2516;
pub const S_BUMBLEBORE_RAISE: state = 2515;
pub const S_BUMBLEBORE_FLY2: state = 2514;
pub const S_BUMBLEBORE_FLY1: state = 2513;
pub const S_BUMBLEBORE_LOOK2: state = 2512;
pub const S_BUMBLEBORE_LOOK1: state = 2511;
pub const S_BUMBLEBORE_SPAWN: state = 2510;
pub const S_HIVEELEMENTAL_DIE3: state = 2509;
pub const S_HIVEELEMENTAL_DIE2: state = 2508;
pub const S_HIVEELEMENTAL_DIE1: state = 2507;
pub const S_HIVEELEMENTAL_PAIN: state = 2506;
pub const S_HIVEELEMENTAL_DORMANT: state = 2505;
pub const S_HIVEELEMENTAL_SHOOT2: state = 2504;
pub const S_HIVEELEMENTAL_SHOOT1: state = 2503;
pub const S_HIVEELEMENTAL_PREPARE2: state = 2502;
pub const S_HIVEELEMENTAL_PREPARE1: state = 2501;
pub const S_HIVEELEMENTAL_LOOK: state = 2500;
pub const S_POPSHOT_TRAIL: state = 2499;
pub const S_POPSHOT: state = 2498;
pub const S_POPHAT_SHOOT4: state = 2497;
pub const S_POPHAT_SHOOT3: state = 2496;
pub const S_POPHAT_SHOOT2: state = 2495;
pub const S_POPHAT_SHOOT1: state = 2494;
pub const S_POPHAT_LOOK: state = 2493;
pub const S_PENGUINATOR_SLIDE5: state = 2492;
pub const S_PENGUINATOR_SLIDE4: state = 2491;
pub const S_PENGUINATOR_SLIDE3: state = 2490;
pub const S_PENGUINATOR_SLIDE2: state = 2489;
pub const S_PENGUINATOR_SLIDE1: state = 2488;
pub const S_PENGUINATOR_WADDLE4: state = 2487;
pub const S_PENGUINATOR_WADDLE3: state = 2486;
pub const S_PENGUINATOR_WADDLE2: state = 2485;
pub const S_PENGUINATOR_WADDLE1: state = 2484;
pub const S_PENGUINATOR_LOOK: state = 2483;
pub const S_SHLEEPBOUNCE3: state = 2482;
pub const S_SHLEEPBOUNCE2: state = 2481;
pub const S_SHLEEPBOUNCE1: state = 2480;
pub const S_SHLEEP4: state = 2479;
pub const S_SHLEEP3: state = 2478;
pub const S_SHLEEP2: state = 2477;
pub const S_SHLEEP1: state = 2476;
pub const S_PIAN_SING: state = 2475;
pub const S_PIAN_FLY3: state = 2474;
pub const S_PIAN_FLY2: state = 2473;
pub const S_PIAN_FLY1: state = 2472;
pub const S_PIAN_LOOK3: state = 2471;
pub const S_PIAN_LOOK2: state = 2470;
pub const S_PIAN_LOOK1: state = 2469;
pub const S_NIGHTOPIANHELPER9: state = 2468;
pub const S_NIGHTOPIANHELPER8: state = 2467;
pub const S_NIGHTOPIANHELPER7: state = 2466;
pub const S_NIGHTOPIANHELPER6: state = 2465;
pub const S_NIGHTOPIANHELPER5: state = 2464;
pub const S_NIGHTOPIANHELPER4: state = 2463;
pub const S_NIGHTOPIANHELPER3: state = 2462;
pub const S_NIGHTOPIANHELPER2: state = 2461;
pub const S_NIGHTOPIANHELPER1: state = 2460;
pub const S_ORBIDYA5: state = 2459;
pub const S_ORBIDYA4: state = 2458;
pub const S_ORBIDYA3: state = 2457;
pub const S_ORBIDYA2: state = 2456;
pub const S_ORBIDYA1: state = 2455;
pub const S_ORBITEM8: state = 2454;
pub const S_ORBITEM7: state = 2453;
pub const S_ORBITEM6: state = 2452;
pub const S_ORBITEM5: state = 2451;
pub const S_ORBITEM4: state = 2450;
pub const S_ORBITEM3: state = 2449;
pub const S_ORBITEM2: state = 2448;
pub const S_ORBITEM1: state = 2447;
pub const S_EGGCAPSULE: state = 2446;
pub const S_NIGHTSLINKFREEZE: state = 2445;
pub const S_NIGHTSEXTRATIME: state = 2444;
pub const S_NIGHTSHELPER: state = 2443;
pub const S_NIGHTSDRILLREFILL: state = 2442;
pub const S_NIGHTSSUPERLOOP: state = 2441;
pub const S_NIGHTSCORE100_2: state = 2440;
pub const S_NIGHTSCORE90_2: state = 2439;
pub const S_NIGHTSCORE80_2: state = 2438;
pub const S_NIGHTSCORE70_2: state = 2437;
pub const S_NIGHTSCORE60_2: state = 2436;
pub const S_NIGHTSCORE50_2: state = 2435;
pub const S_NIGHTSCORE40_2: state = 2434;
pub const S_NIGHTSCORE30_2: state = 2433;
pub const S_NIGHTSCORE20_2: state = 2432;
pub const S_NIGHTSCORE10_2: state = 2431;
pub const S_NIGHTSCORE100: state = 2430;
pub const S_NIGHTSCORE90: state = 2429;
pub const S_NIGHTSCORE80: state = 2428;
pub const S_NIGHTSCORE70: state = 2427;
pub const S_NIGHTSCORE60: state = 2426;
pub const S_NIGHTSCORE50: state = 2425;
pub const S_NIGHTSCORE40: state = 2424;
pub const S_NIGHTSCORE30: state = 2423;
pub const S_NIGHTSCORE20: state = 2422;
pub const S_NIGHTSCORE10: state = 2421;
pub const S_HOOP_XMASB: state = 2420;
pub const S_HOOP_XMASA: state = 2419;
pub const S_HOOP: state = 2418;
pub const S_NIGHTSBUMPER12: state = 2417;
pub const S_NIGHTSBUMPER11: state = 2416;
pub const S_NIGHTSBUMPER10: state = 2415;
pub const S_NIGHTSBUMPER9: state = 2414;
pub const S_NIGHTSBUMPER8: state = 2413;
pub const S_NIGHTSBUMPER7: state = 2412;
pub const S_NIGHTSBUMPER6: state = 2411;
pub const S_NIGHTSBUMPER5: state = 2410;
pub const S_NIGHTSBUMPER4: state = 2409;
pub const S_NIGHTSBUMPER3: state = 2408;
pub const S_NIGHTSBUMPER2: state = 2407;
pub const S_NIGHTSBUMPER1: state = 2406;
pub const S_NIGHTSLOOPHELPER: state = 2405;
pub const S_NIGHTSPARKLESUPER4: state = 2404;
pub const S_NIGHTSPARKLESUPER3: state = 2403;
pub const S_NIGHTSPARKLESUPER2: state = 2402;
pub const S_NIGHTSPARKLESUPER1: state = 2401;
pub const S_NIGHTSPARKLE4: state = 2400;
pub const S_NIGHTSPARKLE3: state = 2399;
pub const S_NIGHTSPARKLE2: state = 2398;
pub const S_NIGHTSPARKLE1: state = 2397;
pub const S_NIGHTSDRONE_GOAL4: state = 2396;
pub const S_NIGHTSDRONE_GOAL3: state = 2395;
pub const S_NIGHTSDRONE_GOAL2: state = 2394;
pub const S_NIGHTSDRONE_GOAL1: state = 2393;
pub const S_NIGHTSDRONE_SPARKLING16: state = 2392;
pub const S_NIGHTSDRONE_SPARKLING15: state = 2391;
pub const S_NIGHTSDRONE_SPARKLING14: state = 2390;
pub const S_NIGHTSDRONE_SPARKLING13: state = 2389;
pub const S_NIGHTSDRONE_SPARKLING12: state = 2388;
pub const S_NIGHTSDRONE_SPARKLING11: state = 2387;
pub const S_NIGHTSDRONE_SPARKLING10: state = 2386;
pub const S_NIGHTSDRONE_SPARKLING9: state = 2385;
pub const S_NIGHTSDRONE_SPARKLING8: state = 2384;
pub const S_NIGHTSDRONE_SPARKLING7: state = 2383;
pub const S_NIGHTSDRONE_SPARKLING6: state = 2382;
pub const S_NIGHTSDRONE_SPARKLING5: state = 2381;
pub const S_NIGHTSDRONE_SPARKLING4: state = 2380;
pub const S_NIGHTSDRONE_SPARKLING3: state = 2379;
pub const S_NIGHTSDRONE_SPARKLING2: state = 2378;
pub const S_NIGHTSDRONE_SPARKLING1: state = 2377;
pub const S_NIGHTSDRONE_MAN2: state = 2376;
pub const S_NIGHTSDRONE_MAN1: state = 2375;
pub const S_TOAD: state = 2374;
pub const S_MARIOBUSH2: state = 2373;
pub const S_MARIOBUSH1: state = 2372;
pub const S_AXE3: state = 2371;
pub const S_AXE2: state = 2370;
pub const S_AXE1: state = 2369;
pub const S_KOOPAFLAME3: state = 2368;
pub const S_KOOPAFLAME2: state = 2367;
pub const S_KOOPAFLAME1: state = 2366;
pub const S_KOOPA2: state = 2365;
pub const S_KOOPA1: state = 2364;
pub const S_HAMMER: state = 2363;
pub const S_PUMATRAIL4: state = 2362;
pub const S_PUMATRAIL3: state = 2361;
pub const S_PUMATRAIL2: state = 2360;
pub const S_PUMATRAIL1: state = 2359;
pub const S_PUMA_DOWN3: state = 2358;
pub const S_PUMA_DOWN2: state = 2357;
pub const S_PUMA_DOWN1: state = 2356;
pub const S_PUMA_UP3: state = 2355;
pub const S_PUMA_UP2: state = 2354;
pub const S_PUMA_UP1: state = 2353;
pub const S_PUMA_START2: state = 2352;
pub const S_PUMA_START1: state = 2351;
pub const S_SHELL: state = 2350;
pub const S_FIREBALLTRAIL2: state = 2349;
pub const S_FIREBALLTRAIL1: state = 2348;
pub const S_FIREBALL: state = 2347;
pub const S_FIREFLOWER4: state = 2346;
pub const S_FIREFLOWER3: state = 2345;
pub const S_FIREFLOWER2: state = 2344;
pub const S_FIREFLOWER1: state = 2343;
pub const S_BLUEGOOMBA_DEAD: state = 2342;
pub const S_BLUEGOOMBA9: state = 2341;
pub const S_BLUEGOOMBA8: state = 2340;
pub const S_BLUEGOOMBA7: state = 2339;
pub const S_BLUEGOOMBA6: state = 2338;
pub const S_BLUEGOOMBA5: state = 2337;
pub const S_BLUEGOOMBA4: state = 2336;
pub const S_BLUEGOOMBA3: state = 2335;
pub const S_BLUEGOOMBA2: state = 2334;
pub const S_BLUEGOOMBA1B: state = 2333;
pub const S_BLUEGOOMBA1: state = 2332;
pub const S_GOOMBA_DEAD: state = 2331;
pub const S_GOOMBA9: state = 2330;
pub const S_GOOMBA8: state = 2329;
pub const S_GOOMBA7: state = 2328;
pub const S_GOOMBA6: state = 2327;
pub const S_GOOMBA5: state = 2326;
pub const S_GOOMBA4: state = 2325;
pub const S_GOOMBA3: state = 2324;
pub const S_GOOMBA2: state = 2323;
pub const S_GOOMBA1B: state = 2322;
pub const S_GOOMBA1: state = 2321;
pub const S_COINSPARKLE4: state = 2320;
pub const S_COINSPARKLE3: state = 2319;
pub const S_COINSPARKLE2: state = 2318;
pub const S_COINSPARKLE1: state = 2317;
pub const S_COIN3: state = 2316;
pub const S_COIN2: state = 2315;
pub const S_COIN1: state = 2314;
pub const S_RINGEXPLODE: state = 2313;
pub const S_THROWNSCATTER: state = 2312;
pub const S_THROWNGRENADE18: state = 2311;
pub const S_THROWNGRENADE17: state = 2310;
pub const S_THROWNGRENADE16: state = 2309;
pub const S_THROWNGRENADE15: state = 2308;
pub const S_THROWNGRENADE14: state = 2307;
pub const S_THROWNGRENADE13: state = 2306;
pub const S_THROWNGRENADE12: state = 2305;
pub const S_THROWNGRENADE11: state = 2304;
pub const S_THROWNGRENADE10: state = 2303;
pub const S_THROWNGRENADE9: state = 2302;
pub const S_THROWNGRENADE8: state = 2301;
pub const S_THROWNGRENADE7: state = 2300;
pub const S_THROWNGRENADE6: state = 2299;
pub const S_THROWNGRENADE5: state = 2298;
pub const S_THROWNGRENADE4: state = 2297;
pub const S_THROWNGRENADE3: state = 2296;
pub const S_THROWNGRENADE2: state = 2295;
pub const S_THROWNGRENADE1: state = 2294;
pub const S_THROWNEXPLOSION7: state = 2293;
pub const S_THROWNEXPLOSION6: state = 2292;
pub const S_THROWNEXPLOSION5: state = 2291;
pub const S_THROWNEXPLOSION4: state = 2290;
pub const S_THROWNEXPLOSION3: state = 2289;
pub const S_THROWNEXPLOSION2: state = 2288;
pub const S_THROWNEXPLOSION1: state = 2287;
pub const S_THROWNAUTOMATIC7: state = 2286;
pub const S_THROWNAUTOMATIC6: state = 2285;
pub const S_THROWNAUTOMATIC5: state = 2284;
pub const S_THROWNAUTOMATIC4: state = 2283;
pub const S_THROWNAUTOMATIC3: state = 2282;
pub const S_THROWNAUTOMATIC2: state = 2281;
pub const S_THROWNAUTOMATIC1: state = 2280;
pub const S_THROWNINFINITY7: state = 2279;
pub const S_THROWNINFINITY6: state = 2278;
pub const S_THROWNINFINITY5: state = 2277;
pub const S_THROWNINFINITY4: state = 2276;
pub const S_THROWNINFINITY3: state = 2275;
pub const S_THROWNINFINITY2: state = 2274;
pub const S_THROWNINFINITY1: state = 2273;
pub const S_THROWNBOUNCE7: state = 2272;
pub const S_THROWNBOUNCE6: state = 2271;
pub const S_THROWNBOUNCE5: state = 2270;
pub const S_THROWNBOUNCE4: state = 2269;
pub const S_THROWNBOUNCE3: state = 2268;
pub const S_THROWNBOUNCE2: state = 2267;
pub const S_THROWNBOUNCE1: state = 2266;
pub const S_GRENADEPICKUPFADE8: state = 2265;
pub const S_GRENADEPICKUPFADE7: state = 2264;
pub const S_GRENADEPICKUPFADE6: state = 2263;
pub const S_GRENADEPICKUPFADE5: state = 2262;
pub const S_GRENADEPICKUPFADE4: state = 2261;
pub const S_GRENADEPICKUPFADE3: state = 2260;
pub const S_GRENADEPICKUPFADE2: state = 2259;
pub const S_GRENADEPICKUPFADE1: state = 2258;
pub const S_GRENADEPICKUP: state = 2257;
pub const S_SCATTERPICKUPFADE8: state = 2256;
pub const S_SCATTERPICKUPFADE7: state = 2255;
pub const S_SCATTERPICKUPFADE6: state = 2254;
pub const S_SCATTERPICKUPFADE5: state = 2253;
pub const S_SCATTERPICKUPFADE4: state = 2252;
pub const S_SCATTERPICKUPFADE3: state = 2251;
pub const S_SCATTERPICKUPFADE2: state = 2250;
pub const S_SCATTERPICKUPFADE1: state = 2249;
pub const S_SCATTERPICKUP: state = 2248;
pub const S_EXPLODEPICKUPFADE8: state = 2247;
pub const S_EXPLODEPICKUPFADE7: state = 2246;
pub const S_EXPLODEPICKUPFADE6: state = 2245;
pub const S_EXPLODEPICKUPFADE5: state = 2244;
pub const S_EXPLODEPICKUPFADE4: state = 2243;
pub const S_EXPLODEPICKUPFADE3: state = 2242;
pub const S_EXPLODEPICKUPFADE2: state = 2241;
pub const S_EXPLODEPICKUPFADE1: state = 2240;
pub const S_EXPLODEPICKUP: state = 2239;
pub const S_AUTOPICKUPFADE8: state = 2238;
pub const S_AUTOPICKUPFADE7: state = 2237;
pub const S_AUTOPICKUPFADE6: state = 2236;
pub const S_AUTOPICKUPFADE5: state = 2235;
pub const S_AUTOPICKUPFADE4: state = 2234;
pub const S_AUTOPICKUPFADE3: state = 2233;
pub const S_AUTOPICKUPFADE2: state = 2232;
pub const S_AUTOPICKUPFADE1: state = 2231;
pub const S_AUTOPICKUP: state = 2230;
pub const S_RAILPICKUPFADE8: state = 2229;
pub const S_RAILPICKUPFADE7: state = 2228;
pub const S_RAILPICKUPFADE6: state = 2227;
pub const S_RAILPICKUPFADE5: state = 2226;
pub const S_RAILPICKUPFADE4: state = 2225;
pub const S_RAILPICKUPFADE3: state = 2224;
pub const S_RAILPICKUPFADE2: state = 2223;
pub const S_RAILPICKUPFADE1: state = 2222;
pub const S_RAILPICKUP: state = 2221;
pub const S_BOUNCEPICKUPFADE8: state = 2220;
pub const S_BOUNCEPICKUPFADE7: state = 2219;
pub const S_BOUNCEPICKUPFADE6: state = 2218;
pub const S_BOUNCEPICKUPFADE5: state = 2217;
pub const S_BOUNCEPICKUPFADE4: state = 2216;
pub const S_BOUNCEPICKUPFADE3: state = 2215;
pub const S_BOUNCEPICKUPFADE2: state = 2214;
pub const S_BOUNCEPICKUPFADE1: state = 2213;
pub const S_BOUNCEPICKUP: state = 2212;
pub const S_GRENADERINGAMMO: state = 2211;
pub const S_SCATTERRINGAMMO: state = 2210;
pub const S_EXPLOSIONRINGAMMO: state = 2209;
pub const S_AUTOMATICRINGAMMO: state = 2208;
pub const S_INFINITYRINGAMMO: state = 2207;
pub const S_RAILRINGAMMO: state = 2206;
pub const S_BOUNCERINGAMMO: state = 2205;
pub const S_RRNG7: state = 2204;
pub const S_RRNG6: state = 2203;
pub const S_RRNG5: state = 2202;
pub const S_RRNG4: state = 2201;
pub const S_RRNG3: state = 2200;
pub const S_RRNG2: state = 2199;
pub const S_RRNG1: state = 2198;
pub const S_LHRT: state = 2197;
pub const S_CORK: state = 2196;
pub const S_FINISHFLAG: state = 2195;
pub const S_GOTFLAG: state = 2194;
pub const S_TTAG: state = 2193;
pub const S_LOCKONINF4: state = 2192;
pub const S_LOCKONINF3: state = 2191;
pub const S_LOCKONINF2: state = 2190;
pub const S_LOCKONINF1: state = 2189;
pub const S_LOCKON4: state = 2188;
pub const S_LOCKON3: state = 2187;
pub const S_LOCKON2: state = 2186;
pub const S_LOCKON1: state = 2185;
pub const S_FLIGHTINDICATOR: state = 2184;
pub const S_FIVE2: state = 2183;
pub const S_FOUR2: state = 2182;
pub const S_THREE2: state = 2181;
pub const S_TWO2: state = 2180;
pub const S_ONE2: state = 2179;
pub const S_ZERO2: state = 2178;
pub const S_FIVE1: state = 2177;
pub const S_FOUR1: state = 2176;
pub const S_THREE1: state = 2175;
pub const S_TWO1: state = 2174;
pub const S_ONE1: state = 2173;
pub const S_ZERO1: state = 2172;
pub const S_SCRL: state = 2171;
pub const S_SCRK: state = 2170;
pub const S_SCRJ: state = 2169;
pub const S_SCRI: state = 2168;
pub const S_SCRH: state = 2167;
pub const S_SCRG: state = 2166;
pub const S_SCRF: state = 2165;
pub const S_SCRE: state = 2164;
pub const S_SCRD: state = 2163;
pub const S_SCRC: state = 2162;
pub const S_SCRB: state = 2161;
pub const S_SCRA: state = 2160;
pub const S_PARTICLE: state = 2159;
pub const S_SEED: state = 2158;
pub const S_FOG14: state = 2157;
pub const S_FOG13: state = 2156;
pub const S_FOG12: state = 2155;
pub const S_FOG11: state = 2154;
pub const S_FOG10: state = 2153;
pub const S_FOG9: state = 2152;
pub const S_FOG8: state = 2151;
pub const S_FOG7: state = 2150;
pub const S_FOG6: state = 2149;
pub const S_FOG5: state = 2148;
pub const S_FOG4: state = 2147;
pub const S_FOG3: state = 2146;
pub const S_FOG2: state = 2145;
pub const S_FOG1: state = 2144;
pub const S_SPINDUST_FIRE4: state = 2143;
pub const S_SPINDUST_FIRE3: state = 2142;
pub const S_SPINDUST_FIRE2: state = 2141;
pub const S_SPINDUST_FIRE1: state = 2140;
pub const S_SPINDUST_BUBBLE4: state = 2139;
pub const S_SPINDUST_BUBBLE3: state = 2138;
pub const S_SPINDUST_BUBBLE2: state = 2137;
pub const S_SPINDUST_BUBBLE1: state = 2136;
pub const S_SPINDUST4: state = 2135;
pub const S_SPINDUST3: state = 2134;
pub const S_SPINDUST2: state = 2133;
pub const S_SPINDUST1: state = 2132;
pub const S_WATERZAP: state = 2131;
pub const S_POP1: state = 2130;
pub const S_EXTRALARGEBUBBLE: state = 2129;
pub const S_LARGEBUBBLE2: state = 2128;
pub const S_LARGEBUBBLE1: state = 2127;
pub const S_MEDIUMBUBBLE: state = 2126;
pub const S_SMALLBUBBLE: state = 2125;
pub const S_SMOKE5: state = 2124;
pub const S_SMOKE4: state = 2123;
pub const S_SMOKE3: state = 2122;
pub const S_SMOKE2: state = 2121;
pub const S_SMOKE1: state = 2120;
pub const S_SPLASH3: state = 2119;
pub const S_SPLASH2: state = 2118;
pub const S_SPLASH1: state = 2117;
pub const S_LAVASPLISH: state = 2116;
pub const S_SPLISH9: state = 2115;
pub const S_SPLISH8: state = 2114;
pub const S_SPLISH7: state = 2113;
pub const S_SPLISH6: state = 2112;
pub const S_SPLISH5: state = 2111;
pub const S_SPLISH4: state = 2110;
pub const S_SPLISH3: state = 2109;
pub const S_SPLISH2: state = 2108;
pub const S_SPLISH1: state = 2107;
pub const S_SNOW3: state = 2106;
pub const S_SNOW2: state = 2105;
pub const S_SNOW1: state = 2104;
pub const S_RAINRETURN: state = 2103;
pub const S_RAIN1: state = 2102;
pub const S_REDBOOSTERSEG_FACE: state = 2101;
pub const S_REDBOOSTERSEG_RIGHT: state = 2100;
pub const S_REDBOOSTERSEG_LEFT: state = 2099;
pub const S_REDBOOSTERROLLER: state = 2098;
pub const S_YELLOWBOOSTERSEG_FACE: state = 2097;
pub const S_YELLOWBOOSTERSEG_RIGHT: state = 2096;
pub const S_YELLOWBOOSTERSEG_LEFT: state = 2095;
pub const S_YELLOWBOOSTERROLLER: state = 2094;
pub const S_BOOSTERSOUND: state = 2093;
pub const S_BHORIZ8: state = 2092;
pub const S_BHORIZ7: state = 2091;
pub const S_BHORIZ6: state = 2090;
pub const S_BHORIZ5: state = 2089;
pub const S_BHORIZ4: state = 2088;
pub const S_BHORIZ3: state = 2087;
pub const S_BHORIZ2: state = 2086;
pub const S_BHORIZ1: state = 2085;
pub const S_RHORIZ8: state = 2084;
pub const S_RHORIZ7: state = 2083;
pub const S_RHORIZ6: state = 2082;
pub const S_RHORIZ5: state = 2081;
pub const S_RHORIZ4: state = 2080;
pub const S_RHORIZ3: state = 2079;
pub const S_RHORIZ2: state = 2078;
pub const S_RHORIZ1: state = 2077;
pub const S_YHORIZ8: state = 2076;
pub const S_YHORIZ7: state = 2075;
pub const S_YHORIZ6: state = 2074;
pub const S_YHORIZ5: state = 2073;
pub const S_YHORIZ4: state = 2072;
pub const S_YHORIZ3: state = 2071;
pub const S_YHORIZ2: state = 2070;
pub const S_YHORIZ1: state = 2069;
pub const S_BDIAG8: state = 2068;
pub const S_BDIAG7: state = 2067;
pub const S_BDIAG6: state = 2066;
pub const S_BDIAG5: state = 2065;
pub const S_BDIAG4: state = 2064;
pub const S_BDIAG3: state = 2063;
pub const S_BDIAG2: state = 2062;
pub const S_BDIAG1: state = 2061;
pub const S_RDIAG8: state = 2060;
pub const S_RDIAG7: state = 2059;
pub const S_RDIAG6: state = 2058;
pub const S_RDIAG5: state = 2057;
pub const S_RDIAG4: state = 2056;
pub const S_RDIAG3: state = 2055;
pub const S_RDIAG2: state = 2054;
pub const S_RDIAG1: state = 2053;
pub const S_YDIAG8: state = 2052;
pub const S_YDIAG7: state = 2051;
pub const S_YDIAG6: state = 2050;
pub const S_YDIAG5: state = 2049;
pub const S_YDIAG4: state = 2048;
pub const S_YDIAG3: state = 2047;
pub const S_YDIAG2: state = 2046;
pub const S_YDIAG1: state = 2045;
pub const S_BLUESPRING5: state = 2044;
pub const S_BLUESPRING4: state = 2043;
pub const S_BLUESPRING3: state = 2042;
pub const S_BLUESPRING2: state = 2041;
pub const S_BLUESPRING: state = 2040;
pub const S_REDSPRING5: state = 2039;
pub const S_REDSPRING4: state = 2038;
pub const S_REDSPRING3: state = 2037;
pub const S_REDSPRING2: state = 2036;
pub const S_REDSPRING: state = 2035;
pub const S_YELLOWSPRING5: state = 2034;
pub const S_YELLOWSPRING4: state = 2033;
pub const S_YELLOWSPRING3: state = 2032;
pub const S_YELLOWSPRING2: state = 2031;
pub const S_YELLOWSPRING: state = 2030;
pub const S_BALLOONPOP6: state = 2029;
pub const S_BALLOONPOP5: state = 2028;
pub const S_BALLOONPOP4: state = 2027;
pub const S_BALLOONPOP3: state = 2026;
pub const S_BALLOONPOP2: state = 2025;
pub const S_BALLOONPOP1: state = 2024;
pub const S_BALLOON: state = 2023;
pub const S_BUMPERHIT: state = 2022;
pub const S_BUMPER: state = 2021;
pub const S_STEAM8: state = 2020;
pub const S_STEAM7: state = 2019;
pub const S_STEAM6: state = 2018;
pub const S_STEAM5: state = 2017;
pub const S_STEAM4: state = 2016;
pub const S_STEAM3: state = 2015;
pub const S_STEAM2: state = 2014;
pub const S_STEAM1: state = 2013;
pub const S_FAN5: state = 2012;
pub const S_FAN4: state = 2011;
pub const S_FAN3: state = 2010;
pub const S_FAN2: state = 2009;
pub const S_FAN: state = 2008;
pub const S_SECRETFLICKY_02_CENTER: state = 2007;
pub const S_SECRETFLICKY_02_STAND: state = 2006;
pub const S_SECRETFLICKY_02_FLAP3: state = 2005;
pub const S_SECRETFLICKY_02_FLAP2: state = 2004;
pub const S_SECRETFLICKY_02_FLAP1: state = 2003;
pub const S_SECRETFLICKY_02_OUT: state = 2002;
pub const S_SECRETFLICKY_01_CENTER: state = 2001;
pub const S_SECRETFLICKY_01_STAND: state = 2000;
pub const S_SECRETFLICKY_01_DOWN: state = 1999;
pub const S_SECRETFLICKY_01_UP: state = 1998;
pub const S_SECRETFLICKY_01_HOP: state = 1997;
pub const S_SECRETFLICKY_01_AIM: state = 1996;
pub const S_SECRETFLICKY_01_OUT: state = 1995;
pub const S_FLICKY_16_CENTER: state = 1994;
pub const S_FLICKY_16_STAND: state = 1993;
pub const S_FLICKY_16_FLAP3: state = 1992;
pub const S_FLICKY_16_FLAP2: state = 1991;
pub const S_FLICKY_16_FLAP1: state = 1990;
pub const S_FLICKY_16_OUT: state = 1989;
pub const S_FLICKY_15_CENTER: state = 1988;
pub const S_FLICKY_15_STAND: state = 1987;
pub const S_FLICKY_15_DOWN: state = 1986;
pub const S_FLICKY_15_UP: state = 1985;
pub const S_FLICKY_15_HOP: state = 1984;
pub const S_FLICKY_15_AIM: state = 1983;
pub const S_FLICKY_15_OUT: state = 1982;
pub const S_FLICKY_14_CENTER: state = 1981;
pub const S_FLICKY_14_STAND: state = 1980;
pub const S_FLICKY_14_FLAP3: state = 1979;
pub const S_FLICKY_14_FLAP2: state = 1978;
pub const S_FLICKY_14_FLAP1: state = 1977;
pub const S_FLICKY_14_OUT: state = 1976;
pub const S_FLICKY_13_CENTER: state = 1975;
pub const S_FLICKY_13_STAND: state = 1974;
pub const S_FLICKY_13_DOWN: state = 1973;
pub const S_FLICKY_13_UP: state = 1972;
pub const S_FLICKY_13_HOP: state = 1971;
pub const S_FLICKY_13_AIM: state = 1970;
pub const S_FLICKY_13_OUT: state = 1969;
pub const S_FLICKY_12_CENTER: state = 1968;
pub const S_FLICKY_12_STAND: state = 1967;
pub const S_FLICKY_12_RUN3: state = 1966;
pub const S_FLICKY_12_RUN2: state = 1965;
pub const S_FLICKY_12_RUN1: state = 1964;
pub const S_FLICKY_12_AIM: state = 1963;
pub const S_FLICKY_12_OUT: state = 1962;
pub const S_FLICKY_11_CENTER: state = 1961;
pub const S_FLICKY_11_STAND: state = 1960;
pub const S_FLICKY_11_RUN3: state = 1959;
pub const S_FLICKY_11_RUN2: state = 1958;
pub const S_FLICKY_11_RUN1: state = 1957;
pub const S_FLICKY_11_AIM: state = 1956;
pub const S_FLICKY_11_OUT: state = 1955;
pub const S_FLICKY_10_CENTER: state = 1954;
pub const S_FLICKY_10_STAND: state = 1953;
pub const S_FLICKY_10_FLAP2: state = 1952;
pub const S_FLICKY_10_FLAP1: state = 1951;
pub const S_FLICKY_10_OUT: state = 1950;
pub const S_FLICKY_09_CENTER: state = 1949;
pub const S_FLICKY_09_STAND: state = 1948;
pub const S_FLICKY_09_DOWN: state = 1947;
pub const S_FLICKY_09_UP: state = 1946;
pub const S_FLICKY_09_HOP: state = 1945;
pub const S_FLICKY_09_AIM: state = 1944;
pub const S_FLICKY_09_OUT: state = 1943;
pub const S_FLICKY_08_CENTER: state = 1942;
pub const S_FLICKY_08_STAND: state = 1941;
pub const S_FLICKY_08_SWIM4: state = 1940;
pub const S_FLICKY_08_SWIM3: state = 1939;
pub const S_FLICKY_08_SWIM2: state = 1938;
pub const S_FLICKY_08_SWIM1: state = 1937;
pub const S_FLICKY_08_FLAP4: state = 1936;
pub const S_FLICKY_08_FLAP3: state = 1935;
pub const S_FLICKY_08_FLAP2: state = 1934;
pub const S_FLICKY_08_FLAP1: state = 1933;
pub const S_FLICKY_08_HOP: state = 1932;
pub const S_FLICKY_08_AIM: state = 1931;
pub const S_FLICKY_08_OUT: state = 1930;
pub const S_FLICKY_07_CENTER: state = 1929;
pub const S_FLICKY_07_STAND: state = 1928;
pub const S_FLICKY_07_SWIM3: state = 1927;
pub const S_FLICKY_07_SWIM2: state = 1926;
pub const S_FLICKY_07_SWIM1: state = 1925;
pub const S_FLICKY_07_DOWNR: state = 1924;
pub const S_FLICKY_07_UPR: state = 1923;
pub const S_FLICKY_07_HOPR: state = 1922;
pub const S_FLICKY_07_AIMR: state = 1921;
pub const S_FLICKY_07_DOWNL: state = 1920;
pub const S_FLICKY_07_UPL: state = 1919;
pub const S_FLICKY_07_HOPL: state = 1918;
pub const S_FLICKY_07_AIML: state = 1917;
pub const S_FLICKY_07_OUT: state = 1916;
pub const S_FLICKY_06_CENTER: state = 1915;
pub const S_FLICKY_06_STAND: state = 1914;
pub const S_FLICKY_06_DOWN: state = 1913;
pub const S_FLICKY_06_UP: state = 1912;
pub const S_FLICKY_06_HOP: state = 1911;
pub const S_FLICKY_06_AIM: state = 1910;
pub const S_FLICKY_06_OUT: state = 1909;
pub const S_FLICKY_05_CENTER: state = 1908;
pub const S_FLICKY_05_STAND: state = 1907;
pub const S_FLICKY_05_DOWN: state = 1906;
pub const S_FLICKY_05_UP: state = 1905;
pub const S_FLICKY_05_HOP: state = 1904;
pub const S_FLICKY_05_AIM: state = 1903;
pub const S_FLICKY_05_OUT: state = 1902;
pub const S_FLICKY_04_CENTER: state = 1901;
pub const S_FLICKY_04_STAND: state = 1900;
pub const S_FLICKY_04_SWIM4: state = 1899;
pub const S_FLICKY_04_SWIM3: state = 1898;
pub const S_FLICKY_04_SWIM2: state = 1897;
pub const S_FLICKY_04_SWIM1: state = 1896;
pub const S_FLICKY_04_DOWN: state = 1895;
pub const S_FLICKY_04_UP: state = 1894;
pub const S_FLICKY_04_HOP: state = 1893;
pub const S_FLICKY_04_AIM: state = 1892;
pub const S_FLICKY_04_OUT: state = 1891;
pub const S_FLICKY_03_CENTER: state = 1890;
pub const S_FLICKY_03_STAND: state = 1889;
pub const S_FLICKY_03_FLAP2: state = 1888;
pub const S_FLICKY_03_FLAP1: state = 1887;
pub const S_FLICKY_03_UP: state = 1886;
pub const S_FLICKY_03_HOP: state = 1885;
pub const S_FLICKY_03_AIM: state = 1884;
pub const S_FLICKY_03_OUT: state = 1883;
pub const S_FLICKY_02_CENTER: state = 1882;
pub const S_FLICKY_02_STAND: state = 1881;
pub const S_FLICKY_02_DOWN: state = 1880;
pub const S_FLICKY_02_UP: state = 1879;
pub const S_FLICKY_02_HOP: state = 1878;
pub const S_FLICKY_02_AIM: state = 1877;
pub const S_FLICKY_02_OUT: state = 1876;
pub const S_FLICKY_01_CENTER: state = 1875;
pub const S_FLICKY_01_STAND: state = 1874;
pub const S_FLICKY_01_FLAP3: state = 1873;
pub const S_FLICKY_01_FLAP2: state = 1872;
pub const S_FLICKY_01_FLAP1: state = 1871;
pub const S_FLICKY_01_OUT: state = 1870;
pub const S_FLICKY_BUBBLE: state = 1869;
pub const S_SSPK5: state = 1868;
pub const S_SSPK4: state = 1867;
pub const S_SSPK3: state = 1866;
pub const S_SSPK2: state = 1865;
pub const S_SSPK1: state = 1864;
pub const S_IVSP: state = 1863;
pub const S_THUNDERCOIN_SPARK: state = 1862;
pub const S_ZAPSB11: state = 1861;
pub const S_ZAPSB10: state = 1860;
pub const S_ZAPSB9: state = 1859;
pub const S_ZAPSB8: state = 1858;
pub const S_ZAPSB7: state = 1857;
pub const S_ZAPSB6: state = 1856;
pub const S_ZAPSB5: state = 1855;
pub const S_ZAPSB4: state = 1854;
pub const S_ZAPSB3: state = 1853;
pub const S_ZAPSB2: state = 1852;
pub const S_ZAPSB1: state = 1851;
pub const S_ZAPS16: state = 1850;
pub const S_ZAPS15: state = 1849;
pub const S_ZAPS14: state = 1848;
pub const S_ZAPS13: state = 1847;
pub const S_ZAPS12: state = 1846;
pub const S_ZAPS11: state = 1845;
pub const S_ZAPS10: state = 1844;
pub const S_ZAPS9: state = 1843;
pub const S_ZAPS8: state = 1842;
pub const S_ZAPS7: state = 1841;
pub const S_ZAPS6: state = 1840;
pub const S_ZAPS5: state = 1839;
pub const S_ZAPS4: state = 1838;
pub const S_ZAPS3: state = 1837;
pub const S_ZAPS2: state = 1836;
pub const S_ZAPS1: state = 1835;
pub const S_BUBSB6: state = 1834;
pub const S_BUBSB5: state = 1833;
pub const S_BUBSB4: state = 1832;
pub const S_BUBSB3: state = 1831;
pub const S_BUBSB2: state = 1830;
pub const S_BUBSB1: state = 1829;
pub const S_BUBS11: state = 1828;
pub const S_BUBS10: state = 1827;
pub const S_BUBS9: state = 1826;
pub const S_BUBS8: state = 1825;
pub const S_BUBS7: state = 1824;
pub const S_BUBS6: state = 1823;
pub const S_BUBS5: state = 1822;
pub const S_BUBS4: state = 1821;
pub const S_BUBS3: state = 1820;
pub const S_BUBS2: state = 1819;
pub const S_BUBS1: state = 1818;
pub const S_FIRSB10: state = 1817;
pub const S_FIRSB9: state = 1816;
pub const S_FIRSB8: state = 1815;
pub const S_FIRSB7: state = 1814;
pub const S_FIRSB6: state = 1813;
pub const S_FIRSB5: state = 1812;
pub const S_FIRSB4: state = 1811;
pub const S_FIRSB3: state = 1810;
pub const S_FIRSB2: state = 1809;
pub const S_FIRSB1: state = 1808;
pub const S_FIRS11: state = 1807;
pub const S_FIRS10: state = 1806;
pub const S_FIRS9: state = 1805;
pub const S_FIRS8: state = 1804;
pub const S_FIRS7: state = 1803;
pub const S_FIRS6: state = 1802;
pub const S_FIRS5: state = 1801;
pub const S_FIRS4: state = 1800;
pub const S_FIRS3: state = 1799;
pub const S_FIRS2: state = 1798;
pub const S_FIRS1: state = 1797;
pub const S_PITY12: state = 1796;
pub const S_PITY11: state = 1795;
pub const S_PITY10: state = 1794;
pub const S_PITY9: state = 1793;
pub const S_PITY8: state = 1792;
pub const S_PITY7: state = 1791;
pub const S_PITY6: state = 1790;
pub const S_PITY5: state = 1789;
pub const S_PITY4: state = 1788;
pub const S_PITY3: state = 1787;
pub const S_PITY2: state = 1786;
pub const S_PITY1: state = 1785;
pub const S_ELEMF10: state = 1784;
pub const S_ELEMF9: state = 1783;
pub const S_ELEMF8: state = 1782;
pub const S_ELEMF7: state = 1781;
pub const S_ELEMF6: state = 1780;
pub const S_ELEMF5: state = 1779;
pub const S_ELEMF4: state = 1778;
pub const S_ELEMF3: state = 1777;
pub const S_ELEMF2: state = 1776;
pub const S_ELEMF1: state = 1775;
pub const S_ELEM14: state = 1774;
pub const S_ELEM13: state = 1773;
pub const S_ELEM12: state = 1772;
pub const S_ELEM11: state = 1771;
pub const S_ELEM10: state = 1770;
pub const S_ELEM9: state = 1769;
pub const S_ELEM8: state = 1768;
pub const S_ELEM7: state = 1767;
pub const S_ELEM6: state = 1766;
pub const S_ELEM5: state = 1765;
pub const S_ELEM4: state = 1764;
pub const S_ELEM3: state = 1763;
pub const S_ELEM2: state = 1762;
pub const S_ELEM1: state = 1761;
pub const S_FORC21: state = 1760;
pub const S_FORC20: state = 1759;
pub const S_FORC19: state = 1758;
pub const S_FORC18: state = 1757;
pub const S_FORC17: state = 1756;
pub const S_FORC16: state = 1755;
pub const S_FORC15: state = 1754;
pub const S_FORC14: state = 1753;
pub const S_FORC13: state = 1752;
pub const S_FORC12: state = 1751;
pub const S_FORC11: state = 1750;
pub const S_FORC10: state = 1749;
pub const S_FORC9: state = 1748;
pub const S_FORC8: state = 1747;
pub const S_FORC7: state = 1746;
pub const S_FORC6: state = 1745;
pub const S_FORC5: state = 1744;
pub const S_FORC4: state = 1743;
pub const S_FORC3: state = 1742;
pub const S_FORC2: state = 1741;
pub const S_FORC1: state = 1740;
pub const S_MAGN13: state = 1739;
pub const S_MAGN12: state = 1738;
pub const S_MAGN11: state = 1737;
pub const S_MAGN10: state = 1736;
pub const S_MAGN9: state = 1735;
pub const S_MAGN8: state = 1734;
pub const S_MAGN7: state = 1733;
pub const S_MAGN6: state = 1732;
pub const S_MAGN5: state = 1731;
pub const S_MAGN4: state = 1730;
pub const S_MAGN3: state = 1729;
pub const S_MAGN2: state = 1728;
pub const S_MAGN1: state = 1727;
pub const S_WIND8: state = 1726;
pub const S_WIND7: state = 1725;
pub const S_WIND6: state = 1724;
pub const S_WIND5: state = 1723;
pub const S_WIND4: state = 1722;
pub const S_WIND3: state = 1721;
pub const S_WIND2: state = 1720;
pub const S_WIND1: state = 1719;
pub const S_ARMB32: state = 1718;
pub const S_ARMB31: state = 1717;
pub const S_ARMB30: state = 1716;
pub const S_ARMB29: state = 1715;
pub const S_ARMB28: state = 1714;
pub const S_ARMB27: state = 1713;
pub const S_ARMB26: state = 1712;
pub const S_ARMB25: state = 1711;
pub const S_ARMB24: state = 1710;
pub const S_ARMB23: state = 1709;
pub const S_ARMB22: state = 1708;
pub const S_ARMB21: state = 1707;
pub const S_ARMB20: state = 1706;
pub const S_ARMB19: state = 1705;
pub const S_ARMB18: state = 1704;
pub const S_ARMB17: state = 1703;
pub const S_ARMB16: state = 1702;
pub const S_ARMB15: state = 1701;
pub const S_ARMB14: state = 1700;
pub const S_ARMB13: state = 1699;
pub const S_ARMB12: state = 1698;
pub const S_ARMB11: state = 1697;
pub const S_ARMB10: state = 1696;
pub const S_ARMB9: state = 1695;
pub const S_ARMB8: state = 1694;
pub const S_ARMB7: state = 1693;
pub const S_ARMB6: state = 1692;
pub const S_ARMB5: state = 1691;
pub const S_ARMB4: state = 1690;
pub const S_ARMB3: state = 1689;
pub const S_ARMB2: state = 1688;
pub const S_ARMB1: state = 1687;
pub const S_ARMF32: state = 1686;
pub const S_ARMF31: state = 1685;
pub const S_ARMF30: state = 1684;
pub const S_ARMF29: state = 1683;
pub const S_ARMF28: state = 1682;
pub const S_ARMF27: state = 1681;
pub const S_ARMF26: state = 1680;
pub const S_ARMF25: state = 1679;
pub const S_ARMF24: state = 1678;
pub const S_ARMF23: state = 1677;
pub const S_ARMF22: state = 1676;
pub const S_ARMF21: state = 1675;
pub const S_ARMF20: state = 1674;
pub const S_ARMF19: state = 1673;
pub const S_ARMF18: state = 1672;
pub const S_ARMF17: state = 1671;
pub const S_ARMF16: state = 1670;
pub const S_ARMF15: state = 1669;
pub const S_ARMF14: state = 1668;
pub const S_ARMF13: state = 1667;
pub const S_ARMF12: state = 1666;
pub const S_ARMF11: state = 1665;
pub const S_ARMF10: state = 1664;
pub const S_ARMF9: state = 1663;
pub const S_ARMF8: state = 1662;
pub const S_ARMF7: state = 1661;
pub const S_ARMF6: state = 1660;
pub const S_ARMF5: state = 1659;
pub const S_ARMF4: state = 1658;
pub const S_ARMF3: state = 1657;
pub const S_ARMF2: state = 1656;
pub const S_ARMF1: state = 1655;
pub const S_ARMA16: state = 1654;
pub const S_ARMA15: state = 1653;
pub const S_ARMA14: state = 1652;
pub const S_ARMA13: state = 1651;
pub const S_ARMA12: state = 1650;
pub const S_ARMA11: state = 1649;
pub const S_ARMA10: state = 1648;
pub const S_ARMA9: state = 1647;
pub const S_ARMA8: state = 1646;
pub const S_ARMA7: state = 1645;
pub const S_ARMA6: state = 1644;
pub const S_ARMA5: state = 1643;
pub const S_ARMA4: state = 1642;
pub const S_ARMA3: state = 1641;
pub const S_ARMA2: state = 1640;
pub const S_ARMA1: state = 1639;
pub const S_EGGSTATUE2: state = 1638;
pub const S_DBALL6: state = 1637;
pub const S_DBALL5: state = 1636;
pub const S_DBALL4: state = 1635;
pub const S_DBALL3: state = 1634;
pub const S_DBALL2: state = 1633;
pub const S_DBALL1: state = 1632;
pub const S_PALMTREE_TOP: state = 1631;
pub const S_PALMTREE_TRUNK: state = 1630;
pub const S_BIG_PALMTREE_TOP: state = 1629;
pub const S_BIG_PALMTREE_TRUNK: state = 1628;
pub const S_BSZCLOVER: state = 1627;
pub const S_BSZSHRUB: state = 1626;
pub const S_BSZVINE_ORANGE: state = 1625;
pub const S_BSZVINE_YELLOW: state = 1624;
pub const S_BSZVINE_CYAN: state = 1623;
pub const S_BSZVINE_BLUE: state = 1622;
pub const S_BSZVINE_PURPLE: state = 1621;
pub const S_BSZVINE_RED: state = 1620;
pub const S_BSZBUSH_ORANGE: state = 1619;
pub const S_BSZBUSH_YELLOW: state = 1618;
pub const S_BSZBUSH_CYAN: state = 1617;
pub const S_BSZBUSH_BLUE: state = 1616;
pub const S_BSZBUSH_PURPLE: state = 1615;
pub const S_BSZBUSH_RED: state = 1614;
pub const S_BSZCLUSTER_ORANGE: state = 1613;
pub const S_BSZCLUSTER_YELLOW: state = 1612;
pub const S_BSZCLUSTER_CYAN: state = 1611;
pub const S_BSZCLUSTER_BLUE: state = 1610;
pub const S_BSZCLUSTER_PURPLE: state = 1609;
pub const S_BSZCLUSTER_RED: state = 1608;
pub const S_BSZTULIP_ORANGE: state = 1607;
pub const S_BSZTULIP_YELLOW: state = 1606;
pub const S_BSZTULIP_CYAN: state = 1605;
pub const S_BSZTULIP_BLUE: state = 1604;
pub const S_BSZTULIP_PURPLE: state = 1603;
pub const S_BSZTULIP_RED: state = 1602;
pub const S_BSZSHORTFLOWER_ORANGE: state = 1601;
pub const S_BSZSHORTFLOWER_YELLOW: state = 1600;
pub const S_BSZSHORTFLOWER_CYAN: state = 1599;
pub const S_BSZSHORTFLOWER_BLUE: state = 1598;
pub const S_BSZSHORTFLOWER_PURPLE: state = 1597;
pub const S_BSZSHORTFLOWER_RED: state = 1596;
pub const S_BSZFLOWER_ORANGE: state = 1595;
pub const S_BSZFLOWER_YELLOW: state = 1594;
pub const S_BSZFLOWER_CYAN: state = 1593;
pub const S_BSZFLOWER_BLUE: state = 1592;
pub const S_BSZFLOWER_PURPLE: state = 1591;
pub const S_BSZFLOWER_RED: state = 1590;
pub const S_BSZTALLFLOWER_ORANGE: state = 1589;
pub const S_BSZTALLFLOWER_YELLOW: state = 1588;
pub const S_BSZTALLFLOWER_CYAN: state = 1587;
pub const S_BSZTALLFLOWER_BLUE: state = 1586;
pub const S_BSZTALLFLOWER_PURPLE: state = 1585;
pub const S_BSZTALLFLOWER_RED: state = 1584;
pub const S_HHZSTALAGMITE_SHORT: state = 1583;
pub const S_HHZSTALAGMITE_TALL: state = 1582;
pub const S_HHZTENT2: state = 1581;
pub const S_HHZTENT1: state = 1580;
pub const S_HHZGRASS: state = 1579;
pub const S_HHZSHROOM_16: state = 1578;
pub const S_HHZSHROOM_15: state = 1577;
pub const S_HHZSHROOM_14: state = 1576;
pub const S_HHZSHROOM_13: state = 1575;
pub const S_HHZSHROOM_12: state = 1574;
pub const S_HHZSHROOM_11: state = 1573;
pub const S_HHZSHROOM_10: state = 1572;
pub const S_HHZSHROOM_9: state = 1571;
pub const S_HHZSHROOM_8: state = 1570;
pub const S_HHZSHROOM_7: state = 1569;
pub const S_HHZSHROOM_6: state = 1568;
pub const S_HHZSHROOM_5: state = 1567;
pub const S_HHZSHROOM_4: state = 1566;
pub const S_HHZSHROOM_3: state = 1565;
pub const S_HHZSHROOM_2: state = 1564;
pub const S_HHZSHROOM_1: state = 1563;
pub const S_HHZTREE_LEAF: state = 1562;
pub const S_HHZTREE_TRUNK: state = 1561;
pub const S_HHZTREE_TOP: state = 1560;
pub const S_JACKO3OVERLAY_4: state = 1559;
pub const S_JACKO3OVERLAY_3: state = 1558;
pub const S_JACKO3OVERLAY_2: state = 1557;
pub const S_JACKO3OVERLAY_1: state = 1556;
pub const S_JACKO3: state = 1555;
pub const S_JACKO2OVERLAY_4: state = 1554;
pub const S_JACKO2OVERLAY_3: state = 1553;
pub const S_JACKO2OVERLAY_2: state = 1552;
pub const S_JACKO2OVERLAY_1: state = 1551;
pub const S_JACKO2: state = 1550;
pub const S_JACKO1OVERLAY_4: state = 1549;
pub const S_JACKO1OVERLAY_3: state = 1548;
pub const S_JACKO1OVERLAY_2: state = 1547;
pub const S_JACKO1OVERLAY_1: state = 1546;
pub const S_JACKO1: state = 1545;
pub const S_ROSY_UNHAPPY: state = 1544;
pub const S_ROSY_STND: state = 1543;
pub const S_ROSY_PAIN: state = 1542;
pub const S_ROSY_HUG: state = 1541;
pub const S_ROSY_WALK: state = 1540;
pub const S_ROSY_JUMP: state = 1539;
pub const S_ROSY_IDLE4: state = 1538;
pub const S_ROSY_IDLE3: state = 1537;
pub const S_ROSY_IDLE2: state = 1536;
pub const S_ROSY_IDLE1: state = 1535;
pub const S_FHZICE2: state = 1534;
pub const S_FHZICE1: state = 1533;
pub const S_XMASBUSH: state = 1532;
pub const S_XMASBERRYBUSH: state = 1531;
pub const S_XMASBLUEBERRYBUSH: state = 1530;
pub const S_MISTLETOE: state = 1529;
pub const S_HANGSTAR: state = 1528;
pub const S_LAMPPOST2: state = 1527;
pub const S_LAMPPOST1: state = 1526;
pub const S_SNOWMANHAT: state = 1525;
pub const S_SNOWMAN: state = 1524;
pub const S_CANDYCANE: state = 1523;
pub const S_XMASPOLE: state = 1522;
pub const S_STG9: state = 1521;
pub const S_STG8: state = 1520;
pub const S_STG7: state = 1519;
pub const S_STG6: state = 1518;
pub const S_STG5: state = 1517;
pub const S_STG4: state = 1516;
pub const S_STG3: state = 1515;
pub const S_STG2: state = 1514;
pub const S_STG1: state = 1513;
pub const S_STG0: state = 1512;
pub const S_BLUEGARGOYLE: state = 1511;
pub const S_GREENFLAME: state = 1510;
pub const S_TARGET_ALLDONE: state = 1509;
pub const S_TARGET_RESPAWN: state = 1508;
pub const S_TARGET_HIT2: state = 1507;
pub const S_TARGET_HIT1: state = 1506;
pub const S_TARGET_IDLE: state = 1505;
pub const S_GLAREGOYLELONG_COOLDOWN: state = 1504;
pub const S_GLAREGOYLELONG_LOOP: state = 1503;
pub const S_GLAREGOYLELONG_FIRE: state = 1502;
pub const S_GLAREGOYLELONG_HOLD: state = 1501;
pub const S_GLAREGOYLELONG_BLINK: state = 1500;
pub const S_GLAREGOYLELONG_CHARGE: state = 1499;
pub const S_GLAREGOYLELONG: state = 1498;
pub const S_GLAREGOYLEDOWN_COOLDOWN: state = 1497;
pub const S_GLAREGOYLEDOWN_LOOP: state = 1496;
pub const S_GLAREGOYLEDOWN_FIRE: state = 1495;
pub const S_GLAREGOYLEDOWN_HOLD: state = 1494;
pub const S_GLAREGOYLEDOWN_BLINK: state = 1493;
pub const S_GLAREGOYLEDOWN_CHARGE: state = 1492;
pub const S_GLAREGOYLEDOWN: state = 1491;
pub const S_GLAREGOYLEUP_COOLDOWN: state = 1490;
pub const S_GLAREGOYLEUP_LOOP: state = 1489;
pub const S_GLAREGOYLEUP_FIRE: state = 1488;
pub const S_GLAREGOYLEUP_HOLD: state = 1487;
pub const S_GLAREGOYLEUP_BLINK: state = 1486;
pub const S_GLAREGOYLEUP_CHARGE: state = 1485;
pub const S_GLAREGOYLEUP: state = 1484;
pub const S_GLAREGOYLE_COOLDOWN: state = 1483;
pub const S_GLAREGOYLE_LOOP: state = 1482;
pub const S_GLAREGOYLE_FIRE: state = 1481;
pub const S_GLAREGOYLE_HOLD: state = 1480;
pub const S_GLAREGOYLE_BLINK: state = 1479;
pub const S_GLAREGOYLE_CHARGE: state = 1478;
pub const S_GLAREGOYLE: state = 1477;
pub const S_WALLVINE_SHORT: state = 1476;
pub const S_WALLVINE_LONG: state = 1475;
pub const S_TORCHFLOWER: state = 1474;
pub const S_JUNGLEPALM: state = 1473;
pub const S_BIGFERN2: state = 1472;
pub const S_BIGFERN1: state = 1471;
pub const S_BIGFERNLEAF: state = 1470;
pub const S_ROLLOUTROCK: state = 1469;
pub const S_ROLLOUTSPAWN: state = 1468;
pub const S_LAVAFALLROCK: state = 1467;
pub const S_LAVAFALL_LAVA3: state = 1466;
pub const S_LAVAFALL_LAVA2: state = 1465;
pub const S_LAVAFALL_LAVA1: state = 1464;
pub const S_LAVAFALL_SHOOT: state = 1463;
pub const S_LAVAFALL_TELL: state = 1462;
pub const S_LAVAFALL_DORMANT: state = 1461;
pub const S_FLAMEJETFLAMEB3: state = 1460;
pub const S_FLAMEJETFLAMEB2: state = 1459;
pub const S_FLAMEJETFLAMEB1: state = 1458;
pub const S_FJSPINAXISB2: state = 1457;
pub const S_FJSPINAXISB1: state = 1456;
pub const S_FJSPINAXISA2: state = 1455;
pub const S_FJSPINAXISA1: state = 1454;
pub const S_FLAMEJETFLAME9: state = 1453;
pub const S_FLAMEJETFLAME8: state = 1452;
pub const S_FLAMEJETFLAME7: state = 1451;
pub const S_FLAMEJETFLAME6: state = 1450;
pub const S_FLAMEJETFLAME5: state = 1449;
pub const S_FLAMEJETFLAME4: state = 1448;
pub const S_FLAMEJETFLAME3: state = 1447;
pub const S_FLAMEJETFLAME2: state = 1446;
pub const S_FLAMEJETFLAME1: state = 1445;
pub const S_FLAMEJETSTOP: state = 1444;
pub const S_FLAMEJETSTART: state = 1443;
pub const S_FLAMEJETSTND: state = 1442;
pub const S_TRAINSTEAM: state = 1441;
pub const S_TRAINDUST: state = 1440;
pub const S_TRAINPUFFMAKER: state = 1439;
pub const S_TRAINCAMEOSPAWNER_5: state = 1438;
pub const S_TRAINCAMEOSPAWNER_4: state = 1437;
pub const S_TRAINCAMEOSPAWNER_3: state = 1436;
pub const S_TRAINCAMEOSPAWNER_2: state = 1435;
pub const S_TRAINCAMEOSPAWNER_1: state = 1434;
pub const S_SALOONDOORCENTER: state = 1433;
pub const S_SALOONDOOR: state = 1432;
pub const S_MINECARTSPARK: state = 1431;
pub const S_MINECARTSIDEMARK2: state = 1430;
pub const S_MINECARTSIDEMARK1: state = 1429;
pub const S_MINECARTSEG_RIGHT: state = 1428;
pub const S_MINECARTSEG_LEFT: state = 1427;
pub const S_MINECARTSEG_BACK: state = 1426;
pub const S_MINECARTSEG_FRONT: state = 1425;
pub const S_MINECARTEND: state = 1424;
pub const S_MINECART_DTH1: state = 1423;
pub const S_MINECART_IDLE: state = 1422;
pub const S_ARIDDUST3: state = 1421;
pub const S_ARIDDUST2: state = 1420;
pub const S_ARIDDUST1: state = 1419;
pub const S_DUSTLAYER5: state = 1418;
pub const S_DUSTLAYER4: state = 1417;
pub const S_DUSTLAYER3: state = 1416;
pub const S_DUSTLAYER2: state = 1415;
pub const S_DUSTLAYER1: state = 1414;
pub const S_DUSTDEVIL: state = 1413;
pub const S_PROXIMITY_TNT_TRIGGER23: state = 1412;
pub const S_PROXIMITY_TNT_TRIGGER22: state = 1411;
pub const S_PROXIMITY_TNT_TRIGGER21: state = 1410;
pub const S_PROXIMITY_TNT_TRIGGER20: state = 1409;
pub const S_PROXIMITY_TNT_TRIGGER19: state = 1408;
pub const S_PROXIMITY_TNT_TRIGGER18: state = 1407;
pub const S_PROXIMITY_TNT_TRIGGER17: state = 1406;
pub const S_PROXIMITY_TNT_TRIGGER16: state = 1405;
pub const S_PROXIMITY_TNT_TRIGGER15: state = 1404;
pub const S_PROXIMITY_TNT_TRIGGER14: state = 1403;
pub const S_PROXIMITY_TNT_TRIGGER13: state = 1402;
pub const S_PROXIMITY_TNT_TRIGGER12: state = 1401;
pub const S_PROXIMITY_TNT_TRIGGER11: state = 1400;
pub const S_PROXIMITY_TNT_TRIGGER10: state = 1399;
pub const S_PROXIMITY_TNT_TRIGGER9: state = 1398;
pub const S_PROXIMITY_TNT_TRIGGER8: state = 1397;
pub const S_PROXIMITY_TNT_TRIGGER7: state = 1396;
pub const S_PROXIMITY_TNT_TRIGGER6: state = 1395;
pub const S_PROXIMITY_TNT_TRIGGER5: state = 1394;
pub const S_PROXIMITY_TNT_TRIGGER4: state = 1393;
pub const S_PROXIMITY_TNT_TRIGGER3: state = 1392;
pub const S_PROXIMITY_TNT_TRIGGER2: state = 1391;
pub const S_PROXIMITY_TNT_TRIGGER1: state = 1390;
pub const S_PROXIMITY_TNT: state = 1389;
pub const S_TNTBARREL_FLYING: state = 1388;
pub const S_TNTBARREL_EXPL7: state = 1387;
pub const S_TNTBARREL_EXPL6: state = 1386;
pub const S_TNTBARREL_EXPL5: state = 1385;
pub const S_TNTBARREL_EXPL4: state = 1384;
pub const S_TNTBARREL_EXPL3: state = 1383;
pub const S_TNTBARREL_EXPL2: state = 1382;
pub const S_TNTBARREL_EXPL1: state = 1381;
pub const S_TNTBARREL_STND1: state = 1380;
pub const S_OILLAMPFLARE: state = 1379;
pub const S_OILLAMP: state = 1378;
pub const S_ARIDSIGN_SHARPTURN: state = 1377;
pub const S_ARIDSIGN_CACTI: state = 1376;
pub const S_ARIDSIGN_CAUTION: state = 1375;
pub const S_CACTISMALLSEG: state = 1374;
pub const S_CACTITINYSEG: state = 1373;
pub const S_CACTI11: state = 1372;
pub const S_CACTI10: state = 1371;
pub const S_CACTI9: state = 1370;
pub const S_CACTI8: state = 1369;
pub const S_CACTI7: state = 1368;
pub const S_CACTI6: state = 1367;
pub const S_CACTI5: state = 1366;
pub const S_CACTI4: state = 1365;
pub const S_CACTI3: state = 1364;
pub const S_CACTI2: state = 1363;
pub const S_CACTI1: state = 1362;
pub const S_LITTLETUMBLEWEED_ROLL8: state = 1361;
pub const S_LITTLETUMBLEWEED_ROLL7: state = 1360;
pub const S_LITTLETUMBLEWEED_ROLL6: state = 1359;
pub const S_LITTLETUMBLEWEED_ROLL5: state = 1358;
pub const S_LITTLETUMBLEWEED_ROLL4: state = 1357;
pub const S_LITTLETUMBLEWEED_ROLL3: state = 1356;
pub const S_LITTLETUMBLEWEED_ROLL2: state = 1355;
pub const S_LITTLETUMBLEWEED_ROLL1: state = 1354;
pub const S_LITTLETUMBLEWEED: state = 1353;
pub const S_BIGTUMBLEWEED_ROLL8: state = 1352;
pub const S_BIGTUMBLEWEED_ROLL7: state = 1351;
pub const S_BIGTUMBLEWEED_ROLL6: state = 1350;
pub const S_BIGTUMBLEWEED_ROLL5: state = 1349;
pub const S_BIGTUMBLEWEED_ROLL4: state = 1348;
pub const S_BIGTUMBLEWEED_ROLL3: state = 1347;
pub const S_BIGTUMBLEWEED_ROLL2: state = 1346;
pub const S_BIGTUMBLEWEED_ROLL1: state = 1345;
pub const S_BIGTUMBLEWEED: state = 1344;
pub const S_BRAMBLES: state = 1343;
pub const S_SUSPICIOUSFACESTABBERSTATUE_BURST2: state = 1342;
pub const S_SUSPICIOUSFACESTABBERSTATUE_BURST1: state = 1341;
pub const S_SUSPICIOUSFACESTABBERSTATUE_WAIT: state = 1340;
pub const S_FACESTABBERSTATUE: state = 1339;
pub const S_CRAWLASTATUE: state = 1338;
pub const S_WAVINGFLAGSEG2: state = 1337;
pub const S_WAVINGFLAGSEG1: state = 1336;
pub const S_WAVINGFLAG: state = 1335;
pub const S_FIRETORCH: state = 1334;
pub const S_FLAMEHOLDER: state = 1333;
pub const S_CANDLEPRICKET: state = 1332;
pub const S_CANDLE: state = 1331;
pub const S_CEZBUSH2: state = 1330;
pub const S_CEZBUSH1: state = 1329;
pub const S_PINETREE: state = 1328;
pub const S_CEZBANNER2: state = 1327;
pub const S_CEZBANNER1: state = 1326;
pub const S_CEZPOLE: state = 1325;
pub const S_CEZFLOWER: state = 1324;
pub const S_BIGFIREBAR16: state = 1323;
pub const S_BIGFIREBAR15: state = 1322;
pub const S_BIGFIREBAR14: state = 1321;
pub const S_BIGFIREBAR13: state = 1320;
pub const S_BIGFIREBAR12: state = 1319;
pub const S_BIGFIREBAR11: state = 1318;
pub const S_BIGFIREBAR10: state = 1317;
pub const S_BIGFIREBAR9: state = 1316;
pub const S_BIGFIREBAR8: state = 1315;
pub const S_BIGFIREBAR7: state = 1314;
pub const S_BIGFIREBAR6: state = 1313;
pub const S_BIGFIREBAR5: state = 1312;
pub const S_BIGFIREBAR4: state = 1311;
pub const S_BIGFIREBAR3: state = 1310;
pub const S_BIGFIREBAR2: state = 1309;
pub const S_BIGFIREBAR1: state = 1308;
pub const S_SMALLFIREBAR16: state = 1307;
pub const S_SMALLFIREBAR15: state = 1306;
pub const S_SMALLFIREBAR14: state = 1305;
pub const S_SMALLFIREBAR13: state = 1304;
pub const S_SMALLFIREBAR12: state = 1303;
pub const S_SMALLFIREBAR11: state = 1302;
pub const S_SMALLFIREBAR10: state = 1301;
pub const S_SMALLFIREBAR9: state = 1300;
pub const S_SMALLFIREBAR8: state = 1299;
pub const S_SMALLFIREBAR7: state = 1298;
pub const S_SMALLFIREBAR6: state = 1297;
pub const S_SMALLFIREBAR5: state = 1296;
pub const S_SMALLFIREBAR4: state = 1295;
pub const S_SMALLFIREBAR3: state = 1294;
pub const S_SMALLFIREBAR2: state = 1293;
pub const S_SMALLFIREBAR1: state = 1292;
pub const S_REDSPRINGBALL5: state = 1291;
pub const S_REDSPRINGBALL4: state = 1290;
pub const S_REDSPRINGBALL3: state = 1289;
pub const S_REDSPRINGBALL2: state = 1288;
pub const S_REDSPRINGBALL: state = 1287;
pub const S_YELLOWSPRINGBALL5: state = 1286;
pub const S_YELLOWSPRINGBALL4: state = 1285;
pub const S_YELLOWSPRINGBALL3: state = 1284;
pub const S_YELLOWSPRINGBALL2: state = 1283;
pub const S_YELLOWSPRINGBALL: state = 1282;
pub const S_BIGGRABCHAIN: state = 1281;
pub const S_SMALLGRABCHAIN: state = 1280;
pub const S_BIGMACE: state = 1279;
pub const S_SMALLMACE: state = 1278;
pub const S_BIGMACECHAIN: state = 1277;
pub const S_SMALLMACECHAIN: state = 1276;
pub const S_SLING2: state = 1275;
pub const S_SLING1: state = 1274;
pub const S_EGGSTATUE1: state = 1273;
pub const S_FLAMEREST: state = 1272;
pub const S_FLAMEPARTICLE: state = 1271;
pub const S_FLAME: state = 1270;
pub const S_CEZCHAIN: state = 1269;
pub const S_LIGHTBEAM12: state = 1268;
pub const S_LIGHTBEAM11: state = 1267;
pub const S_LIGHTBEAM10: state = 1266;
pub const S_LIGHTBEAM9: state = 1265;
pub const S_LIGHTBEAM8: state = 1264;
pub const S_LIGHTBEAM7: state = 1263;
pub const S_LIGHTBEAM6: state = 1262;
pub const S_LIGHTBEAM5: state = 1261;
pub const S_LIGHTBEAM4: state = 1260;
pub const S_LIGHTBEAM3: state = 1259;
pub const S_LIGHTBEAM2: state = 1258;
pub const S_LIGHTBEAM1: state = 1257;
pub const S_DSZ2STALAGMITE: state = 1256;
pub const S_DSZSTALAGMITE: state = 1255;
pub const S_ANIMALGAESEG: state = 1254;
pub const S_ANIMALGAETOP2: state = 1253;
pub const S_ANIMALGAETOP1: state = 1252;
pub const S_KELP: state = 1251;
pub const S_BLUECRYSTAL1: state = 1250;
pub const S_CORAL5: state = 1249;
pub const S_CORAL4: state = 1248;
pub const S_CORAL3: state = 1247;
pub const S_CORAL2: state = 1246;
pub const S_CORAL1: state = 1245;
pub const S_DRIPC2: state = 1244;
pub const S_DRIPC1: state = 1243;
pub const S_DRIPB1: state = 1242;
pub const S_DRIPA4: state = 1241;
pub const S_DRIPA3: state = 1240;
pub const S_DRIPA2: state = 1239;
pub const S_DRIPA1: state = 1238;
pub const S_SEAWEED6: state = 1237;
pub const S_SEAWEED5: state = 1236;
pub const S_SEAWEED4: state = 1235;
pub const S_SEAWEED3: state = 1234;
pub const S_SEAWEED2: state = 1233;
pub const S_SEAWEED1: state = 1232;
pub const S_BIGGARGOYLE: state = 1231;
pub const S_GARGOYLE: state = 1230;
pub const S_ALARM1: state = 1229;
pub const S_THZTREEBRANCH13: state = 1228;
pub const S_THZTREEBRANCH12: state = 1227;
pub const S_THZTREEBRANCH11: state = 1226;
pub const S_THZTREEBRANCH10: state = 1225;
pub const S_THZTREEBRANCH9: state = 1224;
pub const S_THZTREEBRANCH8: state = 1223;
pub const S_THZTREEBRANCH7: state = 1222;
pub const S_THZTREEBRANCH6: state = 1221;
pub const S_THZTREEBRANCH5: state = 1220;
pub const S_THZTREEBRANCH4: state = 1219;
pub const S_THZTREEBRANCH3: state = 1218;
pub const S_THZTREEBRANCH2: state = 1217;
pub const S_THZTREEBRANCH1: state = 1216;
pub const S_THZTREE: state = 1215;
pub const S_THZFLOWERC: state = 1214;
pub const S_THZFLOWERB: state = 1213;
pub const S_THZFLOWERA: state = 1212;
pub const S_SPRINGTREE: state = 1211;
pub const S_BUSHREDTREE: state = 1210;
pub const S_BUSHTREE: state = 1209;
pub const S_POLYGONTREE: state = 1208;
pub const S_FHZPINKTREE: state = 1207;
pub const S_FHZTREE: state = 1206;
pub const S_CHECKERSUNSETTREE: state = 1205;
pub const S_CHECKERTREE: state = 1204;
pub const S_GFZCHERRYTREE: state = 1203;
pub const S_GFZBERRYTREE: state = 1202;
pub const S_GFZTREE: state = 1201;
pub const S_BUSH: state = 1200;
pub const S_BERRYBUSH: state = 1199;
pub const S_BLUEBERRYBUSH: state = 1198;
pub const S_GFZFLOWERC: state = 1197;
pub const S_GFZFLOWERB: state = 1196;
pub const S_GFZFLOWERA: state = 1195;
pub const S_TUTORIALFLOWERF16: state = 1194;
pub const S_TUTORIALFLOWERF15: state = 1193;
pub const S_TUTORIALFLOWERF14: state = 1192;
pub const S_TUTORIALFLOWERF13: state = 1191;
pub const S_TUTORIALFLOWERF12: state = 1190;
pub const S_TUTORIALFLOWERF11: state = 1189;
pub const S_TUTORIALFLOWERF10: state = 1188;
pub const S_TUTORIALFLOWERF9: state = 1187;
pub const S_TUTORIALFLOWERF8: state = 1186;
pub const S_TUTORIALFLOWERF7: state = 1185;
pub const S_TUTORIALFLOWERF6: state = 1184;
pub const S_TUTORIALFLOWERF5: state = 1183;
pub const S_TUTORIALFLOWERF4: state = 1182;
pub const S_TUTORIALFLOWERF3: state = 1181;
pub const S_TUTORIALFLOWERF2: state = 1180;
pub const S_TUTORIALFLOWERF1: state = 1179;
pub const S_TUTORIALFLOWER16: state = 1178;
pub const S_TUTORIALFLOWER15: state = 1177;
pub const S_TUTORIALFLOWER14: state = 1176;
pub const S_TUTORIALFLOWER13: state = 1175;
pub const S_TUTORIALFLOWER12: state = 1174;
pub const S_TUTORIALFLOWER11: state = 1173;
pub const S_TUTORIALFLOWER10: state = 1172;
pub const S_TUTORIALFLOWER9: state = 1171;
pub const S_TUTORIALFLOWER8: state = 1170;
pub const S_TUTORIALFLOWER7: state = 1169;
pub const S_TUTORIALFLOWER6: state = 1168;
pub const S_TUTORIALFLOWER5: state = 1167;
pub const S_TUTORIALFLOWER4: state = 1166;
pub const S_TUTORIALFLOWER3: state = 1165;
pub const S_TUTORIALFLOWER2: state = 1164;
pub const S_TUTORIALFLOWER1: state = 1163;
pub const S_TUTORIALLEAF16: state = 1162;
pub const S_TUTORIALLEAF15: state = 1161;
pub const S_TUTORIALLEAF14: state = 1160;
pub const S_TUTORIALLEAF13: state = 1159;
pub const S_TUTORIALLEAF12: state = 1158;
pub const S_TUTORIALLEAF11: state = 1157;
pub const S_TUTORIALLEAF10: state = 1156;
pub const S_TUTORIALLEAF9: state = 1155;
pub const S_TUTORIALLEAF8: state = 1154;
pub const S_TUTORIALLEAF7: state = 1153;
pub const S_TUTORIALLEAF6: state = 1152;
pub const S_TUTORIALLEAF5: state = 1151;
pub const S_TUTORIALLEAF4: state = 1150;
pub const S_TUTORIALLEAF3: state = 1149;
pub const S_TUTORIALLEAF2: state = 1148;
pub const S_TUTORIALLEAF1: state = 1147;
pub const S_LETTER: state = 1146;
pub const S_DEMONFIRE: state = 1145;
pub const S_ARROWBONK: state = 1144;
pub const S_ARROW: state = 1143;
pub const S_CANNONBALL1: state = 1142;
pub const S_TURRETLASEREXPLODE2: state = 1141;
pub const S_TURRETLASEREXPLODE1: state = 1140;
pub const S_TURRETLASER: state = 1139;
pub const S_JETBULLET2: state = 1138;
pub const S_JETBULLET1: state = 1137;
pub const S_MINE_BOOM4: state = 1136;
pub const S_MINE_BOOM3: state = 1135;
pub const S_MINE_BOOM2: state = 1134;
pub const S_MINE_BOOM1: state = 1133;
pub const S_MINE1: state = 1132;
pub const S_ENERGYBALL2: state = 1131;
pub const S_ENERGYBALL1: state = 1130;
pub const S_TORPEDO: state = 1129;
pub const S_LASERFLAME5: state = 1128;
pub const S_LASERFLAME4: state = 1127;
pub const S_LASERFLAME3: state = 1126;
pub const S_LASERFLAME2: state = 1125;
pub const S_LASERFLAME1: state = 1124;
pub const S_LASERFLASH: state = 1123;
pub const S_LASER2: state = 1122;
pub const S_LASER: state = 1121;
pub const S_ROCKET: state = 1120;
pub const S_THUNDERCOIN_ICON2: state = 1119;
pub const S_THUNDERCOIN_ICON1: state = 1118;
pub const S_BUBBLEWRAP_ICON2: state = 1117;
pub const S_BUBBLEWRAP_ICON1: state = 1116;
pub const S_FLAMEAURA_ICON2: state = 1115;
pub const S_FLAMEAURA_ICON1: state = 1114;
pub const S_SCORE10K_ICON2: state = 1113;
pub const S_SCORE10K_ICON1: state = 1112;
pub const S_SCORE1K_ICON2: state = 1111;
pub const S_SCORE1K_ICON1: state = 1110;
pub const S_RECYCLER_ICON2: state = 1109;
pub const S_RECYCLER_ICON1: state = 1108;
pub const S_GRAVITY_ICON2: state = 1107;
pub const S_GRAVITY_ICON1: state = 1106;
pub const S_MIXUP_ICON2: state = 1105;
pub const S_MIXUP_ICON1: state = 1104;
pub const S_EGGMAN_ICON2: state = 1103;
pub const S_EGGMAN_ICON1: state = 1102;
pub const S_1UP_ICON2: state = 1101;
pub const S_1UP_ICON1: state = 1100;
pub const S_INVULN_ICON2: state = 1099;
pub const S_INVULN_ICON1: state = 1098;
pub const S_SNEAKERS_ICON2: state = 1097;
pub const S_SNEAKERS_ICON1: state = 1096;
pub const S_ELEMENTAL_ICON2: state = 1095;
pub const S_ELEMENTAL_ICON1: state = 1094;
pub const S_WHIRLWIND_ICON2: state = 1093;
pub const S_WHIRLWIND_ICON1: state = 1092;
pub const S_ARMAGEDDON_ICON2: state = 1091;
pub const S_ARMAGEDDON_ICON1: state = 1090;
pub const S_FORCE_ICON2: state = 1089;
pub const S_FORCE_ICON1: state = 1088;
pub const S_ATTRACT_ICON2: state = 1087;
pub const S_ATTRACT_ICON1: state = 1086;
pub const S_PITY_ICON2: state = 1085;
pub const S_PITY_ICON1: state = 1084;
pub const S_RING_ICON2: state = 1083;
pub const S_RING_ICON1: state = 1082;
pub const S_BLUEBOX_POP2: state = 1081;
pub const S_BLUEBOX_POP1: state = 1080;
pub const S_RING_BLUEBOX2: state = 1079;
pub const S_RING_BLUEBOX1: state = 1078;
pub const S_REDBOX_POP2: state = 1077;
pub const S_REDBOX_POP1: state = 1076;
pub const S_RING_REDBOX2: state = 1075;
pub const S_RING_REDBOX1: state = 1074;
pub const S_THUNDERCOIN_GOLDBOX: state = 1073;
pub const S_BUBBLEWRAP_GOLDBOX: state = 1072;
pub const S_FLAMEAURA_GOLDBOX: state = 1071;
pub const S_GRAVITY_GOLDBOX: state = 1070;
pub const S_EGGMAN_GOLDBOX: state = 1069;
pub const S_INVULN_GOLDBOX: state = 1068;
pub const S_SNEAKERS_GOLDBOX: state = 1067;
pub const S_ELEMENTAL_GOLDBOX: state = 1066;
pub const S_WHIRLWIND_GOLDBOX: state = 1065;
pub const S_ARMAGEDDON_GOLDBOX: state = 1064;
pub const S_FORCE_GOLDBOX: state = 1063;
pub const S_ATTRACT_GOLDBOX: state = 1062;
pub const S_PITY_GOLDBOX: state = 1061;
pub const S_THUNDERCOIN_BOX: state = 1060;
pub const S_BUBBLEWRAP_BOX: state = 1059;
pub const S_FLAMEAURA_BOX: state = 1058;
pub const S_SCORE10K_BOX: state = 1057;
pub const S_SCORE1K_BOX: state = 1056;
pub const S_RECYCLER_BOX: state = 1055;
pub const S_GRAVITY_BOX: state = 1054;
pub const S_MIXUP_BOX: state = 1053;
pub const S_EGGMAN_BOX: state = 1052;
pub const S_1UP_BOX: state = 1051;
pub const S_INVULN_BOX: state = 1050;
pub const S_SNEAKERS_BOX: state = 1049;
pub const S_ELEMENTAL_BOX: state = 1048;
pub const S_WHIRLWIND_BOX: state = 1047;
pub const S_ARMAGEDDON_BOX: state = 1046;
pub const S_FORCE_BOX: state = 1045;
pub const S_ATTRACT_BOX: state = 1044;
pub const S_PITY_BOX: state = 1043;
pub const S_RING_BOX: state = 1042;
pub const S_MYSTERY_BOX: state = 1041;
pub const S_GOLDBOX_OFF7: state = 1040;
pub const S_GOLDBOX_OFF6: state = 1039;
pub const S_GOLDBOX_OFF5: state = 1038;
pub const S_GOLDBOX_OFF4: state = 1037;
pub const S_GOLDBOX_OFF3: state = 1036;
pub const S_GOLDBOX_OFF2: state = 1035;
pub const S_GOLDBOX_OFF1: state = 1034;
pub const S_GOLDBOX_FLICKER: state = 1033;
pub const S_BOX_POP2: state = 1032;
pub const S_BOX_POP1: state = 1031;
pub const S_BOX_FLICKER: state = 1030;
pub const S_BOXSPARKLE4: state = 1029;
pub const S_BOXSPARKLE3: state = 1028;
pub const S_BOXSPARKLE2: state = 1027;
pub const S_BOXSPARKLE1: state = 1026;
pub const S_CANNONLAUNCHER3: state = 1025;
pub const S_CANNONLAUNCHER2: state = 1024;
pub const S_CANNONLAUNCHER1: state = 1023;
pub const S_BIGMINE_BLAST5: state = 1022;
pub const S_BIGMINE_BLAST4: state = 1021;
pub const S_BIGMINE_BLAST3: state = 1020;
pub const S_BIGMINE_BLAST2: state = 1019;
pub const S_BIGMINE_BLAST1: state = 1018;
pub const S_BIGMINE_SET3: state = 1017;
pub const S_BIGMINE_SET2: state = 1016;
pub const S_BIGMINE_SET1: state = 1015;
pub const S_BIGMINE_ALERT3: state = 1014;
pub const S_BIGMINE_ALERT2: state = 1013;
pub const S_BIGMINE_ALERT1: state = 1012;
pub const S_BIGMINE_IDLE: state = 1011;
pub const S_STARPOST_ENDSPIN: state = 1010;
pub const S_STARPOST_SPIN: state = 1009;
pub const S_STARPOST_STARTSPIN: state = 1008;
pub const S_STARPOST_FLASH: state = 1007;
pub const S_STARPOST_IDLE: state = 1006;
pub const S_WALLSPIKED2: state = 1005;
pub const S_WALLSPIKED1: state = 1004;
pub const S_WALLSPIKEBASE: state = 1003;
pub const S_WALLSPIKE6: state = 1002;
pub const S_WALLSPIKE5: state = 1001;
pub const S_WALLSPIKE4: state = 1000;
pub const S_WALLSPIKE3: state = 999;
pub const S_WALLSPIKE2: state = 998;
pub const S_WALLSPIKE1: state = 997;
pub const S_SPIKED2: state = 996;
pub const S_SPIKED1: state = 995;
pub const S_SPIKE6: state = 994;
pub const S_SPIKE5: state = 993;
pub const S_SPIKE4: state = 992;
pub const S_SPIKE3: state = 991;
pub const S_SPIKE2: state = 990;
pub const S_SPIKE1: state = 989;
pub const S_TEAM_SPINFIRE6: state = 988;
pub const S_TEAM_SPINFIRE5: state = 987;
pub const S_TEAM_SPINFIRE4: state = 986;
pub const S_TEAM_SPINFIRE3: state = 985;
pub const S_TEAM_SPINFIRE2: state = 984;
pub const S_TEAM_SPINFIRE1: state = 983;
pub const S_SPINFIRE6: state = 982;
pub const S_SPINFIRE5: state = 981;
pub const S_SPINFIRE4: state = 980;
pub const S_SPINFIRE3: state = 979;
pub const S_SPINFIRE2: state = 978;
pub const S_SPINFIRE1: state = 977;
pub const S_SPIKEBALL8: state = 976;
pub const S_SPIKEBALL7: state = 975;
pub const S_SPIKEBALL6: state = 974;
pub const S_SPIKEBALL5: state = 973;
pub const S_SPIKEBALL4: state = 972;
pub const S_SPIKEBALL3: state = 971;
pub const S_SPIKEBALL2: state = 970;
pub const S_SPIKEBALL1: state = 969;
pub const S_CLEARSIGN: state = 968;
pub const S_EGGMANSIGN: state = 967;
pub const S_SIGNBOARD: state = 966;
pub const S_SIGNSTOP: state = 965;
pub const S_SIGNSLOW: state = 964;
pub const S_SIGNPLAYER: state = 963;
pub const S_SIGNSPIN6: state = 962;
pub const S_SIGNSPIN5: state = 961;
pub const S_SIGNSPIN4: state = 960;
pub const S_SIGNSPIN3: state = 959;
pub const S_SIGNSPIN2: state = 958;
pub const S_SIGNSPIN1: state = 957;
pub const S_SIGN: state = 956;
pub const S_BUBBLES4: state = 955;
pub const S_BUBBLES3: state = 954;
pub const S_BUBBLES2: state = 953;
pub const S_BUBBLES1: state = 952;
pub const S_SHRD3: state = 951;
pub const S_SHRD2: state = 950;
pub const S_SHRD1: state = 949;
pub const S_CEMG7: state = 948;
pub const S_CEMG6: state = 947;
pub const S_CEMG5: state = 946;
pub const S_CEMG4: state = 945;
pub const S_CEMG3: state = 944;
pub const S_CEMG2: state = 943;
pub const S_CEMG1: state = 942;
pub const S_EMBLEM26: state = 941;
pub const S_EMBLEM25: state = 940;
pub const S_EMBLEM24: state = 939;
pub const S_EMBLEM23: state = 938;
pub const S_EMBLEM22: state = 937;
pub const S_EMBLEM21: state = 936;
pub const S_EMBLEM20: state = 935;
pub const S_EMBLEM19: state = 934;
pub const S_EMBLEM18: state = 933;
pub const S_EMBLEM17: state = 932;
pub const S_EMBLEM16: state = 931;
pub const S_EMBLEM15: state = 930;
pub const S_EMBLEM14: state = 929;
pub const S_EMBLEM13: state = 928;
pub const S_EMBLEM12: state = 927;
pub const S_EMBLEM11: state = 926;
pub const S_EMBLEM10: state = 925;
pub const S_EMBLEM9: state = 924;
pub const S_EMBLEM8: state = 923;
pub const S_EMBLEM7: state = 922;
pub const S_EMBLEM6: state = 921;
pub const S_EMBLEM5: state = 920;
pub const S_EMBLEM4: state = 919;
pub const S_EMBLEM3: state = 918;
pub const S_EMBLEM2: state = 917;
pub const S_EMBLEM1: state = 916;
pub const S_BLUEFLAG: state = 915;
pub const S_REDFLAG: state = 914;
pub const S_TOKEN: state = 913;
pub const S_TEAMRING: state = 912;
pub const S_GRAVWELLRED: state = 911;
pub const S_GRAVWELLGREEN: state = 910;
pub const S_NIGHTSSTARXMAS: state = 909;
pub const S_NIGHTSSTAR: state = 908;
pub const S_NIGHTSCHIPBONUS: state = 907;
pub const S_NIGHTSCHIP: state = 906;
pub const S_BOMBSPHERE4: state = 905;
pub const S_BOMBSPHERE3: state = 904;
pub const S_BOMBSPHERE2: state = 903;
pub const S_BOMBSPHERE1: state = 902;
pub const S_BLUESPHERESPARK: state = 901;
pub const S_BLUESPHEREBONUS: state = 900;
pub const S_BLUESPHERE: state = 899;
pub const S_RING: state = 898;
pub const S_MSSHIELD_F2: state = 897;
pub const S_MSSHIELD_F1: state = 896;
pub const S_METALSONIC_FLEE2: state = 895;
pub const S_METALSONIC_FLEE1: state = 894;
pub const S_METALSONIC_DEATH4: state = 893;
pub const S_METALSONIC_DEATH3: state = 892;
pub const S_METALSONIC_DEATH2: state = 891;
pub const S_METALSONIC_DEATH1: state = 890;
pub const S_METALSONIC_PAIN: state = 889;
pub const S_METALSONIC_SHOOT: state = 888;
pub const S_METALSONIC_BADBOUNCE: state = 887;
pub const S_METALSONIC_BOUNCE: state = 886;
pub const S_METALSONIC_DASH: state = 885;
pub const S_METALSONIC_GATHER: state = 884;
pub const S_METALSONIC_RAISE: state = 883;
pub const S_METALSONIC_STUN: state = 882;
pub const S_METALSONIC_VECTOR: state = 881;
pub const S_METALSONIC_FLOAT: state = 880;
pub const S_METALSONIC_RACE: state = 879;
pub const S_CYBRAKDEMONVILEEXPLOSION3: state = 878;
pub const S_CYBRAKDEMONVILEEXPLOSION2: state = 877;
pub const S_CYBRAKDEMONVILEEXPLOSION1: state = 876;
pub const S_CYBRAKDEMONNAPALMFLAME_DIE: state = 875;
pub const S_CYBRAKDEMONNAPALMFLAME_FLY6: state = 874;
pub const S_CYBRAKDEMONNAPALMFLAME_FLY5: state = 873;
pub const S_CYBRAKDEMONNAPALMFLAME_FLY4: state = 872;
pub const S_CYBRAKDEMONNAPALMFLAME_FLY3: state = 871;
pub const S_CYBRAKDEMONNAPALMFLAME_FLY2: state = 870;
pub const S_CYBRAKDEMONNAPALMFLAME_FLY1: state = 869;
pub const S_CYBRAKDEMONNAPALMBOMBSMALL_DIE5: state = 868;
pub const S_CYBRAKDEMONNAPALMBOMBSMALL_DIE4: state = 867;
pub const S_CYBRAKDEMONNAPALMBOMBSMALL_DIE3: state = 866;
pub const S_CYBRAKDEMONNAPALMBOMBSMALL_DIE2: state = 865;
pub const S_CYBRAKDEMONNAPALMBOMBSMALL_DIE1: state = 864;
pub const S_CYBRAKDEMONNAPALMBOMBSMALL: state = 863;
pub const S_CYBRAKDEMONNAPALMBOMBLARGE_DIE4: state = 862;
pub const S_CYBRAKDEMONNAPALMBOMBLARGE_DIE3: state = 861;
pub const S_CYBRAKDEMONNAPALMBOMBLARGE_DIE2: state = 860;
pub const S_CYBRAKDEMONNAPALMBOMBLARGE_DIE1: state = 859;
pub const S_CYBRAKDEMONNAPALMBOMBLARGE_FLY4: state = 858;
pub const S_CYBRAKDEMONNAPALMBOMBLARGE_FLY3: state = 857;
pub const S_CYBRAKDEMONNAPALMBOMBLARGE_FLY2: state = 856;
pub const S_CYBRAKDEMONNAPALMBOMBLARGE_FLY1: state = 855;
pub const S_CYBRAKDEMONTARGETDOT: state = 854;
pub const S_CYBRAKDEMONTARGETRETICULE14: state = 853;
pub const S_CYBRAKDEMONTARGETRETICULE13: state = 852;
pub const S_CYBRAKDEMONTARGETRETICULE12: state = 851;
pub const S_CYBRAKDEMONTARGETRETICULE11: state = 850;
pub const S_CYBRAKDEMONTARGETRETICULE10: state = 849;
pub const S_CYBRAKDEMONTARGETRETICULE9: state = 848;
pub const S_CYBRAKDEMONTARGETRETICULE8: state = 847;
pub const S_CYBRAKDEMONTARGETRETICULE7: state = 846;
pub const S_CYBRAKDEMONTARGETRETICULE6: state = 845;
pub const S_CYBRAKDEMONTARGETRETICULE5: state = 844;
pub const S_CYBRAKDEMONTARGETRETICULE4: state = 843;
pub const S_CYBRAKDEMONTARGETRETICULE3: state = 842;
pub const S_CYBRAKDEMONTARGETRETICULE2: state = 841;
pub const S_CYBRAKDEMONTARGETRETICULE1: state = 840;
pub const S_CYBRAKDEMONELECTRICBARRIER_REVIVE3: state = 839;
pub const S_CYBRAKDEMONELECTRICBARRIER_REVIVE2: state = 838;
pub const S_CYBRAKDEMONELECTRICBARRIER_REVIVE1: state = 837;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOMLOOP: state = 836;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOMFAIL: state = 835;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOM12: state = 834;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOM11: state = 833;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOM10: state = 832;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOM9: state = 831;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOM8: state = 830;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOM7: state = 829;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOM6: state = 828;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOM5: state = 827;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOM4: state = 826;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOM3: state = 825;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOM2: state = 824;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOM1: state = 823;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOMCHOOSE: state = 822;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOMSUCCESS: state = 821;
pub const S_CYBRAKDEMONELECTRICBARRIER_SPARK_RANDOMCHECK: state = 820;
pub const S_CYBRAKDEMONELECTRICBARRIER_DIE3: state = 819;
pub const S_CYBRAKDEMONELECTRICBARRIER_DIE2: state = 818;
pub const S_CYBRAKDEMONELECTRICBARRIER_DIE1: state = 817;
pub const S_CYBRAKDEMONELECTRICBARRIER24: state = 816;
pub const S_CYBRAKDEMONELECTRICBARRIER23: state = 815;
pub const S_CYBRAKDEMONELECTRICBARRIER22: state = 814;
pub const S_CYBRAKDEMONELECTRICBARRIER21: state = 813;
pub const S_CYBRAKDEMONELECTRICBARRIER20: state = 812;
pub const S_CYBRAKDEMONELECTRICBARRIER19: state = 811;
pub const S_CYBRAKDEMONELECTRICBARRIER18: state = 810;
pub const S_CYBRAKDEMONELECTRICBARRIER17: state = 809;
pub const S_CYBRAKDEMONELECTRICBARRIER16: state = 808;
pub const S_CYBRAKDEMONELECTRICBARRIER15: state = 807;
pub const S_CYBRAKDEMONELECTRICBARRIER14: state = 806;
pub const S_CYBRAKDEMONELECTRICBARRIER13: state = 805;
pub const S_CYBRAKDEMONELECTRICBARRIER12: state = 804;
pub const S_CYBRAKDEMONELECTRICBARRIER11: state = 803;
pub const S_CYBRAKDEMONELECTRICBARRIER10: state = 802;
pub const S_CYBRAKDEMONELECTRICBARRIER9: state = 801;
pub const S_CYBRAKDEMONELECTRICBARRIER8: state = 800;
pub const S_CYBRAKDEMONELECTRICBARRIER7: state = 799;
pub const S_CYBRAKDEMONELECTRICBARRIER6: state = 798;
pub const S_CYBRAKDEMONELECTRICBARRIER5: state = 797;
pub const S_CYBRAKDEMONELECTRICBARRIER4: state = 796;
pub const S_CYBRAKDEMONELECTRICBARRIER3: state = 795;
pub const S_CYBRAKDEMONELECTRICBARRIER2: state = 794;
pub const S_CYBRAKDEMONELECTRICBARRIER1: state = 793;
pub const S_CYBRAKDEMONELECTRICBARRIER_PLAYSOUND: state = 792;
pub const S_CYBRAKDEMONELECTRICBARRIER_INIT2: state = 791;
pub const S_CYBRAKDEMONELECTRICBARRIER_INIT1: state = 790;
pub const S_CYBRAKDEMONFLAMEREST: state = 789;
pub const S_CYBRAKDEMONFLAMESHOT_DIE: state = 788;
pub const S_CYBRAKDEMONFLAMESHOT_FLY3: state = 787;
pub const S_CYBRAKDEMONFLAMESHOT_FLY2: state = 786;
pub const S_CYBRAKDEMONFLAMESHOT_FLY1: state = 785;
pub const S_CYBRAKDEMONMISSILE_EXPLODE3: state = 784;
pub const S_CYBRAKDEMONMISSILE_EXPLODE2: state = 783;
pub const S_CYBRAKDEMONMISSILE_EXPLODE1: state = 782;
pub const S_CYBRAKDEMONMISSILE: state = 781;
pub const S_CYBRAKDEMON_INVINCIBLERIZE: state = 780;
pub const S_CYBRAKDEMON_DEINVINCIBLERIZE: state = 779;
pub const S_CYBRAKDEMON_DIE8: state = 778;
pub const S_CYBRAKDEMON_DIE7: state = 777;
pub const S_CYBRAKDEMON_DIE6: state = 776;
pub const S_CYBRAKDEMON_DIE5: state = 775;
pub const S_CYBRAKDEMON_DIE4: state = 774;
pub const S_CYBRAKDEMON_DIE3: state = 773;
pub const S_CYBRAKDEMON_DIE2: state = 772;
pub const S_CYBRAKDEMON_DIE1: state = 771;
pub const S_CYBRAKDEMON_PAIN3: state = 770;
pub const S_CYBRAKDEMON_PAIN2: state = 769;
pub const S_CYBRAKDEMON_PAIN1: state = 768;
pub const S_CYBRAKDEMON_FINISH_ATTACK2: state = 767;
pub const S_CYBRAKDEMON_FINISH_ATTACK1: state = 766;
pub const S_CYBRAKDEMON_NAPALM_ATTACK3: state = 765;
pub const S_CYBRAKDEMON_NAPALM_ATTACK2: state = 764;
pub const S_CYBRAKDEMON_NAPALM_ATTACK1: state = 763;
pub const S_CYBRAKDEMON_VILE_ATTACK6: state = 762;
pub const S_CYBRAKDEMON_VILE_ATTACK5: state = 761;
pub const S_CYBRAKDEMON_VILE_ATTACK4: state = 760;
pub const S_CYBRAKDEMON_VILE_ATTACK3: state = 759;
pub const S_CYBRAKDEMON_VILE_ATTACK2: state = 758;
pub const S_CYBRAKDEMON_VILE_ATTACK1: state = 757;
pub const S_CYBRAKDEMON_CHOOSE_ATTACK2: state = 756;
pub const S_CYBRAKDEMON_FLAME_ATTACK4: state = 755;
pub const S_CYBRAKDEMON_FLAME_ATTACK3: state = 754;
pub const S_CYBRAKDEMON_FLAME_ATTACK2: state = 753;
pub const S_CYBRAKDEMON_FLAME_ATTACK1: state = 752;
pub const S_CYBRAKDEMON_MISSILE_ATTACK6: state = 751;
pub const S_CYBRAKDEMON_MISSILE_ATTACK5: state = 750;
pub const S_CYBRAKDEMON_MISSILE_ATTACK4: state = 749;
pub const S_CYBRAKDEMON_MISSILE_ATTACK3: state = 748;
pub const S_CYBRAKDEMON_MISSILE_ATTACK2: state = 747;
pub const S_CYBRAKDEMON_MISSILE_ATTACK1: state = 746;
pub const S_CYBRAKDEMON_CHOOSE_ATTACK1: state = 745;
pub const S_CYBRAKDEMON_WALK6: state = 744;
pub const S_CYBRAKDEMON_WALK5: state = 743;
pub const S_CYBRAKDEMON_WALK4: state = 742;
pub const S_CYBRAKDEMON_WALK3: state = 741;
pub const S_CYBRAKDEMON_WALK2: state = 740;
pub const S_CYBRAKDEMON_WALK1: state = 739;
pub const S_CYBRAKDEMON_IDLE: state = 738;
pub const S_BLACKEGG_MISSILE: state = 737;
pub const S_BLACKEGG_GOOP7: state = 736;
pub const S_BLACKEGG_GOOP6: state = 735;
pub const S_BLACKEGG_GOOP5: state = 734;
pub const S_BLACKEGG_GOOP4: state = 733;
pub const S_BLACKEGG_GOOP3: state = 732;
pub const S_BLACKEGG_GOOP2: state = 731;
pub const S_BLACKEGG_GOOP1: state = 730;
pub const S_BLACKEGG_HELPER: state = 729;
pub const S_BLACKEGG_DESTROYPLAT3: state = 728;
pub const S_BLACKEGG_DESTROYPLAT2: state = 727;
pub const S_BLACKEGG_DESTROYPLAT1: state = 726;
pub const S_BLACKEGG_JUMP2: state = 725;
pub const S_BLACKEGG_JUMP1: state = 724;
pub const S_BLACKEGG_GOOP: state = 723;
pub const S_BLACKEGG_MISSILE3: state = 722;
pub const S_BLACKEGG_MISSILE2: state = 721;
pub const S_BLACKEGG_MISSILE1: state = 720;
pub const S_BLACKEGG_DIE5: state = 719;
pub const S_BLACKEGG_DIE4: state = 718;
pub const S_BLACKEGG_DIE3: state = 717;
pub const S_BLACKEGG_DIE2: state = 716;
pub const S_BLACKEGG_DIE1: state = 715;
pub const S_BLACKEGG_HITFACE4: state = 714;
pub const S_BLACKEGG_HITFACE3: state = 713;
pub const S_BLACKEGG_HITFACE2: state = 712;
pub const S_BLACKEGG_HITFACE1: state = 711;
pub const S_BLACKEGG_PAIN35: state = 710;
pub const S_BLACKEGG_PAIN34: state = 709;
pub const S_BLACKEGG_PAIN33: state = 708;
pub const S_BLACKEGG_PAIN32: state = 707;
pub const S_BLACKEGG_PAIN31: state = 706;
pub const S_BLACKEGG_PAIN30: state = 705;
pub const S_BLACKEGG_PAIN29: state = 704;
pub const S_BLACKEGG_PAIN28: state = 703;
pub const S_BLACKEGG_PAIN27: state = 702;
pub const S_BLACKEGG_PAIN26: state = 701;
pub const S_BLACKEGG_PAIN25: state = 700;
pub const S_BLACKEGG_PAIN24: state = 699;
pub const S_BLACKEGG_PAIN23: state = 698;
pub const S_BLACKEGG_PAIN22: state = 697;
pub const S_BLACKEGG_PAIN21: state = 696;
pub const S_BLACKEGG_PAIN20: state = 695;
pub const S_BLACKEGG_PAIN19: state = 694;
pub const S_BLACKEGG_PAIN18: state = 693;
pub const S_BLACKEGG_PAIN17: state = 692;
pub const S_BLACKEGG_PAIN16: state = 691;
pub const S_BLACKEGG_PAIN15: state = 690;
pub const S_BLACKEGG_PAIN14: state = 689;
pub const S_BLACKEGG_PAIN13: state = 688;
pub const S_BLACKEGG_PAIN12: state = 687;
pub const S_BLACKEGG_PAIN11: state = 686;
pub const S_BLACKEGG_PAIN10: state = 685;
pub const S_BLACKEGG_PAIN9: state = 684;
pub const S_BLACKEGG_PAIN8: state = 683;
pub const S_BLACKEGG_PAIN7: state = 682;
pub const S_BLACKEGG_PAIN6: state = 681;
pub const S_BLACKEGG_PAIN5: state = 680;
pub const S_BLACKEGG_PAIN4: state = 679;
pub const S_BLACKEGG_PAIN3: state = 678;
pub const S_BLACKEGG_PAIN2: state = 677;
pub const S_BLACKEGG_PAIN1: state = 676;
pub const S_BLACKEGG_SHOOT2: state = 675;
pub const S_BLACKEGG_SHOOT1: state = 674;
pub const S_BLACKEGG_WALK6: state = 673;
pub const S_BLACKEGG_WALK5: state = 672;
pub const S_BLACKEGG_WALK4: state = 671;
pub const S_BLACKEGG_WALK3: state = 670;
pub const S_BLACKEGG_WALK2: state = 669;
pub const S_BLACKEGG_WALK1: state = 668;
pub const S_BLACKEGG_STND2: state = 667;
pub const S_BLACKEGG_STND: state = 666;
pub const S_FSGND: state = 665;
pub const S_FSGNC: state = 664;
pub const S_FSGNB: state = 663;
pub const S_FSGNA: state = 662;
pub const S_TNTDUST_8: state = 661;
pub const S_TNTDUST_7: state = 660;
pub const S_TNTDUST_6: state = 659;
pub const S_TNTDUST_5: state = 658;
pub const S_TNTDUST_4: state = 657;
pub const S_TNTDUST_3: state = 656;
pub const S_TNTDUST_2: state = 655;
pub const S_TNTDUST_1: state = 654;
pub const S_FBOMB_EXPL6: state = 653;
pub const S_FBOMB_EXPL5: state = 652;
pub const S_FBOMB_EXPL4: state = 651;
pub const S_FBOMB_EXPL3: state = 650;
pub const S_FBOMB_EXPL2: state = 649;
pub const S_FBOMB_EXPL1: state = 648;
pub const S_FBOMB2: state = 647;
pub const S_FBOMB1: state = 646;
pub const S_PROJECTORLIGHT5: state = 645;
pub const S_PROJECTORLIGHT4: state = 644;
pub const S_PROJECTORLIGHT3: state = 643;
pub const S_PROJECTORLIGHT2: state = 642;
pub const S_PROJECTORLIGHT1: state = 641;
pub const S_VWREB: state = 640;
pub const S_VWREF: state = 639;
pub const S_ALART2: state = 638;
pub const S_ALART1: state = 637;
pub const S_BROKENROBOTF: state = 636;
pub const S_BROKENROBOTE: state = 635;
pub const S_BROKENROBOTD: state = 634;
pub const S_BROKENROBOTC: state = 633;
pub const S_BROKENROBOTB: state = 632;
pub const S_BROKENROBOTA: state = 631;
pub const S_BROKENROBOTRANDOM: state = 630;
pub const S_FANG_KO: state = 629;
pub const S_FANG_FLEEBOUNCE2: state = 628;
pub const S_FANG_FLEEBOUNCE1: state = 627;
pub const S_FANG_FLEEPATHING2: state = 626;
pub const S_FANG_FLEEPATHING1: state = 625;
pub const S_FANG_DIE8: state = 624;
pub const S_FANG_DIE7: state = 623;
pub const S_FANG_DIE6: state = 622;
pub const S_FANG_DIE5: state = 621;
pub const S_FANG_DIE4: state = 620;
pub const S_FANG_DIE3: state = 619;
pub const S_FANG_DIE2: state = 618;
pub const S_FANG_DIE1: state = 617;
pub const S_FANG_PINCHLOBSHOT4: state = 616;
pub const S_FANG_PINCHLOBSHOT3: state = 615;
pub const S_FANG_PINCHLOBSHOT2: state = 614;
pub const S_FANG_PINCHLOBSHOT1: state = 613;
pub const S_FANG_PINCHLOBSHOT0: state = 612;
pub const S_FANG_PINCHSKID2: state = 611;
pub const S_FANG_PINCHSKID1: state = 610;
pub const S_FANG_PINCHFALL2: state = 609;
pub const S_FANG_PINCHFALL1: state = 608;
pub const S_FANG_PINCHFALL0: state = 607;
pub const S_FANG_PINCHBOUNCE4: state = 606;
pub const S_FANG_PINCHBOUNCE3: state = 605;
pub const S_FANG_PINCHBOUNCE2: state = 604;
pub const S_FANG_PINCHBOUNCE1: state = 603;
pub const S_FANG_PINCHBOUNCE0: state = 602;
pub const S_FANG_PINCHPATHING: state = 601;
pub const S_FANG_PINCHPATHINGSTART2: state = 600;
pub const S_FANG_PINCHPATHINGSTART1: state = 599;
pub const S_FANG_WALLHIT: state = 598;
pub const S_FANG_WAIT2: state = 597;
pub const S_FANG_WAIT1: state = 596;
pub const S_FANG_LOBSHOT2: state = 595;
pub const S_FANG_LOBSHOT1: state = 594;
pub const S_FANG_LOBSHOT0: state = 593;
pub const S_FANG_FIREREPEAT: state = 592;
pub const S_FANG_FIRE4: state = 591;
pub const S_FANG_FIRE3: state = 590;
pub const S_FANG_FIRE2: state = 589;
pub const S_FANG_FIRE1: state = 588;
pub const S_FANG_FIRESTART2: state = 587;
pub const S_FANG_FIRESTART1: state = 586;
pub const S_FANG_CHOOSEATTACK: state = 585;
pub const S_FANG_SKID3: state = 584;
pub const S_FANG_SKID2: state = 583;
pub const S_FANG_SKID1: state = 582;
pub const S_FANG_PATHINGCONT3: state = 581;
pub const S_FANG_PATHINGCONT2: state = 580;
pub const S_FANG_PATHINGCONT1: state = 579;
pub const S_FANG_CHECKPATH2: state = 578;
pub const S_FANG_CHECKPATH1: state = 577;
pub const S_FANG_FALL2: state = 576;
pub const S_FANG_FALL1: state = 575;
pub const S_FANG_BOUNCE4: state = 574;
pub const S_FANG_BOUNCE3: state = 573;
pub const S_FANG_BOUNCE2: state = 572;
pub const S_FANG_BOUNCE1: state = 571;
pub const S_FANG_PATHING: state = 570;
pub const S_FANG_PATHINGSTART2: state = 569;
pub const S_FANG_PATHINGSTART1: state = 568;
pub const S_FANG_PAIN2: state = 567;
pub const S_FANG_PAIN1: state = 566;
pub const S_FANG_IDLE8: state = 565;
pub const S_FANG_IDLE7: state = 564;
pub const S_FANG_IDLE6: state = 563;
pub const S_FANG_IDLE5: state = 562;
pub const S_FANG_IDLE4: state = 561;
pub const S_FANG_IDLE3: state = 560;
pub const S_FANG_IDLE2: state = 559;
pub const S_FANG_IDLE1: state = 558;
pub const S_FANG_IDLE0: state = 557;
pub const S_FANG_CLONE4: state = 556;
pub const S_FANG_CLONE3: state = 555;
pub const S_FANG_CLONE2: state = 554;
pub const S_FANG_CLONE1: state = 553;
pub const S_FANG_INTRO12: state = 552;
pub const S_FANG_INTRO11: state = 551;
pub const S_FANG_INTRO10: state = 550;
pub const S_FANG_INTRO9: state = 549;
pub const S_FANG_INTRO8: state = 548;
pub const S_FANG_INTRO7: state = 547;
pub const S_FANG_INTRO6: state = 546;
pub const S_FANG_INTRO5: state = 545;
pub const S_FANG_INTRO4: state = 544;
pub const S_FANG_INTRO3: state = 543;
pub const S_FANG_INTRO2: state = 542;
pub const S_FANG_INTRO1: state = 541;
pub const S_FANG_INTRO0: state = 540;
pub const S_FANG_SETUP: state = 539;
pub const S_EGGROBOJET: state = 538;
pub const S_EGGROBO1_PISSED: state = 537;
pub const S_EGGROBO1_BSLAP2: state = 536;
pub const S_EGGROBO1_BSLAP1: state = 535;
pub const S_EGGROBO1_STND: state = 534;
pub const S_JETFLAME: state = 533;
pub const S_EGGMOBILE4_MACE_DIE3: state = 532;
pub const S_EGGMOBILE4_MACE_DIE2: state = 531;
pub const S_EGGMOBILE4_MACE_DIE1: state = 530;
pub const S_EGGMOBILE4_MACE: state = 529;
pub const S_EGGMOBILE4_FLEE2: state = 528;
pub const S_EGGMOBILE4_FLEE1: state = 527;
pub const S_EGGMOBILE4_DIE4: state = 526;
pub const S_EGGMOBILE4_DIE3: state = 525;
pub const S_EGGMOBILE4_DIE2: state = 524;
pub const S_EGGMOBILE4_DIE1: state = 523;
pub const S_EGGMOBILE4_PAIN2: state = 522;
pub const S_EGGMOBILE4_PAIN1: state = 521;
pub const S_EGGMOBILE4_RAISE2: state = 520;
pub const S_EGGMOBILE4_RAISE1: state = 519;
pub const S_EGGMOBILE4_RATK6: state = 518;
pub const S_EGGMOBILE4_RATK5: state = 517;
pub const S_EGGMOBILE4_RATK4: state = 516;
pub const S_EGGMOBILE4_RATK3: state = 515;
pub const S_EGGMOBILE4_RATK2: state = 514;
pub const S_EGGMOBILE4_RATK1: state = 513;
pub const S_EGGMOBILE4_LATK6: state = 512;
pub const S_EGGMOBILE4_LATK5: state = 511;
pub const S_EGGMOBILE4_LATK4: state = 510;
pub const S_EGGMOBILE4_LATK3: state = 509;
pub const S_EGGMOBILE4_LATK2: state = 508;
pub const S_EGGMOBILE4_LATK1: state = 507;
pub const S_EGGMOBILE4_STND: state = 506;
pub const S_SHOCKWAVE2: state = 505;
pub const S_SHOCKWAVE1: state = 504;
pub const S_BOSSSEBH2: state = 503;
pub const S_BOSSSEBH1: state = 502;
pub const S_FAKEMOBILE_DIE2: state = 501;
pub const S_FAKEMOBILE_DIE1: state = 500;
pub const S_FAKEMOBILE_ATK3D: state = 499;
pub const S_FAKEMOBILE_ATK3C: state = 498;
pub const S_FAKEMOBILE_ATK3B: state = 497;
pub const S_FAKEMOBILE_ATK3A: state = 496;
pub const S_FAKEMOBILE_ATK2: state = 495;
pub const S_FAKEMOBILE_ATK1: state = 494;
pub const S_FAKEMOBILE: state = 493;
pub const S_FAKEMOBILE_INIT: state = 492;
pub const S_EGGMOBILE3_FLEE2: state = 491;
pub const S_EGGMOBILE3_FLEE1: state = 490;
pub const S_EGGMOBILE3_DIE4: state = 489;
pub const S_EGGMOBILE3_DIE3: state = 488;
pub const S_EGGMOBILE3_DIE2: state = 487;
pub const S_EGGMOBILE3_DIE1: state = 486;
pub const S_EGGMOBILE3_PAIN2: state = 485;
pub const S_EGGMOBILE3_PAIN: state = 484;
pub const S_EGGMOBILE3_ROFL: state = 483;
pub const S_EGGMOBILE3_ATK5: state = 482;
pub const S_EGGMOBILE3_ATK4: state = 481;
pub const S_EGGMOBILE3_ATK3D: state = 480;
pub const S_EGGMOBILE3_ATK3C: state = 479;
pub const S_EGGMOBILE3_ATK3B: state = 478;
pub const S_EGGMOBILE3_ATK3A: state = 477;
pub const S_EGGMOBILE3_ATK2: state = 476;
pub const S_EGGMOBILE3_ATK1: state = 475;
pub const S_EGGMOBILE3_SHOCK: state = 474;
pub const S_EGGMOBILE3_STND: state = 473;
pub const S_GOOPTRAIL: state = 472;
pub const S_GOOP3: state = 471;
pub const S_GOOP2: state = 470;
pub const S_GOOP1: state = 469;
pub const S_BOSSSPIGOT: state = 468;
pub const S_BOSSTANK2: state = 467;
pub const S_BOSSTANK1: state = 466;
pub const S_EGGMOBILE2_FLEE2: state = 465;
pub const S_EGGMOBILE2_FLEE1: state = 464;
pub const S_EGGMOBILE2_DIE4: state = 463;
pub const S_EGGMOBILE2_DIE3: state = 462;
pub const S_EGGMOBILE2_DIE2: state = 461;
pub const S_EGGMOBILE2_DIE1: state = 460;
pub const S_EGGMOBILE2_PAIN2: state = 459;
pub const S_EGGMOBILE2_PAIN: state = 458;
pub const S_EGGMOBILE2_POGO7: state = 457;
pub const S_EGGMOBILE2_POGO6: state = 456;
pub const S_EGGMOBILE2_POGO5: state = 455;
pub const S_EGGMOBILE2_POGO4: state = 454;
pub const S_EGGMOBILE2_POGO3: state = 453;
pub const S_EGGMOBILE2_POGO2: state = 452;
pub const S_EGGMOBILE2_POGO1: state = 451;
pub const S_EGGMOBILE2_STND: state = 450;
pub const S_BOSSEGLZ2: state = 449;
pub const S_BOSSEGLZ1: state = 448;
pub const S_EGGMOBILE_TARGET: state = 447;
pub const S_EGGMOBILE_BALL: state = 446;
pub const S_EGGMOBILE_FLEE2: state = 445;
pub const S_EGGMOBILE_FLEE1: state = 444;
pub const S_EGGMOBILE_DIE4: state = 443;
pub const S_EGGMOBILE_DIE3: state = 442;
pub const S_EGGMOBILE_DIE2: state = 441;
pub const S_EGGMOBILE_DIE1: state = 440;
pub const S_EGGMOBILE_PAIN2: state = 439;
pub const S_EGGMOBILE_PAIN: state = 438;
pub const S_EGGMOBILE_PANIC15: state = 437;
pub const S_EGGMOBILE_PANIC14: state = 436;
pub const S_EGGMOBILE_PANIC13: state = 435;
pub const S_EGGMOBILE_PANIC12: state = 434;
pub const S_EGGMOBILE_PANIC11: state = 433;
pub const S_EGGMOBILE_PANIC10: state = 432;
pub const S_EGGMOBILE_PANIC9: state = 431;
pub const S_EGGMOBILE_PANIC8: state = 430;
pub const S_EGGMOBILE_PANIC7: state = 429;
pub const S_EGGMOBILE_PANIC6: state = 428;
pub const S_EGGMOBILE_PANIC5: state = 427;
pub const S_EGGMOBILE_PANIC4: state = 426;
pub const S_EGGMOBILE_PANIC3: state = 425;
pub const S_EGGMOBILE_PANIC2: state = 424;
pub const S_EGGMOBILE_PANIC1: state = 423;
pub const S_EGGMOBILE_RATK9: state = 422;
pub const S_EGGMOBILE_RATK8: state = 421;
pub const S_EGGMOBILE_RATK7: state = 420;
pub const S_EGGMOBILE_RATK6: state = 419;
pub const S_EGGMOBILE_RATK5: state = 418;
pub const S_EGGMOBILE_RATK4: state = 417;
pub const S_EGGMOBILE_RATK3: state = 416;
pub const S_EGGMOBILE_RATK2: state = 415;
pub const S_EGGMOBILE_RATK1: state = 414;
pub const S_EGGMOBILE_LATK9: state = 413;
pub const S_EGGMOBILE_LATK8: state = 412;
pub const S_EGGMOBILE_LATK7: state = 411;
pub const S_EGGMOBILE_LATK6: state = 410;
pub const S_EGGMOBILE_LATK5: state = 409;
pub const S_EGGMOBILE_LATK4: state = 408;
pub const S_EGGMOBILE_LATK3: state = 407;
pub const S_EGGMOBILE_LATK2: state = 406;
pub const S_EGGMOBILE_LATK1: state = 405;
pub const S_EGGMOBILE_ROFL: state = 404;
pub const S_EGGMOBILE_STND: state = 403;
pub const S_JETFUME1: state = 402;
pub const S_SONIC3KBOSSEXPLOSION6: state = 401;
pub const S_SONIC3KBOSSEXPLOSION5: state = 400;
pub const S_SONIC3KBOSSEXPLOSION4: state = 399;
pub const S_SONIC3KBOSSEXPLOSION3: state = 398;
pub const S_SONIC3KBOSSEXPLOSION2: state = 397;
pub const S_SONIC3KBOSSEXPLOSION1: state = 396;
pub const S_BOSSEXPLODE: state = 395;
pub const S_DRAGONMINE_FASTLOOP: state = 394;
pub const S_DRAGONMINE_FASTFLASH2: state = 393;
pub const S_DRAGONMINE_FASTFLASH1: state = 392;
pub const S_DRAGONMINE_SLOWLOOP: state = 391;
pub const S_DRAGONMINE_SLOWFLASH2: state = 390;
pub const S_DRAGONMINE_SLOWFLASH1: state = 389;
pub const S_DRAGONMINE_LAND2: state = 388;
pub const S_DRAGONMINE_LAND1: state = 387;
pub const S_DRAGONMINE: state = 386;
pub const S_DRAGONTAIL_RELOAD: state = 385;
pub const S_DRAGONTAIL_EMPTYLOOP: state = 384;
pub const S_DRAGONTAIL_EMPTY: state = 383;
pub const S_DRAGONTAIL_LOADED: state = 382;
pub const S_DRAGONWING4: state = 381;
pub const S_DRAGONWING3: state = 380;
pub const S_DRAGONWING2: state = 379;
pub const S_DRAGONWING1: state = 378;
pub const S_DRAGONBOMBER: state = 377;
pub const S_PTERABYTE_SWOOPUP: state = 376;
pub const S_PTERABYTE_SWOOPDOWN: state = 375;
pub const S_PTERABYTE_FLY4: state = 374;
pub const S_PTERABYTE_FLY3: state = 373;
pub const S_PTERABYTE_FLY2: state = 372;
pub const S_PTERABYTE_FLY1: state = 371;
pub const S_PTERABYTEWAYPOINT: state = 370;
pub const S_PTERABYTESPAWNER: state = 369;
pub const S_PYREFIRE2: state = 368;
pub const S_PYREFIRE1: state = 367;
pub const S_PYREFLY_BURN: state = 366;
pub const S_PYREFLY_FLY: state = 365;
pub const S_CANARIVOREGAS_8: state = 364;
pub const S_CANARIVOREGAS_7: state = 363;
pub const S_CANARIVOREGAS_6: state = 362;
pub const S_CANARIVOREGAS_5: state = 361;
pub const S_CANARIVOREGAS_4: state = 360;
pub const S_CANARIVOREGAS_3: state = 359;
pub const S_CANARIVOREGAS_2: state = 358;
pub const S_CANARIVOREGAS_1: state = 357;
pub const S_CANARIVORE_CLOSE2: state = 356;
pub const S_CANARIVORE_CLOSE1: state = 355;
pub const S_CANARIVORE_GASREPEAT: state = 354;
pub const S_CANARIVORE_GAS5: state = 353;
pub const S_CANARIVORE_GAS4: state = 352;
pub const S_CANARIVORE_GAS3: state = 351;
pub const S_CANARIVORE_GAS2: state = 350;
pub const S_CANARIVORE_GAS1: state = 349;
pub const S_CANARIVORE_AWAKEN3: state = 348;
pub const S_CANARIVORE_AWAKEN2: state = 347;
pub const S_CANARIVORE_AWAKEN1: state = 346;
pub const S_CANARIVORE_LOOK: state = 345;
pub const S_UNIDUS_BALL: state = 344;
pub const S_UNIDUS_RUN: state = 343;
pub const S_UNIDUS_STND: state = 342;
pub const S_YSHELL_SPRING4: state = 341;
pub const S_YSHELL_SPRING3: state = 340;
pub const S_YSHELL_SPRING2: state = 339;
pub const S_YSHELL_SPRING1: state = 338;
pub const S_YSHELL_RUN4: state = 337;
pub const S_YSHELL_RUN3: state = 336;
pub const S_YSHELL_RUN2: state = 335;
pub const S_YSHELL_RUN1: state = 334;
pub const S_YSHELL_STND: state = 333;
pub const S_SSHELL_SPRING4: state = 332;
pub const S_SSHELL_SPRING3: state = 331;
pub const S_SSHELL_SPRING2: state = 330;
pub const S_SSHELL_SPRING1: state = 329;
pub const S_SSHELL_RUN4: state = 328;
pub const S_SSHELL_RUN3: state = 327;
pub const S_SSHELL_RUN2: state = 326;
pub const S_SSHELL_RUN1: state = 325;
pub const S_SSHELL_STND: state = 324;
pub const S_MINUSDIRT7: state = 323;
pub const S_MINUSDIRT6: state = 322;
pub const S_MINUSDIRT5: state = 321;
pub const S_MINUSDIRT4: state = 320;
pub const S_MINUSDIRT3: state = 319;
pub const S_MINUSDIRT2: state = 318;
pub const S_MINUSDIRT1: state = 317;
pub const S_MINUS_AERIAL4: state = 316;
pub const S_MINUS_AERIAL3: state = 315;
pub const S_MINUS_AERIAL2: state = 314;
pub const S_MINUS_AERIAL1: state = 313;
pub const S_MINUS_POPUP: state = 312;
pub const S_MINUS_BURST5: state = 311;
pub const S_MINUS_BURST4: state = 310;
pub const S_MINUS_BURST3: state = 309;
pub const S_MINUS_BURST2: state = 308;
pub const S_MINUS_BURST1: state = 307;
pub const S_MINUS_BURST0: state = 306;
pub const S_MINUS_DIGGING4: state = 305;
pub const S_MINUS_DIGGING3: state = 304;
pub const S_MINUS_DIGGING2: state = 303;
pub const S_MINUS_DIGGING1: state = 302;
pub const S_MINUS_STND: state = 301;
pub const S_MINUS_INIT: state = 300;
pub const S_SNAPPER_HEAD: state = 299;
pub const S_SNAPPER_LEGRAISE: state = 298;
pub const S_SNAPPER_LEG: state = 297;
pub const S_SNAPPER_XPLD: state = 296;
pub const S_GSNAPPER4: state = 295;
pub const S_GSNAPPER3: state = 294;
pub const S_GSNAPPER2: state = 293;
pub const S_GSNAPPER1: state = 292;
pub const S_GSNAPPER_STND: state = 291;
pub const S_SNAPPER_SPAWN2: state = 290;
pub const S_SNAPPER_SPAWN: state = 289;
pub const S_EGGSHIELDBREAK: state = 288;
pub const S_EGGSHIELD: state = 287;
pub const S_EGGGUARD_RUN4: state = 286;
pub const S_EGGGUARD_RUN3: state = 285;
pub const S_EGGGUARD_RUN2: state = 284;
pub const S_EGGGUARD_RUN1: state = 283;
pub const S_EGGGUARD_MAD3: state = 282;
pub const S_EGGGUARD_MAD2: state = 281;
pub const S_EGGGUARD_MAD1: state = 280;
pub const S_EGGGUARD_WALK4: state = 279;
pub const S_EGGGUARD_WALK3: state = 278;
pub const S_EGGGUARD_WALK2: state = 277;
pub const S_EGGGUARD_WALK1: state = 276;
pub const S_EGGGUARD_STND: state = 275;
pub const S_FACESTABBERSPEAR: state = 274;
pub const S_FACESTABBER_DIE3: state = 273;
pub const S_FACESTABBER_DIE2: state = 272;
pub const S_FACESTABBER_DIE1: state = 271;
pub const S_FACESTABBER_PAIN: state = 270;
pub const S_FACESTABBER_CHARGE4: state = 269;
pub const S_FACESTABBER_CHARGE3: state = 268;
pub const S_FACESTABBER_CHARGE2: state = 267;
pub const S_FACESTABBER_CHARGE1: state = 266;
pub const S_FACESTABBER_STND6: state = 265;
pub const S_FACESTABBER_STND5: state = 264;
pub const S_FACESTABBER_STND4: state = 263;
pub const S_FACESTABBER_STND3: state = 262;
pub const S_FACESTABBER_STND2: state = 261;
pub const S_FACESTABBER_STND1: state = 260;
pub const S_ROBOHOOD_JUMP3: state = 259;
pub const S_ROBOHOOD_JUMP2: state = 258;
pub const S_ROBOHOOD_JUMP1: state = 257;
pub const S_ROBOHOOD_FIRE2: state = 256;
pub const S_ROBOHOOD_FIRE1: state = 255;
pub const S_ROBOHOOD_STAND: state = 254;
pub const S_ROBOHOOD_LOOK: state = 253;
pub const S_POINTYBALL1: state = 252;
pub const S_POINTY1: state = 251;
pub const S_VULTURE_STUNNED: state = 250;
pub const S_VULTURE_ZOOM2: state = 249;
pub const S_VULTURE_ZOOM1: state = 248;
pub const S_VULTURE_DRIFT: state = 247;
pub const S_VULTURE_STND: state = 246;
pub const S_SNAILER_FLICKY: state = 245;
pub const S_SNAILER1: state = 244;
pub const S_JETJAW_SOUND: state = 243;
pub const S_JETJAW_CHOMP16: state = 242;
pub const S_JETJAW_CHOMP15: state = 241;
pub const S_JETJAW_CHOMP14: state = 240;
pub const S_JETJAW_CHOMP13: state = 239;
pub const S_JETJAW_CHOMP12: state = 238;
pub const S_JETJAW_CHOMP11: state = 237;
pub const S_JETJAW_CHOMP10: state = 236;
pub const S_JETJAW_CHOMP9: state = 235;
pub const S_JETJAW_CHOMP8: state = 234;
pub const S_JETJAW_CHOMP7: state = 233;
pub const S_JETJAW_CHOMP6: state = 232;
pub const S_JETJAW_CHOMP5: state = 231;
pub const S_JETJAW_CHOMP4: state = 230;
pub const S_JETJAW_CHOMP3: state = 229;
pub const S_JETJAW_CHOMP2: state = 228;
pub const S_JETJAW_CHOMP1: state = 227;
pub const S_JETJAW_ROAM8: state = 226;
pub const S_JETJAW_ROAM7: state = 225;
pub const S_JETJAW_ROAM6: state = 224;
pub const S_JETJAW_ROAM5: state = 223;
pub const S_JETJAW_ROAM4: state = 222;
pub const S_JETJAW_ROAM3: state = 221;
pub const S_JETJAW_ROAM2: state = 220;
pub const S_JETJAW_ROAM1: state = 219;
pub const S_CDIAG8: state = 218;
pub const S_CDIAG7: state = 217;
pub const S_CDIAG6: state = 216;
pub const S_CDIAG5: state = 215;
pub const S_CDIAG4: state = 214;
pub const S_CDIAG3: state = 213;
pub const S_CDIAG2: state = 212;
pub const S_CDIAG1: state = 211;
pub const S_BANPYURA_ROAMPAUSE: state = 210;
pub const S_BANPYURA_ROAM4: state = 209;
pub const S_BANPYURA_ROAM3: state = 208;
pub const S_BANPYURA_ROAM2: state = 207;
pub const S_BANPYURA_ROAM1: state = 206;
pub const S_CRUSHCHAIN: state = 205;
pub const S_CRUSHCLAW_WAIT: state = 204;
pub const S_CRUSHCLAW_IN: state = 203;
pub const S_CRUSHCLAW_STAY: state = 202;
pub const S_CRUSHCLAW_OUT: state = 201;
pub const S_CRUSHCLAW_AIM: state = 200;
pub const S_CRUSHSTACEAN_PUNCH2: state = 199;
pub const S_CRUSHSTACEAN_PUNCH1: state = 198;
pub const S_CRUSHSTACEAN_ROAMPAUSE: state = 197;
pub const S_CRUSHSTACEAN_ROAM4: state = 196;
pub const S_CRUSHSTACEAN_ROAM3: state = 195;
pub const S_CRUSHSTACEAN_ROAM2: state = 194;
pub const S_CRUSHSTACEAN_ROAM1: state = 193;
pub const S_SPINCUSHION_STOP4: state = 192;
pub const S_SPINCUSHION_STOP3: state = 191;
pub const S_SPINCUSHION_STOP2: state = 190;
pub const S_SPINCUSHION_STOP1: state = 189;
pub const S_SPINCUSHION_SPIN4: state = 188;
pub const S_SPINCUSHION_SPIN3: state = 187;
pub const S_SPINCUSHION_SPIN2: state = 186;
pub const S_SPINCUSHION_SPIN1: state = 185;
pub const S_SPINCUSHION_AIM5: state = 184;
pub const S_SPINCUSHION_AIM4: state = 183;
pub const S_SPINCUSHION_AIM3: state = 182;
pub const S_SPINCUSHION_AIM2: state = 181;
pub const S_SPINCUSHION_AIM1: state = 180;
pub const S_SPINCUSHION_CHASE4: state = 179;
pub const S_SPINCUSHION_CHASE3: state = 178;
pub const S_SPINCUSHION_CHASE2: state = 177;
pub const S_SPINCUSHION_CHASE1: state = 176;
pub const S_SPINCUSHION_LOOK: state = 175;
pub const S_TURRETPOPDOWN8: state = 174;
pub const S_TURRETPOPDOWN7: state = 173;
pub const S_TURRETPOPDOWN6: state = 172;
pub const S_TURRETPOPDOWN5: state = 171;
pub const S_TURRETPOPDOWN4: state = 170;
pub const S_TURRETPOPDOWN3: state = 169;
pub const S_TURRETPOPDOWN2: state = 168;
pub const S_TURRETPOPDOWN1: state = 167;
pub const S_TURRETSHOOT: state = 166;
pub const S_TURRETPOPUP8: state = 165;
pub const S_TURRETPOPUP7: state = 164;
pub const S_TURRETPOPUP6: state = 163;
pub const S_TURRETPOPUP5: state = 162;
pub const S_TURRETPOPUP4: state = 161;
pub const S_TURRETPOPUP3: state = 160;
pub const S_TURRETPOPUP2: state = 159;
pub const S_TURRETPOPUP1: state = 158;
pub const S_TURRETSEE: state = 157;
pub const S_TURRETLOOK: state = 156;
pub const S_TURRETSHOCK9: state = 155;
pub const S_TURRETSHOCK8: state = 154;
pub const S_TURRETSHOCK7: state = 153;
pub const S_TURRETSHOCK6: state = 152;
pub const S_TURRETSHOCK5: state = 151;
pub const S_TURRETSHOCK4: state = 150;
pub const S_TURRETSHOCK3: state = 149;
pub const S_TURRETSHOCK2: state = 148;
pub const S_TURRETSHOCK1: state = 147;
pub const S_TURRETFIRE: state = 146;
pub const S_TURRET: state = 145;
pub const S_SKIM4: state = 144;
pub const S_SKIM3: state = 143;
pub const S_SKIM2: state = 142;
pub const S_SKIM1: state = 141;
pub const S_DETON15: state = 140;
pub const S_DETON14: state = 139;
pub const S_DETON13: state = 138;
pub const S_DETON12: state = 137;
pub const S_DETON11: state = 136;
pub const S_DETON10: state = 135;
pub const S_DETON9: state = 134;
pub const S_DETON8: state = 133;
pub const S_DETON7: state = 132;
pub const S_DETON6: state = 131;
pub const S_DETON5: state = 130;
pub const S_DETON4: state = 129;
pub const S_DETON3: state = 128;
pub const S_DETON2: state = 127;
pub const S_DETON1: state = 126;
pub const S_CCOMMAND4: state = 125;
pub const S_CCOMMAND3: state = 124;
pub const S_CCOMMAND2: state = 123;
pub const S_CCOMMAND1: state = 122;
pub const S_JETGSHOOT2: state = 121;
pub const S_JETGSHOOT1: state = 120;
pub const S_JETGZOOM2: state = 119;
pub const S_JETGZOOM1: state = 118;
pub const S_JETGLOOK2: state = 117;
pub const S_JETGLOOK1: state = 116;
pub const S_JETBZOOM2: state = 115;
pub const S_JETBZOOM1: state = 114;
pub const S_JETBLOOK2: state = 113;
pub const S_JETBLOOK1: state = 112;
pub const S_RBUZZFLY2: state = 111;
pub const S_RBUZZFLY1: state = 110;
pub const S_RBUZZLOOK2: state = 109;
pub const S_RBUZZLOOK1: state = 108;
pub const S_BUZZFLY2: state = 107;
pub const S_BUZZFLY1: state = 106;
pub const S_BUZZLOOK2: state = 105;
pub const S_BUZZLOOK1: state = 104;
pub const S_FISH4: state = 103;
pub const S_FISH3: state = 102;
pub const S_FISH2: state = 101;
pub const S_FISH1: state = 100;
pub const S_SPOS_RUN6: state = 99;
pub const S_SPOS_RUN5: state = 98;
pub const S_SPOS_RUN4: state = 97;
pub const S_SPOS_RUN3: state = 96;
pub const S_SPOS_RUN2: state = 95;
pub const S_SPOS_RUN1: state = 94;
pub const S_SPOS_STND: state = 93;
pub const S_POSS_RUN6: state = 92;
pub const S_POSS_RUN5: state = 91;
pub const S_POSS_RUN4: state = 90;
pub const S_POSS_RUN3: state = 89;
pub const S_POSS_RUN2: state = 88;
pub const S_POSS_RUN1: state = 87;
pub const S_POSS_STND: state = 86;
pub const S_JETFUMEFLASH: state = 85;
pub const S_TAILSOVERLAY_DASH: state = 84;
pub const S_TAILSOVERLAY_EDGE: state = 83;
pub const S_TAILSOVERLAY_GASP: state = 82;
pub const S_TAILSOVERLAY_PAIN: state = 81;
pub const S_TAILSOVERLAY_TIRE: state = 80;
pub const S_TAILSOVERLAY_FLY: state = 79;
pub const S_TAILSOVERLAY_RUN: state = 78;
pub const S_TAILSOVERLAY_MINUS60DEGREES: state = 77;
pub const S_TAILSOVERLAY_MINUS30DEGREES: state = 76;
pub const S_TAILSOVERLAY_PLUS60DEGREES: state = 75;
pub const S_TAILSOVERLAY_PLUS30DEGREES: state = 74;
pub const S_TAILSOVERLAY_0DEGREES: state = 73;
pub const S_TAILSOVERLAY_STAND: state = 72;
pub const S_PLAY_NIGHTS_ATTACK: state = 71;
pub const S_PLAY_NIGHTS_PULL: state = 70;
pub const S_PLAY_NIGHTS_STUN: state = 69;
pub const S_PLAY_NIGHTS_DRILL: state = 68;
pub const S_PLAY_NIGHTS_FLY: state = 67;
pub const S_PLAY_NIGHTS_FLOAT: state = 66;
pub const S_PLAY_NIGHTS_STAND: state = 65;
pub const S_PLAY_NIGHTS_TRANS6: state = 64;
pub const S_PLAY_NIGHTS_TRANS5: state = 63;
pub const S_PLAY_NIGHTS_TRANS4: state = 62;
pub const S_PLAY_NIGHTS_TRANS3: state = 61;
pub const S_PLAY_NIGHTS_TRANS2: state = 60;
pub const S_PLAY_NIGHTS_TRANS1: state = 59;
pub const S_PLAY_SIGN: state = 58;
pub const S_PLAY_ICON3: state = 57;
pub const S_PLAY_ICON2: state = 56;
pub const S_PLAY_ICON1: state = 55;
pub const S_PLAY_BOX2: state = 54;
pub const S_PLAY_BOX1: state = 53;
pub const S_OBJPLACE_DUMMY: state = 52;
pub const S_PLAY_SUPER_TRANS6: state = 51;
pub const S_PLAY_SUPER_TRANS5: state = 50;
pub const S_PLAY_SUPER_TRANS4: state = 49;
pub const S_PLAY_SUPER_TRANS3: state = 48;
pub const S_PLAY_SUPER_TRANS2: state = 47;
pub const S_PLAY_SUPER_TRANS1: state = 46;
pub const S_PLAY_MELEE_LANDING: state = 45;
pub const S_PLAY_MELEE_FINISH: state = 44;
pub const S_PLAY_MELEE: state = 43;
pub const S_PLAY_TWINSPIN: state = 42;
pub const S_PLAY_FIRE_FINISH: state = 41;
pub const S_PLAY_FIRE: state = 40;
pub const S_PLAY_BOUNCE_LANDING: state = 39;
pub const S_PLAY_BOUNCE: state = 38;
pub const S_PLAY_FLOAT_RUN: state = 37;
pub const S_PLAY_FLOAT: state = 36;
pub const S_PLAY_CLIMB: state = 35;
pub const S_PLAY_CLING: state = 34;
pub const S_PLAY_GLIDE_LANDING: state = 33;
pub const S_PLAY_GLIDE: state = 32;
pub const S_PLAY_FLY_TIRED: state = 31;
pub const S_PLAY_SWIM: state = 30;
pub const S_PLAY_FLY: state = 29;
pub const S_PLAY_SPINDASH: state = 28;
pub const S_PLAY_RIDE: state = 27;
pub const S_PLAY_EDGE: state = 26;
pub const S_PLAY_FALL: state = 25;
pub const S_PLAY_SPRING: state = 24;
pub const S_PLAY_JUMP: state = 23;
pub const S_PLAY_GASP: state = 22;
pub const S_PLAY_ROLL: state = 21;
pub const S_PLAY_DRWN: state = 20;
pub const S_PLAY_DEAD: state = 19;
pub const S_PLAY_STUN: state = 18;
pub const S_PLAY_PAIN: state = 17;
pub const S_PLAY_DASH: state = 16;
pub const S_PLAY_RUN: state = 15;
pub const S_PLAY_SKID: state = 14;
pub const S_PLAY_WALK: state = 13;
pub const S_PLAY_WAIT: state = 12;
pub const S_PLAY_STND: state = 11;
pub const S_THOK: state = 10;
pub const S_RAISESTATE: state = 9;
pub const S_XDEATHSTATE: state = 8;
pub const S_DEATHSTATE: state = 7;
pub const S_MISSILESTATE: state = 6;
pub const S_MELEESTATE: state = 5;
pub const S_SEESTATE: state = 4;
pub const S_SPAWNSTATE: state = 3;
pub const S_INVISIBLE: state = 2;
pub const S_UNKNOWN: state = 1;
pub const S_NULL: state = 0;
pub type sfxenum_t = libc::c_uint;
pub const NUMSFX: sfxenum_t = 3008;
pub const sfx_lastskinsoundslot: sfxenum_t = 3007;
pub const sfx_skinsoundslot0: sfxenum_t = 2336;
pub const sfx_lastfreeslot: sfxenum_t = 2335;
pub const sfx_freeslot0: sfxenum_t = 736;
pub const sfx_kc6e: sfxenum_t = 735;
pub const sfx_kc6d: sfxenum_t = 734;
pub const sfx_kc6c: sfxenum_t = 733;
pub const sfx_kc6b: sfxenum_t = 732;
pub const sfx_kc69: sfxenum_t = 731;
pub const sfx_kc68: sfxenum_t = 730;
pub const sfx_kc67: sfxenum_t = 729;
pub const sfx_kc66: sfxenum_t = 728;
pub const sfx_kc65: sfxenum_t = 727;
pub const sfx_kc64: sfxenum_t = 726;
pub const sfx_kc63: sfxenum_t = 725;
pub const sfx_kc62: sfxenum_t = 724;
pub const sfx_kc61: sfxenum_t = 723;
pub const sfx_kc60: sfxenum_t = 722;
pub const sfx_kc5f: sfxenum_t = 721;
pub const sfx_kc5e: sfxenum_t = 720;
pub const sfx_kc5d: sfxenum_t = 719;
pub const sfx_kc5c: sfxenum_t = 718;
pub const sfx_kc5b: sfxenum_t = 717;
pub const sfx_kc5a: sfxenum_t = 716;
pub const sfx_kc59: sfxenum_t = 715;
pub const sfx_kc58: sfxenum_t = 714;
pub const sfx_kc57: sfxenum_t = 713;
pub const sfx_kc56: sfxenum_t = 712;
pub const sfx_kc55: sfxenum_t = 711;
pub const sfx_kc54: sfxenum_t = 710;
pub const sfx_kc53: sfxenum_t = 709;
pub const sfx_kc52: sfxenum_t = 708;
pub const sfx_kc51: sfxenum_t = 707;
pub const sfx_kc50: sfxenum_t = 706;
pub const sfx_kc4f: sfxenum_t = 705;
pub const sfx_kc4e: sfxenum_t = 704;
pub const sfx_kc4d: sfxenum_t = 703;
pub const sfx_kc4c: sfxenum_t = 702;
pub const sfx_kc4b: sfxenum_t = 701;
pub const sfx_kc4a: sfxenum_t = 700;
pub const sfx_kc49: sfxenum_t = 699;
pub const sfx_kc48: sfxenum_t = 698;
pub const sfx_kc47: sfxenum_t = 697;
pub const sfx_kc46: sfxenum_t = 696;
pub const sfx_kc45: sfxenum_t = 695;
pub const sfx_kc44: sfxenum_t = 694;
pub const sfx_kc43: sfxenum_t = 693;
pub const sfx_kc42: sfxenum_t = 692;
pub const sfx_kc41: sfxenum_t = 691;
pub const sfx_kc40: sfxenum_t = 690;
pub const sfx_kc3f: sfxenum_t = 689;
pub const sfx_kc3e: sfxenum_t = 688;
pub const sfx_kc3d: sfxenum_t = 687;
pub const sfx_kc3c: sfxenum_t = 686;
pub const sfx_kc3b: sfxenum_t = 685;
pub const sfx_kc3a: sfxenum_t = 684;
pub const sfx_kc39: sfxenum_t = 683;
pub const sfx_kc38: sfxenum_t = 682;
pub const sfx_kc37: sfxenum_t = 681;
pub const sfx_kc36: sfxenum_t = 680;
pub const sfx_kc35: sfxenum_t = 679;
pub const sfx_kc34: sfxenum_t = 678;
pub const sfx_kc33: sfxenum_t = 677;
pub const sfx_kc32: sfxenum_t = 676;
pub const sfx_kc31: sfxenum_t = 675;
pub const sfx_kc30: sfxenum_t = 674;
pub const sfx_kc2f: sfxenum_t = 673;
pub const sfx_kc2e: sfxenum_t = 672;
pub const sfx_kc2d: sfxenum_t = 671;
pub const sfx_kc2c: sfxenum_t = 670;
pub const sfx_kc2b: sfxenum_t = 669;
pub const sfx_kc2a: sfxenum_t = 668;
pub const sfx_cdpcm9: sfxenum_t = 667;
pub const sfx_cdpcm8: sfxenum_t = 666;
pub const sfx_cdpcm7: sfxenum_t = 665;
pub const sfx_cdpcm6: sfxenum_t = 664;
pub const sfx_cdpcm5: sfxenum_t = 663;
pub const sfx_cdpcm4: sfxenum_t = 662;
pub const sfx_cdpcm3: sfxenum_t = 661;
pub const sfx_cdpcm2: sfxenum_t = 660;
pub const sfx_cdpcm1: sfxenum_t = 659;
pub const sfx_cdpcm0: sfxenum_t = 658;
pub const sfx_cdfm79: sfxenum_t = 657;
pub const sfx_cdfm78: sfxenum_t = 656;
pub const sfx_cdfm77: sfxenum_t = 655;
pub const sfx_cdfm76: sfxenum_t = 654;
pub const sfx_cdfm75: sfxenum_t = 653;
pub const sfx_cdfm74: sfxenum_t = 652;
pub const sfx_cdfm73: sfxenum_t = 651;
pub const sfx_cdfm72: sfxenum_t = 650;
pub const sfx_cdfm71: sfxenum_t = 649;
pub const sfx_cdfm70: sfxenum_t = 648;
pub const sfx_cdfm69: sfxenum_t = 647;
pub const sfx_cdfm68: sfxenum_t = 646;
pub const sfx_cdfm67: sfxenum_t = 645;
pub const sfx_cdfm66: sfxenum_t = 644;
pub const sfx_cdfm65: sfxenum_t = 643;
pub const sfx_cdfm64: sfxenum_t = 642;
pub const sfx_cdfm63: sfxenum_t = 641;
pub const sfx_cdfm62: sfxenum_t = 640;
pub const sfx_cdfm61: sfxenum_t = 639;
pub const sfx_cdfm60: sfxenum_t = 638;
pub const sfx_cdfm59: sfxenum_t = 637;
pub const sfx_cdfm58: sfxenum_t = 636;
pub const sfx_cdfm57: sfxenum_t = 635;
pub const sfx_cdfm56: sfxenum_t = 634;
pub const sfx_cdfm55: sfxenum_t = 633;
pub const sfx_cdfm54: sfxenum_t = 632;
pub const sfx_cdfm53: sfxenum_t = 631;
pub const sfx_cdfm52: sfxenum_t = 630;
pub const sfx_cdfm51: sfxenum_t = 629;
pub const sfx_cdfm50: sfxenum_t = 628;
pub const sfx_cdfm49: sfxenum_t = 627;
pub const sfx_cdfm48: sfxenum_t = 626;
pub const sfx_cdfm47: sfxenum_t = 625;
pub const sfx_cdfm46: sfxenum_t = 624;
pub const sfx_cdfm45: sfxenum_t = 623;
pub const sfx_cdfm44: sfxenum_t = 622;
pub const sfx_cdfm43: sfxenum_t = 621;
pub const sfx_cdfm42: sfxenum_t = 620;
pub const sfx_cdfm41: sfxenum_t = 619;
pub const sfx_cdfm40: sfxenum_t = 618;
pub const sfx_cdfm39: sfxenum_t = 617;
pub const sfx_cdfm38: sfxenum_t = 616;
pub const sfx_cdfm37: sfxenum_t = 615;
pub const sfx_cdfm36: sfxenum_t = 614;
pub const sfx_cdfm35: sfxenum_t = 613;
pub const sfx_cdfm34: sfxenum_t = 612;
pub const sfx_cdfm33: sfxenum_t = 611;
pub const sfx_cdfm32: sfxenum_t = 610;
pub const sfx_cdfm31: sfxenum_t = 609;
pub const sfx_cdfm30: sfxenum_t = 608;
pub const sfx_cdfm29: sfxenum_t = 607;
pub const sfx_cdfm28: sfxenum_t = 606;
pub const sfx_cdfm27: sfxenum_t = 605;
pub const sfx_cdfm26: sfxenum_t = 604;
pub const sfx_cdfm25: sfxenum_t = 603;
pub const sfx_cdfm24: sfxenum_t = 602;
pub const sfx_cdfm23: sfxenum_t = 601;
pub const sfx_cdfm22: sfxenum_t = 600;
pub const sfx_cdfm21: sfxenum_t = 599;
pub const sfx_cdfm20: sfxenum_t = 598;
pub const sfx_cdfm19: sfxenum_t = 597;
pub const sfx_cdfm18: sfxenum_t = 596;
pub const sfx_cdfm17: sfxenum_t = 595;
pub const sfx_cdfm16: sfxenum_t = 594;
pub const sfx_cdfm15: sfxenum_t = 593;
pub const sfx_cdfm14: sfxenum_t = 592;
pub const sfx_cdfm13: sfxenum_t = 591;
pub const sfx_cdfm12: sfxenum_t = 590;
pub const sfx_cdfm11: sfxenum_t = 589;
pub const sfx_cdfm10: sfxenum_t = 588;
pub const sfx_cdfm09: sfxenum_t = 587;
pub const sfx_cdfm08: sfxenum_t = 586;
pub const sfx_cdfm07: sfxenum_t = 585;
pub const sfx_cdfm06: sfxenum_t = 584;
pub const sfx_cdfm05: sfxenum_t = 583;
pub const sfx_cdfm04: sfxenum_t = 582;
pub const sfx_cdfm03: sfxenum_t = 581;
pub const sfx_cdfm02: sfxenum_t = 580;
pub const sfx_cdfm01: sfxenum_t = 579;
pub const sfx_cdfm00: sfxenum_t = 578;
pub const sfx_3db16: sfxenum_t = 577;
pub const sfx_3db14: sfxenum_t = 576;
pub const sfx_3db09: sfxenum_t = 575;
pub const sfx_3db06: sfxenum_t = 574;
pub const sfx_s3kdbl: sfxenum_t = 573;
pub const sfx_s3kdbs: sfxenum_t = 572;
pub const sfx_s3kdal: sfxenum_t = 571;
pub const sfx_s3kdas: sfxenum_t = 570;
pub const sfx_s3kd9l: sfxenum_t = 569;
pub const sfx_s3kd9s: sfxenum_t = 568;
pub const sfx_s3kd8l: sfxenum_t = 567;
pub const sfx_s3kd8s: sfxenum_t = 566;
pub const sfx_s3kd7l: sfxenum_t = 565;
pub const sfx_s3kd7s: sfxenum_t = 564;
pub const sfx_s3kd6l: sfxenum_t = 563;
pub const sfx_s3kd6s: sfxenum_t = 562;
pub const sfx_s3kd5l: sfxenum_t = 561;
pub const sfx_s3kd5s: sfxenum_t = 560;
pub const sfx_s3kd4l: sfxenum_t = 559;
pub const sfx_s3kd4s: sfxenum_t = 558;
pub const sfx_s3kd3l: sfxenum_t = 557;
pub const sfx_s3kd3s: sfxenum_t = 556;
pub const sfx_s3kd2l: sfxenum_t = 555;
pub const sfx_s3kd2s: sfxenum_t = 554;
pub const sfx_s3kd1l: sfxenum_t = 553;
pub const sfx_s3kd1s: sfxenum_t = 552;
pub const sfx_s3kd0l: sfxenum_t = 551;
pub const sfx_s3kd0s: sfxenum_t = 550;
pub const sfx_s3kcfl: sfxenum_t = 549;
pub const sfx_s3kcfs: sfxenum_t = 548;
pub const sfx_s3kcel: sfxenum_t = 547;
pub const sfx_s3kces: sfxenum_t = 546;
pub const sfx_s3kcdl: sfxenum_t = 545;
pub const sfx_s3kcds: sfxenum_t = 544;
pub const sfx_s3kccl: sfxenum_t = 543;
pub const sfx_s3kccs: sfxenum_t = 542;
pub const sfx_s3kcbl: sfxenum_t = 541;
pub const sfx_s3kcbs: sfxenum_t = 540;
pub const sfx_s3kcal: sfxenum_t = 539;
pub const sfx_s3kcas: sfxenum_t = 538;
pub const sfx_s3kc9l: sfxenum_t = 537;
pub const sfx_s3kc9s: sfxenum_t = 536;
pub const sfx_s3kc8l: sfxenum_t = 535;
pub const sfx_s3kc8s: sfxenum_t = 534;
pub const sfx_s3kc7l: sfxenum_t = 533;
pub const sfx_s3kc7s: sfxenum_t = 532;
pub const sfx_s3kc6l: sfxenum_t = 531;
pub const sfx_s3kc6s: sfxenum_t = 530;
pub const sfx_s3kc5l: sfxenum_t = 529;
pub const sfx_s3kc5s: sfxenum_t = 528;
pub const sfx_s3kc4l: sfxenum_t = 527;
pub const sfx_s3kc4s: sfxenum_t = 526;
pub const sfx_s3kc3l: sfxenum_t = 525;
pub const sfx_s3kc3s: sfxenum_t = 524;
pub const sfx_s3kc2l: sfxenum_t = 523;
pub const sfx_s3kc2s: sfxenum_t = 522;
pub const sfx_s3kc1l: sfxenum_t = 521;
pub const sfx_s3kc1s: sfxenum_t = 520;
pub const sfx_s3kc0l: sfxenum_t = 519;
pub const sfx_s3kc0s: sfxenum_t = 518;
pub const sfx_s3kbfl: sfxenum_t = 517;
pub const sfx_s3kbfs: sfxenum_t = 516;
pub const sfx_s3kbel: sfxenum_t = 515;
pub const sfx_s3kbes: sfxenum_t = 514;
pub const sfx_s3kbdl: sfxenum_t = 513;
pub const sfx_s3kbds: sfxenum_t = 512;
pub const sfx_s3kbcl: sfxenum_t = 511;
pub const sfx_s3kbcs: sfxenum_t = 510;
pub const sfx_s3kbb: sfxenum_t = 509;
pub const sfx_s3kba: sfxenum_t = 508;
pub const sfx_s3kb9: sfxenum_t = 507;
pub const sfx_s3kb8: sfxenum_t = 506;
pub const sfx_s3kb7: sfxenum_t = 505;
pub const sfx_s3kb6: sfxenum_t = 504;
pub const sfx_s3kb5: sfxenum_t = 503;
pub const sfx_s3kb4: sfxenum_t = 502;
pub const sfx_s3kb3: sfxenum_t = 501;
pub const sfx_s3kb2: sfxenum_t = 500;
pub const sfx_s3kb1: sfxenum_t = 499;
pub const sfx_s3kb0: sfxenum_t = 498;
pub const sfx_s3kaf: sfxenum_t = 497;
pub const sfx_s3kae: sfxenum_t = 496;
pub const sfx_s3kad: sfxenum_t = 495;
pub const sfx_s3kac: sfxenum_t = 494;
pub const sfx_s3kabf: sfxenum_t = 493;
pub const sfx_s3kabe: sfxenum_t = 492;
pub const sfx_s3kabd: sfxenum_t = 491;
pub const sfx_s3kabc: sfxenum_t = 490;
pub const sfx_s3kabb: sfxenum_t = 489;
pub const sfx_s3kaba: sfxenum_t = 488;
pub const sfx_s3kab9: sfxenum_t = 487;
pub const sfx_s3kab8: sfxenum_t = 486;
pub const sfx_s3kab7: sfxenum_t = 485;
pub const sfx_s3kab6: sfxenum_t = 484;
pub const sfx_s3kab5: sfxenum_t = 483;
pub const sfx_s3kab4: sfxenum_t = 482;
pub const sfx_s3kab3: sfxenum_t = 481;
pub const sfx_s3kab2: sfxenum_t = 480;
pub const sfx_s3kab1: sfxenum_t = 479;
pub const sfx_s3kab: sfxenum_t = 478;
pub const sfx_s3kaa: sfxenum_t = 477;
pub const sfx_s3ka9: sfxenum_t = 476;
pub const sfx_s3ka8: sfxenum_t = 475;
pub const sfx_s3ka7: sfxenum_t = 474;
pub const sfx_s3ka6: sfxenum_t = 473;
pub const sfx_s3ka5: sfxenum_t = 472;
pub const sfx_s3ka4: sfxenum_t = 471;
pub const sfx_s3ka3: sfxenum_t = 470;
pub const sfx_s3ka2: sfxenum_t = 469;
pub const sfx_s3ka1: sfxenum_t = 468;
pub const sfx_s3ka0: sfxenum_t = 467;
pub const sfx_s3k9f: sfxenum_t = 466;
pub const sfx_s3k9e: sfxenum_t = 465;
pub const sfx_s3k9d: sfxenum_t = 464;
pub const sfx_s3k9c: sfxenum_t = 463;
pub const sfx_s3k9b: sfxenum_t = 462;
pub const sfx_s3k9a: sfxenum_t = 461;
pub const sfx_s3k99: sfxenum_t = 460;
pub const sfx_s3k98: sfxenum_t = 459;
pub const sfx_s3k97: sfxenum_t = 458;
pub const sfx_s3k96: sfxenum_t = 457;
pub const sfx_s3k95: sfxenum_t = 456;
pub const sfx_s3k94: sfxenum_t = 455;
pub const sfx_s3k93: sfxenum_t = 454;
pub const sfx_s3k92: sfxenum_t = 453;
pub const sfx_s3k91: sfxenum_t = 452;
pub const sfx_s3k90: sfxenum_t = 451;
pub const sfx_s3k8f: sfxenum_t = 450;
pub const sfx_s3k8e: sfxenum_t = 449;
pub const sfx_s3k8d: sfxenum_t = 448;
pub const sfx_s3k8c: sfxenum_t = 447;
pub const sfx_s3k8b: sfxenum_t = 446;
pub const sfx_s3k8a: sfxenum_t = 445;
pub const sfx_s3k89: sfxenum_t = 444;
pub const sfx_s3k88: sfxenum_t = 443;
pub const sfx_s3k87: sfxenum_t = 442;
pub const sfx_s3k86: sfxenum_t = 441;
pub const sfx_s3k85: sfxenum_t = 440;
pub const sfx_s3k84: sfxenum_t = 439;
pub const sfx_s3k83: sfxenum_t = 438;
pub const sfx_s3k82: sfxenum_t = 437;
pub const sfx_s3k81: sfxenum_t = 436;
pub const sfx_s3k80: sfxenum_t = 435;
pub const sfx_s3k7f: sfxenum_t = 434;
pub const sfx_s3k7e: sfxenum_t = 433;
pub const sfx_s3k7d: sfxenum_t = 432;
pub const sfx_s3k7c: sfxenum_t = 431;
pub const sfx_s3k7b: sfxenum_t = 430;
pub const sfx_s3k7a: sfxenum_t = 429;
pub const sfx_s3k79: sfxenum_t = 428;
pub const sfx_s3k78: sfxenum_t = 427;
pub const sfx_s3k77: sfxenum_t = 426;
pub const sfx_s3k76: sfxenum_t = 425;
pub const sfx_s3k75: sfxenum_t = 424;
pub const sfx_s3k74: sfxenum_t = 423;
pub const sfx_s3k73: sfxenum_t = 422;
pub const sfx_s3k72: sfxenum_t = 421;
pub const sfx_s3k71: sfxenum_t = 420;
pub const sfx_s3k70: sfxenum_t = 419;
pub const sfx_s3k6f: sfxenum_t = 418;
pub const sfx_s3k6e: sfxenum_t = 417;
pub const sfx_s3k6d: sfxenum_t = 416;
pub const sfx_s3k6c: sfxenum_t = 415;
pub const sfx_s3k6b: sfxenum_t = 414;
pub const sfx_s3k6a: sfxenum_t = 413;
pub const sfx_s3k69: sfxenum_t = 412;
pub const sfx_s3k68: sfxenum_t = 411;
pub const sfx_s3k67: sfxenum_t = 410;
pub const sfx_s3k66: sfxenum_t = 409;
pub const sfx_s3k65: sfxenum_t = 408;
pub const sfx_s3k64: sfxenum_t = 407;
pub const sfx_s3k63: sfxenum_t = 406;
pub const sfx_s3k62: sfxenum_t = 405;
pub const sfx_s3k61: sfxenum_t = 404;
pub const sfx_s3k60: sfxenum_t = 403;
pub const sfx_s3k5f: sfxenum_t = 402;
pub const sfx_s3k5e: sfxenum_t = 401;
pub const sfx_s3k5d: sfxenum_t = 400;
pub const sfx_s3k5c: sfxenum_t = 399;
pub const sfx_s3k5b: sfxenum_t = 398;
pub const sfx_s3k5a: sfxenum_t = 397;
pub const sfx_s3k59: sfxenum_t = 396;
pub const sfx_s3k58: sfxenum_t = 395;
pub const sfx_s3k57: sfxenum_t = 394;
pub const sfx_s3k56: sfxenum_t = 393;
pub const sfx_s3k55: sfxenum_t = 392;
pub const sfx_s3k54: sfxenum_t = 391;
pub const sfx_s3k53: sfxenum_t = 390;
pub const sfx_s3k52: sfxenum_t = 389;
pub const sfx_s3k51: sfxenum_t = 388;
pub const sfx_s3k50: sfxenum_t = 387;
pub const sfx_s3k4f: sfxenum_t = 386;
pub const sfx_s3k4e: sfxenum_t = 385;
pub const sfx_s3k4d: sfxenum_t = 384;
pub const sfx_s3k4c: sfxenum_t = 383;
pub const sfx_s3k4b: sfxenum_t = 382;
pub const sfx_s3k4a: sfxenum_t = 381;
pub const sfx_s3k49: sfxenum_t = 380;
pub const sfx_s3k48: sfxenum_t = 379;
pub const sfx_s3k47: sfxenum_t = 378;
pub const sfx_s3k46: sfxenum_t = 377;
pub const sfx_s3k45: sfxenum_t = 376;
pub const sfx_s3k44: sfxenum_t = 375;
pub const sfx_s3k43: sfxenum_t = 374;
pub const sfx_s3k42: sfxenum_t = 373;
pub const sfx_s3k41: sfxenum_t = 372;
pub const sfx_s3k40: sfxenum_t = 371;
pub const sfx_s3k3f: sfxenum_t = 370;
pub const sfx_s3k3e: sfxenum_t = 369;
pub const sfx_s3k3d: sfxenum_t = 368;
pub const sfx_s3k3c: sfxenum_t = 367;
pub const sfx_s3k3b: sfxenum_t = 366;
pub const sfx_s3k3a: sfxenum_t = 365;
pub const sfx_s3k39: sfxenum_t = 364;
pub const sfx_s3k38: sfxenum_t = 363;
pub const sfx_s3k37: sfxenum_t = 362;
pub const sfx_s3k36: sfxenum_t = 361;
pub const sfx_s3k35: sfxenum_t = 360;
pub const sfx_s3k34: sfxenum_t = 359;
pub const sfx_s3k33: sfxenum_t = 358;
pub const sfx_s3k2b: sfxenum_t = 357;
pub const sfx_s260: sfxenum_t = 356;
pub const sfx_s25f: sfxenum_t = 355;
pub const sfx_s25e: sfxenum_t = 354;
pub const sfx_s25d: sfxenum_t = 353;
pub const sfx_s25c: sfxenum_t = 352;
pub const sfx_s25b: sfxenum_t = 351;
pub const sfx_s25a: sfxenum_t = 350;
pub const sfx_s259: sfxenum_t = 349;
pub const sfx_s258: sfxenum_t = 348;
pub const sfx_s257: sfxenum_t = 347;
pub const sfx_s256: sfxenum_t = 346;
pub const sfx_s255: sfxenum_t = 345;
pub const sfx_s254: sfxenum_t = 344;
pub const sfx_s253: sfxenum_t = 343;
pub const sfx_s252: sfxenum_t = 342;
pub const sfx_s251: sfxenum_t = 341;
pub const sfx_s250: sfxenum_t = 340;
pub const sfx_s24f: sfxenum_t = 339;
pub const sfx_s24e: sfxenum_t = 338;
pub const sfx_s24d: sfxenum_t = 337;
pub const sfx_s24c: sfxenum_t = 336;
pub const sfx_s24b: sfxenum_t = 335;
pub const sfx_s24a: sfxenum_t = 334;
pub const sfx_s249: sfxenum_t = 333;
pub const sfx_s248: sfxenum_t = 332;
pub const sfx_s247: sfxenum_t = 331;
pub const sfx_s246: sfxenum_t = 330;
pub const sfx_s245: sfxenum_t = 329;
pub const sfx_s244: sfxenum_t = 328;
pub const sfx_s243: sfxenum_t = 327;
pub const sfx_s242: sfxenum_t = 326;
pub const sfx_s241: sfxenum_t = 325;
pub const sfx_s240: sfxenum_t = 324;
pub const sfx_s23f: sfxenum_t = 323;
pub const sfx_s23e: sfxenum_t = 322;
pub const sfx_s23d: sfxenum_t = 321;
pub const sfx_s23c: sfxenum_t = 320;
pub const sfx_s23b: sfxenum_t = 319;
pub const sfx_s23a: sfxenum_t = 318;
pub const sfx_s239: sfxenum_t = 317;
pub const sfx_s238: sfxenum_t = 316;
pub const sfx_s237: sfxenum_t = 315;
pub const sfx_s236: sfxenum_t = 314;
pub const sfx_s235: sfxenum_t = 313;
pub const sfx_s234: sfxenum_t = 312;
pub const sfx_s233: sfxenum_t = 311;
pub const sfx_s232: sfxenum_t = 310;
pub const sfx_s231: sfxenum_t = 309;
pub const sfx_s230: sfxenum_t = 308;
pub const sfx_s22f: sfxenum_t = 307;
pub const sfx_s22e: sfxenum_t = 306;
pub const sfx_s22d: sfxenum_t = 305;
pub const sfx_s22c: sfxenum_t = 304;
pub const sfx_s22b: sfxenum_t = 303;
pub const sfx_s22a: sfxenum_t = 302;
pub const sfx_s229: sfxenum_t = 301;
pub const sfx_s228: sfxenum_t = 300;
pub const sfx_s227: sfxenum_t = 299;
pub const sfx_s226: sfxenum_t = 298;
pub const sfx_s225: sfxenum_t = 297;
pub const sfx_s224: sfxenum_t = 296;
pub const sfx_s223: sfxenum_t = 295;
pub const sfx_s222: sfxenum_t = 294;
pub const sfx_s221: sfxenum_t = 293;
pub const sfx_s220: sfxenum_t = 292;
pub const sfx_s1cf: sfxenum_t = 291;
pub const sfx_s1ce: sfxenum_t = 290;
pub const sfx_s1cd: sfxenum_t = 289;
pub const sfx_s1cc: sfxenum_t = 288;
pub const sfx_s1cb: sfxenum_t = 287;
pub const sfx_s1ca: sfxenum_t = 286;
pub const sfx_s1c9: sfxenum_t = 285;
pub const sfx_s1c8: sfxenum_t = 284;
pub const sfx_s1c7: sfxenum_t = 283;
pub const sfx_s1c6: sfxenum_t = 282;
pub const sfx_s1c5: sfxenum_t = 281;
pub const sfx_s1c4: sfxenum_t = 280;
pub const sfx_s1c3: sfxenum_t = 279;
pub const sfx_s1c2: sfxenum_t = 278;
pub const sfx_s1c1: sfxenum_t = 277;
pub const sfx_s1c0: sfxenum_t = 276;
pub const sfx_s1bf: sfxenum_t = 275;
pub const sfx_s1be: sfxenum_t = 274;
pub const sfx_s1bd: sfxenum_t = 273;
pub const sfx_s1bc: sfxenum_t = 272;
pub const sfx_s1bb: sfxenum_t = 271;
pub const sfx_s1ba: sfxenum_t = 270;
pub const sfx_s1b9: sfxenum_t = 269;
pub const sfx_s1b8: sfxenum_t = 268;
pub const sfx_s1b7: sfxenum_t = 267;
pub const sfx_s1b6: sfxenum_t = 266;
pub const sfx_s1b5: sfxenum_t = 265;
pub const sfx_s1b4: sfxenum_t = 264;
pub const sfx_s1b3: sfxenum_t = 263;
pub const sfx_s1b2: sfxenum_t = 262;
pub const sfx_s1b1: sfxenum_t = 261;
pub const sfx_s1b0: sfxenum_t = 260;
pub const sfx_s1af: sfxenum_t = 259;
pub const sfx_s1ae: sfxenum_t = 258;
pub const sfx_s1ad: sfxenum_t = 257;
pub const sfx_s1ac: sfxenum_t = 256;
pub const sfx_s1ab: sfxenum_t = 255;
pub const sfx_s1aa: sfxenum_t = 254;
pub const sfx_s1a9: sfxenum_t = 253;
pub const sfx_s1a8: sfxenum_t = 252;
pub const sfx_s1a7: sfxenum_t = 251;
pub const sfx_s1a6: sfxenum_t = 250;
pub const sfx_s1a5: sfxenum_t = 249;
pub const sfx_s1a4: sfxenum_t = 248;
pub const sfx_s1a3: sfxenum_t = 247;
pub const sfx_s1a2: sfxenum_t = 246;
pub const sfx_s1a1: sfxenum_t = 245;
pub const sfx_s1a0: sfxenum_t = 244;
pub const sfx_brakrx: sfxenum_t = 243;
pub const sfx_brakrl: sfxenum_t = 242;
pub const sfx_beelec: sfxenum_t = 241;
pub const sfx_bgxpld: sfxenum_t = 240;
pub const sfx_bexpld: sfxenum_t = 239;
pub const sfx_bewar4: sfxenum_t = 238;
pub const sfx_bewar3: sfxenum_t = 237;
pub const sfx_bewar2: sfxenum_t = 236;
pub const sfx_bewar1: sfxenum_t = 235;
pub const sfx_bestp2: sfxenum_t = 234;
pub const sfx_bestep: sfxenum_t = 233;
pub const sfx_beshot: sfxenum_t = 232;
pub const sfx_beragh: sfxenum_t = 231;
pub const sfx_beoutb: sfxenum_t = 230;
pub const sfx_belnch: sfxenum_t = 229;
pub const sfx_bejet1: sfxenum_t = 228;
pub const sfx_behurt: sfxenum_t = 227;
pub const sfx_begrnd: sfxenum_t = 226;
pub const sfx_begoop: sfxenum_t = 225;
pub const sfx_beflap: sfxenum_t = 224;
pub const sfx_befire: sfxenum_t = 223;
pub const sfx_befall: sfxenum_t = 222;
pub const sfx_beeyow: sfxenum_t = 221;
pub const sfx_bedie2: sfxenum_t = 220;
pub const sfx_bedie1: sfxenum_t = 219;
pub const sfx_bedeen: sfxenum_t = 218;
pub const sfx_becrsh: sfxenum_t = 217;
pub const sfx_bechrg: sfxenum_t = 216;
pub const sfx_bebomb: sfxenum_t = 215;
pub const sfx_thwomp: sfxenum_t = 214;
pub const sfx_marioa: sfxenum_t = 213;
pub const sfx_mario9: sfxenum_t = 212;
pub const sfx_mario8: sfxenum_t = 211;
pub const sfx_mario7: sfxenum_t = 210;
pub const sfx_mario6: sfxenum_t = 209;
pub const sfx_mario5: sfxenum_t = 208;
pub const sfx_mario4: sfxenum_t = 207;
pub const sfx_mario3: sfxenum_t = 206;
pub const sfx_mario2: sfxenum_t = 205;
pub const sfx_mario1: sfxenum_t = 204;
pub const sfx_koopfr: sfxenum_t = 203;
pub const sfx_ghosty: sfxenum_t = 202;
pub const sfx_pumpkn: sfxenum_t = 201;
pub const sfx_lntdie: sfxenum_t = 200;
pub const sfx_lntsit: sfxenum_t = 199;
pub const sfx_peww: sfxenum_t = 198;
pub const sfx_ngjump: sfxenum_t = 197;
pub const sfx_timeup: sfxenum_t = 196;
pub const sfx_prloop: sfxenum_t = 195;
pub const sfx_hidden: sfxenum_t = 194;
pub const sfx_hoop3: sfxenum_t = 193;
pub const sfx_hoop2: sfxenum_t = 192;
pub const sfx_hoop1: sfxenum_t = 191;
pub const sfx_ngskid: sfxenum_t = 190;
pub const sfx_nghurt: sfxenum_t = 189;
pub const sfx_ncspec: sfxenum_t = 188;
pub const sfx_drill2: sfxenum_t = 187;
pub const sfx_drill1: sfxenum_t = 186;
pub const sfx_nxdone: sfxenum_t = 185;
pub const sfx_ngdone: sfxenum_t = 184;
pub const sfx_nxitem: sfxenum_t = 183;
pub const sfx_ncitem: sfxenum_t = 182;
pub const sfx_ncchip: sfxenum_t = 181;
pub const sfx_nxbump: sfxenum_t = 180;
pub const sfx_nbmper: sfxenum_t = 179;
pub const sfx_xideya: sfxenum_t = 178;
pub const sfx_ideya: sfxenum_t = 177;
pub const sfx_addfil: sfxenum_t = 176;
pub const sfx_notadd: sfxenum_t = 175;
pub const sfx_adderr: sfxenum_t = 174;
pub const sfx_zelda: sfxenum_t = 173;
pub const sfx_wtrdng: sfxenum_t = 172;
pub const sfx_wepchg: sfxenum_t = 171;
pub const sfx_radio: sfxenum_t = 170;
pub const sfx_ptally: sfxenum_t = 169;
pub const sfx_oneup: sfxenum_t = 168;
pub const sfx_menu1: sfxenum_t = 167;
pub const sfx_flgcap: sfxenum_t = 166;
pub const sfx_emfind: sfxenum_t = 165;
pub const sfx_dwnind: sfxenum_t = 164;
pub const sfx_chchng: sfxenum_t = 163;
pub const sfx_antiri: sfxenum_t = 162;
pub const sfx_shattr: sfxenum_t = 161;
pub const sfx_iceb: sfxenum_t = 160;
pub const sfx_pscree: sfxenum_t = 159;
pub const sfx_lvfal1: sfxenum_t = 158;
pub const sfx_sprong: sfxenum_t = 157;
pub const sfx_bsnipe: sfxenum_t = 156;
pub const sfx_chuchu: sfxenum_t = 155;
pub const sfx_bowl: sfxenum_t = 154;
pub const sfx_vwre: sfxenum_t = 153;
pub const sfx_alart: sfxenum_t = 152;
pub const sfx_corkh: sfxenum_t = 151;
pub const sfx_corkp: sfxenum_t = 150;
pub const sfx_boingf: sfxenum_t = 149;
pub const sfx_mspogo: sfxenum_t = 148;
pub const sfx_mswarp: sfxenum_t = 147;
pub const sfx_shrpgo: sfxenum_t = 146;
pub const sfx_shrpsp: sfxenum_t = 145;
pub const sfx_wdjump: sfxenum_t = 144;
pub const sfx_turhit: sfxenum_t = 143;
pub const sfx_trpowr: sfxenum_t = 142;
pub const sfx_trfire: sfxenum_t = 141;
pub const sfx_token: sfxenum_t = 140;
pub const sfx_tink: sfxenum_t = 139;
pub const sfx_telept: sfxenum_t = 138;
pub const sfx_supert: sfxenum_t = 137;
pub const sfx_strpst: sfxenum_t = 136;
pub const sfx_statu2: sfxenum_t = 135;
pub const sfx_statu1: sfxenum_t = 134;
pub const sfx_spring: sfxenum_t = 133;
pub const sfx_spkdth: sfxenum_t = 132;
pub const sfx_spdpad: sfxenum_t = 131;
pub const sfx_shldls: sfxenum_t = 130;
pub const sfx_attrsg: sfxenum_t = 129;
pub const sfx_armasg: sfxenum_t = 128;
pub const sfx_elemsg: sfxenum_t = 127;
pub const sfx_frcssg: sfxenum_t = 126;
pub const sfx_forcsg: sfxenum_t = 125;
pub const sfx_wirlsg: sfxenum_t = 124;
pub const sfx_shield: sfxenum_t = 123;
pub const sfx_rlaunc: sfxenum_t = 122;
pub const sfx_rail2: sfxenum_t = 121;
pub const sfx_rail1: sfxenum_t = 120;
pub const sfx_pop: sfxenum_t = 119;
pub const sfx_pogo: sfxenum_t = 118;
pub const sfx_monton: sfxenum_t = 117;
pub const sfx_mixup: sfxenum_t = 116;
pub const sfx_mindig: sfxenum_t = 115;
pub const sfx_lvpass: sfxenum_t = 114;
pub const sfx_lose: sfxenum_t = 113;
pub const sfx_jshard: sfxenum_t = 112;
pub const sfx_jet: sfxenum_t = 111;
pub const sfx_itemup: sfxenum_t = 110;
pub const sfx_gravch: sfxenum_t = 109;
pub const sfx_gspray: sfxenum_t = 108;
pub const sfx_gloop: sfxenum_t = 107;
pub const sfx_ghit: sfxenum_t = 106;
pub const sfx_wepfir: sfxenum_t = 105;
pub const sfx_gbeep: sfxenum_t = 104;
pub const sfx_fizzle: sfxenum_t = 103;
pub const sfx_drown: sfxenum_t = 102;
pub const sfx_dmpain: sfxenum_t = 101;
pub const sfx_ding: sfxenum_t = 100;
pub const sfx_deton: sfxenum_t = 99;
pub const sfx_cybdth: sfxenum_t = 98;
pub const sfx_cgot: sfxenum_t = 97;
pub const sfx_cannon: sfxenum_t = 96;
pub const sfx_bnce2: sfxenum_t = 95;
pub const sfx_bnce1: sfxenum_t = 94;
pub const sfx_bkpoof: sfxenum_t = 93;
pub const sfx_appear: sfxenum_t = 92;
pub const sfx_rumble: sfxenum_t = 91;
pub const sfx_rumbam: sfxenum_t = 90;
pub const sfx_rocks4: sfxenum_t = 89;
pub const sfx_rocks3: sfxenum_t = 88;
pub const sfx_rocks2: sfxenum_t = 87;
pub const sfx_rocks1: sfxenum_t = 86;
pub const sfx_lavbub: sfxenum_t = 85;
pub const sfx_ambin2: sfxenum_t = 84;
pub const sfx_elevb3: sfxenum_t = 83;
pub const sfx_elevb2: sfxenum_t = 82;
pub const sfx_elevb1: sfxenum_t = 81;
pub const sfx_eleva3: sfxenum_t = 80;
pub const sfx_eleva2: sfxenum_t = 79;
pub const sfx_eleva1: sfxenum_t = 78;
pub const sfx_doord2: sfxenum_t = 77;
pub const sfx_doord1: sfxenum_t = 76;
pub const sfx_doorc2: sfxenum_t = 75;
pub const sfx_doorc1: sfxenum_t = 74;
pub const sfx_doorb1: sfxenum_t = 73;
pub const sfx_doora1: sfxenum_t = 72;
pub const sfx_wslap: sfxenum_t = 71;
pub const sfx_wdrip8: sfxenum_t = 70;
pub const sfx_wdrip7: sfxenum_t = 69;
pub const sfx_wdrip6: sfxenum_t = 68;
pub const sfx_wdrip5: sfxenum_t = 67;
pub const sfx_wdrip4: sfxenum_t = 66;
pub const sfx_wdrip3: sfxenum_t = 65;
pub const sfx_wdrip2: sfxenum_t = 64;
pub const sfx_wdrip1: sfxenum_t = 63;
pub const sfx_splish: sfxenum_t = 62;
pub const sfx_splash: sfxenum_t = 61;
pub const sfx_floush: sfxenum_t = 60;
pub const sfx_bubbl5: sfxenum_t = 59;
pub const sfx_bubbl4: sfxenum_t = 58;
pub const sfx_bubbl3: sfxenum_t = 57;
pub const sfx_bubbl2: sfxenum_t = 56;
pub const sfx_bubbl1: sfxenum_t = 55;
pub const sfx_amwtr8: sfxenum_t = 54;
pub const sfx_amwtr7: sfxenum_t = 53;
pub const sfx_amwtr6: sfxenum_t = 52;
pub const sfx_amwtr5: sfxenum_t = 51;
pub const sfx_amwtr4: sfxenum_t = 50;
pub const sfx_amwtr3: sfxenum_t = 49;
pub const sfx_amwtr2: sfxenum_t = 48;
pub const sfx_amwtr1: sfxenum_t = 47;
pub const sfx_athun2: sfxenum_t = 46;
pub const sfx_athun1: sfxenum_t = 45;
pub const sfx_litng4: sfxenum_t = 44;
pub const sfx_litng3: sfxenum_t = 43;
pub const sfx_litng2: sfxenum_t = 42;
pub const sfx_litng1: sfxenum_t = 41;
pub const sfx_rainin: sfxenum_t = 40;
pub const sfx_spsmsh: sfxenum_t = 39;
pub const sfx_ambmac: sfxenum_t = 38;
pub const sfx_wbreak: sfxenum_t = 37;
pub const sfx_steam2: sfxenum_t = 36;
pub const sfx_steam1: sfxenum_t = 35;
pub const sfx_pstop: sfxenum_t = 34;
pub const sfx_pstart: sfxenum_t = 33;
pub const sfx_mswing: sfxenum_t = 32;
pub const sfx_laser: sfxenum_t = 31;
pub const sfx_grind: sfxenum_t = 30;
pub const sfx_fire: sfxenum_t = 29;
pub const sfx_crumbl: sfxenum_t = 28;
pub const sfx_buzz4: sfxenum_t = 27;
pub const sfx_buzz3: sfxenum_t = 26;
pub const sfx_buzz2: sfxenum_t = 25;
pub const sfx_buzz1: sfxenum_t = 24;
pub const sfx_alarm: sfxenum_t = 23;
pub const sfx_ambint: sfxenum_t = 22;
pub const sfx_skid: sfxenum_t = 21;
pub const sfx_zoom: sfxenum_t = 20;
pub const sfx_thok: sfxenum_t = 19;
pub const sfx_spndsh: sfxenum_t = 18;
pub const sfx_spin: sfxenum_t = 17;
pub const sfx_putput: sfxenum_t = 16;
pub const sfx_pudpud: sfxenum_t = 15;
pub const sfx_jump: sfxenum_t = 14;
pub const sfx_gasp: sfxenum_t = 13;
pub const sfx_victr4: sfxenum_t = 12;
pub const sfx_victr3: sfxenum_t = 11;
pub const sfx_victr2: sfxenum_t = 10;
pub const sfx_victr1: sfxenum_t = 9;
pub const sfx_altow4: sfxenum_t = 8;
pub const sfx_altow3: sfxenum_t = 7;
pub const sfx_altow2: sfxenum_t = 6;
pub const sfx_altow1: sfxenum_t = 5;
pub const sfx_altdi4: sfxenum_t = 4;
pub const sfx_altdi3: sfxenum_t = 3;
pub const sfx_altdi2: sfxenum_t = 2;
pub const sfx_altdi1: sfxenum_t = 1;
pub const sfx_None: sfxenum_t = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct state_t {
    pub sprite: spritenum_t,
    pub frame: uint32_t,
    pub tics: int32_t,
    pub action: actionf_t,
    pub var1: int32_t,
    pub var2: int32_t,
    pub nextstate: statenum_t,
}
pub type spritenum_t = sprite;
pub type sprite = libc::c_uint;
pub const NUMSPRITES: sprite = 907;
pub const SPR_LASTFREESLOT: sprite = 906;
pub const SPR_FIRSTFREESLOT: sprite = 395;
pub const SPR_GWLR: sprite = 394;
pub const SPR_GWLG: sprite = 393;
pub const SPR_BRIY: sprite = 392;
pub const SPR_BRIB: sprite = 391;
pub const SPR_BRIR: sprite = 390;
pub const SPR_WDDB: sprite = 389;
pub const SPR_BRIC: sprite = 388;
pub const SPR_GFZD: sprite = 387;
pub const SPR_ROIP: sprite = 386;
pub const SPR_ROIO: sprite = 385;
pub const SPR_ROIN: sprite = 384;
pub const SPR_ROIM: sprite = 383;
pub const SPR_ROIL: sprite = 382;
pub const SPR_ROIK: sprite = 381;
pub const SPR_ROIJ: sprite = 380;
pub const SPR_ROII: sprite = 379;
pub const SPR_ROIH: sprite = 378;
pub const SPR_ROIG: sprite = 377;
pub const SPR_ROIF: sprite = 376;
pub const SPR_ROIE: sprite = 375;
pub const SPR_ROID: sprite = 374;
pub const SPR_ROIC: sprite = 373;
pub const SPR_ROIB: sprite = 372;
pub const SPR_ROIA: sprite = 371;
pub const SPR_BMNB: sprite = 370;
pub const SPR_BOM4: sprite = 369;
pub const SPR_BOM3: sprite = 368;
pub const SPR_BOM2: sprite = 367;
pub const SPR_BOM1: sprite = 366;
pub const SPR_SPRK: sprite = 365;
pub const SPR_HBAT: sprite = 364;
pub const SPR_SBSK: sprite = 363;
pub const SPR_SBFL: sprite = 362;
pub const SPR_SBOB: sprite = 361;
pub const SPR_BAL2: sprite = 360;
pub const SPR_CACO: sprite = 359;
pub const SPR_HMCE: sprite = 358;
pub const SPR_FMCE: sprite = 357;
pub const SPR_BBUZ: sprite = 356;
pub const SPR_BUMB: sprite = 355;
pub const SPR_HIVE: sprite = 354;
pub const SPR_POPH: sprite = 353;
pub const SPR_PENG: sprite = 352;
pub const SPR_SHLP: sprite = 351;
pub const SPR_NTPN: sprite = 350;
pub const SPR_IDYA: sprite = 349;
pub const SPR_CAPS: sprite = 348;
pub const SPR_NPRU: sprite = 347;
pub const SPR_NSCR: sprite = 346;
pub const SPR_HOOP: sprite = 345;
pub const SPR_NBMP: sprite = 344;
pub const SPR_NSPK: sprite = 343;
pub const SPR_NDRN: sprite = 342;
pub const SPR_TOAD: sprite = 341;
pub const SPR_MUS2: sprite = 340;
pub const SPR_MUS1: sprite = 339;
pub const SPR_MAXE: sprite = 338;
pub const SPR_BFLM: sprite = 337;
pub const SPR_KOOP: sprite = 336;
pub const SPR_HAMM: sprite = 335;
pub const SPR_PUMA: sprite = 334;
pub const SPR_SHLL: sprite = 333;
pub const SPR_FBLL: sprite = 332;
pub const SPR_FFWR: sprite = 331;
pub const SPR_BGOM: sprite = 330;
pub const SPR_GOOM: sprite = 329;
pub const SPR_CPRK: sprite = 328;
pub const SPR_COIN: sprite = 327;
pub const SPR_TSCR: sprite = 326;
pub const SPR_TGRE: sprite = 325;
pub const SPR_TAUT: sprite = 324;
pub const SPR_PIKG: sprite = 323;
pub const SPR_PIKS: sprite = 322;
pub const SPR_PIKE: sprite = 321;
pub const SPR_PIKA: sprite = 320;
pub const SPR_PIKR: sprite = 319;
pub const SPR_PIKB: sprite = 318;
pub const SPR_RNGG: sprite = 317;
pub const SPR_RNGS: sprite = 316;
pub const SPR_RNGE: sprite = 315;
pub const SPR_RNGA: sprite = 314;
pub const SPR_RNGI: sprite = 313;
pub const SPR_RNGR: sprite = 312;
pub const SPR_RNGB: sprite = 311;
pub const SPR_RRNG: sprite = 310;
pub const SPR_LHRT: sprite = 309;
pub const SPR_CORK: sprite = 308;
pub const SPR_FNSF: sprite = 307;
pub const SPR_GFLG: sprite = 306;
pub const SPR_TTAG: sprite = 305;
pub const SPR_LCKN: sprite = 304;
pub const SPR_FLII: sprite = 303;
pub const SPR_DRWN: sprite = 302;
pub const SPR_SCOR: sprite = 301;
pub const SPR_PRTL: sprite = 300;
pub const SPR_SEED: sprite = 299;
pub const SPR_TFOG: sprite = 298;
pub const SPR_FPRT: sprite = 297;
pub const SPR_DUST: sprite = 296;
pub const SPR_WZAP: sprite = 295;
pub const SPR_BUBL: sprite = 294;
pub const SPR_SMOK: sprite = 293;
pub const SPR_SPLA: sprite = 292;
pub const SPR_LSPL: sprite = 291;
pub const SPR_SPLH: sprite = 290;
pub const SPR_SNO1: sprite = 289;
pub const SPR_RAIN: sprite = 288;
pub const SPR_BSTR: sprite = 287;
pub const SPR_BSTY: sprite = 286;
pub const SPR_SSWB: sprite = 285;
pub const SPR_SSWR: sprite = 284;
pub const SPR_SSWY: sprite = 283;
pub const SPR_BSPR: sprite = 282;
pub const SPR_RSPR: sprite = 281;
pub const SPR_YSPR: sprite = 280;
pub const SPR_SPRB: sprite = 279;
pub const SPR_SPRR: sprite = 278;
pub const SPR_SPRY: sprite = 277;
pub const SPR_BLON: sprite = 276;
pub const SPR_BUMP: sprite = 275;
pub const SPR_STEM: sprite = 274;
pub const SPR_FANS: sprite = 273;
pub const SPR_FS02: sprite = 272;
pub const SPR_FS01: sprite = 271;
pub const SPR_FL16: sprite = 270;
pub const SPR_FL15: sprite = 269;
pub const SPR_FL14: sprite = 268;
pub const SPR_FL13: sprite = 267;
pub const SPR_FL12: sprite = 266;
pub const SPR_FL11: sprite = 265;
pub const SPR_FL10: sprite = 264;
pub const SPR_FL09: sprite = 263;
pub const SPR_FL08: sprite = 262;
pub const SPR_FL07: sprite = 261;
pub const SPR_FL06: sprite = 260;
pub const SPR_FL05: sprite = 259;
pub const SPR_FL04: sprite = 258;
pub const SPR_FL03: sprite = 257;
pub const SPR_FL02: sprite = 256;
pub const SPR_FL01: sprite = 255;
pub const SPR_FBUB: sprite = 254;
pub const SPR_GOAL: sprite = 253;
pub const SPR_SSPK: sprite = 252;
pub const SPR_IVSP: sprite = 251;
pub const SPR_ZAPS: sprite = 250;
pub const SPR_BUBS: sprite = 249;
pub const SPR_FIRS: sprite = 248;
pub const SPR_PITY: sprite = 247;
pub const SPR_FORC: sprite = 246;
pub const SPR_ELEM: sprite = 245;
pub const SPR_MAGN: sprite = 244;
pub const SPR_WIND: sprite = 243;
pub const SPR_ARMB: sprite = 242;
pub const SPR_ARMF: sprite = 241;
pub const SPR_ARMA: sprite = 240;
pub const SPR_DBAL: sprite = 239;
pub const SPR_STLG: sprite = 238;
pub const SPR_BSZ8: sprite = 237;
pub const SPR_BSZ7: sprite = 236;
pub const SPR_BSZ6: sprite = 235;
pub const SPR_BSZ5: sprite = 234;
pub const SPR_BST6: sprite = 233;
pub const SPR_BST5: sprite = 232;
pub const SPR_BST4: sprite = 231;
pub const SPR_BST3: sprite = 230;
pub const SPR_BST2: sprite = 229;
pub const SPR_BST1: sprite = 228;
pub const SPR_BSZ3: sprite = 227;
pub const SPR_BSZ2: sprite = 226;
pub const SPR_BSZ1: sprite = 225;
pub const SPR_CFLM: sprite = 224;
pub const SPR_RCRY: sprite = 223;
pub const SPR_BGAR: sprite = 222;
pub const SPR_HHZM: sprite = 221;
pub const SPR_SHRM: sprite = 220;
pub const SPR_HHPL: sprite = 219;
pub const SPR_PUMK: sprite = 218;
pub const SPR_ROSY: sprite = 217;
pub const SPR_FHZI: sprite = 216;
pub const SPR_XMS6: sprite = 215;
pub const SPR_XMS5: sprite = 214;
pub const SPR_XMS4: sprite = 213;
pub const SPR_XMS3: sprite = 212;
pub const SPR_XMS2: sprite = 211;
pub const SPR_XMS1: sprite = 210;
pub const SPR_WVIN: sprite = 209;
pub const SPR_TFLO: sprite = 208;
pub const SPR_JPLA: sprite = 207;
pub const SPR_LFAL: sprite = 206;
pub const SPR_DFLM: sprite = 205;
pub const SPR_FLME: sprite = 204;
pub const SPR_STEA: sprite = 203;
pub const SPR_TRAI: sprite = 202;
pub const SPR_TRAE: sprite = 201;
pub const SPR_SALD: sprite = 200;
pub const SPR_MCSP: sprite = 199;
pub const SPR_MCRT: sprite = 198;
pub const SPR_ADST: sprite = 197;
pub const SPR_TAZD: sprite = 196;
pub const SPR_REMT: sprite = 195;
pub const SPR_BARR: sprite = 194;
pub const SPR_OILF: sprite = 193;
pub const SPR_OILL: sprite = 192;
pub const SPR_WWS3: sprite = 191;
pub const SPR_WWS2: sprite = 190;
pub const SPR_WWSG: sprite = 189;
pub const SPR_CACT: sprite = 188;
pub const SPR_STBL: sprite = 187;
pub const SPR_BTBL: sprite = 186;
pub const SPR_CABR: sprite = 185;
pub const SPR_CBBS: sprite = 184;
pub const SPR_CSTA: sprite = 183;
pub const SPR_CFLG: sprite = 182;
pub const SPR_CTRC: sprite = 181;
pub const SPR_FLMH: sprite = 180;
pub const SPR_CNDL: sprite = 179;
pub const SPR_CEZB: sprite = 178;
pub const SPR_PINE: sprite = 177;
pub const SPR_BANR: sprite = 176;
pub const SPR_BFBR: sprite = 175;
pub const SPR_SFBR: sprite = 174;
pub const SPR_RSPB: sprite = 173;
pub const SPR_YSPB: sprite = 172;
pub const SPR_BMCE: sprite = 171;
pub const SPR_SMCE: sprite = 170;
pub const SPR_BMCH: sprite = 169;
pub const SPR_SMCH: sprite = 168;
pub const SPR_ESTA: sprite = 167;
pub const SPR_FLAM: sprite = 166;
pub const SPR_CHAN: sprite = 165;
pub const SPR_LIBE: sprite = 164;
pub const SPR_DSTG: sprite = 163;
pub const SPR_ALGB: sprite = 162;
pub const SPR_ALGA: sprite = 161;
pub const SPR_KELP: sprite = 160;
pub const SPR_BCRY: sprite = 159;
pub const SPR_CORL: sprite = 158;
pub const SPR_DRIP: sprite = 157;
pub const SPR_SEWE: sprite = 156;
pub const SPR_GARG: sprite = 155;
pub const SPR_ALRM: sprite = 154;
pub const SPR_THZT: sprite = 153;
pub const SPR_FWR6: sprite = 152;
pub const SPR_FWR5: sprite = 151;
pub const SPR_THZP: sprite = 150;
pub const SPR_TRE6: sprite = 149;
pub const SPR_TRE5: sprite = 148;
pub const SPR_TRE4: sprite = 147;
pub const SPR_TRE3: sprite = 146;
pub const SPR_TRE2: sprite = 145;
pub const SPR_TRE1: sprite = 144;
pub const SPR_BUS3: sprite = 143;
pub const SPR_BUS2: sprite = 142;
pub const SPR_BUS1: sprite = 141;
pub const SPR_FWR4: sprite = 140;
pub const SPR_FWR3: sprite = 139;
pub const SPR_FWR2: sprite = 138;
pub const SPR_FWR1: sprite = 137;
pub const SPR_TUPF: sprite = 136;
pub const SPR_TUPL: sprite = 135;
pub const SPR_LETR: sprite = 134;
pub const SPR_CFIR: sprite = 133;
pub const SPR_AROW: sprite = 132;
pub const SPR_CBLL: sprite = 131;
pub const SPR_TRLS: sprite = 130;
pub const SPR_JBUL: sprite = 129;
pub const SPR_MINE: sprite = 128;
pub const SPR_ENRG: sprite = 127;
pub const SPR_TORP: sprite = 126;
pub const SPR_LASF: sprite = 125;
pub const SPR_LASR: sprite = 124;
pub const SPR_MISL: sprite = 123;
pub const SPR_TVZP: sprite = 122;
pub const SPR_TVBB: sprite = 121;
pub const SPR_TVFL: sprite = 120;
pub const SPR_TVTK: sprite = 119;
pub const SPR_TV1K: sprite = 118;
pub const SPR_TVRC: sprite = 117;
pub const SPR_TVGV: sprite = 116;
pub const SPR_TVMY: sprite = 115;
pub const SPR_TVMX: sprite = 114;
pub const SPR_TVEG: sprite = 113;
pub const SPR_TV1P: sprite = 112;
pub const SPR_TV1U: sprite = 111;
pub const SPR_TVIV: sprite = 110;
pub const SPR_TVSS: sprite = 109;
pub const SPR_TVEL: sprite = 108;
pub const SPR_TVWW: sprite = 107;
pub const SPR_TVAR: sprite = 106;
pub const SPR_TVFO: sprite = 105;
pub const SPR_TVAT: sprite = 104;
pub const SPR_TVPI: sprite = 103;
pub const SPR_TVRI: sprite = 102;
pub const SPR_TBRI: sprite = 101;
pub const SPR_TRRI: sprite = 100;
pub const SPR_XLTV: sprite = 99;
pub const SPR_MSTV: sprite = 98;
pub const SPR_PUMI: sprite = 97;
pub const SPR_BMNE: sprite = 96;
pub const SPR_STPT: sprite = 95;
pub const SPR_WSPB: sprite = 94;
pub const SPR_WSPK: sprite = 93;
pub const SPR_USPK: sprite = 92;
pub const SPR_TFLM: sprite = 91;
pub const SPR_SFLM: sprite = 90;
pub const SPR_SPIK: sprite = 89;
pub const SPR_SIGN: sprite = 88;
pub const SPR_BBLS: sprite = 87;
pub const SPR_SHRD: sprite = 86;
pub const SPR_CEMG: sprite = 85;
pub const SPR_EMBM: sprite = 84;
pub const SPR_NSTR: sprite = 83;
pub const SPR_NCHP: sprite = 82;
pub const SPR_SPHR: sprite = 81;
pub const SPR_BFLG: sprite = 80;
pub const SPR_RFLG: sprite = 79;
pub const SPR_TOKE: sprite = 78;
pub const SPR_TRNG: sprite = 77;
pub const SPR_RING: sprite = 76;
pub const SPR_MSCB: sprite = 75;
pub const SPR_MSCF: sprite = 74;
pub const SPR_METL: sprite = 73;
pub const SPR_MNPL: sprite = 72;
pub const SPR_NPLM: sprite = 71;
pub const SPR_TARG: sprite = 70;
pub const SPR_ELEC: sprite = 69;
pub const SPR_RCKT: sprite = 68;
pub const SPR_EGGT: sprite = 67;
pub const SPR_BMSL: sprite = 66;
pub const SPR_BGOO: sprite = 65;
pub const SPR_BRAK: sprite = 64;
pub const SPR_EGGR: sprite = 63;
pub const SPR_BARD: sprite = 62;
pub const SPR_BARX: sprite = 61;
pub const SPR_FSGN: sprite = 60;
pub const SPR_FBOM: sprite = 59;
pub const SPR_PROJ: sprite = 58;
pub const SPR_VWRE: sprite = 57;
pub const SPR_WHAT: sprite = 56;
pub const SPR_BRKN: sprite = 55;
pub const SPR_FANG: sprite = 54;
pub const SPR_EGR1: sprite = 53;
pub const SPR_EFIR: sprite = 52;
pub const SPR_EGGP: sprite = 51;
pub const SPR_SHCK: sprite = 50;
pub const SPR_FAKE: sprite = 49;
pub const SPR_SEBH: sprite = 48;
pub const SPR_EGGO: sprite = 47;
pub const SPR_GOOP: sprite = 46;
pub const SPR_TANK: sprite = 45;
pub const SPR_EGGN: sprite = 44;
pub const SPR_EGLZ: sprite = 43;
pub const SPR_EGGM: sprite = 42;
pub const SPR_JETF: sprite = 41;
pub const SPR_DRAB: sprite = 40;
pub const SPR_PTER: sprite = 39;
pub const SPR_PYRE: sprite = 38;
pub const SPR_CANG: sprite = 37;
pub const SPR_CANA: sprite = 36;
pub const SPR_UNID: sprite = 35;
pub const SPR_SSHL: sprite = 34;
pub const SPR_MNUD: sprite = 33;
pub const SPR_MNUS: sprite = 32;
pub const SPR_GSNH: sprite = 31;
pub const SPR_GSNL: sprite = 30;
pub const SPR_GSNP: sprite = 29;
pub const SPR_ESHI: sprite = 28;
pub const SPR_SPSH: sprite = 27;
pub const SPR_STAB: sprite = 26;
pub const SPR_CBFS: sprite = 25;
pub const SPR_ARCH: sprite = 24;
pub const SPR_PNTY: sprite = 23;
pub const SPR_VLTR: sprite = 22;
pub const SPR_SNLR: sprite = 21;
pub const SPR_JJAW: sprite = 20;
pub const SPR_CSPR: sprite = 19;
pub const SPR_CR2B: sprite = 18;
pub const SPR_CRAB: sprite = 17;
pub const SPR_SHRP: sprite = 16;
pub const SPR_TURR: sprite = 15;
pub const SPR_TRET: sprite = 14;
pub const SPR_SKIM: sprite = 13;
pub const SPR_DETN: sprite = 12;
pub const SPR_CCOM: sprite = 11;
pub const SPR_JETG: sprite = 10;
pub const SPR_JETB: sprite = 9;
pub const SPR_RBUZ: sprite = 8;
pub const SPR_BUZZ: sprite = 7;
pub const SPR_FISH: sprite = 6;
pub const SPR_SPOS: sprite = 5;
pub const SPR_POSS: sprite = 4;
pub const SPR_PLAY: sprite = 3;
pub const SPR_THOK: sprite = 2;
pub const SPR_UNKN: sprite = 1;
pub const SPR_NULL: sprite = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ffloor_s {
    pub topheight: *mut fixed_t,
    pub toppic: *mut int32_t,
    pub toplightlevel: *mut int16_t,
    pub topxoffs: *mut fixed_t,
    pub topyoffs: *mut fixed_t,
    pub topangle: *mut angle_t,
    pub bottomheight: *mut fixed_t,
    pub bottompic: *mut int32_t,
    pub bottomxoffs: *mut fixed_t,
    pub bottomyoffs: *mut fixed_t,
    pub bottomangle: *mut angle_t,
    pub t_slope: *mut *mut pslope_s,
    pub b_slope: *mut *mut pslope_s,
    pub secnum: size_t,
    pub fofflags: ffloortype_e,
    pub master: *mut line_s,
    pub target: *mut sector_s,
    pub next: *mut ffloor_s,
    pub prev: *mut ffloor_s,
    pub lastlight: int32_t,
    pub alpha: int32_t,
    pub blend: uint8_t,
    pub norender: tic_t,
    pub bustflags: ffloorbustflags_e,
    pub busttype: uint8_t,
    pub busttag: int16_t,
    pub sinkspeed: fixed_t,
    pub friction: fixed_t,
    pub bouncestrength: fixed_t,
    pub spawnflags: ffloortype_e,
    pub spawnalpha: int32_t,
    pub fadingdata: *mut libc::c_void,
}
pub type ffloortype_e = libc::c_uint;
pub const FOF_SPLAT: ffloortype_e = 1073741824;
pub const FOF_BOUNCY: ffloortype_e = 536870912;
pub const FOF_COLORMAPONLY: ffloortype_e = 268435456;
pub const FOF_RIPPLE: ffloortype_e = 134217728;
pub const FOF_INTANGIBLEFLATS: ffloortype_e = 100663296;
pub const FOF_REVERSEPLATFORM: ffloortype_e = 67108864;
pub const FOF_PLATFORM: ffloortype_e = 33554432;
pub const FOF_QUICKSAND: ffloortype_e = 16777216;
pub const FOF_BUSTUP: ffloortype_e = 8388608;
pub const FOF_MARIO: ffloortype_e = 4194304;
pub const FOF_GOOWATER: ffloortype_e = 2097152;
pub const FOF_CRUMBLE: ffloortype_e = 1048576;
pub const FOF_NORETURN: ffloortype_e = 524288;
pub const FOF_FLOATBOB: ffloortype_e = 262144;
pub const FOF_DOUBLESHADOW: ffloortype_e = 131072;
pub const FOF_INVERTSIDES: ffloortype_e = 65536;
pub const FOF_ALLSIDES: ffloortype_e = 32768;
pub const FOF_INVERTPLANES: ffloortype_e = 16384;
pub const FOF_FOG: ffloortype_e = 8192;
pub const FOF_TRANSLUCENT: ffloortype_e = 4096;
pub const FOF_EXTRA: ffloortype_e = 2048;
pub const FOF_BOTHPLANES: ffloortype_e = 1024;
pub const FOF_CUTSPRITES: ffloortype_e = 512;
pub const FOF_CUTLEVEL: ffloortype_e = 384;
pub const FOF_CUTEXTRA: ffloortype_e = 256;
pub const FOF_CUTSOLIDS: ffloortype_e = 128;
pub const FOF_NOSHADE: ffloortype_e = 64;
pub const FOF_SWIMMABLE: ffloortype_e = 32;
pub const FOF_RENDERALL: ffloortype_e = 24;
pub const FOF_RENDERPLANES: ffloortype_e = 16;
pub const FOF_RENDERSIDES: ffloortype_e = 8;
pub const FOF_SOLID: ffloortype_e = 6;
pub const FOF_BLOCKOTHERS: ffloortype_e = 4;
pub const FOF_BLOCKPLAYER: ffloortype_e = 2;
pub const FOF_EXISTS: ffloortype_e = 1;
pub type ffloorbustflags_e = libc::c_uint;
pub const FB_ONLYBOTTOM: ffloorbustflags_e = 4;
pub const FB_EXECUTOR: ffloorbustflags_e = 2;
pub const FB_PUSHABLES: ffloorbustflags_e = 1;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct sector_s {
    pub floorheight: fixed_t,
    pub ceilingheight: fixed_t,
    pub floorpic: int32_t,
    pub ceilingpic: int32_t,
    pub lightlevel: int16_t,
    pub special: int16_t,
    pub tags: taglist_t,
    pub soundorg: degenmobj_t,
    pub validcount: size_t,
    pub thinglist: *mut mobj_t,
    pub floordata: *mut libc::c_void,
    pub ceilingdata: *mut libc::c_void,
    pub lightingdata: *mut libc::c_void,
    pub fadecolormapdata: *mut libc::c_void,
    pub floorxoffset: fixed_t,
    pub flooryoffset: fixed_t,
    pub ceilingxoffset: fixed_t,
    pub ceilingyoffset: fixed_t,
    pub floorangle: angle_t,
    pub ceilingangle: angle_t,
    pub heightsec: int32_t,
    pub camsec: int32_t,
    pub floorlightlevel: int16_t,
    pub ceilinglightlevel: int16_t,
    pub floorlightabsolute: boolean,
    pub ceilinglightabsolute: boolean,
    pub floorlightsec: int32_t,
    pub ceilinglightsec: int32_t,
    pub crumblestate: int32_t,
    pub touching_thinglist: *mut msecnode_s,
    pub linecount: size_t,
    pub lines: *mut *mut line_s,
    pub ffloors: *mut ffloor_t,
    pub attached: *mut size_t,
    pub attachedsolid: *mut boolean,
    pub numattached: size_t,
    pub maxattached: size_t,
    pub lightlist: *mut lightlist_t,
    pub numlights: int32_t,
    pub moved: boolean,
    pub extra_colormap: *mut extracolormap_t,
    pub colormap_protected: boolean,
    pub gravity: fixed_t,
    pub gravityptr: *mut fixed_t,
    pub flags: sectorflags_t,
    pub specialflags: sectorspecialflags_t,
    pub damagetype: uint8_t,
    pub triggertag: mtag_t,
    pub triggerer: uint8_t,
    pub friction: fixed_t,
    pub cullheight: *mut line_s,
    pub floorspeed: fixed_t,
    pub ceilspeed: fixed_t,
    pub preciplist: *mut precipmobj_t,
    pub touching_preciplist: *mut mprecipsecnode_s,
    pub f_slope: *mut pslope_t,
    pub c_slope: *mut pslope_t,
    pub hasslope: boolean,
    pub spawn_lightlevel: int16_t,
    pub spawn_extra_colormap: *mut extracolormap_t,
}
pub type extracolormap_t = extracolormap_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct extracolormap_s {
    pub fadestart: uint8_t,
    pub fadeend: uint8_t,
    pub flags: uint8_t,
    pub rgba: int32_t,
    pub fadergba: int32_t,
    pub colormap: *mut lighttable_t,
    pub next: *mut extracolormap_s,
    pub prev: *mut extracolormap_s,
}
pub type lighttable_t = uint8_t;
pub type pslope_t = pslope_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct mprecipsecnode_s {
    pub m_sector: *mut sector_t,
    pub m_thing: *mut precipmobj_s,
    pub m_sectorlist_prev: *mut mprecipsecnode_s,
    pub m_sectorlist_next: *mut mprecipsecnode_s,
    pub m_thinglist_prev: *mut mprecipsecnode_s,
    pub m_thinglist_next: *mut mprecipsecnode_s,
    pub visited: boolean,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct precipmobj_s {
    pub thinker: thinker_t,
    pub x: fixed_t,
    pub y: fixed_t,
    pub z: fixed_t,
    pub old_x: fixed_t,
    pub old_y: fixed_t,
    pub old_z: fixed_t,
    pub old_x2: fixed_t,
    pub old_y2: fixed_t,
    pub old_z2: fixed_t,
    pub snext: *mut precipmobj_s,
    pub sprev: *mut *mut precipmobj_s,
    pub angle: angle_t,
    pub pitch: angle_t,
    pub roll: angle_t,
    pub old_angle: angle_t,
    pub old_pitch: angle_t,
    pub old_roll: angle_t,
    pub old_angle2: angle_t,
    pub old_pitch2: angle_t,
    pub old_roll2: angle_t,
    pub spriteroll: angle_t,
    pub old_spriteroll: angle_t,
    pub old_spriteroll2: angle_t,
    pub sprite: spritenum_t,
    pub frame: uint32_t,
    pub sprite2: uint8_t,
    pub anim_duration: uint16_t,
    pub renderflags: uint32_t,
    pub blendmode: int32_t,
    pub spritexscale: fixed_t,
    pub spriteyscale: fixed_t,
    pub spritexoffset: fixed_t,
    pub spriteyoffset: fixed_t,
    pub old_spritexscale: fixed_t,
    pub old_spriteyscale: fixed_t,
    pub old_spritexoffset: fixed_t,
    pub old_spriteyoffset: fixed_t,
    pub floorspriteslope: *mut pslope_s,
    pub touching_sectorlist: *mut mprecipsecnode_s,
    pub subsector: *mut subsector_s,
    pub floorz: fixed_t,
    pub ceilingz: fixed_t,
    pub floorrover: *mut ffloor_s,
    pub ceilingrover: *mut ffloor_s,
    pub radius: fixed_t,
    pub height: fixed_t,
    pub momx: fixed_t,
    pub momy: fixed_t,
    pub momz: fixed_t,
    pub precipflags: fixed_t,
    pub tics: int32_t,
    pub state: *mut state_t,
    pub flags: int32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct subsector_s {
    pub sector: *mut sector_t,
    pub numlines: int16_t,
    pub firstline: uint32_t,
    pub polyList: *mut polyobj_s,
    pub validcount: size_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct polyobj_s {
    pub link: mdllistitem_t,
    pub id: int32_t,
    pub first: int32_t,
    pub next: int32_t,
    pub parent: int32_t,
    pub segCount: size_t,
    pub numSegsAlloc: size_t,
    pub segs: *mut *mut seg_s,
    pub numVertices: size_t,
    pub numVerticesAlloc: size_t,
    pub origVerts: *mut vertex_t,
    pub tmpVerts: *mut vertex_t,
    pub vertices: *mut *mut vertex_t,
    pub numLines: size_t,
    pub numLinesAlloc: size_t,
    pub lines: *mut *mut line_s,
    pub spawnSpot: degenmobj_t,
    pub centerPt: vertex_t,
    pub zdist: fixed_t,
    pub angle: angle_t,
    pub attached: uint8_t,
    pub blockbox: [fixed_t; 4],
    pub linked: uint8_t,
    pub validcount: size_t,
    pub damage: int32_t,
    pub thrust: fixed_t,
    pub flags: int32_t,
    pub thinker: *mut thinker_t,
    pub isBad: uint8_t,
    pub translucency: int32_t,
    pub triggertag: int16_t,
    pub visplane: *mut visplane_s,
    pub spawnflags: int32_t,
    pub spawntrans: int32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct visplane_s {
    pub next: *mut visplane_s,
    pub height: fixed_t,
    pub viewx: fixed_t,
    pub viewy: fixed_t,
    pub viewz: fixed_t,
    pub viewangle: angle_t,
    pub plangle: angle_t,
    pub picnum: int32_t,
    pub lightlevel: int32_t,
    pub minx: int32_t,
    pub maxx: int32_t,
    pub extra_colormap: *mut extracolormap_t,
    pub padtopstart: uint16_t,
    pub top: [uint16_t; 1920],
    pub padtopend: uint16_t,
    pub padbottomstart: uint16_t,
    pub bottom: [uint16_t; 1920],
    pub padbottomend: uint16_t,
    pub high: int32_t,
    pub low: int32_t,
    pub xoffs: fixed_t,
    pub yoffs: fixed_t,
    pub ffloor: *mut ffloor_s,
    pub polyobj: *mut polyobj_t,
    pub slope: *mut pslope_t,
}
pub type polyobj_t = polyobj_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct vertex_t {
    pub x: fixed_t,
    pub y: fixed_t,
    pub floorzset: boolean,
    pub ceilingzset: boolean,
    pub floorz: fixed_t,
    pub ceilingz: fixed_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct degenmobj_t {
    pub thinker: thinker_t,
    pub x: fixed_t,
    pub y: fixed_t,
    pub z: fixed_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct line_s {
    pub v1: *mut vertex_t,
    pub v2: *mut vertex_t,
    pub dx: fixed_t,
    pub dy: fixed_t,
    pub angle: angle_t,
    pub flags: int16_t,
    pub special: int16_t,
    pub tags: taglist_t,
    pub args: [int32_t; 10],
    pub stringargs: [*mut libc::c_char; 2],
    pub sidenum: [uint16_t; 2],
    pub alpha: fixed_t,
    pub blendmode: uint8_t,
    pub executordelay: int32_t,
    pub bbox: [fixed_t; 4],
    pub slopetype: slopetype_t,
    pub frontsector: *mut sector_t,
    pub backsector: *mut sector_t,
    pub validcount: size_t,
    pub polyobj: *mut polyobj_t,
    pub callcount: int16_t,
}
pub type sector_t = sector_s;
pub type slopetype_t = libc::c_uint;
pub const ST_NEGATIVE: slopetype_t = 3;
pub const ST_POSITIVE: slopetype_t = 2;
pub const ST_VERTICAL: slopetype_t = 1;
pub const ST_HORIZONTAL: slopetype_t = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct seg_s {
    pub v1: *mut vertex_t,
    pub v2: *mut vertex_t,
    pub side: int32_t,
    pub offset: fixed_t,
    pub angle: angle_t,
    pub sidedef: *mut side_t,
    pub linedef: *mut line_t,
    pub frontsector: *mut sector_t,
    pub backsector: *mut sector_t,
    pub length: fixed_t,
    pub numlights: size_t,
    pub rlights: *mut r_lightlist_t,
    pub polyseg: *mut polyobj_t,
    pub dontrenderme: boolean,
    pub glseg: boolean,
}
pub type r_lightlist_t = r_lightlist_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct r_lightlist_s {
    pub height: fixed_t,
    pub heightstep: fixed_t,
    pub botheight: fixed_t,
    pub botheightstep: fixed_t,
    pub startheight: fixed_t,
    pub lightlevel: int16_t,
    pub extra_colormap: *mut extracolormap_t,
    pub rcolormap: *mut lighttable_t,
    pub flags: ffloortype_e,
    pub lightnum: int32_t,
}
pub type line_t = line_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct side_t {
    pub textureoffset: fixed_t,
    pub rowoffset: fixed_t,
    pub offsetx_top: fixed_t,
    pub offsetx_mid: fixed_t,
    pub offsetx_bot: fixed_t,
    pub offsety_top: fixed_t,
    pub offsety_mid: fixed_t,
    pub offsety_bot: fixed_t,
    pub toptexture: int32_t,
    pub bottomtexture: int32_t,
    pub midtexture: int32_t,
    pub line: *mut line_t,
    pub sector: *mut sector_t,
    pub special: int16_t,
    pub repeatcnt: int16_t,
    pub colormap_data: *mut extracolormap_t,
}
pub type mdllistitem_t = mdllistitem_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct mdllistitem_s {
    pub next: *mut mdllistitem_s,
    pub prev: *mut *mut mdllistitem_s,
}
pub type precipmobj_t = precipmobj_s;
pub type sectorspecialflags_t = libc::c_uint;
pub const SSF_GRAVITYOVERRIDE: sectorspecialflags_t = 1048576;
pub const SSF_JUMPFLIP: sectorspecialflags_t = 524288;
pub const SSF_ROPEHANG: sectorspecialflags_t = 262144;
pub const SSF_FINISHLINE: sectorspecialflags_t = 131072;
pub const SSF_ZOOMTUBEEND: sectorspecialflags_t = 65536;
pub const SSF_ZOOMTUBESTART: sectorspecialflags_t = 32768;
pub const SSF_FORCESPIN: sectorspecialflags_t = 16384;
pub const SSF_SUPERTRANSFORM: sectorspecialflags_t = 8192;
pub const SSF_FAN: sectorspecialflags_t = 4096;
pub const SSF_BLUETEAMBASE: sectorspecialflags_t = 2048;
pub const SSF_REDTEAMBASE: sectorspecialflags_t = 1024;
pub const SSF_RETURNFLAG: sectorspecialflags_t = 512;
pub const SSF_SPECIALSTAGEPIT: sectorspecialflags_t = 256;
pub const SSF_EXIT: sectorspecialflags_t = 128;
pub const SSF_STARPOSTACTIVATOR: sectorspecialflags_t = 64;
pub const SSF_SPEEDPAD: sectorspecialflags_t = 32;
pub const SSF_CONVEYOR: sectorspecialflags_t = 16;
pub const SSF_WINDCURRENT: sectorspecialflags_t = 8;
pub const SSF_NOSTEPDOWN: sectorspecialflags_t = 4;
pub const SSF_DOUBLESTEPUP: sectorspecialflags_t = 2;
pub const SSF_OUTERSPACE: sectorspecialflags_t = 1;
pub type sectorflags_t = libc::c_uint;
pub const MSF_NOCLIPCAMERA: sectorflags_t = 512;
pub const MSF_HEATWAVE: sectorflags_t = 256;
pub const MSF_GRAVITYFLIP: sectorflags_t = 128;
pub const MSF_INVERTPRECIP: sectorflags_t = 64;
pub const MSF_TRIGGERLINE_MOBJ: sectorflags_t = 32;
pub const MSF_TRIGGERLINE_PLANE: sectorflags_t = 16;
pub const MSF_TRIGGERSPECIAL_HEADBUMP: sectorflags_t = 8;
pub const MSF_TRIGGERSPECIAL_TOUCH: sectorflags_t = 4;
pub const MSF_FLIPSPECIAL_BOTH: sectorflags_t = 3;
pub const MSF_FLIPSPECIAL_CEILING: sectorflags_t = 2;
pub const MSF_FLIPSPECIAL_FLOOR: sectorflags_t = 1;
pub type lightlist_t = lightlist_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct lightlist_s {
    pub height: fixed_t,
    pub lightlevel: *mut int16_t,
    pub extra_colormap: *mut *mut extracolormap_t,
    pub flags: int32_t,
    pub caster: *mut ffloor_t,
    pub slope: *mut pslope_s,
}
pub type ffloor_t = ffloor_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct msecnode_s {
    pub m_sector: *mut sector_t,
    pub m_thing: *mut mobj_s,
    pub m_sectorlist_prev: *mut msecnode_s,
    pub m_sectorlist_next: *mut msecnode_s,
    pub m_thinglist_prev: *mut msecnode_s,
    pub m_thinglist_next: *mut msecnode_s,
    pub visited: boolean,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct sfxinfo_struct {
    pub name: *const libc::c_char,
    pub singularity: boolean,
    pub priority: int32_t,
    pub pitch: int32_t,
    pub volume: int32_t,
    pub data: *mut libc::c_void,
    pub length: size_t,
    pub skinsound: int32_t,
    pub usefulness: int32_t,
    pub lumpnum: lumpnum_t,
    pub caption: [libc::c_char; 32],
}
pub type sfxinfo_t = sfxinfo_struct;
pub type playersprite = libc::c_uint;
pub const NUMPLAYERSPRITES: playersprite = 128;
pub const SPR2_LASTFREESLOT: playersprite = 127;
pub const SPR2_FIRSTFREESLOT: playersprite = 60;
pub const SPR2_XTRA: playersprite = 59;
pub const SPR2_LIFE: playersprite = 58;
pub const SPR2_SIGN: playersprite = 57;
pub const SPR2_CNT4: playersprite = 56;
pub const SPR2_CNT3: playersprite = 55;
pub const SPR2_CNT2: playersprite = 54;
pub const SPR2_CNT1: playersprite = 53;
pub const SPR2_TALC: playersprite = 52;
pub const SPR2_TALB: playersprite = 51;
pub const SPR2_TALA: playersprite = 50;
pub const SPR2_TAL9: playersprite = 49;
pub const SPR2_TAL8: playersprite = 48;
pub const SPR2_TAL7: playersprite = 47;
pub const SPR2_TAL6: playersprite = 46;
pub const SPR2_TAL5: playersprite = 45;
pub const SPR2_TAL4: playersprite = 44;
pub const SPR2_TAL3: playersprite = 43;
pub const SPR2_TAL2: playersprite = 42;
pub const SPR2_TAL1: playersprite = 41;
pub const SPR2_TAL0: playersprite = 40;
pub const SPR2_NATK: playersprite = 39;
pub const SPR2_NPUL: playersprite = 38;
pub const SPR2_NSTN: playersprite = 37;
pub const SPR2_NDRL: playersprite = 36;
pub const SPR2_NFLY: playersprite = 35;
pub const SPR2_NFLT: playersprite = 34;
pub const SPR2_NSTD: playersprite = 33;
pub const SPR2_TRNS: playersprite = 32;
pub const SPR2_MLEL: playersprite = 31;
pub const SPR2_MLEE: playersprite = 30;
pub const SPR2_TWIN: playersprite = 29;
pub const SPR2_FIRE: playersprite = 28;
pub const SPR2_BNCE: playersprite = 27;
pub const SPR2_FRUN: playersprite = 26;
pub const SPR2_FLT: playersprite = 25;
pub const SPR2_CLMB: playersprite = 24;
pub const SPR2_CLNG: playersprite = 23;
pub const SPR2_LAND: playersprite = 22;
pub const SPR2_GLID: playersprite = 21;
pub const SPR2_TIRE: playersprite = 20;
pub const SPR2_SWIM: playersprite = 19;
pub const SPR2_FLY: playersprite = 18;
pub const SPR2_SPIN: playersprite = 17;
pub const SPR2_RIDE: playersprite = 16;
pub const SPR2_EDGE: playersprite = 15;
pub const SPR2_FALL: playersprite = 14;
pub const SPR2_SPNG: playersprite = 13;
pub const SPR2_JUMP: playersprite = 12;
pub const SPR2_GASP: playersprite = 11;
pub const SPR2_ROLL: playersprite = 10;
pub const SPR2_DRWN: playersprite = 9;
pub const SPR2_DEAD: playersprite = 8;
pub const SPR2_STUN: playersprite = 7;
pub const SPR2_PAIN: playersprite = 6;
pub const SPR2_DASH: playersprite = 5;
pub const SPR2_RUN: playersprite = 4;
pub const SPR2_SKID: playersprite = 3;
pub const SPR2_WALK: playersprite = 2;
pub const SPR2_WAIT: playersprite = 1;
pub const SPR2_STND: playersprite = 0;
pub type mobjflag_t = libc::c_uint;
pub const MF_RUNSPAWNFUNC: mobjflag_t = 536870912;
pub const MF_GRENADEBOUNCE: mobjflag_t = 268435456;
pub const MF_NOCLIPTHING: mobjflag_t = 134217728;
pub const MF_NIGHTSITEM: mobjflag_t = 67108864;
pub const MF_STICKY: mobjflag_t = 33554432;
pub const MF_PAIN: mobjflag_t = 16777216;
pub const MF_SCENERY: mobjflag_t = 8388608;
pub const MF_ENEMY: mobjflag_t = 4194304;
pub const MF_NOCLIPHEIGHT: mobjflag_t = 2097152;
pub const MF_FIRE: mobjflag_t = 1048576;
pub const MF_NOTHINK: mobjflag_t = 524288;
pub const MF_MONITOR: mobjflag_t = 262144;
pub const MF_BOUNCE: mobjflag_t = 131072;
pub const MF_SPRING: mobjflag_t = 65536;
pub const MF_MISSILE: mobjflag_t = 32768;
pub const MF_BOXICON: mobjflag_t = 16384;
pub const MF_FLOAT: mobjflag_t = 8192;
pub const MF_NOCLIP: mobjflag_t = 4096;
pub const MF_SLIDEME: mobjflag_t = 2048;
pub const MF_AMBIENT: mobjflag_t = 1024;
pub const MF_NOGRAVITY: mobjflag_t = 512;
pub const MF_SPAWNCEILING: mobjflag_t = 256;
pub const MF_BOSS: mobjflag_t = 128;
pub const MF_PUSHABLE: mobjflag_t = 64;
pub const MF_PAPERCOLLISION: mobjflag_t = 32;
pub const MF_NOBLOCKMAP: mobjflag_t = 16;
pub const MF_NOSECTOR: mobjflag_t = 8;
pub const MF_SHOOTABLE: mobjflag_t = 4;
pub const MF_SOLID: mobjflag_t = 2;
pub const MF_SPECIAL: mobjflag_t = 1;
pub type C2RustUnnamed_2 = libc::c_uint;
pub const MF2_SPLAT: C2RustUnnamed_2 = 1073741824;
pub const MF2_SHIELD: C2RustUnnamed_2 = 536870912;
pub const MF2_LINKDRAW: C2RustUnnamed_2 = 268435456;
pub const MF2_AMBUSH: C2RustUnnamed_2 = 134217728;
pub const MF2_BOSSDEAD: C2RustUnnamed_2 = 67108864;
pub const MF2_BOSSFLEE: C2RustUnnamed_2 = 33554432;
pub const MF2_BOSSNOTRAP: C2RustUnnamed_2 = 16777216;
pub const MF2_FRET: C2RustUnnamed_2 = 8388608;
pub const MF2_SKULLFLY: C2RustUnnamed_2 = 4194304;
pub const MF2_OBJECTFLIP: C2RustUnnamed_2 = 2097152;
pub const MF2_STRONGBOX: C2RustUnnamed_2 = 1048576;
pub const MF2_SHADOW: C2RustUnnamed_2 = 524288;
pub const MF2_SUPERFIRE: C2RustUnnamed_2 = 262144;
pub const MF2_FIRING: C2RustUnnamed_2 = 131072;
pub const MF2_JUSTATTACKED: C2RustUnnamed_2 = 65536;
pub const MF2_NIGHTSPULL: C2RustUnnamed_2 = 32768;
pub const MF2_DEBRIS: C2RustUnnamed_2 = 16384;
pub const MF2_INFLOAT: C2RustUnnamed_2 = 8192;
pub const MF2_INVERTAIMABLE: C2RustUnnamed_2 = 4096;
pub const MF2_CLASSICPUSH: C2RustUnnamed_2 = 2048;
pub const MF2_SLIDEPUSH: C2RustUnnamed_2 = 1024;
pub const MF2_BEYONDTHEGRAVE: C2RustUnnamed_2 = 512;
pub const MF2_SCATTER: C2RustUnnamed_2 = 256;
pub const MF2_EXPLOSION: C2RustUnnamed_2 = 128;
pub const MF2_BOUNCERING: C2RustUnnamed_2 = 64;
pub const MF2_RAILRING: C2RustUnnamed_2 = 32;
pub const MF2_AUTOMATIC: C2RustUnnamed_2 = 16;
pub const MF2_DONTDRAW: C2RustUnnamed_2 = 8;
pub const MF2_DONTRESPAWN: C2RustUnnamed_2 = 4;
pub const MF2_TWOD: C2RustUnnamed_2 = 2;
pub const MF2_AXIS: C2RustUnnamed_2 = 1;
pub type C2RustUnnamed_3 = libc::c_uint;
pub const MFE_REVERSESUPER: C2RustUnnamed_3 = 12288;
pub const MFE_FORCENOSUPER: C2RustUnnamed_3 = 8192;
pub const MFE_FORCESUPER: C2RustUnnamed_3 = 4096;
pub const MFE_TRACERANGLE: C2RustUnnamed_3 = 2048;
pub const MFE_APPLYPMOMZ: C2RustUnnamed_3 = 1024;
pub const MFE_SPRUNG: C2RustUnnamed_3 = 512;
pub const MFE_PUSHED: C2RustUnnamed_3 = 256;
pub const MFE_TOUCHLAVA: C2RustUnnamed_3 = 128;
pub const MFE_GOOWATER: C2RustUnnamed_3 = 64;
pub const MFE_VERTICALFLIP: C2RustUnnamed_3 = 32;
pub const MFE_JUSTSTEPPEDDOWN: C2RustUnnamed_3 = 16;
pub const MFE_UNDERWATER: C2RustUnnamed_3 = 8;
pub const MFE_TOUCHWATER: C2RustUnnamed_3 = 4;
pub const MFE_JUSTHITFLOOR: C2RustUnnamed_3 = 2;
pub const MFE_ONGROUND: C2RustUnnamed_3 = 1;
pub type C2RustUnnamed_4 = libc::c_uint;
pub const CV_ALLOWLUA: C2RustUnnamed_4 = 4096;
pub const CV_CHEAT: C2RustUnnamed_4 = 2048;
pub const CV_HIDEN: C2RustUnnamed_4 = 1024;
pub const CV_NOSHOWHELP: C2RustUnnamed_4 = 512;
pub const CV_SHOWMODIFONETIME: C2RustUnnamed_4 = 256;
pub const CV_SHOWMODIF: C2RustUnnamed_4 = 128;
pub const CV_MODIFIED: C2RustUnnamed_4 = 64;
pub const CV_NOTINNET: C2RustUnnamed_4 = 32;
pub const CV_FLOAT: C2RustUnnamed_4 = 16;
pub const CV_NOINIT: C2RustUnnamed_4 = 8;
pub const CV_NETVAR: C2RustUnnamed_4 = 4;
pub const CV_CALL: C2RustUnnamed_4 = 2;
pub const CV_SAVE: C2RustUnnamed_4 = 1;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CV_PossibleValue_s {
    pub value: int32_t,
    pub strvalue: *const libc::c_char,
}
pub type CV_PossibleValue_t = CV_PossibleValue_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct consvar_s {
    pub name: *const libc::c_char,
    pub defaultvalue: *const libc::c_char,
    pub flags: int32_t,
    pub PossibleValue: *mut CV_PossibleValue_t,
    pub func: Option::<unsafe extern "C" fn() -> ()>,
    pub value: int32_t,
    pub string: *const libc::c_char,
    pub zstring: *mut libc::c_char,
    pub revert: C2RustUnnamed_5,
    pub netid: uint16_t,
    pub changed: libc::c_char,
    pub next: *mut consvar_s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub allocated: libc::c_char,
    pub v: C2RustUnnamed_6,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_6 {
    pub string: *mut libc::c_char,
    pub const_munge: *const libc::c_char,
}
pub type consvar_t = consvar_s;
pub type C2RustUnnamed_7 = libc::c_uint;
pub const NUMTRANSMAPS: C2RustUnnamed_7 = 10;
pub const tr_trans90: C2RustUnnamed_7 = 9;
pub const tr_trans80: C2RustUnnamed_7 = 8;
pub const tr_trans70: C2RustUnnamed_7 = 7;
pub const tr_trans60: C2RustUnnamed_7 = 6;
pub const tr_trans50: C2RustUnnamed_7 = 5;
pub const tr_trans40: C2RustUnnamed_7 = 4;
pub const tr_trans30: C2RustUnnamed_7 = 3;
pub const tr_trans20: C2RustUnnamed_7 = 2;
pub const tr_trans10: C2RustUnnamed_7 = 1;
pub type skinflags_t = libc::c_uint;
pub const SF_NOSHIELDABILITY: skinflags_t = 524288;
pub const SF_CANBUSTWALLS: skinflags_t = 262144;
pub const SF_NOSUPERJUMPBOOST: skinflags_t = 131072;
pub const SF_NOSUPERSPRITES: skinflags_t = 65536;
pub const SF_NONIGHTSSUPER: skinflags_t = 32768;
pub const SF_NONIGHTSROTATION: skinflags_t = 16384;
pub const SF_MULTIABILITY: skinflags_t = 8192;
pub const SF_FASTEDGE: skinflags_t = 4096;
pub const SF_DASHMODE: skinflags_t = 2048;
pub const SF_MACHINE: skinflags_t = 1024;
pub const SF_MARIODAMAGE: skinflags_t = 768;
pub const SF_STOMPDAMAGE: skinflags_t = 512;
pub const SF_NOJUMPDAMAGE: skinflags_t = 256;
pub const SF_NOJUMPSPIN: skinflags_t = 128;
pub const SF_RUNONWATER: skinflags_t = 64;
pub const SF_NOSPEEDADJUST: skinflags_t = 32;
pub const SF_NOSKID: skinflags_t = 16;
pub const SF_HIRES: skinflags_t = 8;
pub const SF_NOSPINDASHDUST: skinflags_t = 4;
pub const SF_NOSUPERSPIN: skinflags_t = 2;
pub const SF_SUPER: skinflags_t = 1;
pub type C2RustUnnamed_8 = libc::c_uint;
pub const CA_TWINSPIN: C2RustUnnamed_8 = 15;
pub const CA_BOUNCE: C2RustUnnamed_8 = 14;
pub const CA_JUMPTHOK: C2RustUnnamed_8 = 13;
pub const CA_AIRDRILL: C2RustUnnamed_8 = 12;
pub const CA_JUMPBOOST: C2RustUnnamed_8 = 11;
pub const CA_FALLSWITCH: C2RustUnnamed_8 = 10;
pub const CA_TELEKINESIS: C2RustUnnamed_8 = 9;
pub const CA_SLOWFALL: C2RustUnnamed_8 = 8;
pub const CA_FLOAT: C2RustUnnamed_8 = 7;
pub const CA_DOUBLEJUMP: C2RustUnnamed_8 = 6;
pub const CA_SWIM: C2RustUnnamed_8 = 5;
pub const CA_HOMINGTHOK: C2RustUnnamed_8 = 4;
pub const CA_GLIDEANDCLIMB: C2RustUnnamed_8 = 3;
pub const CA_FLY: C2RustUnnamed_8 = 2;
pub const CA_THOK: C2RustUnnamed_8 = 1;
pub const CA_NONE: C2RustUnnamed_8 = 0;
pub type C2RustUnnamed_9 = libc::c_uint;
pub const CA2_MELEE: C2RustUnnamed_9 = 3;
pub const CA2_GUNSLINGER: C2RustUnnamed_9 = 2;
pub const CA2_SPINDASH: C2RustUnnamed_9 = 1;
pub const CA2_NONE: C2RustUnnamed_9 = 0;
pub type C2RustUnnamed_10 = libc::c_int;
pub const SH_NOSTACK: C2RustUnnamed_10 = -513;
pub const SH_STACK: C2RustUnnamed_10 = 512;
pub const SH_FIREFLOWER: C2RustUnnamed_10 = 512;
pub const SH_FORCEHP: C2RustUnnamed_10 = 255;
pub const SH_FORCE: C2RustUnnamed_10 = 256;
pub const SH_THUNDERCOIN: C2RustUnnamed_10 = 4098;
pub const SH_BUBBLEWRAP: C2RustUnnamed_10 = 2049;
pub const SH_FLAMEAURA: C2RustUnnamed_10 = 1025;
pub const SH_ELEMENTAL: C2RustUnnamed_10 = 3073;
pub const SH_ATTRACT: C2RustUnnamed_10 = 4097;
pub const SH_PINK: C2RustUnnamed_10 = 4;
pub const SH_ARMAGEDDON: C2RustUnnamed_10 = 3;
pub const SH_WHIRLWIND: C2RustUnnamed_10 = 2;
pub const SH_PITY: C2RustUnnamed_10 = 1;
pub const SH_PROTECTSPIKE: C2RustUnnamed_10 = 8192;
pub const SH_PROTECTELECTRIC: C2RustUnnamed_10 = 4096;
pub const SH_PROTECTWATER: C2RustUnnamed_10 = 2048;
pub const SH_PROTECTFIRE: C2RustUnnamed_10 = 1024;
pub const SH_NONE: C2RustUnnamed_10 = 0;
pub type C2RustUnnamed_11 = libc::c_uint;
pub const CR_FAN: C2RustUnnamed_11 = 13;
pub const CR_DUSTDEVIL: C2RustUnnamed_11 = 12;
pub const CR_PTERABYTE: C2RustUnnamed_11 = 11;
pub const CR_ROLLOUT: C2RustUnnamed_11 = 10;
pub const CR_MINECART: C2RustUnnamed_11 = 9;
pub const CR_MACESPIN: C2RustUnnamed_11 = 8;
pub const CR_ROPEHANG: C2RustUnnamed_11 = 7;
pub const CR_ZOOMTUBE: C2RustUnnamed_11 = 6;
pub const CR_BRAKGOOP: C2RustUnnamed_11 = 5;
pub const CR_NIGHTSFALL: C2RustUnnamed_11 = 4;
pub const CR_NIGHTSMODE: C2RustUnnamed_11 = 3;
pub const CR_PLAYER: C2RustUnnamed_11 = 2;
pub const CR_GENERIC: C2RustUnnamed_11 = 1;
pub const CR_NONE: C2RustUnnamed_11 = 0;
pub type C2RustUnnamed_12 = libc::c_uint;
pub const STR_METAL: C2RustUnnamed_12 = 4224;
pub const STR_BOUNCE: C2RustUnnamed_12 = 521;
pub const STR_MELEE: C2RustUnnamed_12 = 6979;
pub const STR_TWINSPIN: C2RustUnnamed_12 = 7967;
pub const STR_GLIDE: C2RustUnnamed_12 = 3;
pub const STR_FLY: C2RustUnnamed_12 = 17;
pub const STR_BUST: C2RustUnnamed_12 = 1792;
pub const STR_ATTACK: C2RustUnnamed_12 = 30;
pub const STR_SPIKE: C2RustUnnamed_12 = 4096;
pub const STR_SPRING: C2RustUnnamed_12 = 2048;
pub const STR_CEILING: C2RustUnnamed_12 = 1024;
pub const STR_FLOOR: C2RustUnnamed_12 = 512;
pub const STR_WALL: C2RustUnnamed_12 = 256;
pub const STR_DASH: C2RustUnnamed_12 = 128;
pub const STR_HEAVY: C2RustUnnamed_12 = 64;
pub const STR_GUARD: C2RustUnnamed_12 = 32;
pub const STR_UPPER: C2RustUnnamed_12 = 16;
pub const STR_STOMP: C2RustUnnamed_12 = 8;
pub const STR_TAIL: C2RustUnnamed_12 = 4;
pub const STR_PUNCH: C2RustUnnamed_12 = 2;
pub const STR_ANIM: C2RustUnnamed_12 = 1;
pub const STR_NONE: C2RustUnnamed_12 = 0;
pub type powertype_t = libc::c_uint;
pub const NUMPOWERS: powertype_t = 30;
pub const pw_strong: powertype_t = 29;
pub const pw_ignorelatch: powertype_t = 28;
pub const pw_justlaunched: powertype_t = 27;
pub const pw_dye: powertype_t = 26;
pub const pw_nocontrol: powertype_t = 25;
pub const pw_nights_linkfreeze: powertype_t = 24;
pub const pw_nights_helper: powertype_t = 23;
pub const pw_nights_superloop: powertype_t = 22;
pub const pw_emeralds: powertype_t = 21;
pub const pw_railring: powertype_t = 20;
pub const pw_explosionring: powertype_t = 19;
pub const pw_grenadering: powertype_t = 18;
pub const pw_scatterring: powertype_t = 17;
pub const pw_bouncering: powertype_t = 16;
pub const pw_automaticring: powertype_t = 15;
pub const pw_infinityring: powertype_t = 14;
pub const pw_gravityboots: powertype_t = 13;
pub const pw_super: powertype_t = 12;
pub const pw_noautobrake: powertype_t = 11;
pub const pw_justsprung: powertype_t = 10;
pub const pw_pushing: powertype_t = 9;
pub const pw_extralife: powertype_t = 8;
pub const pw_spacetime: powertype_t = 7;
pub const pw_underwater: powertype_t = 6;
pub const pw_tailsfly: powertype_t = 5;
pub const pw_carry: powertype_t = 4;
pub const pw_shield: powertype_t = 3;
pub const pw_flashing: powertype_t = 2;
pub const pw_sneakers: powertype_t = 1;
pub const pw_invulnerability: powertype_t = 0;
pub type C2RustUnnamed_13 = libc::c_uint;
pub const RW_RAIL: C2RustUnnamed_13 = 32;
pub const RW_EXPLODE: C2RustUnnamed_13 = 16;
pub const RW_GRENADE: C2RustUnnamed_13 = 8;
pub const RW_SCATTER: C2RustUnnamed_13 = 4;
pub const RW_BOUNCE: C2RustUnnamed_13 = 2;
pub const RW_AUTO: C2RustUnnamed_13 = 1;
pub type C2RustUnnamed_14 = libc::c_uint;
pub const BOT_MPAI: C2RustUnnamed_14 = 3;
pub const BOT_2PHUMAN: C2RustUnnamed_14 = 2;
pub const BOT_2PAI: C2RustUnnamed_14 = 1;
pub const BOT_NONE: C2RustUnnamed_14 = 0;
pub type player_t = player_s;
pub type marathonmode_t = libc::c_uint;
pub const MA_INGAME: marathonmode_t = 8;
pub const MA_NOCUTSCENES: marathonmode_t = 4;
pub const MA_INIT: marathonmode_t = 2;
pub const MA_RUNNING: marathonmode_t = 1;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct mappoint_t {
    pub x: fixed_t,
    pub y: fixed_t,
    pub z: fixed_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct quake {
    pub x: fixed_t,
    pub y: fixed_t,
    pub z: fixed_t,
    pub time: uint16_t,
    pub epicenter: *mut mappoint_t,
    pub radius: fixed_t,
    pub intensity: fixed_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct nightsgrades_t {
    pub grade: [uint32_t; 6],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct customoption_t {
    pub option: [libc::c_char; 32],
    pub value: [libc::c_char; 256],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct mapheader_t {
    pub lvlttl: [libc::c_char; 22],
    pub subttl: [libc::c_char; 33],
    pub actnum: uint8_t,
    pub typeoflevel: uint32_t,
    pub nextlevel: int16_t,
    pub marathonnext: int16_t,
    pub keywords: [libc::c_char; 33],
    pub musname: [libc::c_char; 7],
    pub mustrack: uint16_t,
    pub muspos: uint32_t,
    pub forcecharacter: [libc::c_char; 17],
    pub weather: uint8_t,
    pub skynum: int16_t,
    pub skybox_scalex: int16_t,
    pub skybox_scaley: int16_t,
    pub skybox_scalez: int16_t,
    pub interscreen: [libc::c_char; 8],
    pub runsoc: [libc::c_char; 33],
    pub scriptname: [libc::c_char; 33],
    pub precutscenenum: uint8_t,
    pub cutscenenum: uint8_t,
    pub countdown: int16_t,
    pub palette: uint16_t,
    pub numlaps: uint8_t,
    pub unlockrequired: int8_t,
    pub levelselect: uint8_t,
    pub bonustype: int8_t,
    pub maxbonuslives: int8_t,
    pub levelflags: uint16_t,
    pub menuflags: uint8_t,
    pub selectheading: [libc::c_char; 22],
    pub startrings: uint16_t,
    pub sstimer: int32_t,
    pub ssspheres: uint32_t,
    pub gravity: fixed_t,
    pub ltzzpatch: [libc::c_char; 9],
    pub ltzztext: [libc::c_char; 9],
    pub ltactdiamond: [libc::c_char; 9],
    pub numFlickies: uint8_t,
    pub flickies: *mut mobjtype_t,
    pub numGradedMares: uint8_t,
    pub grades: *mut nightsgrades_t,
    pub musinterfadeout: uint32_t,
    pub musintername: [libc::c_char; 7],
    pub muspostbossname: [libc::c_char; 7],
    pub muspostbosstrack: uint16_t,
    pub muspostbosspos: uint32_t,
    pub muspostbossfadein: uint32_t,
    pub musforcereset: int8_t,
    pub numCustomOptions: uint8_t,
    pub customopts: *mut customoption_t,
}
pub type GameTypeRules = libc::c_int;
pub const GTR_CUTSCENES: GameTypeRules = -2147483648;
pub const GTR_NOTITLECARD: GameTypeRules = 1073741824;
pub const GTR_ALLOWEXIT: GameTypeRules = 536870912;
pub const GTR_SPAWNENEMIES: GameTypeRules = 268435456;
pub const GTR_SPAWNINVUL: GameTypeRules = 134217728;
pub const GTR_DEATHMATCHSTARTS: GameTypeRules = 67108864;
pub const GTR_NOSPECTATORSPAWN: GameTypeRules = 33554432;
pub const GTR_DEATHPENALTY: GameTypeRules = 16777216;
pub const GTR_PITYSHIELD: GameTypeRules = 8388608;
pub const GTR_RESPAWNDELAY: GameTypeRules = 4194304;
pub const GTR_BLINDFOLDED: GameTypeRules = 2097152;
pub const GTR_HIDEFROZEN: GameTypeRules = 1048576;
pub const GTR_STARTCOUNTDOWN: GameTypeRules = 524288;
pub const GTR_FRIENDLYFIRE: GameTypeRules = 262144;
pub const GTR_HURTMESSAGES: GameTypeRules = 131072;
pub const GTR_OVERTIME: GameTypeRules = 65536;
pub const GTR_TIMELIMIT: GameTypeRules = 32768;
pub const GTR_POINTLIMIT: GameTypeRules = 16384;
pub const GTR_TAG: GameTypeRules = 8192;
pub const GTR_RACE: GameTypeRules = 4096;
pub const GTR_EMERALDHUNT: GameTypeRules = 2048;
pub const GTR_EMERALDTOKENS: GameTypeRules = 1024;
pub const GTR_SPECIALSTAGES: GameTypeRules = 512;
pub const GTR_FRIENDLY: GameTypeRules = 256;
pub const GTR_TEAMFLAGS: GameTypeRules = 128;
pub const GTR_POWERSTONES: GameTypeRules = 64;
pub const GTR_FIRSTPERSON: GameTypeRules = 32;
pub const GTR_TEAMS: GameTypeRules = 16;
pub const GTR_LIVES: GameTypeRules = 8;
pub const GTR_SPECTATORS: GameTypeRules = 4;
pub const GTR_RINGSLINGER: GameTypeRules = 2;
pub const GTR_CAMPAIGN: GameTypeRules = 1;
pub type TypeOfLevel = libc::c_uint;
pub const TOL_XMAS: TypeOfLevel = 4096;
pub const TOL_ERZ3: TypeOfLevel = 2048;
pub const TOL_NIGHTS: TypeOfLevel = 1024;
pub const TOL_MARIO: TypeOfLevel = 512;
pub const TOL_2D: TypeOfLevel = 256;
pub const TOL_CTF: TypeOfLevel = 64;
pub const TOL_TAG: TypeOfLevel = 32;
pub const TOL_MATCH: TypeOfLevel = 16;
pub const TOL_RACE: TypeOfLevel = 8;
pub const TOL_COMPETITION: TypeOfLevel = 4;
pub const TOL_COOP: TypeOfLevel = 2;
pub const TOL_SP: TypeOfLevel = 1;
pub type ghostcolor_t = libc::c_uint;
pub const GHC_RETURNSKIN: ghostcolor_t = 5;
pub const GHC_NIGHTSSKIN: ghostcolor_t = 4;
pub const GHC_INVINCIBLE: ghostcolor_t = 3;
pub const GHC_FIREFLOWER: ghostcolor_t = 2;
pub const GHC_SUPER: ghostcolor_t = 1;
pub const GHC_NORMAL: ghostcolor_t = 0;
pub type controlstyle_e = libc::c_uint;
pub const CS_SIMPLE: controlstyle_e = 3;
pub const CS_STANDARD: controlstyle_e = 2;
pub const CS_LMAOGALOG: controlstyle_e = 1;
pub const CS_LEGACY: controlstyle_e = 0;
pub type C2RustUnnamed_15 = libc::c_uint;
pub const LOCK_INTERESTS: C2RustUnnamed_15 = 4;
pub const LOCK_ENEMY: C2RustUnnamed_15 = 2;
pub const LOCK_BOSS: C2RustUnnamed_15 = 1;
pub type C2RustUnnamed_16 = libc::c_uint;
pub const BOXRIGHT: C2RustUnnamed_16 = 3;
pub const BOXLEFT: C2RustUnnamed_16 = 2;
pub const BOXBOTTOM: C2RustUnnamed_16 = 1;
pub const BOXTOP: C2RustUnnamed_16 = 0;
pub type C2RustUnnamed_17 = libc::c_uint;
pub const POF_SPLAT: C2RustUnnamed_17 = 8192;
pub const POF_NOSPECIALS: C2RustUnnamed_17 = 4096;
pub const POF_ONESIDE: C2RustUnnamed_17 = 2048;
pub const POF_LDEXEC: C2RustUnnamed_17 = 1024;
pub const POF_PUSHABLESTOP: C2RustUnnamed_17 = 512;
pub const POF_INVERTPLANESONLY: C2RustUnnamed_17 = 256;
pub const POF_INVERTPLANES: C2RustUnnamed_17 = 128;
pub const POF_INVERT: C2RustUnnamed_17 = 64;
pub const POF_RENDERALL: C2RustUnnamed_17 = 56;
pub const POF_RENDERPLANES: C2RustUnnamed_17 = 48;
pub const POF_RENDERBOTTOM: C2RustUnnamed_17 = 32;
pub const POF_RENDERTOP: C2RustUnnamed_17 = 16;
pub const POF_RENDERSIDES: C2RustUnnamed_17 = 8;
pub const POF_TESTHEIGHT: C2RustUnnamed_17 = 4;
pub const POF_SOLID: C2RustUnnamed_17 = 3;
pub const POF_CLIPPLANES: C2RustUnnamed_17 = 2;
pub const POF_CLIPLINES: C2RustUnnamed_17 = 1;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct polymaplink_s {
    pub link: mdllistitem_t,
    pub po: *mut polyobj_t,
}
pub type polymaplink_t = polymaplink_s;
pub type C2RustUnnamed_18 = libc::c_uint;
pub const BT_STRONG: C2RustUnnamed_18 = 3;
pub const BT_REGULAR: C2RustUnnamed_18 = 2;
pub const BT_SPINBUST: C2RustUnnamed_18 = 1;
pub const BT_TOUCH: C2RustUnnamed_18 = 0;
pub type C2RustUnnamed_19 = libc::c_uint;
pub const SL_DYNAMIC: C2RustUnnamed_19 = 2;
pub const SL_NOPHYSICS: C2RustUnnamed_19 = 1;
pub type C2RustUnnamed_20 = libc::c_uint;
pub const SD_SPECIALSTAGE: C2RustUnnamed_20 = 10;
pub const SD_INSTAKILL: C2RustUnnamed_20 = 9;
pub const SD_DEATHPITNOTILT: C2RustUnnamed_20 = 8;
pub const SD_DEATHPITTILT: C2RustUnnamed_20 = 7;
pub const SD_SPIKE: C2RustUnnamed_20 = 6;
pub const SD_ELECTRIC: C2RustUnnamed_20 = 5;
pub const SD_LAVA: C2RustUnnamed_20 = 4;
pub const SD_FIRE: C2RustUnnamed_20 = 3;
pub const SD_WATER: C2RustUnnamed_20 = 2;
pub const SD_GENERIC: C2RustUnnamed_20 = 1;
pub const SD_NONE: C2RustUnnamed_20 = 0;
pub type subsector_t = subsector_s;
pub type msecnode_t = msecnode_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct rotsprite_t {
    pub angles: int32_t,
    pub patches: *mut *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct spriteframe_t {
    pub rotate: uint8_t,
    pub lumppat: [lumpnum_t; 16],
    pub lumpid: [size_t; 16],
    pub flip: uint16_t,
    pub rotated: [[*mut rotsprite_t; 16]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct spritedef_t {
    pub numframes: size_t,
    pub spriteframes: *mut spriteframe_t,
}
pub type C2RustUnnamed_21 = libc::c_uint;
pub const NUM_THINKERLISTS: C2RustUnnamed_21 = 5;
pub const THINK_PRECIP: C2RustUnnamed_21 = 4;
pub const THINK_DYNSLOPE: C2RustUnnamed_21 = 3;
pub const THINK_MOBJ: C2RustUnnamed_21 = 2;
pub const THINK_MAIN: C2RustUnnamed_21 = 1;
pub const THINK_POLYOBJ: C2RustUnnamed_21 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct camera_s {
    pub chase: boolean,
    pub aiming: angle_t,
    pub viewheight: fixed_t,
    pub startangle: angle_t,
    pub x: fixed_t,
    pub y: fixed_t,
    pub z: fixed_t,
    pub reset: boolean,
    pub angle: angle_t,
    pub subsector: *mut subsector_s,
    pub floorz: fixed_t,
    pub ceilingz: fixed_t,
    pub radius: fixed_t,
    pub height: fixed_t,
    pub relativex: fixed_t,
    pub momx: fixed_t,
    pub momy: fixed_t,
    pub momz: fixed_t,
}
pub type camera_t = camera_s;
pub type jingletype_t = libc::c_uint;
pub const NUMJINGLES: jingletype_t = 12;
pub const JT_SSTIMEOUT: jingletype_t = 11;
pub const JT_NIGHTSTIMEOUT: jingletype_t = 10;
pub const JT_GOVER: jingletype_t = 9;
pub const JT_SUPER: jingletype_t = 8;
pub const JT_DROWN: jingletype_t = 7;
pub const JT_MINV: jingletype_t = 6;
pub const JT_INV: jingletype_t = 5;
pub const JT_SHOES: jingletype_t = 4;
pub const JT_1UP: jingletype_t = 3;
pub const JT_MASTER: jingletype_t = 2;
pub const JT_OTHER: jingletype_t = 1;
pub const JT_NONE: jingletype_t = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct jingle_t {
    pub musname: [libc::c_char; 7],
    pub looping: boolean,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct skin_t {
    pub name: [libc::c_char; 17],
    pub wadnum: uint16_t,
    pub flags: skinflags_t,
    pub realname: [libc::c_char; 17],
    pub hudname: [libc::c_char; 17],
    pub supername: [libc::c_char; 23],
    pub ability: uint8_t,
    pub ability2: uint8_t,
    pub thokitem: int32_t,
    pub spinitem: int32_t,
    pub revitem: int32_t,
    pub followitem: int32_t,
    pub actionspd: fixed_t,
    pub mindash: fixed_t,
    pub maxdash: fixed_t,
    pub normalspeed: fixed_t,
    pub runspeed: fixed_t,
    pub thrustfactor: uint8_t,
    pub accelstart: uint8_t,
    pub acceleration: uint8_t,
    pub jumpfactor: fixed_t,
    pub radius: fixed_t,
    pub height: fixed_t,
    pub spinheight: fixed_t,
    pub shieldscale: fixed_t,
    pub camerascale: fixed_t,
    pub starttranscolor: uint8_t,
    pub prefcolor: uint16_t,
    pub supercolor: uint16_t,
    pub prefoppositecolor: uint16_t,
    pub highresscale: fixed_t,
    pub contspeed: uint8_t,
    pub contangle: uint8_t,
    pub soundsid: [sfxenum_t; 21],
    pub sprites: [spritedef_t; 256],
    pub sprinfo: [spriteinfo_t; 256],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct spriteinfo_t {
    pub pivot: [spriteframepivot_t; 64],
    pub available: boolean,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct spriteframepivot_t {
    pub x: int32_t,
    pub y: int32_t,
}
pub const hook_ShieldSpawn: C2RustUnnamed_23 = 14;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct scroll_t {
    pub thinker: thinker_t,
    pub dx: fixed_t,
    pub dy: fixed_t,
    pub affectee: int32_t,
    pub control: int32_t,
    pub last_height: fixed_t,
    pub vdx: fixed_t,
    pub vdy: fixed_t,
    pub accel: int32_t,
    pub exclusive: int32_t,
    pub type_0: C2RustUnnamed_22,
}
pub type C2RustUnnamed_22 = libc::c_uint;
pub const sc_carry_ceiling: C2RustUnnamed_22 = 4;
pub const sc_carry: C2RustUnnamed_22 = 3;
pub const sc_ceiling: C2RustUnnamed_22 = 2;
pub const sc_floor: C2RustUnnamed_22 = 1;
pub const sc_side: C2RustUnnamed_22 = 0;
pub const hook_ShieldSpecial: C2RustUnnamed_23 = 15;
pub const hook_AbilitySpecial: C2RustUnnamed_23 = 8;
pub const hook_JumpSpecial: C2RustUnnamed_23 = 7;
pub const hook_JumpSpinSpecial: C2RustUnnamed_23 = 10;
pub const hook_SpinSpecial: C2RustUnnamed_23 = 9;
pub const hook_PlayerThink: C2RustUnnamed_23 = 22;
pub type C2RustUnnamed_23 = libc::c_uint;
pub const hook_MAX: C2RustUnnamed_23 = 30;
pub const hook_KeyUp: C2RustUnnamed_23 = 29;
pub const hook_KeyDown: C2RustUnnamed_23 = 28;
pub const hook_PlayerCanEnterSpinGaps: C2RustUnnamed_23 = 27;
pub const hook_PlayerHeight: C2RustUnnamed_23 = 26;
pub const hook_MusicChange: C2RustUnnamed_23 = 25;
pub const hook_PlayerCmd: C2RustUnnamed_23 = 24;
pub const hook_GameQuit: C2RustUnnamed_23 = 23;
pub const hook_SeenPlayer: C2RustUnnamed_23 = 21;
pub const hook_ViewpointSwitch: C2RustUnnamed_23 = 20;
pub const hook_TeamSwitch: C2RustUnnamed_23 = 19;
pub const hook_IntermissionThinker: C2RustUnnamed_23 = 18;
pub const hook_PlayerQuit: C2RustUnnamed_23 = 17;
pub const hook_PlayerCanDamage: C2RustUnnamed_23 = 16;
pub const hook_PlayerSpawn: C2RustUnnamed_23 = 13;
pub const hook_PlayerMsg: C2RustUnnamed_23 = 12;
pub const hook_BotTiccmd: C2RustUnnamed_23 = 11;
pub const hook_PostThinkFrame: C2RustUnnamed_23 = 6;
pub const hook_ThinkFrame: C2RustUnnamed_23 = 5;
pub const hook_PreThinkFrame: C2RustUnnamed_23 = 4;
pub const hook_PlayerJoin: C2RustUnnamed_23 = 3;
pub const hook_MapLoad: C2RustUnnamed_23 = 2;
pub const hook_MapChange: C2RustUnnamed_23 = 1;
pub const hook_NetVars: C2RustUnnamed_23 = 0;
#[inline(always)]
unsafe extern "C" fn FixedToFloat(mut x: fixed_t) -> libc::c_float {
    return x as libc::c_float
        / ((1 as libc::c_int) << 16 as libc::c_int) as libc::c_float;
}
#[inline(always)]
unsafe extern "C" fn FixedMul(mut a: fixed_t, mut b: fixed_t) -> fixed_t {
    return ((a as int64_t * b as int64_t) as uint64_t >> 16 as libc::c_int) as fixed_t;
}
#[inline(always)]
unsafe extern "C" fn FixedDiv2(mut a: fixed_t, mut b: fixed_t) -> fixed_t {
    return (a as int64_t * ((1 as libc::c_int) << 16 as libc::c_int) as int64_t
        / b as int64_t) as fixed_t;
}
#[inline(always)]
unsafe extern "C" fn FixedInt(mut a: fixed_t) -> fixed_t {
    return FixedMul(a, 1 as libc::c_int);
}
#[inline(always)]
unsafe extern "C" fn FixedDiv(mut a: fixed_t, mut b: fixed_t) -> fixed_t {
    if abs(a) >> 16 as libc::c_int - 2 as libc::c_int >= abs(b) {
        return if a ^ b < 0 as libc::c_int {
            -(2147483647 as libc::c_int) - 1 as libc::c_int
        } else {
            2147483647 as libc::c_int
        };
    }
    return FixedDiv2(a, b);
}
#[inline(always)]
unsafe extern "C" fn FixedFloor(mut x: fixed_t) -> fixed_t {
    let a: fixed_t = abs(x);
    let i: fixed_t = (a >> 16 as libc::c_int) << 16 as libc::c_int;
    let f: fixed_t = a - i;
    if f == 0 as libc::c_int {
        return x;
    }
    if x != -(2147483647 as libc::c_int) - 1 as libc::c_int {
        if x > 0 as libc::c_int {
            return x - f
        } else {
            return x - (((1 as libc::c_int) << 16 as libc::c_int) - f)
        }
    }
    return -(2147483647 as libc::c_int) - 1 as libc::c_int;
}
#[inline(always)]
unsafe extern "C" fn FixedRound(mut x: fixed_t) -> fixed_t {
    let a: fixed_t = abs(x);
    let i: fixed_t = (a >> 16 as libc::c_int) << 16 as libc::c_int;
    let f: fixed_t = a - i;
    if f == 0 as libc::c_int {
        return x;
    }
    if x == -(2147483647 as libc::c_int) - 1 as libc::c_int {
        return -(2147483647 as libc::c_int) - 1 as libc::c_int
    } else if x < FixedFloor(2147483647 as libc::c_int) {
        if x > 0 as libc::c_int {
            return x + (((1 as libc::c_int) << 16 as libc::c_int) - f)
        } else {
            return x - (((1 as libc::c_int) << 16 as libc::c_int) - f)
        }
    }
    return 2147483647 as libc::c_int;
}
#[inline(always)]
unsafe extern "C" fn InvAngle(mut a: angle_t) -> angle_t {
    return (0xffffffff as libc::c_uint)
        .wrapping_sub(a)
        .wrapping_add(1 as libc::c_int as libc::c_uint);
}
#[no_mangle]
pub static mut jingleinfo: [jingle_t; 12] = unsafe {
    [
        {
            let mut init = jingle_t {
                musname: *::core::mem::transmute::<
                    &[u8; 7],
                    &mut [libc::c_char; 7],
                >(b"\0\0\0\0\0\0\0"),
                looping: false_0 as libc::c_int,
            };
            init
        },
        {
            let mut init = jingle_t {
                musname: *::core::mem::transmute::<
                    &[u8; 7],
                    &mut [libc::c_char; 7],
                >(b"\0\0\0\0\0\0\0"),
                looping: false_0 as libc::c_int,
            };
            init
        },
        {
            let mut init = jingle_t {
                musname: *::core::mem::transmute::<
                    &[u8; 7],
                    &mut [libc::c_char; 7],
                >(b"\0\0\0\0\0\0\0"),
                looping: false_0 as libc::c_int,
            };
            init
        },
        {
            let mut init = jingle_t {
                musname: *::core::mem::transmute::<
                    &[u8; 7],
                    &mut [libc::c_char; 7],
                >(b"_1up\0\0\0"),
                looping: false_0 as libc::c_int,
            };
            init
        },
        {
            let mut init = jingle_t {
                musname: *::core::mem::transmute::<
                    &[u8; 7],
                    &mut [libc::c_char; 7],
                >(b"_shoes\0"),
                looping: true_0 as libc::c_int,
            };
            init
        },
        {
            let mut init = jingle_t {
                musname: *::core::mem::transmute::<
                    &[u8; 7],
                    &mut [libc::c_char; 7],
                >(b"_inv\0\0\0"),
                looping: false_0 as libc::c_int,
            };
            init
        },
        {
            let mut init = jingle_t {
                musname: *::core::mem::transmute::<
                    &[u8; 7],
                    &mut [libc::c_char; 7],
                >(b"_minv\0\0"),
                looping: false_0 as libc::c_int,
            };
            init
        },
        {
            let mut init = jingle_t {
                musname: *::core::mem::transmute::<
                    &[u8; 7],
                    &mut [libc::c_char; 7],
                >(b"_drown\0"),
                looping: false_0 as libc::c_int,
            };
            init
        },
        {
            let mut init = jingle_t {
                musname: *::core::mem::transmute::<
                    &[u8; 7],
                    &mut [libc::c_char; 7],
                >(b"_super\0"),
                looping: true_0 as libc::c_int,
            };
            init
        },
        {
            let mut init = jingle_t {
                musname: *::core::mem::transmute::<
                    &[u8; 7],
                    &mut [libc::c_char; 7],
                >(b"_gover\0"),
                looping: false_0 as libc::c_int,
            };
            init
        },
        {
            let mut init = jingle_t {
                musname: *::core::mem::transmute::<
                    &[u8; 7],
                    &mut [libc::c_char; 7],
                >(b"_ntime\0"),
                looping: false_0 as libc::c_int,
            };
            init
        },
        {
            let mut init = jingle_t {
                musname: *::core::mem::transmute::<
                    &[u8; 7],
                    &mut [libc::c_char; 7],
                >(b"_drown\0"),
                looping: false_0 as libc::c_int,
            };
            init
        },
    ]
};
static mut onground: boolean = 0;
#[no_mangle]
pub unsafe extern "C" fn P_Thrust(
    mut mo: *mut mobj_t,
    mut angle: angle_t,
    mut move_0: fixed_t,
) {
    angle >>= 19 as libc::c_int;
    (*mo).momx
        += FixedMul(
            move_0,
            *finecosine.offset(angle as isize) >> 16 as libc::c_int - 16 as libc::c_int,
        );
    if !(maptol & TOL_2D as libc::c_int as uint32_t != 0
        || (*mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0)
    {
        (*mo).momy
            += FixedMul(
                move_0,
                finesine[angle as usize] >> 16 as libc::c_int - 16 as libc::c_int,
            );
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_InstaThrust(
    mut mo: *mut mobj_t,
    mut angle: angle_t,
    mut move_0: fixed_t,
) {
    angle >>= 19 as libc::c_int;
    (*mo)
        .momx = FixedMul(
        move_0,
        *finecosine.offset(angle as isize) >> 16 as libc::c_int - 16 as libc::c_int,
    );
    if !(maptol & TOL_2D as libc::c_int as uint32_t != 0
        || (*mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0)
    {
        (*mo)
            .momy = FixedMul(
            move_0,
            finesine[angle as usize] >> 16 as libc::c_int - 16 as libc::c_int,
        );
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_InstaThrustEvenIn2D(
    mut mo: *mut mobj_t,
    mut angle: angle_t,
    mut move_0: fixed_t,
) {
    angle >>= 19 as libc::c_int;
    (*mo)
        .momx = FixedMul(
        move_0,
        *finecosine.offset(angle as isize) >> 16 as libc::c_int - 16 as libc::c_int,
    );
    (*mo)
        .momy = FixedMul(
        move_0,
        finesine[angle as usize] >> 16 as libc::c_int - 16 as libc::c_int,
    );
}
#[no_mangle]
pub unsafe extern "C" fn P_ReturnThrustX(
    mut mo: *mut mobj_t,
    mut angle: angle_t,
    mut move_0: fixed_t,
) -> fixed_t {
    angle >>= 19 as libc::c_int;
    return FixedMul(
        move_0,
        *finecosine.offset(angle as isize) >> 16 as libc::c_int - 16 as libc::c_int,
    );
}
#[no_mangle]
pub unsafe extern "C" fn P_ReturnThrustY(
    mut mo: *mut mobj_t,
    mut angle: angle_t,
    mut move_0: fixed_t,
) -> fixed_t {
    angle >>= 19 as libc::c_int;
    return FixedMul(
        move_0,
        finesine[angle as usize] >> 16 as libc::c_int - 16 as libc::c_int,
    );
}
#[no_mangle]
pub unsafe extern "C" fn P_AutoPause() -> boolean {
    if netgame != 0 || modeattacking as libc::c_int != 0
        || gamestate as libc::c_uint == GS_TITLESCREEN as libc::c_int as libc::c_uint
        || marathonmode as libc::c_uint != 0
            && gamestate as libc::c_uint
                == GS_INTERMISSION as libc::c_int as libc::c_uint
    {
        return false_0 as libc::c_int;
    }
    return (menuactive != 0
        || window_notinfocus as libc::c_int != 0 && cv_pauseifunfocused.value != 0)
        as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_CalcHeight(mut player: *mut player_t) {
    let mut angle: int32_t = 0;
    let mut bob: fixed_t = 0;
    let mut pviewheight: fixed_t = 0;
    let mut mo: *mut mobj_t = (*player).mo;
    (*player)
        .bob = FixedMul(
        cv_movebob.value,
        FixedMul((*player).rmomx, (*player).rmomx)
            + FixedMul((*player).rmomy, (*player).rmomy) >> 2 as libc::c_int,
    );
    if (*player).bob
        > FixedMul(
            cv_movebob.value,
            FixedMul((0x10 as libc::c_int) << 16 as libc::c_int, (*mo).scale),
        )
    {
        (*player)
            .bob = FixedMul(
            cv_movebob.value,
            FixedMul((0x10 as libc::c_int) << 16 as libc::c_int, (*mo).scale),
        );
    }
    if P_IsObjectOnGround(mo) == 0 {
        if (*mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            (*player).viewz = (*mo).z + (*mo).height - (*player).viewheight;
            if (*player).viewz
                < (*mo).floorz
                    + FixedMul((1 as libc::c_int) << 16 as libc::c_int, (*mo).scale)
            {
                (*player)
                    .viewz = (*mo).floorz
                    + FixedMul((1 as libc::c_int) << 16 as libc::c_int, (*mo).scale);
            }
        } else {
            (*player).viewz = (*mo).z + (*player).viewheight;
            if (*player).viewz
                > (*mo).ceilingz
                    - FixedMul((1 as libc::c_int) << 16 as libc::c_int, (*mo).scale)
            {
                (*player)
                    .viewz = (*mo).ceilingz
                    - FixedMul((1 as libc::c_int) << 16 as libc::c_int, (*mo).scale);
            }
        }
        return;
    }
    angle = ((8192 as libc::c_int / 20 as libc::c_int) as tic_t * leveltime
        & (8192 as libc::c_int - 1 as libc::c_int) as tic_t) as int32_t;
    bob = FixedMul(
        (*player).bob / 2 as libc::c_int,
        finesine[angle as usize] >> 16 as libc::c_int - 16 as libc::c_int,
    );
    pviewheight = FixedMul(
        41 as libc::c_int * (*player).height / 48 as libc::c_int,
        (*mo).scale,
    );
    if (*player).playerstate as libc::c_uint == PST_LIVE as libc::c_int as libc::c_uint {
        (*player).viewheight += (*player).deltaviewheight;
        if (*player).viewheight > pviewheight {
            (*player).viewheight = pviewheight;
            (*player).deltaviewheight = 0 as libc::c_int;
        }
        if (*player).viewheight < pviewheight / 2 as libc::c_int {
            (*player).viewheight = pviewheight / 2 as libc::c_int;
            if (*player).deltaviewheight <= 0 as libc::c_int {
                (*player).deltaviewheight = 1 as libc::c_int;
            }
        }
        if (*player).deltaviewheight != 0 {
            (*player).deltaviewheight
                += FixedMul(
                    ((1 as libc::c_int) << 16 as libc::c_int) / 4 as libc::c_int,
                    (*mo).scale,
                );
            if (*player).deltaviewheight == 0 {
                (*player).deltaviewheight = 1 as libc::c_int;
            }
        }
    }
    if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        (*player).viewz = (*mo).z + (*mo).height - (*player).viewheight - bob;
    } else {
        (*player).viewz = (*mo).z + (*player).viewheight + bob;
    }
    if (*player).viewz
        > (*mo).ceilingz
            - FixedMul(
                4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*mo).scale,
            )
    {
        (*player)
            .viewz = (*mo).ceilingz
            - FixedMul(
                4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*mo).scale,
            );
    }
    if (*player).viewz
        < (*mo).floorz
            + FixedMul(
                4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*mo).scale,
            )
    {
        (*player)
            .viewz = (*mo).floorz
            + FixedMul(
                4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*mo).scale,
            );
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_PlayerMoving(mut pnum: int32_t) -> boolean {
    let mut p: *mut player_t = &mut *players.as_mut_ptr().offset(pnum as isize)
        as *mut player_t;
    if Playing() == 0 {
        return false_0 as libc::c_int;
    }
    if (*p).jointime < (5 as libc::c_int * 35 as libc::c_int) as tic_t
        || (*p).playerstate as libc::c_uint == PST_DEAD as libc::c_int as libc::c_uint
        || (*p).playerstate as libc::c_uint == PST_REBORN as libc::c_int as libc::c_uint
        || (*p).spectator != 0
    {
        return false_0 as libc::c_int;
    }
    return (gamestate as libc::c_uint == GS_LEVEL as libc::c_int as libc::c_uint
        && !((*p).mo).is_null() && (*(*p).mo).health > 0 as libc::c_int
        && (abs((*p).rmomx)
            >= FixedMul(
                ((1 as libc::c_int) << 16 as libc::c_int) / 2 as libc::c_int,
                (*(*p).mo).scale,
            )
            || abs((*p).rmomy)
                >= FixedMul(
                    ((1 as libc::c_int) << 16 as libc::c_int) / 2 as libc::c_int,
                    (*(*p).mo).scale,
                )
            || abs((*(*p).mo).momz)
                >= FixedMul(
                    ((1 as libc::c_int) << 16 as libc::c_int) / 2 as libc::c_int,
                    (*(*p).mo).scale,
                ) || (*p).climbing as libc::c_int != 0
            || (*p).powers[pw_tailsfly as libc::c_int as usize] as libc::c_int != 0
            || (*p).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint
                != 0
            || (*p).pflags as libc::c_uint & PF_SPINNING as libc::c_int as libc::c_uint
                != 0)) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_GetNextEmerald() -> uint8_t {
    if gamemap as libc::c_int >= sstage_start as libc::c_int
        && gamemap as libc::c_int <= sstage_end as libc::c_int
    {
        return (gamemap as libc::c_int - sstage_start as libc::c_int) as uint8_t;
    }
    if gamemap as libc::c_int >= smpstage_start as libc::c_int
        || gamemap as libc::c_int <= smpstage_end as libc::c_int
    {
        return (gamemap as libc::c_int - smpstage_start as libc::c_int) as uint8_t;
    }
    return 0 as libc::c_int as uint8_t;
}
#[no_mangle]
pub unsafe extern "C" fn P_GiveEmerald(mut spawnObj: boolean) {
    let mut em: uint8_t = P_GetNextEmerald();
    S_StartSound(0 as *const libc::c_void, sfx_cgot);
    emeralds = (emeralds as libc::c_int | (1 as libc::c_int) << em as libc::c_int)
        as uint16_t;
    stagefailed = false_0 as libc::c_int;
    if spawnObj != 0 {
        let mut i: uint8_t = 0;
        let mut pnum: uint8_t = (if playeringame[consoleplayer as usize] != 0
            && players[consoleplayer as usize].spectator == 0
            && !(players[consoleplayer as usize].mo).is_null()
        {
            consoleplayer
        } else {
            255 as libc::c_int
        }) as uint8_t;
        i = 0 as libc::c_int as uint8_t;
        while (i as libc::c_int) < 32 as libc::c_int {
            let mut emmo: *mut mobj_t = 0 as *mut mobj_t;
            if !(playeringame[i as usize] == 0) {
                if !(players[i as usize].spectator != 0) {
                    if !(players[i as usize].mo).is_null() {
                        emmo = P_SpawnMobjFromMobj(
                            players[i as usize].mo,
                            0 as libc::c_int,
                            0 as libc::c_int,
                            (*players[i as usize].mo).height,
                            MT_GOTEMERALD,
                        );
                        if !emmo.is_null() {
                            P_SetTarget2(&mut (*emmo).target, players[i as usize].mo);
                            P_SetMobjState(
                                emmo,
                                (mobjinfo[MT_GOTEMERALD as libc::c_int as usize].meleestate
                                    as libc::c_uint)
                                    .wrapping_add(em as libc::c_uint) as statenum_t,
                            );
                            if players[i as usize]
                                .powers[pw_carry as libc::c_int as usize] as libc::c_int
                                != CR_NIGHTSMODE as libc::c_int
                            {
                                players[i as usize]
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                            }
                            P_SetTarget2(
                                &mut (*(*players.as_mut_ptr().offset(i as isize)).mo)
                                    .tracer,
                                emmo,
                            );
                            if pnum as libc::c_int == 255 as libc::c_int {
                                pnum = i;
                            } else if !(i as libc::c_int == pnum as libc::c_int) {
                                (*emmo).flags2 |= MF2_DONTDRAW as libc::c_int as uint32_t;
                            }
                        }
                    }
                }
            }
            i = i.wrapping_add(1);
            i;
        }
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_GiveFinishFlags(mut player: *mut player_t) {
    let mut angle: angle_t = FixedAngle(
        ((*(*player).mo).angle << 16 as libc::c_int) as fixed_t,
    );
    let mut i: uint8_t = 0;
    if ((*player).mo).is_null() {
        return;
    }
    if !(netgame != 0 || multiplayer != 0) {
        return;
    }
    i = 0 as libc::c_int as uint8_t;
    while (i as libc::c_int) < 3 as libc::c_int {
        let mut fa: angle_t = angle >> 19 as libc::c_int
            & (8192 as libc::c_int - 1 as libc::c_int) as angle_t;
        let mut xoffs: fixed_t = *finecosine.offset(fa as isize)
            >> 16 as libc::c_int - 16 as libc::c_int;
        let mut yoffs: fixed_t = finesine[fa as usize]
            >> 16 as libc::c_int - 16 as libc::c_int;
        let mut flag: *mut mobj_t = P_SpawnMobjFromMobj(
            (*player).mo,
            xoffs,
            yoffs,
            0 as libc::c_int,
            MT_FINISHFLAG,
        );
        (*flag).angle = angle;
        angle = angle
            .wrapping_add(
                FixedAngle(
                    120 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                ),
            );
        P_SetTarget2(&mut (*flag).target, (*player).mo);
        P_SetTarget2(&mut (*flag).dontdrawforviewmobj, (*player).mo);
        i = i.wrapping_add(1);
        i;
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_FindLowestMare() -> uint8_t {
    let mut th: *mut thinker_t = 0 as *mut thinker_t;
    let mut mo2: *mut mobj_t = 0 as *mut mobj_t;
    let mut mare: uint8_t = 255 as libc::c_int as uint8_t;
    if gametyperules & GTR_RACE as libc::c_int as uint32_t != 0 {
        return 0 as libc::c_int as uint8_t;
    }
    th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
    while th
        != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
            as *mut thinker_t
    {
        if !((*th).function.acp1
            == ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                actionf_p1,
            >(
                Some(
                    P_RemoveThinkerDelayed as unsafe extern "C" fn(*mut thinker_t) -> (),
                ),
            ))
        {
            mo2 = th as *mut mobj_t;
            if !((*mo2).type_0 as libc::c_uint
                != MT_EGGCAPSULE as libc::c_int as libc::c_uint)
            {
                if !((*mo2).health <= 0 as libc::c_int) {
                    let threshold: uint8_t = (*mo2).threshold as uint8_t;
                    if mare as libc::c_int == 255 as libc::c_int {
                        mare = threshold;
                    } else if (threshold as libc::c_int) < mare as libc::c_int {
                        mare = threshold;
                    }
                }
            }
        }
        th = (*th).next;
    }
    CONS_Debug(
        0x20 as libc::c_int,
        b"Lowest mare found: %d\n\0" as *const u8 as *const libc::c_char,
        mare as libc::c_int,
    );
    return mare;
}
#[no_mangle]
pub unsafe extern "C" fn P_TransferToNextMare(mut player: *mut player_t) -> boolean {
    let mut th: *mut thinker_t = 0 as *mut thinker_t;
    let mut mo2: *mut mobj_t = 0 as *mut mobj_t;
    let mut closestaxis: *mut mobj_t = 0 as *mut mobj_t;
    let mut lowestaxisnum: int32_t = -(1 as libc::c_int);
    let mut mare: uint8_t = P_FindLowestMare();
    let mut dist1: fixed_t = 0;
    let mut dist2: fixed_t = 0 as libc::c_int;
    if mare as libc::c_int == 255 as libc::c_int {
        return false_0 as libc::c_int;
    }
    CONS_Debug(
        0x20 as libc::c_int,
        b"Mare is %d\n\0" as *const u8 as *const libc::c_char,
        mare as libc::c_int,
    );
    (*player).mare = mare;
    (*player).marelap = 0 as libc::c_int as uint8_t;
    (*player).marebonuslap = 0 as libc::c_int as uint8_t;
    th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
    while th
        != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
            as *mut thinker_t
    {
        if !((*th).function.acp1
            == ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                actionf_p1,
            >(
                Some(
                    P_RemoveThinkerDelayed as unsafe extern "C" fn(*mut thinker_t) -> (),
                ),
            ))
        {
            mo2 = th as *mut mobj_t;
            if !((*mo2).type_0 as libc::c_uint != MT_AXIS as libc::c_int as libc::c_uint)
            {
                if !((*mo2).threshold != mare as libc::c_int) {
                    if closestaxis.is_null() {
                        closestaxis = mo2;
                        lowestaxisnum = (*mo2).health;
                        dist2 = R_PointToDist2(
                            (*(*player).mo).x,
                            (*(*player).mo).y,
                            (*mo2).x,
                            (*mo2).y,
                        ) - (*mo2).radius;
                    } else if (*mo2).health < lowestaxisnum {
                        dist1 = R_PointToDist2(
                            (*(*player).mo).x,
                            (*(*player).mo).y,
                            (*mo2).x,
                            (*mo2).y,
                        ) - (*mo2).radius;
                        if dist1 < dist2 {
                            closestaxis = mo2;
                            lowestaxisnum = (*mo2).health;
                            dist2 = dist1;
                        }
                    }
                }
            }
        }
        th = (*th).next;
    }
    if closestaxis.is_null() {
        return false_0 as libc::c_int;
    }
    P_SetTarget2(&mut (*(*player).mo).target, closestaxis);
    return true_0 as libc::c_int;
}
unsafe extern "C" fn P_FindAxis(mut mare: int32_t, mut axisnum: int32_t) -> *mut mobj_t {
    let mut th: *mut thinker_t = 0 as *mut thinker_t;
    let mut mo2: *mut mobj_t = 0 as *mut mobj_t;
    th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
    while th
        != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
            as *mut thinker_t
    {
        if !((*th).function.acp1
            == ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                actionf_p1,
            >(
                Some(
                    P_RemoveThinkerDelayed as unsafe extern "C" fn(*mut thinker_t) -> (),
                ),
            ))
        {
            mo2 = th as *mut mobj_t;
            if (*mo2).flags2 & MF2_AXIS as libc::c_int as uint32_t == 0 {
                return 0 as *mut mobj_t;
            }
            if !((*mo2).type_0 as libc::c_uint != MT_AXIS as libc::c_int as libc::c_uint)
            {
                if !((*mo2).health != axisnum) {
                    if !((*mo2).threshold != mare) {
                        return mo2;
                    }
                }
            }
        }
        th = (*th).next;
    }
    return 0 as *mut mobj_t;
}
unsafe extern "C" fn P_FindAxisTransfer(
    mut mare: int32_t,
    mut axisnum: int32_t,
    mut type_0: mobjtype_t,
) -> *mut mobj_t {
    let mut th: *mut thinker_t = 0 as *mut thinker_t;
    let mut mo2: *mut mobj_t = 0 as *mut mobj_t;
    th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
    while th
        != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
            as *mut thinker_t
    {
        if !((*th).function.acp1
            == ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                actionf_p1,
            >(
                Some(
                    P_RemoveThinkerDelayed as unsafe extern "C" fn(*mut thinker_t) -> (),
                ),
            ))
        {
            mo2 = th as *mut mobj_t;
            if (*mo2).flags2 & MF2_AXIS as libc::c_int as uint32_t == 0 {
                return 0 as *mut mobj_t;
            }
            if !((*mo2).type_0 as libc::c_uint != type_0 as libc::c_uint) {
                if !((*mo2).health != axisnum) {
                    if !((*mo2).threshold != mare) {
                        return mo2;
                    }
                }
            }
        }
        th = (*th).next;
    }
    return 0 as *mut mobj_t;
}
#[no_mangle]
pub unsafe extern "C" fn P_TransferToAxis(
    mut player: *mut player_t,
    mut axisnum: int32_t,
) {
    let mut th: *mut thinker_t = 0 as *mut thinker_t;
    let mut mo2: *mut mobj_t = 0 as *mut mobj_t;
    let mut closestaxis: *mut mobj_t = 0 as *mut mobj_t;
    let mut mare: int32_t = (*player).mare as int32_t;
    let mut dist1: fixed_t = 0;
    let mut dist2: fixed_t = 0 as libc::c_int;
    CONS_Debug(
        0x20 as libc::c_int,
        b"Transferring to axis %d\nLeveltime: %u...\n\0" as *const u8
            as *const libc::c_char,
        axisnum,
        leveltime,
    );
    closestaxis = 0 as *mut mobj_t;
    th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
    while th
        != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
            as *mut thinker_t
    {
        if !((*th).function.acp1
            == ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                actionf_p1,
            >(
                Some(
                    P_RemoveThinkerDelayed as unsafe extern "C" fn(*mut thinker_t) -> (),
                ),
            ))
        {
            mo2 = th as *mut mobj_t;
            if !((*mo2).type_0 as libc::c_uint != MT_AXIS as libc::c_int as libc::c_uint)
            {
                if !((*mo2).health != axisnum) {
                    if !((*mo2).threshold != mare) {
                        if closestaxis.is_null() {
                            closestaxis = mo2;
                            dist2 = R_PointToDist2(
                                (*(*player).mo).x,
                                (*(*player).mo).y,
                                (*mo2).x,
                                (*mo2).y,
                            ) - (*mo2).radius;
                        } else {
                            dist1 = R_PointToDist2(
                                (*(*player).mo).x,
                                (*(*player).mo).y,
                                (*mo2).x,
                                (*mo2).y,
                            ) - (*mo2).radius;
                            if dist1 < dist2 {
                                closestaxis = mo2;
                                dist2 = dist1;
                            }
                        }
                    }
                }
            }
        }
        th = (*th).next;
    }
    if closestaxis.is_null() {
        CONS_Debug(
            0x20 as libc::c_int,
            b"ERROR: Specified axis point to transfer to not found!\n%d\n\0" as *const u8
                as *const libc::c_char,
            axisnum,
        );
    } else {
        CONS_Debug(
            0x20 as libc::c_int,
            b"Transferred to axis %d, mare %d\n\0" as *const u8 as *const libc::c_char,
            (*closestaxis).health,
            (*closestaxis).threshold,
        );
    }
    P_SetTarget2(&mut (*(*player).mo).target, closestaxis);
}
unsafe extern "C" fn P_DeNightserizePlayer(mut player: *mut player_t) {
    let mut th: *mut thinker_t = 0 as *mut thinker_t;
    let mut mo2: *mut mobj_t = 0 as *mut mobj_t;
    (*player)
        .powers[pw_carry as libc::c_int
        as usize] = CR_NIGHTSFALL as libc::c_int as uint16_t;
    (*player)
        .powers[pw_underwater as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >(
        (*player).pflags as libc::c_uint
            & !(PF_SPINDOWN as libc::c_int | PF_JUMPDOWN as libc::c_int
                | PF_ATTACKDOWN as libc::c_int | PF_STARTDASH as libc::c_int
                | PF_GLIDING as libc::c_int | PF_STARTJUMP as libc::c_int
                | PF_JUMPED as libc::c_int | PF_NOJUMPDAMAGE as libc::c_int
                | PF_THOKKED as libc::c_int | PF_SPINNING as libc::c_int
                | PF_DRILLING as libc::c_int | PF_TRANSFERTOCLOSEST as libc::c_int)
                as libc::c_uint,
    );
    (*player).secondjump = 0 as libc::c_int as uint8_t;
    (*player).homing = 0 as libc::c_int as uint8_t;
    (*player).climbing = 0 as libc::c_int as uint8_t;
    (*(*player).mo).fuse = 0 as libc::c_int;
    (*player).speed = 0 as libc::c_int;
    (*player).marelap = 0 as libc::c_int as uint8_t;
    (*player).marebonuslap = 0 as libc::c_int as uint8_t;
    (*player).flyangle = 0 as libc::c_int;
    (*player).anotherflyangle = 0 as libc::c_int;
    (*(*player).mo).spriteroll = 0 as libc::c_int as angle_t;
    P_SetTarget2(&mut (*(*player).mo).target, 0 as *mut mobj_t);
    P_SetTarget2(
        &mut (*player).axis1,
        P_SetTarget2(&mut (*player).axis2, 0 as *mut mobj_t),
    );
    (*(*player).mo).flags &= !(MF_NOGRAVITY as libc::c_int) as uint32_t;
    (*(*player).mo)
        .skin = &mut *skins.as_mut_ptr().offset((*player).skin as isize) as *mut skin_t
        as *mut libc::c_void;
    (*player).followitem = skins[(*player).skin as usize].followitem as mobjtype_t;
    (*(*player).mo).color = (*player).skincolor;
    G_GhostAddColor(GHC_RETURNSKIN);
    if player
        == &mut *players.as_mut_ptr().offset(consoleplayer as isize) as *mut player_t
    {
        localaiming = 0 as libc::c_int;
    } else if player
        == &mut *players.as_mut_ptr().offset(secondarydisplayplayer as isize)
            as *mut player_t
    {
        localaiming2 = 0 as libc::c_int;
    }
    P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
    if G_IsSpecialStage(gamemap as int32_t) != 0 {
        let mut i: int32_t = 0;
        i = 0 as libc::c_int;
        while i < 32 as libc::c_int {
            if playeringame[i as usize] != 0
                && players[i as usize].powers[pw_carry as libc::c_int as usize]
                    as libc::c_int == CR_NIGHTSMODE as libc::c_int
            {
                players[i as usize].nightstime = 1 as libc::c_int as tic_t;
            }
            i += 1;
            i;
        }
        (*player).exiting = (3 as libc::c_int * 35 as libc::c_int) as tic_t;
        (*player).rings = 0 as libc::c_int as int16_t;
        (*player).spheres = (*player).rings;
        (*player).marescore = (*player).spheres as uint32_t;
    }
    th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
    while th
        != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
            as *mut thinker_t
    {
        if !((*th).function.acp1
            == ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                actionf_p1,
            >(
                Some(
                    P_RemoveThinkerDelayed as unsafe extern "C" fn(*mut thinker_t) -> (),
                ),
            ))
        {
            mo2 = th as *mut mobj_t;
            if !((*mo2).type_0 as libc::c_uint
                != MT_NIGHTSDRONE as libc::c_int as libc::c_uint)
            {
                if (*mo2).flags2 & MF2_AMBUSH as libc::c_int as uint32_t != 0 {
                    (*player).rings = 0 as libc::c_int as int16_t;
                    (*player).spheres = (*player).rings;
                    (*player).marescore = (*player).spheres as uint32_t;
                    P_DamageMobj(
                        (*player).mo,
                        0 as *mut mobj_t,
                        0 as *mut mobj_t,
                        1 as libc::c_int,
                        0x80 as libc::c_int as uint8_t,
                    );
                    if (*mapheaderinfo[(gamemap as libc::c_int - 1 as libc::c_int)
                        as usize])
                        .levelflags as libc::c_int
                        & (1 as libc::c_int) << 6 as libc::c_int != 0
                    {
                        S_SetMusicPosition(0 as libc::c_int as uint32_t);
                    }
                }
                break;
            }
        }
        th = (*th).next;
    }
    if (*(*player).mo).scale != (*player).oldscale {
        (*(*player).mo).destscale = (*player).oldscale;
    }
    (*player).oldscale = 0 as libc::c_int;
    if (*mapheaderinfo[(gamemap as libc::c_int - 1 as libc::c_int) as usize]).levelflags
        as libc::c_int & (1 as libc::c_int) << 6 as libc::c_int != 0
    {
        S_StopSoundByNum(sfx_timeup);
        S_StopFadingMusic();
        S_SetInternalMusicVolume(100 as libc::c_int);
        if P_FindLowestMare() as libc::c_int != 255 as libc::c_int
            || G_IsSpecialStage(gamemap as int32_t) != 0
        {
            S_SetMusicPosition(0 as libc::c_int as uint32_t);
        }
    } else {
        music_stack_fadein = 0 as libc::c_int as uint32_t;
        P_RestoreMusic(player);
    }
    P_RunDeNightserizeExecutors((*player).mo);
}
#[no_mangle]
pub unsafe extern "C" fn P_NightserizePlayer(
    mut player: *mut player_t,
    mut nighttime: int32_t,
) {
    let mut oldmare: uint8_t = 0;
    let mut oldmarelap: uint8_t = 0;
    let mut oldmarebonuslap: uint8_t = 0;
    if (*player).bot != 0 {
        return;
    }
    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        != CR_NIGHTSMODE as libc::c_int
    {
        (*(*player).mo).height = FixedMul((*player).height, (*(*player).mo).scale);
        (*player).oldscale = (*(*player).mo).scale;
        if skins[(*player).skin as usize]
            .sprites[SPR2_NFLY as libc::c_int as usize]
            .numframes == 0 as libc::c_int as size_t
        {
            (*(*player).mo)
                .skin = &mut *skins.as_mut_ptr().offset(0 as libc::c_int as isize)
                as *mut skin_t as *mut libc::c_void;
            if !(cv_debug != 0 || devparm != 0)
                && !(netgame != 0 || multiplayer != 0 || demoplayback != 0)
            {
                (*(*player).mo).color = skins[0 as libc::c_int as usize].prefcolor;
            }
            (*player)
                .followitem = skins[0 as libc::c_int as usize].followitem as mobjtype_t;
            G_GhostAddColor(GHC_NIGHTSSKIN);
        }
    }
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >(
        (*player).pflags as libc::c_uint
            & !(PF_SPINDOWN as libc::c_int | PF_JUMPDOWN as libc::c_int
                | PF_ATTACKDOWN as libc::c_int | PF_STARTDASH as libc::c_int
                | PF_GLIDING as libc::c_int | PF_JUMPED as libc::c_int
                | PF_NOJUMPDAMAGE as libc::c_int | PF_THOKKED as libc::c_int
                | PF_SHIELDABILITY as libc::c_int | PF_SPINNING as libc::c_int
                | PF_DRILLING as libc::c_int) as libc::c_uint,
    );
    (*player).homing = 0 as libc::c_int as uint8_t;
    (*(*player).mo).fuse = 0 as libc::c_int;
    (*player).speed = 0 as libc::c_int;
    (*player).climbing = 0 as libc::c_int as uint8_t;
    (*player).secondjump = 0 as libc::c_int as uint8_t;
    (*player).flyangle = 0 as libc::c_int;
    (*player).anotherflyangle = 0 as libc::c_int;
    (*(*player).mo).spriteroll = 0 as libc::c_int as angle_t;
    (*player)
        .powers[pw_shield as libc::c_int as usize] = SH_NONE as libc::c_int as uint16_t;
    (*player).powers[pw_super as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
    (*(*player).mo).flags |= MF_NOGRAVITY as libc::c_int as uint32_t;
    (*player).lapstartedtime = (nighttime * 35 as libc::c_int) as tic_t;
    (*player).startedtime = (*player).lapstartedtime;
    (*player).nightstime = (*player).startedtime;
    (*player).bonustime = false_0 as libc::c_int;
    if (*mapheaderinfo[(gamemap as libc::c_int - 1 as libc::c_int) as usize]).levelflags
        as libc::c_int & (1 as libc::c_int) << 6 as libc::c_int != 0
    {
        S_StopSoundByNum(sfx_timeup);
        S_StopFadingMusic();
        S_SetInternalMusicVolume(100 as libc::c_int);
    } else {
        music_stack_fadein = 0 as libc::c_int as uint32_t;
        P_RestoreMusic(player);
    }
    if gametyperules & GTR_RACE as libc::c_int as uint32_t != 0 {
        if (*player).drillmeter < 48 as libc::c_int * 20 as libc::c_int {
            (*player).drillmeter = 48 as libc::c_int * 20 as libc::c_int;
        }
    } else if (*player).drillmeter < 40 as libc::c_int * 20 as libc::c_int {
        (*player).drillmeter = 40 as libc::c_int * 20 as libc::c_int;
    }
    oldmare = (*player).mare;
    oldmarelap = (*player).marelap;
    oldmarebonuslap = (*player).marebonuslap;
    if P_TransferToNextMare(player) == 0 {
        let mut i: int32_t = 0;
        let mut total_spheres: int32_t = 0 as libc::c_int;
        let mut total_rings: int32_t = 0 as libc::c_int;
        P_SetTarget2(&mut (*(*player).mo).target, 0 as *mut mobj_t);
        if G_IsSpecialStage(gamemap as int32_t) != 0 {
            i = 0 as libc::c_int;
            while i < 32 as libc::c_int {
                if playeringame[i as usize] != 0 {
                    total_spheres += players[i as usize].spheres as libc::c_int;
                    total_rings += players[i as usize].rings as libc::c_int;
                }
                i += 1;
                i;
            }
        }
        i = 0 as libc::c_int;
        while i < 32 as libc::c_int {
            if !(playeringame[i as usize] == 0 || (players[i as usize].mo).is_null()
                || players[i as usize].spectator != 0)
            {
                players[i as usize]
                    .texttimer = (3 as libc::c_int * 35 as libc::c_int
                    - 10 as libc::c_int) as uint8_t;
                players[i as usize].textvar = 4 as libc::c_int as uint8_t;
                players[i as usize].lastmare = players[i as usize].mare;
                players[i as usize].lastmarelap = players[i as usize].marelap;
                players[i as usize].lastmarebonuslap = players[i as usize].marebonuslap;
                if G_IsSpecialStage(gamemap as int32_t) != 0 {
                    players[i as usize].finishedspheres = total_spheres as int16_t;
                    players[i as usize].finishedrings = total_rings as int16_t;
                    P_AddPlayerScore(
                        player,
                        (total_spheres * 50 as libc::c_int) as uint32_t,
                    );
                } else {
                    players[i as usize].finishedspheres = players[i as usize].spheres;
                    players[i as usize].finishedrings = players[i as usize].rings;
                    P_AddPlayerScore(
                        &mut *players.as_mut_ptr().offset(i as isize),
                        (players[i as usize].spheres as libc::c_int * 50 as libc::c_int)
                            as uint32_t,
                    );
                }
                G_AddTempNightsRecords(
                    player,
                    players[i as usize].marescore,
                    leveltime.wrapping_sub((*player).marebegunat),
                    (players[i as usize].mare as libc::c_int + 1 as libc::c_int)
                        as uint8_t,
                );
                players[i as usize]
                    .totalmarescore = (players[i as usize].totalmarescore)
                    .wrapping_add(players[i as usize].marescore);
                players[i as usize].lastmarescore = players[i as usize].marescore;
                players[i as usize].marescore = 0 as libc::c_int as uint32_t;
                players[i as usize].rings = 0 as libc::c_int as int16_t;
                players[i as usize].spheres = players[i as usize].rings;
                P_DoPlayerExit(&mut *players.as_mut_ptr().offset(i as isize));
            }
            i += 1;
            i;
        }
    } else if oldmare as libc::c_int != (*player).mare as libc::c_int {
        P_AddPlayerScore(
            player,
            ((*player).spheres as libc::c_int * 50 as libc::c_int) as uint32_t,
        );
        (*player).lastmare = oldmare;
        (*player).lastmarelap = oldmarelap;
        (*player).lastmarebonuslap = oldmarebonuslap;
        (*player).texttimer = (4 as libc::c_int * 35 as libc::c_int) as uint8_t;
        (*player).textvar = 4 as libc::c_int as uint8_t;
        (*player).finishedspheres = (*player).spheres;
        (*player).finishedrings = (*player).rings;
        G_AddTempNightsRecords(
            player,
            (*player).marescore,
            leveltime.wrapping_sub((*player).marebegunat),
            (oldmare as libc::c_int + 1 as libc::c_int) as uint8_t,
        );
        (*player)
            .totalmarescore = ((*player).totalmarescore)
            .wrapping_add((*player).marescore);
        (*player).lastmarescore = (*player).marescore;
        (*player).marescore = 0 as libc::c_int as uint32_t;
        (*player).marebegunat = leveltime;
        (*player).lapbegunat = leveltime;
        (*player).rings = 0 as libc::c_int as int16_t;
        (*player).spheres = (*player).rings;
    } else {
        (*player).textvar = 5 as libc::c_int as uint8_t;
        (*player).texttimer = 40 as libc::c_int as uint8_t;
        if timeinmap.wrapping_add(40 as libc::c_int as tic_t)
            < (110 as libc::c_int - 70 as libc::c_int) as tic_t
        {
            (*player)
                .texttimer = ((110 as libc::c_int - 70 as libc::c_int) as tic_t)
                .wrapping_sub(timeinmap) as uint8_t;
        }
    }
    if !((*player).drone).is_null() && (*(*player).drone).scale != (*(*player).mo).scale
    {
        (*(*player).mo).destscale = (*(*player).drone).scale;
    }
    if !((*(*player).mo).target).is_null() {
        (*player)
            .angle_pos = R_PointToAngle2(
            (*(*(*player).mo).target).x,
            (*(*(*player).mo).target).y,
            (*(*player).mo).x,
            (*(*player).mo).y,
        );
        (*player)
            .drawangle = ((*player).angle_pos)
            .wrapping_add(
                (if (*(*(*player).mo).target).flags2
                    & MF2_AMBUSH as libc::c_int as uint32_t != 0
                {
                    -(0x40000000 as libc::c_int)
                } else {
                    0x40000000 as libc::c_int
                }) as angle_t,
            );
    }
    P_RunNightserizeExecutors((*player).mo);
    (*player)
        .powers[pw_carry as libc::c_int
        as usize] = CR_NIGHTSMODE as libc::c_int as uint16_t;
    P_SetPlayerMobjState((*player).mo, S_PLAY_NIGHTS_TRANS1);
}
#[no_mangle]
pub unsafe extern "C" fn P_GetJumpFlags(mut player: *mut player_t) -> pflags_t {
    if (*player).charflags & SF_NOJUMPDAMAGE as libc::c_int as uint32_t != 0 {
        return (PF_JUMPED as libc::c_int | PF_NOJUMPDAMAGE as libc::c_int) as pflags_t;
    }
    return PF_JUMPED;
}
#[no_mangle]
pub unsafe extern "C" fn P_PlayerInPain(mut player: *mut player_t) -> boolean {
    if (*player).pflags as libc::c_uint & PF_SLIDING as libc::c_int as libc::c_uint == 0
        && (*(*player).mo).state
            == &mut *states
                .as_mut_ptr()
                .offset((*(*(*player).mo).info).painstate as isize) as *mut state_t
        && (*player).powers[pw_flashing as libc::c_int as usize] as libc::c_int != 0
    {
        return true_0 as libc::c_int;
    }
    if (*(*player).mo).state
        == &mut *states.as_mut_ptr().offset(S_PLAY_STUN as libc::c_int as isize)
            as *mut state_t
    {
        return true_0 as libc::c_int;
    }
    return false_0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_DoPlayerPain(
    mut player: *mut player_t,
    mut source: *mut mobj_t,
    mut inflictor: *mut mobj_t,
) {
    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_ROPEHANG as libc::c_int
    {
        P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
    }
    (*player)
        .powers[pw_strong as libc::c_int as usize] = STR_NONE as libc::c_int as uint16_t;
    let mut ang: angle_t = 0;
    let mut fallbackspeed: fixed_t = 0;
    P_ResetPlayer(player);
    P_SetPlayerMobjState((*player).mo, (*(*(*player).mo).info).painstate);
    if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        (*(*player).mo).z -= 1;
        (*(*player).mo).z;
    } else {
        (*(*player).mo).z += 1;
        (*(*player).mo).z;
    }
    if (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int != 0 {
        P_SetObjectMomZ(
            (*player).mo,
            FixedDiv(
                10511 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                2600 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
            ),
            false_0 as libc::c_int,
        );
    } else {
        P_SetObjectMomZ(
            (*player).mo,
            FixedDiv(
                69 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                10 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
            ),
            false_0 as libc::c_int,
        );
    }
    if !inflictor.is_null() {
        if (*inflictor).type_0 as libc::c_uint
            == MT_WALLSPIKE as libc::c_int as libc::c_uint
        {
            ang = (*inflictor).angle;
        } else {
            ang = R_PointToAngle2(
                (*inflictor).x - (*inflictor).momx,
                (*inflictor).y - (*inflictor).momy,
                (*(*player).mo).x - (*(*player).mo).momx,
                (*(*player).mo).y - (*(*player).mo).momy,
            );
        }
        if (*inflictor).flags2 & MF2_SCATTER as libc::c_int as uint32_t != 0
            && !source.is_null()
        {
            let mut dist: fixed_t = P_AproxDistance(
                P_AproxDistance(
                    (*source).x - (*(*player).mo).x,
                    (*source).y - (*(*player).mo).y,
                ),
                (*source).z - (*(*player).mo).z,
            );
            dist = FixedMul(
                128 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*inflictor).scale,
            ) - dist / 4 as libc::c_int;
            if dist
                < FixedMul(
                    4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    (*inflictor).scale,
                )
            {
                dist = FixedMul(
                    4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    (*inflictor).scale,
                );
            }
            fallbackspeed = dist;
        } else if (*inflictor).flags2 & MF2_EXPLOSION as libc::c_int as uint32_t != 0 {
            if (*inflictor).flags2 & MF2_RAILRING as libc::c_int as uint32_t != 0 {
                fallbackspeed = FixedMul(
                    38 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    (*inflictor).scale,
                );
            } else {
                fallbackspeed = FixedMul(
                    30 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    (*inflictor).scale,
                );
            }
        } else if (*inflictor).flags2 & MF2_RAILRING as libc::c_int as uint32_t != 0 {
            fallbackspeed = FixedMul(
                45 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*inflictor).scale,
            );
        } else {
            fallbackspeed = FixedMul(
                4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*inflictor).scale,
            );
        }
    } else {
        ang = if (*(*player).mo).momx != 0 || (*(*player).mo).momy != 0 {
            R_PointToAngle2(
                (*(*player).mo).momx,
                (*(*player).mo).momy,
                0 as libc::c_int,
                0 as libc::c_int,
            )
        } else {
            (*player).drawangle
        };
        fallbackspeed = FixedMul(
            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
            (*(*player).mo).scale,
        );
    }
    if (*player).pflags as libc::c_uint & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint
        != 0
    {
        (*player).drawangle = ang.wrapping_add(0x80000000 as libc::c_uint);
    }
    P_InstaThrust((*player).mo, ang, fallbackspeed);
    if gametyperules
        & (GTR_TAG as libc::c_int | GTR_HIDEFROZEN as libc::c_int) as uint32_t
        == GTR_TAG as libc::c_int as uint32_t
        && ((*player).pflags as libc::c_uint
            & PF_GAMETYPEOVER as libc::c_int as libc::c_uint == 0
            && (*player).pflags as libc::c_uint & PF_TAGIT as libc::c_int as libc::c_uint
                == 0)
    {
        if (*player).score >= 50 as libc::c_int as uint32_t {
            (*player)
                .score = ((*player).score).wrapping_sub(50 as libc::c_int as uint32_t);
        } else {
            (*player).score = 0 as libc::c_int as uint32_t;
        }
    }
    (*player).powers[pw_flashing as libc::c_int as usize] = flashingtics;
    if (*player).timeshit as libc::c_int != 255 as libc::c_int {
        (*player).timeshit = ((*player).timeshit).wrapping_add(1);
        (*player).timeshit;
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_ResetPlayer(mut player: *mut player_t) {
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >(
        (*player).pflags as libc::c_uint
            & !(PF_SPINNING as libc::c_int | PF_STARTDASH as libc::c_int
                | PF_STARTJUMP as libc::c_int | PF_JUMPED as libc::c_int
                | PF_NOJUMPDAMAGE as libc::c_int | PF_GLIDING as libc::c_int
                | PF_THOKKED as libc::c_int | PF_CANCARRY as libc::c_int
                | PF_SHIELDABILITY as libc::c_int | PF_BOUNCING as libc::c_int)
                as libc::c_uint,
    );
    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_ROLLOUT as libc::c_int
    {
        if !((*(*player).mo).tracer).is_null()
            && P_MobjWasRemoved((*(*player).mo).tracer) == 0
        {
            (*(*(*player).mo).tracer).flags |= MF_PUSHABLE as libc::c_int as uint32_t;
            P_SetTarget2(&mut (*(*(*player).mo).tracer).tracer, 0 as *mut mobj_t);
        }
        P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
        (*player)
            .powers[pw_carry as libc::c_int
            as usize] = CR_NONE as libc::c_int as uint16_t;
    }
    if !((*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_NIGHTSMODE as libc::c_int
        || (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_NIGHTSFALL as libc::c_int
        || (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_BRAKGOOP as libc::c_int
        || (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_MINECART as libc::c_int)
    {
        (*player)
            .powers[pw_carry as libc::c_int
            as usize] = CR_NONE as libc::c_int as uint16_t;
    }
    (*player).secondjump = 0 as libc::c_int as uint8_t;
    (*player).glidetime = 0 as libc::c_int as tic_t;
    (*player).homing = 0 as libc::c_int as uint8_t;
    (*player).climbing = 0 as libc::c_int as uint8_t;
    (*player).powers[pw_tailsfly as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
    (*player).onconveyor = 0 as libc::c_int;
    (*player).skidtime = 0 as libc::c_int as tic_t;
    if player.offset_from(players.as_mut_ptr()) as libc::c_long
        == consoleplayer as libc::c_long && botingame != 0
    {
        CV_SetValue(
            &mut *cv_analog.as_mut_ptr().offset(1 as libc::c_int as isize),
            true_0 as libc::c_int,
        );
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_PlayerCanDamage(
    mut player: *mut player_t,
    mut thing: *mut mobj_t,
) -> boolean {
    let mut bottomheight: fixed_t = 0;
    let mut topheight: fixed_t = 0;
    let mut allatk: boolean = ((*player).powers[pw_strong as libc::c_int as usize]
        as libc::c_int & STR_PUNCH as libc::c_int != 0
        && (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
            & STR_TAIL as libc::c_int != 0
        && (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
            & STR_STOMP as libc::c_int != 0
        && (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
            & STR_UPPER as libc::c_int != 0) as libc::c_int;
    if ((*player).mo).is_null() || (*player).spectator != 0 || thing.is_null()
        || P_MobjWasRemoved(thing) != 0
    {
        return false_0 as libc::c_int;
    }
    let mut shouldCollide: uint8_t = LUA_HookPlayerCanDamage(player, thing) as uint8_t;
    if P_MobjWasRemoved(thing) != 0 {
        return false_0 as libc::c_int;
    }
    if shouldCollide as libc::c_int == 1 as libc::c_int {
        return true_0 as libc::c_int
    } else if shouldCollide as libc::c_int == 2 as libc::c_int {
        return false_0 as libc::c_int
    }
    if (*thing).flags & MF_MONITOR as libc::c_int as uint32_t == 0
        && ((*player).powers[pw_invulnerability as libc::c_int as usize] as libc::c_int
            != 0
            || (*player).powers[pw_super as libc::c_int as usize] as libc::c_int != 0)
    {
        return true_0 as libc::c_int;
    }
    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_NIGHTSMODE as libc::c_int
        && (*player).pflags as libc::c_uint & PF_DRILLING as libc::c_int as libc::c_uint
            != 0
    {
        return true_0 as libc::c_int;
    }
    if (*player).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint != 0
        && (*player).pflags as libc::c_uint
            & PF_NOJUMPDAMAGE as libc::c_int as libc::c_uint == 0
    {
        return true_0 as libc::c_int;
    }
    if (*player).pflags as libc::c_uint & PF_SPINNING as libc::c_int as libc::c_uint != 0
    {
        return true_0 as libc::c_int;
    }
    if ((*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
        & SH_NOSTACK as libc::c_int == SH_ELEMENTAL as libc::c_int
        || (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
            & SH_NOSTACK as libc::c_int == SH_BUBBLEWRAP as libc::c_int)
        && (*player).pflags as libc::c_uint
            & PF_SHIELDABILITY as libc::c_int as libc::c_uint != 0
    {
        return true_0 as libc::c_int;
    }
    if allatk != 0
        || (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
            & STR_DASH as libc::c_int != 0
    {
        return true_0 as libc::c_int;
    }
    if (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
        & STR_PUNCH as libc::c_int != 0
        && ((*player).drawangle)
            .wrapping_sub(
                R_PointToAngle2(
                    (*(*player).mo).x - (*(*player).mo).momx,
                    (*(*player).mo).y - (*(*player).mo).momy,
                    (*thing).x,
                    (*thing).y,
                ),
            )
            .wrapping_add(0x40000000 as libc::c_int as angle_t)
            < 0x80000000 as libc::c_uint
    {
        return true_0 as libc::c_int;
    }
    if (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
        & STR_TAIL as libc::c_int != 0
        && ((*player).drawangle)
            .wrapping_sub(
                R_PointToAngle2(
                    (*(*player).mo).x - (*(*player).mo).momx,
                    (*(*player).mo).y - (*(*player).mo).momy,
                    (*thing).x,
                    (*thing).y,
                ),
            )
            .wrapping_add(0x40000000 as libc::c_int as angle_t)
            >= 0x80000000 as libc::c_uint
    {
        return true_0 as libc::c_int;
    }
    bottomheight = (*(*player).mo).z;
    topheight = (*(*player).mo).z + (*(*player).mo).height;
    if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        let mut swap: fixed_t = bottomheight;
        bottomheight = topheight;
        topheight = swap;
    }
    if P_MobjFlip((*player).mo) as libc::c_int
        * (bottomheight - ((*thing).z + (*thing).height / 2 as libc::c_int))
        > 0 as libc::c_int
    {
        if ((*player).charflags & SF_STOMPDAMAGE as libc::c_int as uint32_t != 0
            || (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
                & STR_STOMP as libc::c_int != 0)
            && P_MobjFlip((*player).mo) as libc::c_int
                * ((*(*player).mo).momz - (*thing).momz) < 0 as libc::c_int
        {
            return true_0 as libc::c_int;
        }
    } else if P_MobjFlip((*player).mo) as libc::c_int
        * (topheight - ((*thing).z + (*thing).height / 2 as libc::c_int))
        < 0 as libc::c_int
    {
        if (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
            & STR_UPPER as libc::c_int != 0
            && (*(*player).mo).sprite2 as libc::c_int != SPR2_SWIM as libc::c_int
            && P_MobjFlip((*player).mo) as libc::c_int
                * ((*(*player).mo).momz - (*thing).momz) > 0 as libc::c_int
        {
            return true_0 as libc::c_int;
        }
    }
    return false_0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_GivePlayerRings(
    mut player: *mut player_t,
    mut num_rings: int32_t,
) {
    if player.is_null() {
        return;
    }
    if ((*player).bot as libc::c_int == BOT_2PAI as libc::c_int
        || (*player).bot as libc::c_int == BOT_2PHUMAN as libc::c_int)
        && !((*player).botleader).is_null()
    {
        player = (*player).botleader;
    }
    if ((*player).mo).is_null() {
        return;
    }
    (*player).rings = ((*player).rings as libc::c_int + num_rings) as int16_t;
    (*player).totalring = ((*player).totalring as libc::c_int + num_rings) as int16_t;
    if (*player).rings as libc::c_int > 9999 as libc::c_int {
        (*player).rings = 9999 as libc::c_int as int16_t;
    } else if ((*player).rings as libc::c_int) < 0 as libc::c_int {
        (*player).rings = 0 as libc::c_int as int16_t;
    }
    if ultimatemode == 0 && modeattacking == 0
        && G_IsSpecialStage(gamemap as int32_t) == 0 && G_GametypeUsesLives() != 0
        && (*player).lives as libc::c_int != 0x7f as libc::c_int
    {
        let mut gainlives: int32_t = 0 as libc::c_int;
        while ((*player).xtralife as libc::c_int) < maxXtraLife as libc::c_int
            && (*player).rings as libc::c_int
                >= 100 as libc::c_int
                    * ((*player).xtralife as libc::c_int + 1 as libc::c_int)
        {
            gainlives += 1;
            gainlives;
            (*player).xtralife += 1;
            (*player).xtralife;
        }
        if gainlives != 0 {
            (*player).lives = ((*player).lives as libc::c_int + gainlives) as int8_t;
            if (*player).lives as libc::c_int > 99 as libc::c_int {
                (*player).lives = 99 as libc::c_int as int8_t;
            } else if ((*player).lives as libc::c_int) < 1 as libc::c_int {
                (*player).lives = 1 as libc::c_int as int8_t;
            }
            P_PlayLivesJingle(player);
        }
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_GivePlayerSpheres(
    mut player: *mut player_t,
    mut num_spheres: int32_t,
) {
    if player.is_null() {
        return;
    }
    if (*player).bot != 0 {
        player = &mut *players.as_mut_ptr().offset(consoleplayer as isize)
            as *mut player_t;
    }
    if ((*player).mo).is_null() {
        return;
    }
    (*player).spheres = ((*player).spheres as libc::c_int + num_spheres) as int16_t;
    if (*player).spheres as libc::c_int > 9999 as libc::c_int {
        (*player).spheres = 9999 as libc::c_int as int16_t;
    } else if ((*player).spheres as libc::c_int) < 0 as libc::c_int {
        (*player).spheres = 0 as libc::c_int as int16_t;
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_GivePlayerLives(
    mut player: *mut player_t,
    mut numlives: int32_t,
) {
    let mut current_block: u64;
    let mut prevlives: uint8_t = (*player).lives as uint8_t;
    if player.is_null() {
        return;
    }
    if (*player).bot != 0 {
        player = &mut *players.as_mut_ptr().offset(consoleplayer as isize)
            as *mut player_t;
    }
    if gamestate as libc::c_uint == GS_LEVEL as libc::c_int as libc::c_uint {
        if (*player).lives as libc::c_int == 0x7f as libc::c_int
            || gametyperules & GTR_LIVES as libc::c_int as uint32_t == 0
        {
            P_GivePlayerRings(player, 100 as libc::c_int * numlives);
            return;
        }
        if (netgame != 0 || multiplayer != 0) && G_GametypeUsesCoopLives() != 0
            && cv_cooplives.value == 0 as libc::c_int
        {
            P_GivePlayerRings(player, 100 as libc::c_int * numlives);
            if (*player).lives as libc::c_int - prevlives as libc::c_int >= numlives {
                current_block = 2205226015371823728;
            } else {
                numlives = numlives + prevlives as libc::c_int
                    - (*player).lives as libc::c_int;
                current_block = 1841672684692190573;
            }
        } else {
            current_block = 1841672684692190573;
        }
    } else {
        if (*player).lives as libc::c_int == 0x7f as libc::c_int {
            return;
        }
        current_block = 1841672684692190573;
    }
    match current_block {
        1841672684692190573 => {
            (*player).lives = ((*player).lives as libc::c_int + numlives) as int8_t;
            if (*player).lives as libc::c_int > 99 as libc::c_int {
                (*player).lives = 99 as libc::c_int as int8_t;
            } else if ((*player).lives as libc::c_int) < 1 as libc::c_int {
                (*player).lives = 1 as libc::c_int as int8_t;
            }
        }
        _ => {}
    }
    if cv_coopstarposts.value != 0 {
        return;
    }
    if prevlives as libc::c_int > 0 as libc::c_int {
        return;
    }
    if (*player).spectator == 0 {
        return;
    }
    P_SpectatorJoinGame(player);
}
#[no_mangle]
pub unsafe extern "C" fn P_GiveCoopLives(
    mut player: *mut player_t,
    mut numlives: int32_t,
    mut sound: boolean,
) {
    if !((netgame != 0 || multiplayer != 0) && G_GametypeUsesCoopLives() != 0) {
        P_GivePlayerLives(player, numlives);
        if sound != 0 {
            P_PlayLivesJingle(player);
        }
    } else {
        let mut i: int32_t = 0;
        i = 0 as libc::c_int;
        while i < 32 as libc::c_int {
            if !(playeringame[i as usize] == 0) {
                P_GivePlayerLives(
                    &mut *players.as_mut_ptr().offset(i as isize),
                    numlives,
                );
                if sound != 0 {
                    P_PlayLivesJingle(&mut *players.as_mut_ptr().offset(i as isize));
                }
            }
            i += 1;
            i;
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn P_DoSuperTransformation(
    mut player: *mut player_t,
    mut giverings: boolean,
) {
    (*player).powers[pw_super as libc::c_int as usize] = 1 as libc::c_int as uint16_t;
    if (*mapheaderinfo[(gamemap as libc::c_int - 1 as libc::c_int) as usize]).levelflags
        as libc::c_int & (1 as libc::c_int) << 2 as libc::c_int == 0
        && P_IsLocalPlayer(player) != 0
    {
        P_PlayJingle(player, JT_SUPER);
    }
    S_StartSound(0 as *const libc::c_void, sfx_supert);
    (*player).rmomy = 0 as libc::c_int;
    (*player).rmomx = (*player).rmomy;
    (*player).cmomy = (*player).rmomx;
    (*player).cmomx = (*player).cmomy;
    (*(*player).mo).momz = (*player).cmomx;
    (*(*player).mo).momy = (*(*player).mo).momz;
    (*(*player).mo).momx = (*(*player).mo).momy;
    P_SetPlayerMobjState((*player).mo, S_PLAY_SUPER_TRANS1);
    if giverings != 0 && ((*player).rings as libc::c_int) < 50 as libc::c_int {
        (*player).rings = 50 as libc::c_int as int16_t;
    }
    if (*mapheaderinfo[(gamemap as libc::c_int - 1 as libc::c_int) as usize]).levelflags
        as libc::c_int & (1 as libc::c_int) << 2 as libc::c_int == 0
    {
        (*player)
            .powers[pw_extralife as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
        (*player)
            .powers[pw_invulnerability as libc::c_int
            as usize] = 0 as libc::c_int as uint16_t;
        (*player)
            .powers[pw_sneakers as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
    }
    if G_CoopGametype() == 0 {
        HU_SetCEchoFlags(0 as libc::c_int);
        HU_SetCEchoDuration(5 as libc::c_int);
        HU_DoCEcho(
            va(
                b"%s\\is now super.\\\\\\\\\0" as *const u8 as *const libc::c_char,
                (player_names[player.offset_from(players.as_mut_ptr()) as libc::c_long
                    as usize])
                    .as_mut_ptr(),
            ),
        );
    }
    P_PlayerFlagBurst(player, false_0 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn P_AddPlayerScore(
    mut player: *mut player_t,
    mut amount: uint32_t,
) {
    let mut oldscore: uint32_t = 0;
    if ((*player).bot as libc::c_int == BOT_2PAI as libc::c_int
        || (*player).bot as libc::c_int == BOT_2PHUMAN as libc::c_int)
        && !((*player).botleader).is_null()
    {
        player = (*player).botleader;
    }
    if gamestate as libc::c_uint == GS_LEVEL as libc::c_int as libc::c_uint
        && (*mapheaderinfo[(gamemap as libc::c_int - 1 as libc::c_int) as usize])
            .typeoflevel & TOL_NIGHTS as libc::c_int as uint32_t != 0
    {
        if (netgame != 0 || multiplayer != 0)
            && G_IsSpecialStage(gamemap as int32_t) != 0
        {
            let mut i: int32_t = 0;
            i = 0 as libc::c_int;
            while i < 32 as libc::c_int {
                if playeringame[i as usize] != 0
                    && players[i as usize].powers[pw_carry as libc::c_int as usize]
                        as libc::c_int == CR_NIGHTSMODE as libc::c_int
                {
                    oldscore = players[i as usize].marescore;
                    if (players[i as usize].marescore).wrapping_add(amount)
                        < 99999990 as libc::c_int as uint32_t
                    {
                        players[i as usize]
                            .marescore = (players[i as usize].marescore)
                            .wrapping_add(amount);
                    } else {
                        players[i as usize]
                            .marescore = 99999990 as libc::c_int as uint32_t;
                    }
                }
                i += 1;
                i;
            }
        } else {
            oldscore = (*player).marescore;
            if ((*player).marescore).wrapping_add(amount)
                < 99999990 as libc::c_int as uint32_t
            {
                (*player).marescore = ((*player).marescore).wrapping_add(amount);
            } else {
                (*player).marescore = 99999990 as libc::c_int as uint32_t;
            }
            if ultimatemode == 0
                && (multiplayer == 0
                    && (ultimatemode as libc::c_int != 0
                        || useContinues as libc::c_int != 0 && marathonmode as u64 == 0
                        || modeattacking == 0 && !(cursaveslot > 0 as libc::c_int)))
                && G_IsSpecialStage(gamemap as int32_t) != 0
                && (*player).marescore >= 50000 as libc::c_int as uint32_t
                && oldscore < 50000 as libc::c_int as uint32_t
            {
                (*player)
                    .continues = ((*player).continues as libc::c_int + 1 as libc::c_int)
                    as int8_t;
                (*player).gotcontinue = true_0 as libc::c_int as uint8_t;
                if P_IsLocalPlayer(player) != 0 {
                    S_StartSound(0 as *const libc::c_void, sfx_s3kac);
                }
            }
        }
        if G_CoopGametype() != 0 {
            return;
        }
    }
    oldscore = (*player).score;
    (*player).score = ((*player).score).wrapping_add(amount);
    if (*player).score > 99999990 as libc::c_int as uint32_t {
        (*player).score = 99999990 as libc::c_int as uint32_t;
    }
    (*player).recordscore = ((*player).recordscore).wrapping_add(amount);
    if (*player).recordscore > 99999990 as libc::c_int as uint32_t {
        (*player).recordscore = 99999990 as libc::c_int as uint32_t;
    }
    if ultimatemode == 0 && modeattacking == 0 && (*player).score > oldscore
        && ((*player).score % 50000 as libc::c_int as uint32_t) < amount
        && gametyperules & GTR_LIVES as libc::c_int as uint32_t != 0
    {
        P_GivePlayerLives(
            player,
            ((*player).score / 50000 as libc::c_int as uint32_t)
                .wrapping_sub(oldscore / 50000 as libc::c_int as uint32_t) as int32_t,
        );
        P_PlayLivesJingle(player);
    }
    if gametyperules
        & (GTR_TEAMS as libc::c_int | GTR_TEAMFLAGS as libc::c_int) as uint32_t
        == GTR_TEAMS as libc::c_int as uint32_t
    {
        if (*player).ctfteam == 1 as libc::c_int {
            redscore = redscore.wrapping_add(amount);
        } else if (*player).ctfteam == 2 as libc::c_int {
            bluescore = bluescore.wrapping_add(amount);
        }
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_StealPlayerScore(
    mut player: *mut player_t,
    mut amount: uint32_t,
) {
    let mut teams: boolean = G_GametypeHasTeams();
    let mut stolen: uint32_t = 0 as libc::c_int as uint32_t;
    let mut i: libc::c_int = 0;
    i = 0 as libc::c_int;
    while i < 32 as libc::c_int {
        if !(&mut *players.as_mut_ptr().offset(i as isize) as *mut player_t == player
            || teams != 0 && players[i as usize].ctfteam == (*player).ctfteam)
        {
            if players[i as usize].score >= amount {
                stolen = stolen.wrapping_add(amount);
                players[i as usize]
                    .score = (players[i as usize].score).wrapping_sub(amount);
            } else {
                stolen = stolen.wrapping_add(players[i as usize].score);
                players[i as usize].score = 0 as libc::c_int as uint32_t;
            }
        }
        i += 1;
        i;
    }
    if stolen > 0 as libc::c_int as uint32_t {
        if gametyperules
            & (GTR_TEAMS as libc::c_int | GTR_TEAMFLAGS as libc::c_int) as uint32_t
            == GTR_TEAMS as libc::c_int as uint32_t
        {
            if (*player).ctfteam == 1 as libc::c_int {
                bluescore = bluescore.wrapping_sub(amount);
            } else if (*player).ctfteam == 2 as libc::c_int {
                redscore = redscore.wrapping_sub(amount);
            }
        }
        P_AddPlayerScore(player, stolen);
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_PlayLivesJingle(mut player: *mut player_t) {
    if !player.is_null() && P_IsLocalPlayer(player) == 0 {
        return;
    }
    if maptol & TOL_MARIO as libc::c_int as uint32_t != 0 {
        S_StartSound(0 as *const libc::c_void, sfx_marioa);
    } else if use1upSound as libc::c_int != 0 || cv_1upsound.value != 0 {
        S_StartSound(0 as *const libc::c_void, sfx_oneup);
    } else {
        P_PlayJingle(player, JT_1UP);
        if !player.is_null() {
            (*player)
                .powers[pw_extralife as libc::c_int
                as usize] = (extralifetics as libc::c_int + 1 as libc::c_int)
                as uint16_t;
        }
        strlcpy(
            ((*S_sfx.as_mut_ptr().offset(sfx_None as libc::c_int as isize)).caption)
                .as_mut_ptr(),
            b"One-up\0" as *const u8 as *const libc::c_char,
            7 as libc::c_int as libc::c_ulong,
        );
        S_StartCaption(
            sfx_None,
            -(1 as libc::c_int),
            (extralifetics as libc::c_int + 1 as libc::c_int) as uint16_t,
        );
    };
}
#[no_mangle]
pub unsafe extern "C" fn P_PlayJingle(
    mut player: *mut player_t,
    mut jingletype: jingletype_t,
) {
    let mut musname: *const libc::c_char = (jingleinfo[jingletype as usize].musname)
        .as_mut_ptr();
    let mut musflags: uint16_t = 0 as libc::c_int as uint16_t;
    let mut looping: boolean = jingleinfo[jingletype as usize].looping;
    let mut newmusic: [libc::c_char; 7] = [0; 7];
    strncpy(newmusic.as_mut_ptr(), musname, 7 as libc::c_int as libc::c_ulong);
    newmusic[6 as libc::c_int as usize] = 0 as libc::c_int as libc::c_char;
    P_PlayJingleMusic(
        player,
        newmusic.as_mut_ptr(),
        musflags,
        looping,
        jingletype as uint16_t,
    );
}
#[no_mangle]
pub unsafe extern "C" fn P_PlayJingleMusic(
    mut player: *mut player_t,
    mut musname: *const libc::c_char,
    mut musflags: uint16_t,
    mut looping: boolean,
    mut status: uint16_t,
) {
    if gamestate as libc::c_uint == GS_LEVEL as libc::c_int as libc::c_uint
        && !player.is_null() && P_IsLocalPlayer(player) == 0
    {
        return;
    }
    S_RetainMusic(musname, musflags, looping, 0 as libc::c_int as uint32_t, status);
    S_StopMusic();
    S_ChangeMusicEx(
        musname,
        0 as libc::c_int as uint16_t,
        looping,
        0 as libc::c_int as uint32_t,
        0 as libc::c_int as uint32_t,
        0 as libc::c_int as uint32_t,
    );
}
#[no_mangle]
pub unsafe extern "C" fn P_EvaluateMusicStatus(
    mut status: uint16_t,
    mut musname: *const libc::c_char,
) -> boolean {
    let mut i: libc::c_int = 0;
    let mut result: boolean = false_0 as libc::c_int;
    i = 0 as libc::c_int;
    while i < 32 as libc::c_int {
        if !(P_IsLocalPlayer(&mut *players.as_mut_ptr().offset(i as isize)) == 0) {
            let mut current_block_15: u64;
            match status as libc::c_int {
                3 => {
                    result = (players[i as usize]
                        .powers[pw_extralife as libc::c_int as usize] as libc::c_int
                        > 1 as libc::c_int) as libc::c_int;
                    current_block_15 = 11298138898191919651;
                }
                4 => {
                    if players[i as usize].powers[pw_sneakers as libc::c_int as usize]
                        as libc::c_int > 1 as libc::c_int
                        && players[i as usize].powers[pw_super as libc::c_int as usize]
                            == 0
                    {
                        result = true_0 as libc::c_int;
                    } else {
                        result = false_0 as libc::c_int;
                    }
                    current_block_15 = 11298138898191919651;
                }
                5 | 6 => {
                    if players[i as usize]
                        .powers[pw_invulnerability as libc::c_int as usize]
                        as libc::c_int > 1 as libc::c_int
                    {
                        result = true_0 as libc::c_int;
                    } else {
                        result = false_0 as libc::c_int;
                    }
                    current_block_15 = 11298138898191919651;
                }
                7 => {
                    result = (players[i as usize]
                        .powers[pw_underwater as libc::c_int as usize] as libc::c_int
                        != 0
                        && players[i as usize]
                            .powers[pw_underwater as libc::c_int as usize] as libc::c_int
                            <= 11 as libc::c_int * 35 as libc::c_int + 1 as libc::c_int)
                        as libc::c_int;
                    current_block_15 = 11298138898191919651;
                }
                8 => {
                    result = (players[i as usize]
                        .powers[pw_super as libc::c_int as usize] as libc::c_int != 0
                        && (*mapheaderinfo[(gamemap as libc::c_int - 1 as libc::c_int)
                            as usize])
                            .levelflags as libc::c_int
                            & (1 as libc::c_int) << 2 as libc::c_int == 0)
                        as libc::c_int;
                    current_block_15 = 11298138898191919651;
                }
                9 => {
                    result = (players[i as usize].lives as libc::c_int
                        <= 0 as libc::c_int) as libc::c_int;
                    current_block_15 = 11298138898191919651;
                }
                10 | 11 => {
                    result = (players[i as usize].nightstime != 0
                        && players[i as usize].nightstime
                            <= (10 as libc::c_int * 35 as libc::c_int) as tic_t)
                        as libc::c_int;
                    current_block_15 = 11298138898191919651;
                }
                1 => {
                    result = LUA_HookShouldJingleContinue(
                        &mut *players.as_mut_ptr().offset(i as isize),
                        musname,
                    );
                    current_block_15 = 11298138898191919651;
                }
                2 => {
                    current_block_15 = 8253280133566583636;
                }
                0 | _ => {
                    current_block_15 = 8253280133566583636;
                }
            }
            match current_block_15 {
                8253280133566583636 => {
                    result = true_0 as libc::c_int;
                }
                _ => {}
            }
            if result != 0 {
                break;
            }
        }
        i += 1;
        i;
    }
    return result;
}
#[no_mangle]
pub unsafe extern "C" fn P_RestoreMusic(mut player: *mut player_t) {
    if P_IsLocalPlayer(player) == 0 {
        return;
    }
    S_SpeedMusic(1.0f32);
    if (*player).powers[pw_extralife as libc::c_int as usize] as libc::c_int
        > 1 as libc::c_int
    {
        return
    } else if (*player).powers[pw_super as libc::c_int as usize] as libc::c_int != 0
        && (*mapheaderinfo[(gamemap as libc::c_int - 1 as libc::c_int) as usize])
            .levelflags as libc::c_int & (1 as libc::c_int) << 2 as libc::c_int == 0
        && S_RecallMusic(JT_SUPER as libc::c_int as uint16_t, false_0 as libc::c_int)
            == 0
    {
        P_PlayJingle(player, JT_SUPER);
    } else if (*player).powers[pw_invulnerability as libc::c_int as usize] as libc::c_int
        > 1 as libc::c_int && (*player).powers[pw_super as libc::c_int as usize] == 0
    {
        strlcpy(
            ((*S_sfx.as_mut_ptr().offset(sfx_None as libc::c_int as isize)).caption)
                .as_mut_ptr(),
            b"Invincibility\0" as *const u8 as *const libc::c_char,
            14 as libc::c_int as libc::c_ulong,
        );
        S_StartCaption(
            sfx_None,
            -(1 as libc::c_int),
            (*player).powers[pw_invulnerability as libc::c_int as usize],
        );
        if S_RecallMusic(JT_INV as libc::c_int as uint16_t, false_0 as libc::c_int) == 0
            && S_RecallMusic(JT_MINV as libc::c_int as uint16_t, false_0 as libc::c_int)
                == 0
        {
            P_PlayJingle(
                player,
                (if maptol & TOL_MARIO as libc::c_int as uint32_t != 0 {
                    JT_MINV as libc::c_int
                } else {
                    JT_INV as libc::c_int
                }) as jingletype_t,
            );
        }
    } else if (*player).powers[pw_sneakers as libc::c_int as usize] as libc::c_int
        > 1 as libc::c_int && (*player).powers[pw_super as libc::c_int as usize] == 0
    {
        strlcpy(
            ((*S_sfx.as_mut_ptr().offset(sfx_None as libc::c_int as isize)).caption)
                .as_mut_ptr(),
            b"Speed shoes\0" as *const u8 as *const libc::c_char,
            12 as libc::c_int as libc::c_ulong,
        );
        S_StartCaption(
            sfx_None,
            -(1 as libc::c_int),
            (*player).powers[pw_sneakers as libc::c_int as usize],
        );
        if (*mapheaderinfo[(gamemap as libc::c_int - 1 as libc::c_int) as usize])
            .levelflags as libc::c_int & (1 as libc::c_int) << 1 as libc::c_int != 0
        {
            S_SpeedMusic(1.4f32);
            if S_RecallMusic(JT_MASTER as libc::c_int as uint16_t, true_0 as libc::c_int)
                == 0
            {
                S_ChangeMusicEx(
                    mapmusname.as_mut_ptr(),
                    mapmusflags,
                    true_0 as libc::c_int,
                    mapmusposition,
                    0 as libc::c_int as uint32_t,
                    0 as libc::c_int as uint32_t,
                );
            }
        } else if S_RecallMusic(
            JT_SHOES as libc::c_int as uint16_t,
            false_0 as libc::c_int,
        ) == 0
        {
            P_PlayJingle(player, JT_SHOES);
        }
    } else if S_RecallMusic(JT_NONE as libc::c_int as uint16_t, false_0 as libc::c_int)
        == 0
    {
        CONS_Debug(
            0x1 as libc::c_int,
            b"Cannot find any music in resume stack!\n\0" as *const u8
                as *const libc::c_char,
        );
        S_ChangeMusicEx(
            mapmusname.as_mut_ptr(),
            mapmusflags,
            true_0 as libc::c_int,
            mapmusposition,
            0 as libc::c_int as uint32_t,
            0 as libc::c_int as uint32_t,
        );
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_IsObjectInGoop(mut mo: *mut mobj_t) -> boolean {
    if !((*mo).player).is_null() && (*(*mo).player).spectator != 0 {
        return false_0 as libc::c_int;
    }
    if (*mo).flags & MF_NOGRAVITY as libc::c_int as uint32_t != 0 {
        return false_0 as libc::c_int;
    }
    return ((*mo).eflags as libc::c_int
        & (MFE_UNDERWATER as libc::c_int | MFE_GOOWATER as libc::c_int)
        == MFE_UNDERWATER as libc::c_int | MFE_GOOWATER as libc::c_int) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_IsObjectOnGround(mut mo: *mut mobj_t) -> boolean {
    if P_IsObjectInGoop(mo) != 0
        && !(!((*mo).player).is_null()
            && (*(*mo).player).pflags as libc::c_uint
                & PF_BOUNCING as libc::c_int as libc::c_uint != 0)
    {
        return false_0 as libc::c_int;
    }
    if (*mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        if (*mo).z + (*mo).height >= (*mo).ceilingz {
            return true_0 as libc::c_int;
        }
    } else if (*mo).z <= (*mo).floorz {
        return true_0 as libc::c_int
    }
    return false_0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_SetObjectMomZ(
    mut mo: *mut mobj_t,
    mut value: fixed_t,
    mut relative: boolean,
) {
    if (*mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        value = -value;
    }
    if (*mo).scale != (1 as libc::c_int) << 16 as libc::c_int {
        value = FixedMul(value, (*mo).scale);
    }
    if relative != 0 {
        (*mo).momz += value;
    } else {
        (*mo).momz = value;
    };
}
#[no_mangle]
pub unsafe extern "C" fn P_IsLocalPlayer(mut player: *mut player_t) -> boolean {
    return (splitscreen != 0
        && player
            == &mut *players.as_mut_ptr().offset(secondarydisplayplayer as isize)
                as *mut player_t
        || player
            == &mut *players.as_mut_ptr().offset(consoleplayer as isize)
                as *mut player_t) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_SpawnShieldOrb(mut player: *mut player_t) {
    let mut orbtype: mobjtype_t = MT_NULL;
    let mut th: *mut thinker_t = 0 as *mut thinker_t;
    let mut shieldobj: *mut mobj_t = 0 as *mut mobj_t;
    let mut ov: *mut mobj_t = 0 as *mut mobj_t;
    if LUA_HookPlayer(player, hook_ShieldSpawn as libc::c_int) != 0 {
        return;
    }
    if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
        & SH_FORCE as libc::c_int != 0
    {
        orbtype = MT_FORCE_ORB;
    } else {
        match (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
            & SH_NOSTACK as libc::c_int
        {
            2 => {
                orbtype = MT_WHIRLWIND_ORB;
            }
            4097 => {
                orbtype = MT_ATTRACT_ORB;
            }
            3073 => {
                orbtype = MT_ELEMENTAL_ORB;
            }
            3 => {
                orbtype = MT_ARMAGEDDON_ORB;
            }
            1 | 4 => {
                orbtype = MT_PITY_ORB;
            }
            1025 => {
                orbtype = MT_FLAMEAURA_ORB;
            }
            2049 => {
                orbtype = MT_BUBBLEWRAP_ORB;
            }
            4098 => {
                orbtype = MT_THUNDERCOIN_ORB;
            }
            _ => return,
        }
    }
    th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
    while th
        != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
            as *mut thinker_t
    {
        if !((*th).function.acp1
            == ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                actionf_p1,
            >(
                Some(
                    P_RemoveThinkerDelayed as unsafe extern "C" fn(*mut thinker_t) -> (),
                ),
            ))
        {
            shieldobj = th as *mut mobj_t;
            if (*shieldobj).type_0 as libc::c_uint == orbtype as libc::c_uint
                && (*shieldobj).target == (*player).mo
            {
                P_RemoveMobj(shieldobj);
            }
        }
        th = (*th).next;
    }
    shieldobj = P_SpawnMobj(
        (*(*player).mo).x,
        (*(*player).mo).y,
        (*(*player).mo).z,
        orbtype,
    );
    (*shieldobj).flags2 |= MF2_SHIELD as libc::c_int as uint32_t;
    P_SetTarget2(&mut (*shieldobj).target, (*player).mo);
    P_SetTarget2(&mut (*shieldobj).dontdrawforviewmobj, (*player).mo);
    if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
        & SH_NOSTACK as libc::c_int == SH_PINK as libc::c_int
    {
        (*shieldobj).color = SKINCOLOR_PINK as libc::c_int as uint16_t;
        (*shieldobj).colorized = true_0 as libc::c_int;
    } else {
        (*shieldobj).color = (*(*shieldobj).info).painchance as uint16_t;
    }
    (*shieldobj)
        .threshold = if (*player).powers[pw_shield as libc::c_int as usize]
        as libc::c_int & SH_FORCE as libc::c_int != 0
    {
        SH_FORCE as libc::c_int
    } else {
        (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
            & SH_NOSTACK as libc::c_int
    };
    if (*(*shieldobj).info).seestate as u64 != 0 {
        ov = P_SpawnMobj((*shieldobj).x, (*shieldobj).y, (*shieldobj).z, MT_OVERLAY);
        P_SetTarget2(&mut (*ov).target, shieldobj);
        P_SetTarget2(&mut (*ov).dontdrawforviewmobj, (*player).mo);
        P_SetMobjState(ov, (*(*shieldobj).info).seestate);
        P_SetTarget2(&mut (*shieldobj).tracer, ov);
    }
    if (*(*shieldobj).info).meleestate as u64 != 0 {
        ov = P_SpawnMobj((*shieldobj).x, (*shieldobj).y, (*shieldobj).z, MT_OVERLAY);
        P_SetTarget2(&mut (*ov).target, shieldobj);
        P_SetTarget2(&mut (*ov).dontdrawforviewmobj, (*player).mo);
        P_SetMobjState(ov, (*(*shieldobj).info).meleestate);
    }
    if (*(*shieldobj).info).missilestate as u64 != 0 {
        ov = P_SpawnMobj((*shieldobj).x, (*shieldobj).y, (*shieldobj).z, MT_OVERLAY);
        P_SetTarget2(&mut (*ov).target, shieldobj);
        P_SetTarget2(&mut (*ov).dontdrawforviewmobj, (*player).mo);
        P_SetMobjState(ov, (*(*shieldobj).info).missilestate);
    }
    if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
        & SH_FORCE as libc::c_int != 0
    {
        (*shieldobj)
            .movecount = (*player).powers[pw_shield as libc::c_int as usize]
            as libc::c_int & SH_FORCEHP as libc::c_int;
        if (*shieldobj).movecount < 1 as libc::c_int {
            if (*(*shieldobj).info).painstate as u64 != 0 {
                P_SetMobjState(shieldobj, (*(*shieldobj).info).painstate);
            } else {
                (*shieldobj).flags2 |= MF2_SHADOW as libc::c_int as uint32_t;
            }
        }
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_SwitchShield(
    mut player: *mut player_t,
    mut shieldtype: uint16_t,
) {
    let mut donthavealready: boolean = 0;
    if shieldtype as libc::c_int == SH_ARMAGEDDON as libc::c_int
        && (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
            & SH_NOSTACK as libc::c_int == SH_ARMAGEDDON as libc::c_int
    {
        P_BlackOw(player);
    }
    donthavealready = if shieldtype as libc::c_int & SH_FORCE as libc::c_int != 0 {
        ((*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
            & SH_FORCE as libc::c_int == 0
            || ((*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
                & SH_FORCEHP as libc::c_int)
                < shieldtype as libc::c_int & !(SH_FORCE as libc::c_int)) as libc::c_int
    } else {
        ((*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
            & SH_NOSTACK as libc::c_int != shieldtype as libc::c_int) as libc::c_int
    };
    if donthavealready != 0 {
        let mut stopshieldability: boolean = if shieldtype as libc::c_int
            & SH_FORCE as libc::c_int != 0
        {
            ((*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
                & SH_FORCE as libc::c_int == 0) as libc::c_int
        } else {
            true_0 as libc::c_int
        };
        if stopshieldability != 0
            && (*player).pflags as libc::c_uint
                & PF_SHIELDABILITY as libc::c_int as libc::c_uint != 0
        {
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    & !(PF_SPINNING as libc::c_int | PF_SHIELDABILITY as libc::c_int)
                        as libc::c_uint,
            );
            (*player).homing = 0 as libc::c_int as uint8_t;
        }
        (*player)
            .powers[pw_shield as libc::c_int
            as usize] = (shieldtype as libc::c_int
            | (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
                & SH_STACK as libc::c_int) as uint16_t;
        P_SpawnShieldOrb(player);
        if shieldtype as libc::c_int & SH_PROTECTWATER as libc::c_int != 0 {
            if (*player).powers[pw_underwater as libc::c_int as usize] as libc::c_int
                != 0
                && (*player).powers[pw_underwater as libc::c_int as usize] as libc::c_int
                    <= 12 as libc::c_int * 35 as libc::c_int + 1 as libc::c_int
            {
                (*player)
                    .powers[pw_underwater as libc::c_int
                    as usize] = 0 as libc::c_int as uint16_t;
                P_RestoreMusic(player);
            } else {
                (*player)
                    .powers[pw_underwater as libc::c_int
                    as usize] = 0 as libc::c_int as uint16_t;
            }
            if (*player).powers[pw_spacetime as libc::c_int as usize] as libc::c_int
                > 1 as libc::c_int
            {
                (*player)
                    .powers[pw_spacetime as libc::c_int
                    as usize] = 0 as libc::c_int as uint16_t;
                P_RestoreMusic(player);
            }
        }
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_SetPower(
    mut player: *mut player_t,
    mut power: powertype_t,
    mut value: uint16_t,
) {
    let mut spawnshield: boolean = false_0 as libc::c_int;
    if power as libc::c_uint == pw_shield as libc::c_int as libc::c_uint
        && (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
            != value as libc::c_int
    {
        spawnshield = true_0 as libc::c_int;
    }
    (*player).powers[power as usize] = value;
    if spawnshield != 0 {
        P_SpawnShieldOrb(player);
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_SpawnGhostMobj(mut mobj: *mut mobj_t) -> *mut mobj_t {
    let mut ghost: *mut mobj_t = P_SpawnMobj((*mobj).x, (*mobj).y, (*mobj).z, MT_GHOST);
    P_SetTarget2(&mut (*ghost).target, mobj);
    P_SetTarget2(&mut (*ghost).dontdrawforviewmobj, mobj);
    P_SetScale(ghost, (*mobj).scale);
    (*ghost).destscale = (*mobj).scale;
    if (*mobj).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        (*ghost)
            .eflags = ((*ghost).eflags as libc::c_int | MFE_VERTICALFLIP as libc::c_int)
            as uint16_t;
        (*ghost).z += (*mobj).height - (*ghost).height;
    }
    (*ghost).color = (*mobj).color;
    (*ghost).colorized = (*mobj).colorized;
    (*ghost)
        .angle = if !((*mobj).player).is_null() {
        (*(*mobj).player).drawangle
    } else {
        (*mobj).angle
    };
    (*ghost).roll = (*mobj).roll;
    (*ghost).pitch = (*mobj).pitch;
    (*ghost).spriteroll = (*mobj).spriteroll;
    (*ghost).sprite = (*mobj).sprite;
    (*ghost).sprite2 = (*mobj).sprite2;
    (*ghost).frame = (*mobj).frame;
    (*ghost).tics = -(1 as libc::c_int);
    (*ghost).frame &= !(0xf0000 as libc::c_int) as uint32_t;
    (*ghost).frame |= ((tr_trans50 as libc::c_int) << 16 as libc::c_int) as uint32_t;
    (*ghost).renderflags = (*mobj).renderflags;
    (*ghost).blendmode = (*mobj).blendmode;
    (*ghost).spritexscale = (*mobj).spritexscale;
    (*ghost).spriteyscale = (*mobj).spriteyscale;
    (*ghost).spritexoffset = (*mobj).spritexoffset;
    (*ghost).spriteyoffset = (*mobj).spriteyoffset;
    (*ghost).fuse = (*(*ghost).info).damage;
    (*ghost).skin = (*mobj).skin;
    (*ghost).standingslope = (*mobj).standingslope;
    if (*mobj).flags2 & MF2_OBJECTFLIP as libc::c_int as uint32_t != 0 {
        (*ghost).flags2 |= MF2_OBJECTFLIP as libc::c_int as uint32_t;
    }
    if !((*mobj).player).is_null() && !((*(*mobj).player).followmobj).is_null() {
        let mut ghost2: *mut mobj_t = P_SpawnGhostMobj((*(*mobj).player).followmobj);
        P_SetTarget2(&mut (*ghost2).tracer, ghost);
        P_SetTarget2(&mut (*ghost).tracer, ghost2);
        P_SetTarget2(&mut (*ghost2).dontdrawforviewmobj, mobj);
        (*ghost2).flags2
            |= (*(*(*mobj).player).followmobj).flags2
                & MF2_LINKDRAW as libc::c_int as uint32_t;
    }
    (*ghost).old_x = (*mobj).old_x2;
    (*ghost).old_y = (*mobj).old_y2;
    (*ghost).old_z = (*mobj).old_z2;
    (*ghost)
        .old_angle = if !((*mobj).player).is_null() {
        (*(*mobj).player).old_drawangle2
    } else {
        (*mobj).old_angle2
    };
    (*ghost).old_pitch = (*mobj).old_pitch2;
    (*ghost).old_roll = (*mobj).old_roll2;
    (*ghost).old_spriteroll = (*mobj).old_spriteroll2;
    return ghost;
}
#[no_mangle]
pub unsafe extern "C" fn P_SpawnThokMobj(mut player: *mut player_t) {
    let mut mobj: *mut mobj_t = 0 as *mut mobj_t;
    let mut type_0: mobjtype_t = (*player).thokitem;
    let mut zheight: fixed_t = 0;
    if (*player).skincolor as libc::c_int == 0 as libc::c_int {
        return;
    }
    if (*player).spectator != 0 {
        return;
    }
    if type_0 as u64 == 0 {
        return;
    }
    if type_0 as libc::c_uint == MT_GHOST as libc::c_int as libc::c_uint {
        mobj = P_SpawnGhostMobj((*player).mo);
    } else {
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            zheight = (*(*player).mo).z + (*(*player).mo).height
                + FixedDiv(
                    FixedMul((*player).height, (*(*player).mo).scale)
                        - (*(*player).mo).height,
                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                ) - FixedMul(mobjinfo[type_0 as usize].height, (*(*player).mo).scale);
        } else {
            zheight = (*(*player).mo).z
                - FixedDiv(
                    FixedMul((*player).height, (*(*player).mo).scale)
                        - (*(*player).mo).height,
                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                );
        }
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int == 0
            && zheight < (*(*player).mo).floorz
            && mobjinfo[type_0 as usize].flags
                & MF_NOCLIPHEIGHT as libc::c_int as uint32_t == 0
        {
            zheight = (*(*player).mo).floorz;
        } else if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
            != 0
            && zheight
                + FixedMul(mobjinfo[type_0 as usize].height, (*(*player).mo).scale)
                > (*(*player).mo).ceilingz
            && mobjinfo[type_0 as usize].flags
                & MF_NOCLIPHEIGHT as libc::c_int as uint32_t == 0
        {
            zheight = (*(*player).mo).ceilingz
                - FixedMul(mobjinfo[type_0 as usize].height, (*(*player).mo).scale);
        }
        mobj = P_SpawnMobj((*(*player).mo).x, (*(*player).mo).y, zheight, type_0);
        (*mobj).angle = (*player).drawangle;
        (*mobj).color = (*(*player).mo).color;
        (*mobj).skin = (*(*player).mo).skin;
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            (*mobj).flags2 |= MF2_OBJECTFLIP as libc::c_int as uint32_t;
        }
        (*mobj)
            .eflags = ((*mobj).eflags as libc::c_int
            | (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int)
            as uint16_t;
        (*mobj).destscale = (*(*player).mo).scale;
        P_SetScale(mobj, (*mobj).destscale);
        if type_0 as libc::c_uint == MT_THOK as libc::c_int as libc::c_uint {
            (*mobj)
                .frame = ((tr_trans70 as libc::c_int) << 16 as libc::c_int) as uint32_t;
            (*mobj).fuse = (*mobj).tics;
        }
    }
    P_SetTarget2(&mut (*mobj).target, (*player).mo);
    G_GhostAddThok();
}
#[no_mangle]
pub unsafe extern "C" fn P_SpawnSpinMobj(
    mut player: *mut player_t,
    mut type_0: mobjtype_t,
) {
    let mut mobj: *mut mobj_t = 0 as *mut mobj_t;
    let mut zheight: fixed_t = 0;
    if (*player).skincolor as libc::c_int == 0 as libc::c_int {
        return;
    }
    if (*player).spectator != 0 {
        return;
    }
    if type_0 as u64 == 0 {
        return;
    }
    if type_0 as libc::c_uint == MT_GHOST as libc::c_int as libc::c_uint {
        mobj = P_SpawnGhostMobj((*player).mo);
    } else {
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            zheight = (*(*player).mo).z + (*(*player).mo).height
                + FixedDiv(
                    FixedMul((*player).height, (*(*player).mo).scale)
                        - (*(*player).mo).height,
                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                ) - FixedMul(mobjinfo[type_0 as usize].height, (*(*player).mo).scale);
        } else {
            zheight = (*(*player).mo).z
                - FixedDiv(
                    FixedMul((*player).height, (*(*player).mo).scale)
                        - (*(*player).mo).height,
                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                );
        }
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int == 0
            && zheight < (*(*player).mo).floorz
            && mobjinfo[type_0 as usize].flags
                & MF_NOCLIPHEIGHT as libc::c_int as uint32_t == 0
        {
            zheight = (*(*player).mo).floorz;
        } else if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
            != 0
            && zheight
                + FixedMul(mobjinfo[type_0 as usize].height, (*(*player).mo).scale)
                > (*(*player).mo).ceilingz
            && mobjinfo[type_0 as usize].flags
                & MF_NOCLIPHEIGHT as libc::c_int as uint32_t == 0
        {
            zheight = (*(*player).mo).ceilingz
                - FixedMul(mobjinfo[type_0 as usize].height, (*(*player).mo).scale);
        }
        mobj = P_SpawnMobj((*(*player).mo).x, (*(*player).mo).y, zheight, type_0);
        (*mobj).angle = (*player).drawangle;
        (*mobj).color = (*(*player).mo).color;
        (*mobj).skin = (*(*player).mo).skin;
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            (*mobj).flags2 |= MF2_OBJECTFLIP as libc::c_int as uint32_t;
        }
        (*mobj)
            .eflags = ((*mobj).eflags as libc::c_int
            | (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int)
            as uint16_t;
        P_SetScale(mobj, (*(*player).mo).scale);
        (*mobj).destscale = (*(*player).mo).scale;
        if type_0 as libc::c_uint == MT_THOK as libc::c_int as libc::c_uint {
            (*mobj)
                .frame = ((tr_trans70 as libc::c_int) << 16 as libc::c_int) as uint32_t;
            (*mobj).fuse = (*mobj).tics;
        }
    }
    P_SetTarget2(&mut (*mobj).target, (*player).mo);
}
#[no_mangle]
pub unsafe extern "C" fn P_DoPlayerFinish(mut player: *mut player_t) {
    if (*player).pflags as libc::c_uint & PF_FINISHED as libc::c_int as libc::c_uint != 0
    {
        return;
    }
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >((*player).pflags as libc::c_uint | PF_FINISHED as libc::c_int as libc::c_uint);
    P_GiveFinishFlags(player);
    if netgame != 0 {
        CONS_Printf(
            b"%s has completed the level.\n\0" as *const u8 as *const libc::c_char,
            (player_names[player.offset_from(players.as_mut_ptr()) as libc::c_long
                as usize])
                .as_mut_ptr(),
        );
    }
    (*player)
        .powers[pw_underwater as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
    (*player)
        .powers[pw_spacetime as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
    P_RestoreMusic(player);
}
#[no_mangle]
pub unsafe extern "C" fn P_DoPlayerExit(mut player: *mut player_t) {
    if (*player).exiting != 0 {
        return;
    }
    if cv_allowexitlevel.value == 0 as libc::c_int && G_PlatformGametype() == 0 {
        return
    } else if gametyperules & GTR_RACE as libc::c_int as uint32_t != 0 {
        if countdown == 0 {
            countdown = ((cv_countdowntime.value - 1 as libc::c_int) * 35 as libc::c_int
                + 1 as libc::c_int) as uint32_t;
        }
        (*player).exiting = (3 as libc::c_int * 35 as libc::c_int) as tic_t;
        if countdown2 == 0 {
            countdown2 = ((8 as libc::c_int + cv_countdowntime.value) * 35 as libc::c_int
                + 1 as libc::c_int) as uint32_t;
        }
        if P_CheckRacers() != 0 {
            (*player)
                .exiting = (14 as libc::c_int * 35 as libc::c_int / 5 as libc::c_int
                + 1 as libc::c_int) as tic_t;
        }
    } else {
        (*player)
            .exiting = (14 as libc::c_int * 35 as libc::c_int / 5 as libc::c_int
            + 2 as libc::c_int) as tic_t;
    }
    if (*player).climbing != 0 {
        (*player).climbing = 0 as libc::c_int as uint8_t;
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >((*player).pflags as libc::c_uint | P_GetJumpFlags(player) as libc::c_uint);
        P_SetPlayerMobjState((*player).mo, S_PLAY_JUMP);
    } else if (*player).pflags as libc::c_uint
        & PF_STARTDASH as libc::c_int as libc::c_uint != 0
    {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_STARTDASH as libc::c_int) as libc::c_uint,
        );
        P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
    }
    (*player)
        .powers[pw_underwater as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
    (*player)
        .powers[pw_spacetime as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
    P_RestoreMusic(player);
}
#[no_mangle]
pub unsafe extern "C" fn P_InSpaceSector(mut mo: *mut mobj_t) -> boolean {
    let mut sector: *mut sector_t = (*(*mo).subsector).sector;
    let mut topheight: fixed_t = 0;
    let mut bottomheight: fixed_t = 0;
    if (*sector).specialflags as libc::c_uint
        & SSF_OUTERSPACE as libc::c_int as libc::c_uint != 0
    {
        return true_0 as libc::c_int;
    }
    if !((*sector).ffloors).is_null() {
        let mut rover: *mut ffloor_t = 0 as *mut ffloor_t;
        rover = (*sector).ffloors;
        while !rover.is_null() {
            if !((*rover).fofflags as libc::c_uint
                & FOF_EXISTS as libc::c_int as libc::c_uint == 0)
            {
                if !((*(*(*rover).master).frontsector).specialflags as libc::c_uint
                    & SSF_OUTERSPACE as libc::c_int as libc::c_uint == 0)
                {
                    topheight = P_GetFFloorTopZAt(rover, (*mo).x, (*mo).y);
                    bottomheight = P_GetFFloorBottomZAt(rover, (*mo).x, (*mo).y);
                    if !((*mo).z + (*mo).height / 2 as libc::c_int > topheight) {
                        if !(((*mo).z + (*mo).height / 2 as libc::c_int) < bottomheight)
                        {
                            return true_0 as libc::c_int;
                        }
                    }
                }
            }
            rover = (*rover).next;
        }
    }
    return false_0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_PlayerHitFloor(
    mut player: *mut player_t,
    mut dorollstuff: boolean,
) -> boolean {
    let mut clipmomz: boolean = 0;
    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_NIGHTSMODE as libc::c_int
    {
        return true_0 as libc::c_int;
    }
    clipmomz = (P_CheckDeathPitCollide((*player).mo) == 0) as libc::c_int;
    if clipmomz != 0 && (*(*player).mo).health != 0 && (*player).spectator == 0 {
        if dorollstuff != 0 {
            if (*player).charability2 as libc::c_int == CA2_SPINDASH as libc::c_int
                && !((*player).pflags as libc::c_uint
                    & (PF_SPINNING as libc::c_int | PF_THOKKED as libc::c_int)
                        as libc::c_uint == PF_THOKKED as libc::c_int as libc::c_uint)
                && !((*player).charability as libc::c_int == CA_THOK as libc::c_int
                    && (*player).secondjump as libc::c_int != 0)
                && (*player).cmd.buttons as libc::c_int & BT_SPIN as libc::c_int != 0
                && FixedHypot((*(*player).mo).momx, (*(*player).mo).momy)
                    > 5 as libc::c_int * (*(*player).mo).scale
            {
                (*player)
                    .pflags = (((*player).pflags as libc::c_uint
                    | PF_SPINNING as libc::c_int as libc::c_uint)
                    & !(PF_THOKKED as libc::c_int) as libc::c_uint) as pflags_t;
            } else if (*player).pflags as libc::c_uint
                & PF_STARTDASH as libc::c_int as libc::c_uint == 0
            {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        & !(PF_SPINNING as libc::c_int) as libc::c_uint,
                );
            }
        }
        if (*player).pflags as libc::c_uint & PF_BOUNCING as libc::c_int as libc::c_uint
            != 0
        {
            if dorollstuff != 0
                && ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                    as libc::c_long
                    != S_PLAY_BOUNCE_LANDING as libc::c_int as libc::c_long
            {
                P_MobjCheckWater((*player).mo);
                (*(*player).mo).momz *= -(1 as libc::c_int);
                P_DoAbilityBounce(player, true_0 as libc::c_int);
                if (*player).scoreadd != 0 {
                    (*player).scoreadd = ((*player).scoreadd).wrapping_sub(1);
                    (*player).scoreadd;
                }
            } else {
                (*(*player).mo).z += P_MobjFlip((*player).mo) as libc::c_int;
            }
            clipmomz = false_0 as libc::c_int;
        } else {
            P_MobjCheckWater((*player).mo);
            if (*player).pflags as libc::c_uint
                & PF_SPINNING as libc::c_int as libc::c_uint != 0
            {
                if (*player).pflags as libc::c_uint
                    & PF_STARTDASH as libc::c_int as libc::c_uint == 0
                    && (*player).panim as libc::c_uint
                        != PA_ROLL as libc::c_int as libc::c_uint
                    && (*player).panim as libc::c_uint
                        != PA_ETC as libc::c_int as libc::c_uint
                    && (*player).panim as libc::c_uint
                        != PA_ABILITY as libc::c_int as libc::c_uint
                    && (*player).panim as libc::c_uint
                        != PA_ABILITY2 as libc::c_int as libc::c_uint
                {
                    P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                    S_StartSound((*player).mo as *const libc::c_void, sfx_spin);
                }
            } else if (*player).pflags as libc::c_uint
                & PF_GLIDING as libc::c_int as libc::c_uint != 0
            {
                if dorollstuff != 0 {
                    (*player).skidtime = 35 as libc::c_int as tic_t;
                    P_SetPlayerMobjState((*player).mo, S_PLAY_GLIDE);
                    P_SpawnSkidDust(
                        player,
                        (*(*player).mo).radius,
                        true_0 as libc::c_int,
                    );
                    (*(*player).mo).tics = -(1 as libc::c_int);
                } else if (*player).skidtime == 0 {
                    (*player)
                        .pflags = ::core::mem::transmute::<
                        libc::c_uint,
                        pflags_t,
                    >(
                        (*player).pflags as libc::c_uint
                            & !(PF_GLIDING as libc::c_int) as libc::c_uint,
                    );
                }
            } else if (*player).charability as libc::c_int
                == CA_GLIDEANDCLIMB as libc::c_int
                && (*player).pflags as libc::c_uint
                    & PF_THOKKED as libc::c_int as libc::c_uint != 0
                && (*player).pflags as libc::c_uint
                    & (PF_JUMPED as libc::c_int | PF_SHIELDABILITY as libc::c_int)
                        as libc::c_uint == 0
                && (*(*player).mo).floorz != (*(*player).mo).watertop
                && ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                    as libc::c_long == S_PLAY_FALL as libc::c_int as libc::c_long
            {
                if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                    as libc::c_long
                    != S_PLAY_GLIDE_LANDING as libc::c_int as libc::c_long
                {
                    P_ResetPlayer(player);
                    P_SetPlayerMobjState((*player).mo, S_PLAY_GLIDE_LANDING);
                    (*player)
                        .pflags = ::core::mem::transmute::<
                        libc::c_uint,
                        pflags_t,
                    >(
                        (*player).pflags as libc::c_uint
                            | PF_STASIS as libc::c_int as libc::c_uint,
                    );
                    if (*player).speed
                        > FixedMul((*player).runspeed, (*(*player).mo).scale)
                    {
                        (*player)
                            .skidtime = ((*player).skidtime)
                            .wrapping_add((*(*player).mo).tics as tic_t);
                    }
                    (*(*player).mo)
                        .momx = ((*(*player).mo).momx - (*player).cmomx)
                        / 2 as libc::c_int + (*player).cmomx;
                    (*(*player).mo)
                        .momy = ((*(*player).mo).momy - (*player).cmomy)
                        / 2 as libc::c_int + (*player).cmomy;
                    if (*player).powers[pw_super as libc::c_int as usize] != 0 {
                        P_Earthquake(
                            (*player).mo,
                            (*player).mo,
                            256 as libc::c_int
                                * ((1 as libc::c_int) << 16 as libc::c_int),
                        );
                        S_StartSound((*player).mo as *const libc::c_void, sfx_s3k49);
                    } else {
                        S_StartSound((*player).mo as *const libc::c_void, sfx_s3k4c);
                    }
                }
            } else if (*player).charability2 as libc::c_int == CA2_MELEE as libc::c_int
                && ((*player).panim as libc::c_uint
                    == PA_ABILITY2 as libc::c_int as libc::c_uint
                    || (*player).charability as libc::c_int == CA_TWINSPIN as libc::c_int
                        && (*player).panim as libc::c_uint
                            == PA_ABILITY as libc::c_int as libc::c_uint
                        && (*player).cmd.buttons as libc::c_int
                            & (BT_JUMP as libc::c_int | BT_SPIN as libc::c_int) != 0)
            {
                if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                    as libc::c_long
                    != S_PLAY_MELEE_LANDING as libc::c_int as libc::c_long
                {
                    let mut type_0: mobjtype_t = (*player).revitem;
                    P_SetPlayerMobjState((*player).mo, S_PLAY_MELEE_LANDING);
                    (*(*player).mo)
                        .tics = if (*(*player).mo).movefactor
                        == (1 as libc::c_int) << 16 as libc::c_int
                    {
                        35 as libc::c_int / 2 as libc::c_int
                    } else {
                        FixedDiv(
                            (35 as libc::c_int) << 16 as libc::c_int - 1 as libc::c_int,
                            FixedSqrt((*(*player).mo).movefactor),
                        ) >> 16 as libc::c_int
                    };
                    S_StartSound((*player).mo as *const libc::c_void, sfx_s3k8b);
                    (*player)
                        .pflags = ::core::mem::transmute::<
                        libc::c_uint,
                        pflags_t,
                    >(
                        (*player).pflags as libc::c_uint
                            | PF_FULLSTASIS as libc::c_int as libc::c_uint,
                    );
                    (*player)
                        .powers[pw_strong as libc::c_int
                        as usize] = STR_MELEE as libc::c_int as uint16_t;
                    if type_0 as u64 != 0 {
                        let mut i: uint8_t = 0 as libc::c_int as uint8_t;
                        let mut throwang: angle_t = -(2 as libc::c_int
                            * 0x15555555 as libc::c_int) as angle_t;
                        let mut xo: fixed_t = P_ReturnThrustX(
                            (*player).mo,
                            (*player).drawangle,
                            16 as libc::c_int * (*(*player).mo).scale,
                        );
                        let mut yo: fixed_t = P_ReturnThrustY(
                            (*player).mo,
                            (*player).drawangle,
                            16 as libc::c_int * (*(*player).mo).scale,
                        );
                        let mut zo: fixed_t = 6 as libc::c_int * (*(*player).mo).scale;
                        let mut mu: fixed_t = FixedMul(
                            (*player).maxdash,
                            (*(*player).mo).scale,
                        );
                        let mut mu2: fixed_t = FixedHypot(
                            (*(*player).mo).momx,
                            (*(*player).mo).momy,
                        );
                        let mut ev: fixed_t = 0;
                        let mut missile: *mut mobj_t = 0 as *mut mobj_t;
                        if mu2 < mu {
                            mu2 = mu;
                        }
                        ev = (50 as libc::c_int
                            * ((1 as libc::c_int) << 16 as libc::c_int)
                            - mu / 25 as libc::c_int) / 50 as libc::c_int;
                        while (i as libc::c_int) < 5 as libc::c_int {
                            missile = P_SpawnMobjFromMobj(
                                (*player).mo,
                                xo,
                                yo,
                                zo,
                                type_0,
                            );
                            P_SetTarget2(&mut (*missile).target, (*player).mo);
                            (*missile)
                                .angle = throwang.wrapping_add((*player).drawangle);
                            P_Thrust(
                                missile,
                                ((*player).drawangle)
                                    .wrapping_add(0x40000000 as libc::c_int as angle_t),
                                P_ReturnThrustY(missile, throwang, mu),
                            );
                            P_Thrust(missile, (*player).drawangle, mu2);
                            P_SetObjectMomZ(
                                missile,
                                (4 as libc::c_int
                                    + ((i as libc::c_int & 1 as libc::c_int)
                                        << 1 as libc::c_int))
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                true_0 as libc::c_int,
                            );
                            (*missile).momz += (*(*player).mo).pmomz;
                            (*missile).fuse = 35 as libc::c_int / 2 as libc::c_int;
                            (*missile).extravalue2 = ev;
                            i = i.wrapping_add(1);
                            i;
                            throwang = throwang
                                .wrapping_add(0x15555555 as libc::c_int as angle_t);
                        }
                        if mobjinfo[type_0 as usize].seesound as libc::c_uint != 0
                            && !missile.is_null()
                        {
                            S_StartSound(
                                missile as *const libc::c_void,
                                (*(*missile).info).seesound,
                            );
                        }
                    }
                }
            } else if !((*player).charability as libc::c_int
                == CA_GLIDEANDCLIMB as libc::c_int
                && ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                    as libc::c_long
                    == S_PLAY_GLIDE_LANDING as libc::c_int as libc::c_long)
            {
                if !((*player).charability2 as libc::c_int
                    == CA2_GUNSLINGER as libc::c_int
                    && (*player).panim as libc::c_uint
                        == PA_ABILITY2 as libc::c_int as libc::c_uint)
                {
                    if dorollstuff != 0
                        && (*player).panim as libc::c_uint
                            != PA_IDLE as libc::c_int as libc::c_uint
                        && (*player).panim as libc::c_uint
                            != PA_WALK as libc::c_int as libc::c_uint
                        && (*player).panim as libc::c_uint
                            != PA_RUN as libc::c_int as libc::c_uint
                        && (*player).panim as libc::c_uint
                            != PA_DASH as libc::c_int as libc::c_uint
                    {
                        let mut runspd: fixed_t = FixedMul(
                            (*player).runspeed,
                            (*(*player).mo).scale,
                        );
                        if (*player).powers[pw_super as libc::c_int as usize] != 0 {
                            runspd = FixedMul(
                                runspd,
                                5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                                    / 3 as libc::c_int,
                            );
                        }
                        runspd = FixedMul(runspd, (*(*player).mo).movefactor);
                        if maptol & TOL_2D as libc::c_int as uint32_t != 0 {
                            runspd = FixedMul(
                                runspd,
                                2 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                                    / 3 as libc::c_int,
                            );
                        }
                        if (*player).cmomx != 0 || (*player).cmomy != 0 {
                            if (*player).charflags
                                & SF_DASHMODE as libc::c_int as uint32_t != 0
                                && (*player).dashmode
                                    >= (3 as libc::c_int * 35 as libc::c_int) as tic_t
                                && (*player).panim as libc::c_uint
                                    != PA_DASH as libc::c_int as libc::c_uint
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_DASH);
                            } else if (*player).speed >= runspd
                                && ((*player).panim as libc::c_uint
                                    != PA_RUN as libc::c_int as libc::c_uint
                                    || ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                        as libc::c_long
                                        == S_PLAY_FLOAT_RUN as libc::c_int as libc::c_long)
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_RUN);
                            } else if ((*player).rmomx != 0 || (*player).rmomy != 0)
                                && ((*player).panim as libc::c_uint
                                    != PA_WALK as libc::c_int as libc::c_uint
                                    || ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                        as libc::c_long
                                        == S_PLAY_FLOAT as libc::c_int as libc::c_long)
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
                            } else if (*player).rmomx == 0 && (*player).rmomy == 0
                                && (*player).panim as libc::c_uint
                                    != PA_IDLE as libc::c_int as libc::c_uint
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
                            }
                        } else if (*player).charflags
                            & SF_DASHMODE as libc::c_int as uint32_t != 0
                            && (*player).dashmode
                                >= (3 as libc::c_int * 35 as libc::c_int) as tic_t
                            && (*player).panim as libc::c_uint
                                != PA_DASH as libc::c_int as libc::c_uint
                        {
                            P_SetPlayerMobjState((*player).mo, S_PLAY_DASH);
                        } else if (*player).speed >= runspd
                            && ((*player).panim as libc::c_uint
                                != PA_RUN as libc::c_int as libc::c_uint
                                || ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                    as libc::c_long
                                    == S_PLAY_FLOAT_RUN as libc::c_int as libc::c_long)
                        {
                            P_SetPlayerMobjState((*player).mo, S_PLAY_RUN);
                        } else if ((*(*player).mo).momx != 0
                            || (*(*player).mo).momy != 0)
                            && ((*player).panim as libc::c_uint
                                != PA_WALK as libc::c_int as libc::c_uint
                                || ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                    as libc::c_long
                                    == S_PLAY_FLOAT as libc::c_int as libc::c_long)
                        {
                            P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
                        } else if (*(*player).mo).momx == 0 && (*(*player).mo).momy == 0
                            && (*player).panim as libc::c_uint
                                != PA_IDLE as libc::c_int as libc::c_uint
                        {
                            P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
                        }
                    }
                }
            }
            if (*player).pflags as libc::c_uint
                & PF_GLIDING as libc::c_int as libc::c_uint == 0
            {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        & !(PF_JUMPED as libc::c_int | PF_NOJUMPDAMAGE as libc::c_int)
                            as libc::c_uint,
                );
            }
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    & !(PF_STARTJUMP as libc::c_int | PF_THOKKED as libc::c_int
                        | PF_CANCARRY as libc::c_int) as libc::c_uint,
            );
            (*player).secondjump = 0 as libc::c_int as uint8_t;
            (*player).glidetime = 0 as libc::c_int as tic_t;
            (*player).climbing = 0 as libc::c_int as uint8_t;
            (*player)
                .powers[pw_tailsfly as libc::c_int
                as usize] = 0 as libc::c_int as uint16_t;
            if (*player).pflags as libc::c_uint
                & PF_SHIELDABILITY as libc::c_int as libc::c_uint != 0
            {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        & !(PF_SHIELDABILITY as libc::c_int) as libc::c_uint,
                );
                if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
                    & SH_NOSTACK as libc::c_int == SH_ELEMENTAL as libc::c_int
                {
                    if (*(*player).mo).eflags as libc::c_int
                        & (MFE_UNDERWATER as libc::c_int | MFE_TOUCHWATER as libc::c_int)
                        != 0
                    {
                        S_StartSound((*player).mo as *const libc::c_void, sfx_s3k4c);
                    } else {
                        S_StartSound((*player).mo as *const libc::c_void, sfx_s3k47);
                        P_ElementalFire(player, true_0 as libc::c_int);
                    }
                    P_SetObjectMomZ(
                        (*player).mo,
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_UNDERWATER as libc::c_int != 0
                        {
                            6 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                                / 5 as libc::c_int
                        } else {
                            5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                                / 2 as libc::c_int
                        },
                        false_0 as libc::c_int,
                    );
                    P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
                    (*(*player).mo).momy = 0 as libc::c_int;
                    (*(*player).mo).momx = (*(*player).mo).momy;
                    clipmomz = false_0 as libc::c_int;
                } else if (*player).powers[pw_shield as libc::c_int as usize]
                    as libc::c_int & SH_NOSTACK as libc::c_int
                    == SH_BUBBLEWRAP as libc::c_int
                {
                    P_DoBubbleBounce(player);
                    clipmomz = false_0 as libc::c_int;
                }
            }
        }
    }
    return clipmomz;
}
#[no_mangle]
pub unsafe extern "C" fn P_InQuicksand(mut mo: *mut mobj_t) -> boolean {
    let mut sector: *mut sector_t = (*(*mo).subsector).sector;
    let mut topheight: fixed_t = 0;
    let mut bottomheight: fixed_t = 0;
    let mut flipoffset: fixed_t = if (*mo).eflags as libc::c_int
        & MFE_VERTICALFLIP as libc::c_int != 0
    {
        (*mo).height / 2 as libc::c_int
    } else {
        0 as libc::c_int
    };
    if !((*sector).ffloors).is_null() {
        let mut rover: *mut ffloor_t = 0 as *mut ffloor_t;
        rover = (*sector).ffloors;
        while !rover.is_null() {
            if !((*rover).fofflags as libc::c_uint
                & FOF_EXISTS as libc::c_int as libc::c_uint == 0)
            {
                if !((*rover).fofflags as libc::c_uint
                    & FOF_QUICKSAND as libc::c_int as libc::c_uint == 0)
                {
                    topheight = P_GetFFloorTopZAt(rover, (*mo).x, (*mo).y);
                    bottomheight = P_GetFFloorBottomZAt(rover, (*mo).x, (*mo).y);
                    if !((*mo).z + flipoffset > topheight) {
                        if !((*mo).z + (*mo).height / 2 as libc::c_int + flipoffset
                            < bottomheight)
                        {
                            return true_0 as libc::c_int;
                        }
                    }
                }
            }
            rover = (*rover).next;
        }
    }
    return false_0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_InJumpFlipSector(mut mo: *mut mobj_t) -> boolean {
    let mut sector: *mut sector_t = (*(*mo).subsector).sector;
    let mut topheight: fixed_t = 0;
    let mut bottomheight: fixed_t = 0;
    if (*sector).specialflags as libc::c_uint
        & SSF_JUMPFLIP as libc::c_int as libc::c_uint != 0
    {
        return true_0 as libc::c_int;
    }
    if !((*sector).ffloors).is_null() {
        let mut rover: *mut ffloor_t = 0 as *mut ffloor_t;
        rover = (*sector).ffloors;
        while !rover.is_null() {
            if !((*rover).fofflags as libc::c_uint
                & FOF_EXISTS as libc::c_int as libc::c_uint == 0)
            {
                if !((*(*(*rover).master).frontsector).specialflags as libc::c_uint
                    & SSF_JUMPFLIP as libc::c_int as libc::c_uint == 0)
                {
                    topheight = P_GetFFloorTopZAt(rover, (*mo).x, (*mo).y);
                    bottomheight = P_GetFFloorBottomZAt(rover, (*mo).x, (*mo).y);
                    if !((*mo).z + (*mo).height / 2 as libc::c_int > topheight) {
                        if !(((*mo).z + (*mo).height / 2 as libc::c_int) < bottomheight)
                        {
                            return true_0 as libc::c_int;
                        }
                    }
                }
            }
            rover = (*rover).next;
        }
    }
    return false_0 as libc::c_int;
}
unsafe extern "C" fn P_PlayerCanBust(
    mut player: *mut player_t,
    mut rover: *mut ffloor_t,
) -> boolean {
    if (*rover).fofflags as libc::c_uint & FOF_EXISTS as libc::c_int as libc::c_uint == 0
    {
        return false_0 as libc::c_int;
    }
    if (*rover).fofflags as libc::c_uint & FOF_BUSTUP as libc::c_int as libc::c_uint == 0
    {
        return false_0 as libc::c_int;
    }
    let mut current_block_20: u64;
    match (*rover).busttype as libc::c_int {
        0 => return true_0 as libc::c_int,
        1 => {
            if (*player).pflags as libc::c_uint
                & PF_SPINNING as libc::c_int as libc::c_uint != 0
                && (*player).pflags as libc::c_uint
                    & PF_STARTDASH as libc::c_int as libc::c_uint == 0
            {
                return true_0 as libc::c_int;
            }
            if (*player).pflags as libc::c_uint
                & PF_JUMPED as libc::c_int as libc::c_uint != 0
                && (*player).pflags as libc::c_uint
                    & PF_NOJUMPDAMAGE as libc::c_int as libc::c_uint == 0
            {
                return true_0 as libc::c_int;
            }
            current_block_20 = 17879642038375977633;
        }
        2 => {
            current_block_20 = 17879642038375977633;
        }
        3 => {
            current_block_20 = 14289561005166539255;
        }
        _ => {
            current_block_20 = 15976848397966268834;
        }
    }
    match current_block_20 {
        17879642038375977633 => {
            if (*player).pflags as libc::c_uint
                & PF_SPINNING as libc::c_int as libc::c_uint != 0
                && (*player).pflags as libc::c_uint
                    & PF_JUMPED as libc::c_int as libc::c_uint == 0
            {
                return true_0 as libc::c_int;
            }
            if (*player).charflags & SF_CANBUSTWALLS as libc::c_int as uint32_t != 0
                || (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
                    & (STR_WALL as libc::c_int | STR_FLOOR as libc::c_int
                        | STR_CEILING as libc::c_int | STR_DASH as libc::c_int) != 0
            {
                return true_0 as libc::c_int;
            }
            if (*player).powers[pw_super as libc::c_int as usize] != 0 {
                return true_0 as libc::c_int;
            }
            if (*player).pflags as libc::c_uint
                & PF_DRILLING as libc::c_int as libc::c_uint != 0
            {
                return true_0 as libc::c_int;
            }
            if metalrecording != 0 {
                return true_0 as libc::c_int;
            }
            current_block_20 = 14289561005166539255;
        }
        _ => {}
    }
    match current_block_20 {
        14289561005166539255 => {
            if (*player).charflags & SF_CANBUSTWALLS as libc::c_int as uint32_t != 0
                || (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
                    & (STR_WALL as libc::c_int | STR_FLOOR as libc::c_int
                        | STR_CEILING as libc::c_int) != 0
            {
                return true_0 as libc::c_int;
            }
        }
        _ => {}
    }
    return false_0 as libc::c_int;
}
unsafe extern "C" fn P_CheckBustableBlocks(mut player: *mut player_t) {
    let mut current_block: u64;
    let mut node: *mut msecnode_t = 0 as *mut msecnode_t;
    let mut oldx: fixed_t = 0;
    let mut oldy: fixed_t = 0;
    if (netgame != 0 || multiplayer != 0) && (*player).spectator != 0 {
        return;
    }
    oldx = (*(*player).mo).x;
    oldy = (*(*player).mo).y;
    if !((*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
        & (STR_FLOOR as libc::c_int | STR_CEILING as libc::c_int) != 0
        && (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
            & STR_WALL as libc::c_int == 0
        && (*player).charflags & SF_CANBUSTWALLS as libc::c_int as uint32_t == 0)
    {
        P_UnsetThingPosition((*player).mo);
        (*(*player).mo).x += (*(*player).mo).momx;
        (*(*player).mo).y += (*(*player).mo).momy;
        P_SetThingPosition((*player).mo);
    }
    node = (*(*player).mo).touching_sectorlist;
    's_42: while !node.is_null() {
        let mut rover: *mut ffloor_t = 0 as *mut ffloor_t;
        let mut topheight: fixed_t = 0;
        let mut bottomheight: fixed_t = 0;
        if ((*node).m_sector).is_null() {
            break;
        }
        if !((*(*node).m_sector).ffloors).is_null() {
            rover = (*(*node).m_sector).ffloors;
            while !rover.is_null() {
                if !(P_PlayerCanBust(player, rover) == 0) {
                    topheight = P_MobjCeilingZ(
                        (*player).mo,
                        sectors.offset((*rover).secnum as isize),
                        (*node).m_sector,
                        (*(*player).mo).x,
                        (*(*player).mo).y,
                        0 as *mut line_t,
                        false_0 as libc::c_int,
                        false_0 as libc::c_int,
                    );
                    bottomheight = P_MobjFloorZ(
                        (*player).mo,
                        sectors.offset((*rover).secnum as isize),
                        (*node).m_sector,
                        (*(*player).mo).x,
                        (*(*player).mo).y,
                        0 as *mut line_t,
                        true_0 as libc::c_int,
                        false_0 as libc::c_int,
                    );
                    if (*(*player).mo).eflags as libc::c_int
                        & MFE_VERTICALFLIP as libc::c_int != 0
                    {
                        if (*player).powers[pw_strong as libc::c_int as usize]
                            as libc::c_int & STR_FLOOR as libc::c_int != 0
                            && (*player).powers[pw_strong as libc::c_int as usize]
                                as libc::c_int & STR_CEILING as libc::c_int == 0
                            && (*(*player).mo).z > topheight
                        {
                            current_block = 13586036798005543211;
                        } else if (*player).powers[pw_strong as libc::c_int as usize]
                            as libc::c_int & STR_CEILING as libc::c_int != 0
                            && (*player).powers[pw_strong as libc::c_int as usize]
                                as libc::c_int & STR_FLOOR as libc::c_int == 0
                            && (*(*player).mo).z + (*(*player).mo).height < bottomheight
                        {
                            current_block = 13586036798005543211;
                        } else {
                            current_block = 14576567515993809846;
                        }
                    } else if (*player).powers[pw_strong as libc::c_int as usize]
                        as libc::c_int & STR_FLOOR as libc::c_int != 0
                        && (*player).powers[pw_strong as libc::c_int as usize]
                            as libc::c_int & STR_CEILING as libc::c_int == 0
                        && (*(*player).mo).z < bottomheight
                    {
                        current_block = 13586036798005543211;
                    } else if (*player).powers[pw_strong as libc::c_int as usize]
                        as libc::c_int & STR_CEILING as libc::c_int != 0
                        && (*player).powers[pw_strong as libc::c_int as usize]
                            as libc::c_int & STR_FLOOR as libc::c_int == 0
                        && (*(*player).mo).z + (*(*player).mo).height > topheight
                    {
                        current_block = 13586036798005543211;
                    } else {
                        current_block = 14576567515993809846;
                    }
                    match current_block {
                        13586036798005543211 => {}
                        _ => {
                            if (*player).powers[pw_strong as libc::c_int as usize]
                                as libc::c_int
                                & (STR_FLOOR as libc::c_int | STR_CEILING as libc::c_int)
                                != 0
                            {
                                topheight -= (*(*player).mo).momz;
                                bottomheight -= (*(*player).mo).momz;
                            }
                            if (*rover).bustflags as libc::c_uint
                                & FB_ONLYBOTTOM as libc::c_int as libc::c_uint != 0
                            {
                                if (*(*player).mo).z + (*(*player).mo).momz
                                    + (*(*player).mo).height < bottomheight
                                {
                                    current_block = 13586036798005543211;
                                } else if (*(*player).mo).z + (*(*player).mo).height
                                    > bottomheight
                                {
                                    current_block = 13586036798005543211;
                                } else {
                                    current_block = 13131896068329595644;
                                }
                            } else {
                                match (*rover).busttype as libc::c_int {
                                    0 => {
                                        if (*(*player).mo).z + (*(*player).mo).momz > topheight {
                                            current_block = 13586036798005543211;
                                        } else if (*(*player).mo).z + (*(*player).mo).momz
                                            + (*(*player).mo).height < bottomheight
                                        {
                                            current_block = 13586036798005543211;
                                        } else {
                                            current_block = 13131896068329595644;
                                        }
                                    }
                                    1 => {
                                        if (*(*player).mo).z + (*(*player).mo).momz > topheight {
                                            current_block = 13586036798005543211;
                                        } else if (*(*player).mo).z + (*(*player).mo).height
                                            < bottomheight
                                        {
                                            current_block = 13586036798005543211;
                                        } else {
                                            current_block = 13131896068329595644;
                                        }
                                    }
                                    _ => {
                                        if (*(*player).mo).z >= topheight {
                                            current_block = 13586036798005543211;
                                        } else if (*(*player).mo).z + (*(*player).mo).height
                                            < bottomheight
                                        {
                                            current_block = 13586036798005543211;
                                        } else {
                                            current_block = 13131896068329595644;
                                        }
                                    }
                                }
                            }
                            match current_block {
                                13586036798005543211 => {}
                                _ => {
                                    if ((*rover).busttype as libc::c_int
                                        == BT_TOUCH as libc::c_int
                                        || (*rover).busttype as libc::c_int
                                            == BT_SPINBUST as libc::c_int)
                                        && (*(*player).mo).z >= topheight
                                    {
                                        (*(*player).mo).momz >>= 1 as libc::c_int;
                                    } else if (*rover).busttype as libc::c_int
                                        == BT_TOUCH as libc::c_int
                                    {
                                        (*(*player).mo).momx >>= 1 as libc::c_int;
                                        (*(*player).mo).momy >>= 1 as libc::c_int;
                                    }
                                    EV_CrumbleChain(0 as *mut sector_t, rover);
                                    if (*rover).bustflags as libc::c_uint
                                        & FB_EXECUTOR as libc::c_int as libc::c_uint != 0
                                    {
                                        P_LinedefExecute(
                                            (*rover).busttag,
                                            (*player).mo,
                                            (*node).m_sector,
                                        );
                                    }
                                    break 's_42;
                                }
                            }
                        }
                    }
                }
                rover = (*rover).next;
            }
        }
        node = (*node).m_sectorlist_next;
    }
    if !((*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
        & (STR_FLOOR as libc::c_int | STR_CEILING as libc::c_int) != 0
        && (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
            & STR_WALL as libc::c_int == 0
        && (*player).charflags & SF_CANBUSTWALLS as libc::c_int as uint32_t == 0)
    {
        P_UnsetThingPosition((*player).mo);
        (*(*player).mo).x = oldx;
        (*(*player).mo).y = oldy;
        P_SetThingPosition((*player).mo);
    }
}
unsafe extern "C" fn P_CheckBouncySectors(mut player: *mut player_t) {
    let mut node: *mut msecnode_t = 0 as *mut msecnode_t;
    let mut oldx: fixed_t = 0;
    let mut oldy: fixed_t = 0;
    let mut oldz: fixed_t = 0;
    let mut momentum: vector3_t = vector3_t { x: 0, y: 0, z: 0 };
    oldx = (*(*player).mo).x;
    oldy = (*(*player).mo).y;
    oldz = (*(*player).mo).z;
    P_UnsetThingPosition((*player).mo);
    (*(*player).mo).x += (*(*player).mo).momx;
    (*(*player).mo).y += (*(*player).mo).momy;
    (*(*player).mo).z += (*(*player).mo).momz;
    P_SetThingPosition((*player).mo);
    node = (*(*player).mo).touching_sectorlist;
    's_36: while !node.is_null() {
        let mut rover: *mut ffloor_t = 0 as *mut ffloor_t;
        if ((*node).m_sector).is_null() {
            break;
        }
        if !((*(*node).m_sector).ffloors).is_null() {
            rover = (*(*node).m_sector).ffloors;
            while !rover.is_null() {
                let mut topheight: fixed_t = 0;
                let mut bottomheight: fixed_t = 0;
                if !((*rover).fofflags as libc::c_uint
                    & FOF_EXISTS as libc::c_int as libc::c_uint == 0)
                {
                    if udmf == 0
                        && (*(*(*rover).master).frontsector).special as libc::c_int
                            >> (1 as libc::c_int - 1 as libc::c_int) * 4 as libc::c_int
                            & 15 as libc::c_int == 15 as libc::c_int
                    {
                        (*rover)
                            .fofflags = ::core::mem::transmute::<
                            libc::c_uint,
                            ffloortype_e,
                        >(
                            (*rover).fofflags as libc::c_uint
                                | FOF_BOUNCY as libc::c_int as libc::c_uint,
                        );
                        (*rover)
                            .bouncestrength = P_AproxDistance(
                            (*(*rover).master).dx,
                            (*(*rover).master).dy,
                        ) / 100 as libc::c_int;
                    }
                    if !((*rover).fofflags as libc::c_uint
                        & FOF_BOUNCY as libc::c_int as libc::c_uint == 0)
                    {
                        topheight = P_MobjCeilingZ(
                            (*player).mo,
                            sectors.offset((*rover).secnum as isize),
                            (*node).m_sector,
                            (*(*player).mo).x,
                            (*(*player).mo).y,
                            0 as *mut line_t,
                            false_0 as libc::c_int,
                            false_0 as libc::c_int,
                        );
                        bottomheight = P_MobjFloorZ(
                            (*player).mo,
                            sectors.offset((*rover).secnum as isize),
                            (*node).m_sector,
                            (*(*player).mo).x,
                            (*(*player).mo).y,
                            0 as *mut line_t,
                            true_0 as libc::c_int,
                            false_0 as libc::c_int,
                        );
                        if !((*(*player).mo).z > topheight) {
                            if !((*(*player).mo).z + (*(*player).mo).height
                                < bottomheight)
                            {
                                if oldz
                                    < P_MobjCeilingZ(
                                        (*player).mo,
                                        sectors.offset((*rover).secnum as isize),
                                        (*node).m_sector,
                                        oldx,
                                        oldy,
                                        0 as *mut line_t,
                                        false_0 as libc::c_int,
                                        false_0 as libc::c_int,
                                    )
                                    && oldz + (*(*player).mo).height
                                        > P_MobjFloorZ(
                                            (*player).mo,
                                            sectors.offset((*rover).secnum as isize),
                                            (*node).m_sector,
                                            oldx,
                                            oldy,
                                            0 as *mut line_t,
                                            true_0 as libc::c_int,
                                            false_0 as libc::c_int,
                                        )
                                {
                                    (*(*player).mo)
                                        .momx = -FixedMul(
                                        (*(*player).mo).momx,
                                        (*rover).bouncestrength,
                                    );
                                    (*(*player).mo)
                                        .momy = -FixedMul(
                                        (*(*player).mo).momy,
                                        (*rover).bouncestrength,
                                    );
                                    break 's_36;
                                } else {
                                    let mut slope: *mut pslope_t = if abs(oldz - topheight)
                                        < abs(oldz + (*(*player).mo).height - bottomheight)
                                    {
                                        *(*rover).t_slope
                                    } else {
                                        *(*rover).b_slope
                                    };
                                    momentum.x = (*(*player).mo).momx;
                                    momentum.y = (*(*player).mo).momy;
                                    momentum.z = (*(*player).mo).momz * 2 as libc::c_int;
                                    if !slope.is_null() {
                                        P_ReverseQuantizeMomentumToSlope(&mut momentum, slope);
                                    }
                                    momentum
                                        .z = -FixedMul(momentum.z, (*rover).bouncestrength)
                                        / 2 as libc::c_int;
                                    if abs(momentum.z)
                                        < (*rover).bouncestrength * 2 as libc::c_int
                                    {
                                        break 's_36;
                                    }
                                    if momentum.z
                                        > FixedMul(
                                            24 as libc::c_int
                                                * ((1 as libc::c_int) << 16 as libc::c_int),
                                            (*(*player).mo).scale,
                                        )
                                    {
                                        momentum
                                            .z = FixedMul(
                                            24 as libc::c_int
                                                * ((1 as libc::c_int) << 16 as libc::c_int),
                                            (*(*player).mo).scale,
                                        );
                                    } else if momentum.z
                                        < -FixedMul(
                                            24 as libc::c_int
                                                * ((1 as libc::c_int) << 16 as libc::c_int),
                                            (*(*player).mo).scale,
                                        )
                                    {
                                        momentum
                                            .z = -FixedMul(
                                            24 as libc::c_int
                                                * ((1 as libc::c_int) << 16 as libc::c_int),
                                            (*(*player).mo).scale,
                                        );
                                    }
                                    if !slope.is_null() {
                                        P_QuantizeMomentumToSlope(&mut momentum, slope);
                                    }
                                    (*(*player).mo).momx = momentum.x;
                                    (*(*player).mo).momy = momentum.y;
                                    (*(*player).mo).momz = momentum.z;
                                    if (*player).pflags as libc::c_uint
                                        & PF_SPINNING as libc::c_int as libc::c_uint != 0
                                    {
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | PF_THOKKED as libc::c_int as libc::c_uint,
                                        );
                                    }
                                    break 's_36;
                                }
                            }
                        }
                    }
                }
                rover = (*rover).next;
            }
        }
        node = (*node).m_sectorlist_next;
    }
    P_UnsetThingPosition((*player).mo);
    (*(*player).mo).x = oldx;
    (*(*player).mo).y = oldy;
    (*(*player).mo).z = oldz;
    P_SetThingPosition((*player).mo);
}
unsafe extern "C" fn P_CheckQuicksand(mut player: *mut player_t) {
    let mut rover: *mut ffloor_t = 0 as *mut ffloor_t;
    let mut sinkspeed: fixed_t = 0;
    let mut topheight: fixed_t = 0;
    let mut bottomheight: fixed_t = 0;
    if !(!((*(*(*(*player).mo).subsector).sector).ffloors).is_null()
        && P_MobjFlip((*player).mo) as libc::c_int * (*(*player).mo).momz
            <= 0 as libc::c_int)
    {
        return;
    }
    rover = (*(*(*(*player).mo).subsector).sector).ffloors;
    while !rover.is_null() {
        if !((*rover).fofflags as libc::c_uint
            & FOF_EXISTS as libc::c_int as libc::c_uint == 0)
        {
            if !((*rover).fofflags as libc::c_uint
                & FOF_QUICKSAND as libc::c_int as libc::c_uint == 0)
            {
                topheight = P_GetFFloorTopZAt(
                    rover,
                    (*(*player).mo).x,
                    (*(*player).mo).y,
                );
                bottomheight = P_GetFFloorBottomZAt(
                    rover,
                    (*(*player).mo).x,
                    (*(*player).mo).y,
                );
                if topheight >= (*(*player).mo).z
                    && bottomheight < (*(*player).mo).z + (*(*player).mo).height
                {
                    sinkspeed = FixedDiv(
                        (*rover).sinkspeed,
                        35 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    );
                    if (*(*player).mo).eflags as libc::c_int
                        & MFE_VERTICALFLIP as libc::c_int != 0
                    {
                        let mut ceilingheight: fixed_t = P_MobjCeilingZ(
                            (*player).mo,
                            (*(*(*player).mo).subsector).sector,
                            0 as *mut sector_t,
                            (*(*player).mo).x,
                            (*(*player).mo).y,
                            0 as *mut line_t,
                            true_0 as libc::c_int,
                            false_0 as libc::c_int,
                        );
                        (*(*player).mo).z += sinkspeed;
                        if (*(*player).mo).z + (*(*player).mo).height >= ceilingheight {
                            (*(*player).mo).z = ceilingheight - (*(*player).mo).height;
                        }
                        if (*(*player).mo).momz <= 0 as libc::c_int {
                            P_PlayerHitFloor(player, false_0 as libc::c_int);
                        }
                    } else {
                        let mut floorheight: fixed_t = P_MobjFloorZ(
                            (*player).mo,
                            (*(*(*player).mo).subsector).sector,
                            0 as *mut sector_t,
                            (*(*player).mo).x,
                            (*(*player).mo).y,
                            0 as *mut line_t,
                            false_0 as libc::c_int,
                            false_0 as libc::c_int,
                        );
                        (*(*player).mo).z -= sinkspeed;
                        if (*(*player).mo).z <= floorheight {
                            (*(*player).mo).z = floorheight;
                        }
                        if (*(*player).mo).momz >= 0 as libc::c_int {
                            P_PlayerHitFloor(player, false_0 as libc::c_int);
                        }
                    }
                    (*(*player).mo)
                        .momx = FixedMul((*(*player).mo).momx, (*rover).friction);
                    (*(*player).mo)
                        .momy = FixedMul((*(*player).mo).momy, (*rover).friction);
                }
            }
        }
        rover = (*rover).next;
    }
}
unsafe extern "C" fn P_CheckSneakerAndLivesTimer(mut player: *mut player_t) {
    if (*player).powers[pw_extralife as libc::c_int as usize] as libc::c_int
        == 1 as libc::c_int
    {
        P_RestoreMusic(player);
    }
    if (*player).powers[pw_sneakers as libc::c_int as usize] as libc::c_int
        == 1 as libc::c_int
    {
        P_RestoreMusic(player);
    }
}
unsafe extern "C" fn P_CheckUnderwaterAndSpaceTimer(mut player: *mut player_t) {
    let mut timeleft: tic_t = (if (*player).powers[pw_spacetime as libc::c_int as usize]
        as libc::c_int != 0
    {
        (*player).powers[pw_spacetime as libc::c_int as usize] as libc::c_int
    } else {
        (*player).powers[pw_underwater as libc::c_int as usize] as libc::c_int
    }) as tic_t;
    if (*player).exiting != 0
        || (*player).pflags as libc::c_uint & PF_FINISHED as libc::c_int as libc::c_uint
            != 0
    {
        (*player)
            .powers[pw_spacetime as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
        (*player)
            .powers[pw_underwater as libc::c_int
            as usize] = (*player).powers[pw_spacetime as libc::c_int as usize];
    }
    timeleft = timeleft.wrapping_sub(1);
    timeleft;
    if timeleft == (11 as libc::c_int * 35 as libc::c_int) as tic_t
        || timeleft == (9 as libc::c_int * 35 as libc::c_int) as tic_t
        || timeleft == (7 as libc::c_int * 35 as libc::c_int) as tic_t
        || timeleft == (5 as libc::c_int * 35 as libc::c_int) as tic_t
        || timeleft == (3 as libc::c_int * 35 as libc::c_int) as tic_t
        || timeleft == (1 as libc::c_int * 35 as libc::c_int) as tic_t
    {
        let mut height: fixed_t = if (*(*player).mo).eflags as libc::c_int
            & MFE_VERTICALFLIP as libc::c_int != 0
        {
            (*(*player).mo).z
                - FixedMul(
                    8 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                        + mobjinfo[MT_DROWNNUMBERS as libc::c_int as usize].height,
                    FixedMul((*(*player).mo).scale, (*player).shieldscale),
                )
        } else {
            (*(*player).mo).z + (*(*player).mo).height
                + FixedMul(
                    8 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    FixedMul((*(*player).mo).scale, (*player).shieldscale),
                )
        };
        let mut numbermobj: *mut mobj_t = P_SpawnMobj(
            (*(*player).mo).x,
            (*(*player).mo).y,
            height,
            MT_DROWNNUMBERS,
        );
        timeleft = timeleft / (2 as libc::c_int * 35 as libc::c_int) as tic_t;
        if (*player).charflags & SF_MACHINE as libc::c_int as uint32_t != 0 {
            S_StartSound((*player).mo as *const libc::c_void, sfx_buzz1);
            timeleft = timeleft.wrapping_add(6 as libc::c_int as tic_t);
        } else {
            S_StartSound((*player).mo as *const libc::c_void, sfx_dwnind);
        }
        if timeleft != 0 {
            P_SetMobjState(
                numbermobj,
                ((*(*numbermobj).info).spawnstate as libc::c_uint).wrapping_add(timeleft)
                    as statenum_t,
            );
        }
        P_SetTarget2(&mut (*numbermobj).target, (*player).mo);
        (*numbermobj).threshold = 40 as libc::c_int;
        (*numbermobj).destscale = (*(*player).mo).scale;
        P_SetScale(numbermobj, (*(*player).mo).scale);
    } else if timeleft == 1 as libc::c_int as tic_t {
        if (netgame != 0 || multiplayer != 0) && P_IsLocalPlayer(player) != 0 {
            S_ChangeMusicEx(
                mapmusname.as_mut_ptr(),
                mapmusflags,
                true_0 as libc::c_int,
                0 as libc::c_int as uint32_t,
                0 as libc::c_int as uint32_t,
                0 as libc::c_int as uint32_t,
            );
        }
        if (*player).powers[pw_spacetime as libc::c_int as usize] as libc::c_int
            == 1 as libc::c_int
        {
            P_DamageMobj(
                (*player).mo,
                0 as *mut mobj_t,
                0 as *mut mobj_t,
                1 as libc::c_int,
                (0x80 as libc::c_int + 2 as libc::c_int) as uint8_t,
            );
        } else {
            P_DamageMobj(
                (*player).mo,
                0 as *mut mobj_t,
                0 as *mut mobj_t,
                1 as libc::c_int,
                (0x80 as libc::c_int + 1 as libc::c_int) as uint8_t,
            );
        }
    }
    if (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int == 0
        && (*player).powers[pw_underwater as libc::c_int as usize] as libc::c_int != 0
    {
        if (*player).powers[pw_underwater as libc::c_int as usize] as libc::c_int
            <= 12 as libc::c_int * 35 as libc::c_int + 1 as libc::c_int
        {
            (*player)
                .powers[pw_underwater as libc::c_int
                as usize] = 0 as libc::c_int as uint16_t;
            P_RestoreMusic(player);
        } else {
            (*player)
                .powers[pw_underwater as libc::c_int
                as usize] = 0 as libc::c_int as uint16_t;
        }
    }
    if (*player).powers[pw_spacetime as libc::c_int as usize] as libc::c_int
        > 1 as libc::c_int && P_InSpaceSector((*player).mo) == 0
    {
        (*player)
            .powers[pw_spacetime as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
    }
    if P_IsLocalPlayer(player) != 0 && (*player).bot == 0 {
        if (*player).powers[pw_underwater as libc::c_int as usize] as libc::c_int
            == 25 as libc::c_int * 35 as libc::c_int + 1 as libc::c_int
            || (*player).powers[pw_underwater as libc::c_int as usize] as libc::c_int
                == 20 as libc::c_int * 35 as libc::c_int + 1 as libc::c_int
            || (*player).powers[pw_underwater as libc::c_int as usize] as libc::c_int
                == 15 as libc::c_int * 35 as libc::c_int + 1 as libc::c_int
        {
            S_StartSound(0 as *const libc::c_void, sfx_wtrdng);
        }
        if (*player).powers[pw_underwater as libc::c_int as usize] as libc::c_int
            == 11 as libc::c_int * 35 as libc::c_int + 1 as libc::c_int
            && player
                == &mut *players.as_mut_ptr().offset(consoleplayer as isize)
                    as *mut player_t
        {
            P_PlayJingle(player, JT_DROWN);
        }
    }
}
unsafe extern "C" fn P_CheckInvincibilityTimer(mut player: *mut player_t) {
    if (*player).powers[pw_invulnerability as libc::c_int as usize] == 0 {
        return;
    }
    if maptol & TOL_MARIO as libc::c_int as uint32_t != 0
        && (*player).powers[pw_super as libc::c_int as usize] == 0
    {
        (*(*player).mo)
            .color = (SKINCOLOR_RUBY as libc::c_int as tic_t)
            .wrapping_add(
                leveltime
                    % (FIRSTSUPERCOLOR as libc::c_int - SKINCOLOR_RUBY as libc::c_int)
                        as tic_t,
            ) as uint16_t;
    } else if leveltime % (35 as libc::c_int / 7 as libc::c_int) as tic_t
        == 0 as libc::c_int as tic_t
    {
        let mut sparkle: *mut mobj_t = P_SpawnMobj(
            (*(*player).mo).x,
            (*(*player).mo).y,
            (*(*player).mo).z,
            MT_IVSP,
        );
        (*sparkle).destscale = (*(*player).mo).scale;
        P_SetScale(sparkle, (*(*player).mo).scale);
    }
    if (*player).powers[pw_invulnerability as libc::c_int as usize] as libc::c_int
        == 1 as libc::c_int
    {
        if (*player).powers[pw_super as libc::c_int as usize] == 0 {
            if maptol & TOL_MARIO as libc::c_int as uint32_t != 0 {
                if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
                    & SH_STACK as libc::c_int == SH_FIREFLOWER as libc::c_int
                {
                    (*(*player).mo).color = SKINCOLOR_WHITE as libc::c_int as uint16_t;
                    G_GhostAddColor(GHC_FIREFLOWER);
                } else {
                    (*(*player).mo).color = (*player).skincolor;
                    G_GhostAddColor(GHC_NORMAL);
                }
            }
            P_SpawnShieldOrb(player);
        }
        if (*player).powers[pw_super as libc::c_int as usize] == 0
            || (*mapheaderinfo[(gamemap as libc::c_int - 1 as libc::c_int) as usize])
                .levelflags as libc::c_int & (1 as libc::c_int) << 2 as libc::c_int != 0
        {
            P_RestoreMusic(player);
        }
    }
}
unsafe extern "C" fn P_DoBubbleBreath(mut player: *mut player_t) {
    let mut x: fixed_t = (*(*player).mo).x;
    let mut y: fixed_t = (*(*player).mo).y;
    let mut z: fixed_t = (*(*player).mo).z;
    let mut bubble: *mut mobj_t = 0 as *mut mobj_t;
    if (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int == 0
        || (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
            & SH_PROTECTWATER as libc::c_int != 0
            && !((*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
                == CR_NIGHTSMODE as libc::c_int) || (*player).spectator != 0
    {
        return;
    }
    if (*player).charflags & SF_MACHINE as libc::c_int as uint32_t != 0 {
        if (*player).powers[pw_underwater as libc::c_int as usize] as libc::c_int != 0
            && P_RandomFixed()
                < (128 as libc::c_int
                    - (*player).powers[pw_underwater as libc::c_int as usize]
                        as libc::c_int / 4 as libc::c_int)
                    * ((1 as libc::c_int) << 16 as libc::c_int) / 256 as libc::c_int
        {
            let mut r: fixed_t = (*(*player).mo).radius >> 16 as libc::c_int;
            x += P_RandomRange(r, -r) << 16 as libc::c_int;
            y += P_RandomRange(r, -r) << 16 as libc::c_int;
            z
                += P_RandomKey((*(*player).mo).height >> 16 as libc::c_int)
                    << 16 as libc::c_int;
            bubble = P_SpawnMobj(x, y, z, MT_WATERZAP);
            S_StartSound(bubble as *const libc::c_void, sfx_beelec);
        }
    } else {
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            z
                += (*(*player).mo).height
                    - FixedDiv(
                        (*(*player).mo).height,
                        5 as libc::c_int
                            * (((1 as libc::c_int) << 16 as libc::c_int)
                                / 4 as libc::c_int),
                    );
        } else {
            z
                += FixedDiv(
                    (*(*player).mo).height,
                    5 as libc::c_int
                        * (((1 as libc::c_int) << 16 as libc::c_int) / 4 as libc::c_int),
                );
        }
        if P_RandomFixed()
            < ((1 as libc::c_int) << 16 as libc::c_int) / 16 as libc::c_int
        {
            bubble = P_SpawnMobj(x, y, z, MT_SMALLBUBBLE);
        } else if P_RandomFixed()
            < 3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                / 256 as libc::c_int
        {
            bubble = P_SpawnMobj(x, y, z, MT_MEDIUMBUBBLE);
        }
    }
    if !bubble.is_null() {
        (*bubble).threshold = 42 as libc::c_int;
        (*bubble).destscale = (*(*player).mo).scale;
        P_SetScale(bubble, (*bubble).destscale);
    }
    if (*player).powers[pw_tailsfly as libc::c_int as usize] as libc::c_int != 0
        && leveltime & 1 as libc::c_int as tic_t != 0
        && (*player).charability as libc::c_int != CA_SWIM as libc::c_int
    {
        let mut radius: fixed_t = (*(*player).mo).radius;
        let mut fa: angle_t = leveltime % 45 as libc::c_int as tic_t
            * 8192 as libc::c_int as tic_t / 8 as libc::c_int as tic_t
            & (8192 as libc::c_int - 1 as libc::c_int) as tic_t;
        let mut stirwaterx: fixed_t = FixedMul(
            *finecosine.offset(fa as isize) >> 16 as libc::c_int - 16 as libc::c_int,
            radius,
        );
        let mut stirwatery: fixed_t = FixedMul(
            finesine[fa as usize] >> 16 as libc::c_int - 16 as libc::c_int,
            radius,
        );
        let mut stirwaterz: fixed_t = 0;
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            stirwaterz = (*(*player).mo).z + (*(*player).mo).height
                - ((4 as libc::c_int) << 16 as libc::c_int);
        } else {
            stirwaterz = (*(*player).mo).z + ((4 as libc::c_int) << 16 as libc::c_int);
        }
        bubble = P_SpawnMobj(
            (*(*player).mo).x + stirwaterx,
            (*(*player).mo).y + stirwatery,
            stirwaterz,
            MT_SMALLBUBBLE,
        );
        (*bubble).destscale = (*(*player).mo).scale;
        P_SetScale(bubble, (*bubble).destscale);
        bubble = P_SpawnMobj(
            (*(*player).mo).x - stirwaterx,
            (*(*player).mo).y - stirwatery,
            stirwaterz,
            MT_SMALLBUBBLE,
        );
        (*bubble).destscale = (*(*player).mo).scale;
        P_SetScale(bubble, (*bubble).destscale);
    }
}
unsafe extern "C" fn P_DoPlayerHeadSigns(mut player: *mut player_t) {
    let mut sign: *mut mobj_t = 0 as *mut mobj_t;
    if G_TagGametype() != 0 {
        if (*player).pflags as libc::c_uint & PF_TAGIT as libc::c_int as libc::c_uint
            != 0
            && (P_IsLocalPlayer(player) == 0 || consoleplayer != displayplayer
                || splitscreen != 0)
        {
            sign = P_SpawnMobjFromMobj(
                (*player).mo,
                0 as libc::c_int,
                0 as libc::c_int,
                0 as libc::c_int,
                MT_TAG,
            );
            (*sign).x = (*(*player).mo).x;
            (*sign).y = (*(*player).mo).y;
            (*sign).z = (*(*player).mo).z;
            (*sign).old_x = (*(*player).mo).old_x;
            (*sign).old_y = (*(*player).mo).old_y;
            (*sign).old_z = (*(*player).mo).old_z;
            if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                == 0
            {
                (*sign).z += (*(*player).mo).height;
                (*sign).old_z += (*(*player).mo).height;
            } else {
                (*sign).z -= mobjinfo[MT_TAG as libc::c_int as usize].height;
                (*sign).old_z -= mobjinfo[MT_TAG as libc::c_int as usize].height;
            }
        }
    } else if gametyperules & GTR_TEAMFLAGS as libc::c_int as uint32_t != 0
        && (*player).gotflag as libc::c_int & (1 as libc::c_int | 2 as libc::c_int) != 0
    {
        if P_IsLocalPlayer(player) == 0 || consoleplayer != displayplayer
            || splitscreen != 0
        {
            let mut zofs: fixed_t = 0;
            let mut player_is_flipped: boolean = ((*(*player).mo).eflags as libc::c_int
                & MFE_VERTICALFLIP as libc::c_int > 0 as libc::c_int) as libc::c_int;
            zofs = (*(*player).mo).momz;
            if player_is_flipped != 0 {
                zofs
                    += (*(*player).mo).height
                        - FixedMul((*player).height, (*(*player).mo).scale)
                        - mobjinfo[MT_GOTFLAG as libc::c_int as usize].height
                        - FixedMul(
                            16 as libc::c_int
                                * ((1 as libc::c_int) << 16 as libc::c_int),
                            (*(*player).mo).scale,
                        );
            } else {
                zofs
                    += FixedMul((*player).height, (*(*player).mo).scale)
                        + FixedMul(
                            16 as libc::c_int
                                * ((1 as libc::c_int) << 16 as libc::c_int),
                            (*(*player).mo).scale,
                        );
            }
            sign = P_SpawnMobjFromMobj(
                (*player).mo,
                0 as libc::c_int,
                0 as libc::c_int,
                0 as libc::c_int,
                MT_GOTFLAG,
            );
            (*sign).x = (*(*player).mo).x;
            (*sign).y = (*(*player).mo).y;
            (*sign).z = (*(*player).mo).z + zofs;
            (*sign).old_x = (*(*player).mo).old_x;
            (*sign).old_y = (*(*player).mo).old_y;
            (*sign).old_z = (*(*player).mo).old_z + zofs;
            if player_is_flipped != 0 {
                (*sign)
                    .eflags = ((*sign).eflags as libc::c_int
                    | MFE_VERTICALFLIP as libc::c_int) as uint16_t;
            }
            if (*player).gotflag as libc::c_int & 1 as libc::c_int != 0 {
                (*sign).frame = (1 as libc::c_int | 0x100000 as libc::c_int) as uint32_t;
            } else {
                (*sign).frame = (2 as libc::c_int | 0x100000 as libc::c_int) as uint32_t;
            }
        }
    }
    if P_MobjWasRemoved(sign) == 0 && splitscreen != 0 {
        if player
            == &mut *players.as_mut_ptr().offset(displayplayer as isize) as *mut player_t
        {
            (*sign)
                .drawonlyforplayer = &mut *players
                .as_mut_ptr()
                .offset(secondarydisplayplayer as isize) as *mut player_t;
        } else {
            (*sign)
                .drawonlyforplayer = &mut *players
                .as_mut_ptr()
                .offset(displayplayer as isize) as *mut player_t;
        }
    }
}
unsafe extern "C" fn P_DoClimbing(mut player: *mut player_t) {
    let mut cmd: *mut ticcmd_t = &mut (*player).cmd;
    let mut platx: fixed_t = 0;
    let mut platy: fixed_t = 0;
    let mut glidesector: *mut subsector_t = 0 as *mut subsector_t;
    let mut climb: boolean = true_0 as libc::c_int;
    platx = P_ReturnThrustX(
        (*player).mo,
        (*(*player).mo).angle,
        (*(*player).mo).radius
            + FixedMul(
                8 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*(*player).mo).scale,
            ),
    );
    platy = P_ReturnThrustY(
        (*player).mo,
        (*(*player).mo).angle,
        (*(*player).mo).radius
            + FixedMul(
                8 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*(*player).mo).scale,
            ),
    );
    glidesector = R_PointInSubsectorOrNull(
        (*(*player).mo).x + platx,
        (*(*player).mo).y + platy,
    );
    let mut floorclimb: boolean = false_0 as libc::c_int;
    let mut thrust: boolean = false_0 as libc::c_int;
    let mut boostup: boolean = false_0 as libc::c_int;
    let mut skyclimber: boolean = false_0 as libc::c_int;
    let mut floorheight: fixed_t = 0;
    let mut ceilingheight: fixed_t = 0;
    if glidesector.is_null() {
        floorclimb = true_0 as libc::c_int;
    } else {
        floorheight = P_GetSectorFloorZAt(
            (*glidesector).sector,
            (*(*player).mo).x,
            (*(*player).mo).y,
        );
        ceilingheight = P_GetSectorCeilingZAt(
            (*glidesector).sector,
            (*(*player).mo).x,
            (*(*player).mo).y,
        );
        if !((*(*glidesector).sector).ffloors).is_null() {
            let mut rover: *mut ffloor_t = 0 as *mut ffloor_t;
            let mut topheight: fixed_t = 0;
            let mut bottomheight: fixed_t = 0;
            rover = (*(*glidesector).sector).ffloors;
            while !rover.is_null() {
                if !((*rover).fofflags as libc::c_uint
                    & FOF_EXISTS as libc::c_int as libc::c_uint == 0
                    || (*rover).fofflags as libc::c_uint
                        & FOF_BLOCKPLAYER as libc::c_int as libc::c_uint == 0
                    || (*rover).fofflags as libc::c_uint
                        & FOF_BUSTUP as libc::c_int as libc::c_uint != 0
                        && (*player).charflags
                            & SF_CANBUSTWALLS as libc::c_int as uint32_t != 0)
                {
                    floorclimb = true_0 as libc::c_int;
                    topheight = P_GetFFloorTopZAt(
                        rover,
                        (*(*player).mo).x,
                        (*(*player).mo).y,
                    );
                    bottomheight = P_GetFFloorBottomZAt(
                        rover,
                        (*(*player).mo).x,
                        (*(*player).mo).y,
                    );
                    if (*(*(*rover).master).frontsector).floorspeed != 0
                        && (*(*(*rover).master).frontsector).ceilspeed
                            == 42 as libc::c_int
                    {
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int == 0
                            && bottomheight < (*(*player).mo).z + (*(*player).mo).height
                            && topheight
                                >= (*(*player).mo).z
                                    + FixedMul(
                                        16 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int),
                                        (*(*player).mo).scale,
                                    )
                            || (*(*player).mo).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int != 0
                                && topheight > (*(*player).mo).z
                                && bottomheight
                                    <= (*(*player).mo).z + (*(*player).mo).height
                                        - FixedMul(
                                            16 as libc::c_int
                                                * ((1 as libc::c_int) << 16 as libc::c_int),
                                            (*(*player).mo).scale,
                                        )
                        {
                            if (*cmd).forwardmove as libc::c_int != 0 as libc::c_int {
                                (*(*player).mo).momz
                                    += (*(*(*rover).master).frontsector).floorspeed;
                            } else {
                                (*(*player).mo)
                                    .momz = (*(*(*rover).master).frontsector).floorspeed;
                                climb = false_0 as libc::c_int;
                            }
                        }
                    }
                    if (*(*player).mo).eflags as libc::c_int
                        & MFE_VERTICALFLIP as libc::c_int != 0
                    {
                        if topheight >= (*(*player).mo).z + (*(*player).mo).height
                            && (*(*player).mo).z + (*(*player).mo).height
                                + (*(*player).mo).momz >= topheight
                        {
                            let mut bottomheight2: fixed_t = 0;
                            let mut roverbelow: *mut ffloor_t = 0 as *mut ffloor_t;
                            let mut foundfof: boolean = false_0 as libc::c_int;
                            floorclimb = true_0 as libc::c_int;
                            boostup = false_0 as libc::c_int;
                            roverbelow = (*(*glidesector).sector).ffloors;
                            while !roverbelow.is_null() {
                                if !((*roverbelow).fofflags as libc::c_uint
                                    & FOF_EXISTS as libc::c_int as libc::c_uint == 0
                                    || (*roverbelow).fofflags as libc::c_uint
                                        & FOF_BLOCKPLAYER as libc::c_int as libc::c_uint == 0
                                    || (*rover).fofflags as libc::c_uint
                                        & FOF_BUSTUP as libc::c_int as libc::c_uint != 0
                                        && (*player).charflags
                                            & SF_CANBUSTWALLS as libc::c_int as uint32_t != 0)
                                {
                                    if !(roverbelow == rover) {
                                        bottomheight2 = P_GetFFloorBottomZAt(
                                            roverbelow,
                                            (*(*player).mo).x,
                                            (*(*player).mo).y,
                                        );
                                        if bottomheight2
                                            < topheight
                                                + FixedMul(
                                                    16 as libc::c_int
                                                        * ((1 as libc::c_int) << 16 as libc::c_int),
                                                    (*(*player).mo).scale,
                                                )
                                        {
                                            foundfof = true_0 as libc::c_int;
                                        }
                                    }
                                }
                                roverbelow = (*roverbelow).next;
                            }
                            if foundfof == 0 {
                                (*(*player).mo).momz = 0 as libc::c_int;
                            }
                        }
                        if topheight <= (*(*player).mo).z {
                            floorclimb = false_0 as libc::c_int;
                            boostup = false_0 as libc::c_int;
                            thrust = false_0 as libc::c_int;
                        }
                        if bottomheight
                            > (*(*player).mo).z + (*(*player).mo).height
                                - FixedMul(
                                    16 as libc::c_int
                                        * ((1 as libc::c_int) << 16 as libc::c_int),
                                    (*(*player).mo).scale,
                                )
                        {
                            floorclimb = false_0 as libc::c_int;
                            thrust = true_0 as libc::c_int;
                            boostup = true_0 as libc::c_int;
                        }
                    } else {
                        if bottomheight <= (*(*player).mo).z
                            && (*(*player).mo).z + (*(*player).mo).momz <= bottomheight
                        {
                            let mut topheight2: fixed_t = 0;
                            let mut roverbelow_0: *mut ffloor_t = 0 as *mut ffloor_t;
                            let mut foundfof_0: boolean = false_0 as libc::c_int;
                            floorclimb = true_0 as libc::c_int;
                            boostup = false_0 as libc::c_int;
                            roverbelow_0 = (*(*glidesector).sector).ffloors;
                            while !roverbelow_0.is_null() {
                                if !((*roverbelow_0).fofflags as libc::c_uint
                                    & FOF_EXISTS as libc::c_int as libc::c_uint == 0
                                    || (*roverbelow_0).fofflags as libc::c_uint
                                        & FOF_BLOCKPLAYER as libc::c_int as libc::c_uint == 0
                                    || (*rover).fofflags as libc::c_uint
                                        & FOF_BUSTUP as libc::c_int as libc::c_uint != 0
                                        && (*player).charflags
                                            & SF_CANBUSTWALLS as libc::c_int as uint32_t != 0)
                                {
                                    if !(roverbelow_0 == rover) {
                                        topheight2 = P_GetFFloorTopZAt(
                                            roverbelow_0,
                                            (*(*player).mo).x,
                                            (*(*player).mo).y,
                                        );
                                        if topheight2
                                            > bottomheight
                                                - FixedMul(
                                                    16 as libc::c_int
                                                        * ((1 as libc::c_int) << 16 as libc::c_int),
                                                    (*(*player).mo).scale,
                                                )
                                        {
                                            foundfof_0 = true_0 as libc::c_int;
                                        }
                                    }
                                }
                                roverbelow_0 = (*roverbelow_0).next;
                            }
                            if foundfof_0 == 0 {
                                (*(*player).mo).momz = 0 as libc::c_int;
                            }
                        }
                        if bottomheight >= (*(*player).mo).z + (*(*player).mo).height {
                            floorclimb = false_0 as libc::c_int;
                            boostup = false_0 as libc::c_int;
                            thrust = false_0 as libc::c_int;
                        }
                        if topheight
                            < (*(*player).mo).z
                                + FixedMul(
                                    16 as libc::c_int
                                        * ((1 as libc::c_int) << 16 as libc::c_int),
                                    (*(*player).mo).scale,
                                )
                        {
                            floorclimb = false_0 as libc::c_int;
                            thrust = true_0 as libc::c_int;
                            boostup = true_0 as libc::c_int;
                        }
                    }
                    if floorclimb != 0 {
                        if (*rover).fofflags as libc::c_uint
                            & FOF_CRUMBLE as libc::c_int as libc::c_uint != 0
                            && !(netgame != 0 && (*player).spectator != 0)
                        {
                            EV_StartCrumble(
                                (*(*rover).master).frontsector,
                                rover,
                                ((*rover).fofflags as libc::c_uint
                                    & FOF_FLOATBOB as libc::c_int as libc::c_uint) as boolean,
                                player,
                                (*rover).alpha,
                                ((*rover).fofflags as libc::c_uint
                                    & FOF_NORETURN as libc::c_int as libc::c_uint == 0)
                                    as libc::c_int,
                            );
                        }
                        break;
                    }
                }
                rover = (*rover).next;
            }
        }
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            if floorheight >= (*(*player).mo).z + (*(*player).mo).height
                && (*(*player).mo).z + (*(*player).mo).height + (*(*player).mo).momz
                    >= floorheight
            {
                let mut foundfof_1: boolean = false_0 as libc::c_int;
                floorclimb = true_0 as libc::c_int;
                if !((*(*glidesector).sector).ffloors).is_null() {
                    let mut bottomheight_0: fixed_t = 0;
                    let mut rover_0: *mut ffloor_t = 0 as *mut ffloor_t;
                    rover_0 = (*(*glidesector).sector).ffloors;
                    while !rover_0.is_null() {
                        if !((*rover_0).fofflags as libc::c_uint
                            & FOF_EXISTS as libc::c_int as libc::c_uint == 0
                            || (*rover_0).fofflags as libc::c_uint
                                & FOF_BLOCKPLAYER as libc::c_int as libc::c_uint == 0
                            || (*rover_0).fofflags as libc::c_uint
                                & FOF_BUSTUP as libc::c_int as libc::c_uint != 0
                                && (*player).charflags
                                    & SF_CANBUSTWALLS as libc::c_int as uint32_t != 0)
                        {
                            bottomheight_0 = P_GetFFloorBottomZAt(
                                rover_0,
                                (*(*player).mo).x,
                                (*(*player).mo).y,
                            );
                            if bottomheight_0
                                < floorheight
                                    + FixedMul(
                                        16 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int),
                                        (*(*player).mo).scale,
                                    )
                            {
                                foundfof_1 = true_0 as libc::c_int;
                                break;
                            }
                        }
                        rover_0 = (*rover_0).next;
                    }
                }
                if foundfof_1 == 0 {
                    (*(*player).mo).momz = 0 as libc::c_int;
                }
            }
            if floorclimb == 0
                && ceilingheight
                    > (*(*player).mo).z + (*(*player).mo).height
                        - FixedMul(
                            16 as libc::c_int
                                * ((1 as libc::c_int) << 16 as libc::c_int),
                            (*(*player).mo).scale,
                        )
                && ((*(*glidesector).sector).ceilingpic == skyflatnum
                    || floorheight
                        < (*(*player).mo).z
                            - FixedMul(
                                8 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                (*(*player).mo).scale,
                            ))
            {
                thrust = true_0 as libc::c_int;
                boostup = true_0 as libc::c_int;
            }
        } else {
            if ceilingheight <= (*(*player).mo).z
                && (*(*player).mo).z + (*(*player).mo).momz <= ceilingheight
            {
                let mut foundfof_2: boolean = false_0 as libc::c_int;
                floorclimb = true_0 as libc::c_int;
                if !((*(*glidesector).sector).ffloors).is_null() {
                    let mut topheight_0: fixed_t = 0;
                    let mut rover_1: *mut ffloor_t = 0 as *mut ffloor_t;
                    rover_1 = (*(*glidesector).sector).ffloors;
                    while !rover_1.is_null() {
                        if !((*rover_1).fofflags as libc::c_uint
                            & FOF_EXISTS as libc::c_int as libc::c_uint == 0
                            || (*rover_1).fofflags as libc::c_uint
                                & FOF_BLOCKPLAYER as libc::c_int as libc::c_uint == 0
                            || (*rover_1).fofflags as libc::c_uint
                                & FOF_BUSTUP as libc::c_int as libc::c_uint != 0
                                && (*player).charflags
                                    & SF_CANBUSTWALLS as libc::c_int as uint32_t != 0)
                        {
                            topheight_0 = P_GetFFloorTopZAt(
                                rover_1,
                                (*(*player).mo).x,
                                (*(*player).mo).y,
                            );
                            if topheight_0
                                > ceilingheight
                                    - FixedMul(
                                        16 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int),
                                        (*(*player).mo).scale,
                                    )
                            {
                                foundfof_2 = true_0 as libc::c_int;
                                break;
                            }
                        }
                        rover_1 = (*rover_1).next;
                    }
                }
                if foundfof_2 == 0 {
                    (*(*player).mo).momz = 0 as libc::c_int;
                }
            }
            if (*(*player).mo).z
                > ceilingheight
                    - FixedMul(
                        16 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                        (*(*player).mo).scale,
                    )
            {
                floorclimb = true_0 as libc::c_int;
                thrust = false_0 as libc::c_int;
                boostup = false_0 as libc::c_int;
            }
            if floorclimb == 0
                && floorheight
                    < (*(*player).mo).z
                        + FixedMul(
                            16 as libc::c_int
                                * ((1 as libc::c_int) << 16 as libc::c_int),
                            (*(*player).mo).scale,
                        )
                && ((*(*glidesector).sector).ceilingpic == skyflatnum
                    || ceilingheight
                        > (*(*player).mo).z + (*(*player).mo).height
                            + FixedMul(
                                8 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                (*(*player).mo).scale,
                            ))
            {
                thrust = true_0 as libc::c_int;
                boostup = true_0 as libc::c_int;
            }
        }
        if ceilingheight < (*(*player).mo).z
            && (*(*glidesector).sector).ceilingpic == skyflatnum
        {
            skyclimber = true_0 as libc::c_int;
        }
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int == 0
            && (*(*player).mo).z
                + FixedMul(
                    16 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    (*(*player).mo).scale,
                ) < floorheight
            || (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                != 0 && (*(*player).mo).z + (*(*player).mo).height <= floorheight
        {
            floorclimb = true_0 as libc::c_int;
            if (*(*glidesector).sector).floorspeed != 0 {
                if (*cmd).forwardmove as libc::c_int != 0 as libc::c_int {
                    (*(*player).mo).momz += (*(*glidesector).sector).floorspeed;
                } else {
                    (*(*player).mo).momz = (*(*glidesector).sector).floorspeed;
                    climb = false_0 as libc::c_int;
                }
            }
        } else if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
            == 0 && (*(*player).mo).z >= ceilingheight
            || (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                != 0
                && (*(*player).mo).z + (*(*player).mo).height
                    - FixedMul(
                        16 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                        (*(*player).mo).scale,
                    ) > ceilingheight
        {
            floorclimb = true_0 as libc::c_int;
            if (*(*glidesector).sector).ceilspeed != 0 {
                if (*cmd).forwardmove as libc::c_int != 0 as libc::c_int {
                    (*(*player).mo).momz += (*(*glidesector).sector).ceilspeed;
                } else {
                    (*(*player).mo).momz = (*(*glidesector).sector).ceilspeed;
                    climb = false_0 as libc::c_int;
                }
            }
        }
    }
    if (*player).lastsidehit as libc::c_int != -(1 as libc::c_int)
        && (*player).lastlinehit as libc::c_int != -(1 as libc::c_int)
    {
        let mut think: *mut thinker_t = 0 as *mut thinker_t;
        let mut scroller: *mut scroll_t = 0 as *mut scroll_t;
        let mut sideangle: angle_t = 0;
        let mut dx: fixed_t = 0;
        let mut dy: fixed_t = 0;
        think = (*thlist.as_mut_ptr().offset(THINK_MAIN as libc::c_int as isize)).next;
        while think
            != &mut *thlist.as_mut_ptr().offset(THINK_MAIN as libc::c_int as isize)
                as *mut thinker_t
        {
            if !((*think).function.acp1
                != ::core::mem::transmute::<
                    Option::<unsafe extern "C" fn(*mut scroll_t) -> ()>,
                    actionf_p1,
                >(Some(T_Scroll as unsafe extern "C" fn(*mut scroll_t) -> ())))
            {
                scroller = think as *mut scroll_t;
                if !((*scroller).type_0 as libc::c_uint
                    != sc_side as libc::c_int as libc::c_uint)
                {
                    if !((*scroller).affectee != (*player).lastsidehit as libc::c_int) {
                        if (*scroller).accel != 0 {
                            dx = (*scroller).vdx;
                            dy = (*scroller).vdy;
                        } else {
                            dx = (*scroller).dx;
                            dy = (*scroller).dy;
                        }
                        if (*cmd).forwardmove as libc::c_int != 0 as libc::c_int {
                            (*(*player).mo).momz += dy;
                            climb = true_0 as libc::c_int;
                        } else {
                            (*(*player).mo).momz = dy;
                            climb = false_0 as libc::c_int;
                        }
                        sideangle = R_PointToAngle2(
                            (*(*lines.offset((*player).lastlinehit as isize)).v2).x,
                            (*(*lines.offset((*player).lastlinehit as isize)).v2).y,
                            (*(*lines.offset((*player).lastlinehit as isize)).v1).x,
                            (*(*lines.offset((*player).lastlinehit as isize)).v1).y,
                        );
                        if (*cmd).sidemove as libc::c_int != 0 as libc::c_int {
                            P_Thrust((*player).mo, sideangle, dx);
                            climb = true_0 as libc::c_int;
                        } else {
                            P_InstaThrust((*player).mo, sideangle, dx);
                            climb = false_0 as libc::c_int;
                        }
                    }
                }
            }
            think = (*think).next;
        }
    }
    if (*cmd).sidemove as libc::c_int != 0 as libc::c_int
        || (*cmd).forwardmove as libc::c_int != 0 as libc::c_int
    {
        climb = true_0 as libc::c_int;
    } else {
        climb = false_0 as libc::c_int;
    }
    if (*player).climbing as libc::c_int != 0 && climb != 0
        && ((*(*player).mo).momx != 0 || (*(*player).mo).momy != 0
            || (*(*player).mo).momz != 0)
        && ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
            != S_PLAY_CLIMB as libc::c_int as libc::c_long
    {
        P_SetPlayerMobjState((*player).mo, S_PLAY_CLIMB);
    } else if (!((*(*player).mo).momx != 0 || (*(*player).mo).momy != 0
        || (*(*player).mo).momz != 0) || climb == 0)
        && ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
            != S_PLAY_CLING as libc::c_int as libc::c_long
    {
        P_SetPlayerMobjState((*player).mo, S_PLAY_CLING);
    }
    if floorclimb == 0 {
        if boostup != 0 {
            P_SetObjectMomZ(
                (*player).mo,
                2 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                true_0 as libc::c_int,
            );
            if (*cmd).forwardmove != 0 {
                (*(*player).mo)
                    .momz = 2 as libc::c_int * (*(*player).mo).momz / 3 as libc::c_int;
            }
        }
        if thrust != 0 {
            P_Thrust(
                (*player).mo,
                (*(*player).mo).angle,
                FixedMul(
                    4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    (*(*player).mo).scale,
                ),
            );
        }
        (*player).climbing = 0 as libc::c_int as uint8_t;
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >((*player).pflags as libc::c_uint | P_GetJumpFlags(player) as libc::c_uint);
        P_SetPlayerMobjState((*player).mo, S_PLAY_JUMP);
    }
    if skyclimber != 0 {
        (*player).climbing = 0 as libc::c_int as uint8_t;
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >((*player).pflags as libc::c_uint | P_GetJumpFlags(player) as libc::c_uint);
        P_SetPlayerMobjState((*player).mo, S_PLAY_JUMP);
    }
    if (*cmd).sidemove as libc::c_int != 0 as libc::c_int
        || (*cmd).forwardmove as libc::c_int != 0 as libc::c_int
    {
        climb = true_0 as libc::c_int;
    } else {
        climb = false_0 as libc::c_int;
    }
    if (*player).climbing as libc::c_int != 0 && climb != 0
        && ((*(*player).mo).momx != 0 || (*(*player).mo).momy != 0
            || (*(*player).mo).momz != 0)
        && ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
            != S_PLAY_CLIMB as libc::c_int as libc::c_long
    {
        P_SetPlayerMobjState((*player).mo, S_PLAY_CLIMB);
    } else if (!((*(*player).mo).momx != 0 || (*(*player).mo).momy != 0
        || (*(*player).mo).momz != 0) || climb == 0)
        && ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
            != S_PLAY_CLING as libc::c_int as libc::c_long
    {
        P_SetPlayerMobjState((*player).mo, S_PLAY_CLING);
    }
    if (*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0
        && (*player).pflags as libc::c_uint
            & PF_JUMPSTASIS as libc::c_int as libc::c_uint == 0
    {
        (*player).climbing = 0 as libc::c_int as uint8_t;
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >((*player).pflags as libc::c_uint | P_GetJumpFlags(player) as libc::c_uint);
        P_SetPlayerMobjState((*player).mo, S_PLAY_JUMP);
        P_SetObjectMomZ(
            (*player).mo,
            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
            false_0 as libc::c_int,
        );
        P_Thrust(
            (*player).mo,
            (*(*player).mo).angle,
            FixedMul(
                -(4 as libc::c_int) * ((1 as libc::c_int) << 16 as libc::c_int),
                (*(*player).mo).scale,
            ),
        );
    }
    if demoplayback == 0
        || (if (*player).pflags as libc::c_uint
            & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
        {
            CS_LMAOGALOG as libc::c_int
        } else {
            0 as libc::c_int
        })
            | (if (*player).pflags as libc::c_uint
                & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
            {
                CS_STANDARD as libc::c_int
            } else {
                0 as libc::c_int
            }) == CS_LMAOGALOG as libc::c_int
    {
        let mut angdiff: angle_t = (P_GetLocalAngle(player))
            .wrapping_sub((*(*player).mo).angle);
        if angdiff < 0x80000000 as libc::c_uint
            && angdiff
                > FixedAngle(
                    90 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                )
        {
            P_SetLocalAngle(
                player,
                ((*(*player).mo).angle)
                    .wrapping_add(
                        FixedAngle(
                            90 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                        ),
                    ),
            );
        } else if angdiff > 0x80000000 as libc::c_uint
            && angdiff
                < InvAngle(
                    FixedAngle(
                        90 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    ),
                )
        {
            P_SetLocalAngle(
                player,
                ((*(*player).mo).angle)
                    .wrapping_sub(
                        FixedAngle(
                            90 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                        ),
                    ),
            );
        }
    }
    if (*player).climbing as libc::c_int == 0 as libc::c_int {
        P_SetPlayerMobjState((*player).mo, S_PLAY_JUMP);
    }
    if (*player).climbing as libc::c_int != 0 && P_IsObjectOnGround((*player).mo) != 0 {
        P_ResetPlayer(player);
        P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
    }
}
static mut teeterer: *mut mobj_t = 0 as *const mobj_t as *mut mobj_t;
static mut solidteeter: boolean = 0;
static mut highesttop: fixed_t = 0;
static mut couldteeter: boolean = 0;
static mut teeterxl: fixed_t = 0;
static mut teeterxh: fixed_t = 0;
static mut teeteryl: fixed_t = 0;
static mut teeteryh: fixed_t = 0;
unsafe extern "C" fn PIT_CheckSolidsTeeter(mut thing: *mut mobj_t) -> boolean {
    let mut blockdist: fixed_t = 0;
    let mut tiptop: fixed_t = FixedMul(
        24 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
        (*teeterer).scale,
    );
    let mut thingtop: fixed_t = (*thing).z + (*thing).height;
    let mut teeterertop: fixed_t = (*teeterer).z + (*teeterer).height;
    if teeterer.is_null() || thing.is_null() {
        return true_0 as libc::c_int;
    }
    if (*thing).flags & MF_SOLID as libc::c_int as uint32_t == 0 {
        return true_0 as libc::c_int;
    }
    if (*thing).flags & MF_NOCLIP as libc::c_int as uint32_t != 0 {
        return true_0 as libc::c_int;
    }
    if thing == teeterer {
        return true_0 as libc::c_int;
    }
    if !((*thing).player).is_null() && cv_tailspickup.value != 0
        && gametyperules & GTR_HIDEFROZEN as libc::c_int as uint32_t == 0
    {
        return true_0 as libc::c_int;
    }
    blockdist = (*teeterer).radius + (*thing).radius;
    if abs((*thing).x - (*teeterer).x) >= blockdist
        || abs((*thing).y - (*teeterer).y) >= blockdist
    {
        return true_0 as libc::c_int;
    }
    if (*teeterer).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        if thingtop < (*teeterer).z {
            return true_0 as libc::c_int;
        }
        if (*thing).z > highesttop {
            return true_0 as libc::c_int;
        }
        highesttop = (*thing).z;
        if (*thing).z > teeterertop + tiptop {
            solidteeter = true_0 as libc::c_int;
            return true_0 as libc::c_int;
        }
    } else {
        if (*thing).z > teeterertop {
            return true_0 as libc::c_int;
        }
        if thingtop < highesttop {
            return true_0 as libc::c_int;
        }
        highesttop = thingtop;
        if thingtop < (*teeterer).z - tiptop {
            solidteeter = true_0 as libc::c_int;
            return true_0 as libc::c_int;
        }
    }
    if (*teeterer).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0
        && (*thing).z
            - FixedMul((1 as libc::c_int) << 16 as libc::c_int, (*teeterer).scale)
            == teeterertop
        || (*teeterer).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int == 0
            && thingtop
                + FixedMul((1 as libc::c_int) << 16 as libc::c_int, (*teeterer).scale)
                == (*teeterer).z
    {
        let mut teeterdist: fixed_t = (*thing).radius
            - FixedMul(
                5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*teeterer).scale,
            );
        if abs((*teeterer).x - (*thing).x) > teeterdist
            || abs((*teeterer).y - (*thing).y) > teeterdist
        {
            if couldteeter != 0 {
                if (*thing).x - teeterdist < teeterxl {
                    teeterxl = (*thing).x - teeterdist;
                }
                if (*thing).x + teeterdist > teeterxh {
                    teeterxh = (*thing).x + teeterdist;
                }
                if (*thing).y - teeterdist < teeteryl {
                    teeteryl = (*thing).y - teeterdist;
                }
                if (*thing).y + teeterdist > teeteryh {
                    teeteryh = (*thing).y + teeterdist;
                }
                if (*teeterer).x < teeterxl {
                    return true_0 as libc::c_int;
                }
                if (*teeterer).x > teeterxh {
                    return true_0 as libc::c_int;
                }
                if (*teeterer).y < teeteryl {
                    return true_0 as libc::c_int;
                }
                if (*teeterer).y > teeteryh {
                    return true_0 as libc::c_int;
                }
                solidteeter = false_0 as libc::c_int;
                couldteeter = false_0 as libc::c_int;
                return false_0 as libc::c_int;
            } else {
                teeterxl = (*thing).x - teeterdist;
                teeterxh = (*thing).x + teeterdist;
                teeteryl = (*thing).y - teeterdist;
                teeteryh = (*thing).y + teeterdist;
            }
            couldteeter = true_0 as libc::c_int;
            return true_0 as libc::c_int;
        }
        solidteeter = false_0 as libc::c_int;
        couldteeter = false_0 as libc::c_int;
        return false_0 as libc::c_int;
    }
    solidteeter = false_0 as libc::c_int;
    return true_0 as libc::c_int;
}
unsafe extern "C" fn P_DoTeeter(mut player: *mut player_t) {
    let mut teeter: boolean = false_0 as libc::c_int;
    let mut roverfloor: boolean = 0;
    let mut floorheight: fixed_t = 0;
    let mut ceilingheight: fixed_t = 0;
    let mut topheight: fixed_t = 0;
    let mut bottomheight: fixed_t = 0;
    let tiptop: fixed_t = FixedMul(
        24 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
        (*(*player).mo).scale,
    );
    if !((*(*player).mo).standingslope).is_null()
        && (*(*(*player).mo).standingslope).zdelta
            >= ((1 as libc::c_int) << 16 as libc::c_int) / 2 as libc::c_int
    {
        teeter = true_0 as libc::c_int;
    } else {
        let mut i: uint8_t = 0;
        let mut sec: *mut sector_t = 0 as *mut sector_t;
        let mut highestceilingheight: fixed_t = -(2147483647 as libc::c_int)
            - 1 as libc::c_int;
        let mut lowestfloorheight: fixed_t = 2147483647 as libc::c_int;
        teeter = false_0 as libc::c_int;
        roverfloor = false_0 as libc::c_int;
        i = 0 as libc::c_int as uint8_t;
        while (i as libc::c_int) < 4 as libc::c_int {
            let mut rover: *mut ffloor_t = 0 as *mut ffloor_t;
            let mut checkx: fixed_t = (*(*player).mo).x
                + (if i as libc::c_int & 1 as libc::c_int != 0 {
                    -(1 as libc::c_int)
                } else {
                    1 as libc::c_int
                })
                    * FixedMul(
                        5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                        (*(*player).mo).scale,
                    );
            let mut checky: fixed_t = (*(*player).mo).y
                + (if i as libc::c_int & 2 as libc::c_int != 0 {
                    1 as libc::c_int
                } else {
                    -(1 as libc::c_int)
                })
                    * FixedMul(
                        5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                        (*(*player).mo).scale,
                    );
            sec = (*R_PointInSubsector(checkx, checky)).sector;
            ceilingheight = P_GetSectorCeilingZAt(sec, checkx, checky);
            floorheight = P_GetSectorFloorZAt(sec, checkx, checky);
            highestceilingheight = if ceilingheight > highestceilingheight {
                ceilingheight
            } else {
                highestceilingheight
            };
            lowestfloorheight = if floorheight < lowestfloorheight {
                floorheight
            } else {
                lowestfloorheight
            };
            if ((*sec).ffloors).is_null() {
                i = i.wrapping_add(1);
                i;
            } else {
                let mut current_block_22: u64;
                rover = (*sec).ffloors;
                while !rover.is_null() {
                    if !((*rover).fofflags as libc::c_uint
                        & FOF_EXISTS as libc::c_int as libc::c_uint == 0)
                    {
                        topheight = P_GetFFloorTopZAt(
                            rover,
                            (*(*player).mo).x,
                            (*(*player).mo).y,
                        );
                        bottomheight = P_GetFFloorBottomZAt(
                            rover,
                            (*(*player).mo).x,
                            (*(*player).mo).y,
                        );
                        if P_CheckSolidLava(rover) != 0 {
                            current_block_22 = 12124785117276362961;
                        } else if !((*rover).fofflags as libc::c_uint
                            & FOF_BLOCKPLAYER as libc::c_int as libc::c_uint != 0
                            || (*rover).fofflags as libc::c_uint
                                & FOF_QUICKSAND as libc::c_int as libc::c_uint != 0)
                        {
                            current_block_22 = 4166486009154926805;
                        } else {
                            current_block_22 = 12124785117276362961;
                        }
                        match current_block_22 {
                            4166486009154926805 => {}
                            _ => {
                                if (*(*player).mo).eflags as libc::c_int
                                    & MFE_VERTICALFLIP as libc::c_int != 0
                                {
                                    if !(bottomheight > ceilingheight) {
                                        if bottomheight
                                            > (*(*player).mo).z + (*(*player).mo).height + tiptop
                                            || topheight < (*(*player).mo).z
                                                && (*(*player).mo).z + (*(*player).mo).height
                                                    < ceilingheight - tiptop
                                        {
                                            teeter = true_0 as libc::c_int;
                                            roverfloor = true_0 as libc::c_int;
                                        } else {
                                            teeter = false_0 as libc::c_int;
                                            roverfloor = true_0 as libc::c_int;
                                            break;
                                        }
                                    }
                                } else if !(topheight < floorheight) {
                                    if topheight < (*(*player).mo).z - tiptop
                                        || bottomheight > (*(*player).mo).z + (*(*player).mo).height
                                            && (*(*player).mo).z > floorheight + tiptop
                                    {
                                        teeter = true_0 as libc::c_int;
                                        roverfloor = true_0 as libc::c_int;
                                    } else {
                                        teeter = false_0 as libc::c_int;
                                        roverfloor = true_0 as libc::c_int;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    rover = (*rover).next;
                }
                break;
            }
        }
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            if teeter == 0 && roverfloor == 0
                && highestceilingheight > (*(*player).mo).ceilingz + tiptop
            {
                teeter = true_0 as libc::c_int;
            }
        } else if teeter == 0 && roverfloor == 0
            && lowestfloorheight < (*(*player).mo).floorz - tiptop
        {
            teeter = true_0 as libc::c_int;
        }
    }
    let mut bx: int32_t = 0;
    let mut by: int32_t = 0;
    let mut xl: int32_t = 0;
    let mut xh: int32_t = 0;
    let mut yl: int32_t = 0;
    let mut yh: int32_t = 0;
    yh = (((*(*player).mo).y + (*(*player).mo).radius - bmaporgy) as libc::c_uint
        >> 16 as libc::c_int + 7 as libc::c_int) as int32_t;
    yl = (((*(*player).mo).y - (*(*player).mo).radius - bmaporgy) as libc::c_uint
        >> 16 as libc::c_int + 7 as libc::c_int) as int32_t;
    xh = (((*(*player).mo).x + (*(*player).mo).radius - bmaporgx) as libc::c_uint
        >> 16 as libc::c_int + 7 as libc::c_int) as int32_t;
    xl = (((*(*player).mo).x - (*(*player).mo).radius - bmaporgx) as libc::c_uint
        >> 16 as libc::c_int + 7 as libc::c_int) as int32_t;
    if xl > xh {
        xl = 0 as libc::c_int;
    }
    if yl > yh {
        yl = 0 as libc::c_int;
    }
    validcount = validcount.wrapping_add(1);
    validcount;
    by = yl;
    while by <= yh {
        bx = xl;
        while bx <= xh {
            let mut offset: int32_t = 0;
            let mut plink: *mut polymaplink_t = 0 as *mut polymaplink_t;
            if !(bx < 0 as libc::c_int || by < 0 as libc::c_int || bx >= bmapwidth
                || by >= bmapheight)
            {
                offset = by * bmapwidth + bx;
                plink = *polyblocklinks.offset(offset as isize);
                while !plink.is_null() {
                    let mut po: *mut polyobj_t = (*plink).po;
                    if (*po).validcount != validcount {
                        let mut polysec: *mut sector_t = 0 as *mut sector_t;
                        let mut polytop: fixed_t = 0;
                        let mut polybottom: fixed_t = 0;
                        (*po).validcount = validcount;
                        if (*po).flags & POF_SOLID as libc::c_int == 0 {
                            plink = (*plink).link.next as *mut polymaplink_t;
                            continue;
                        } else if P_MobjInsidePolyobj(po, (*player).mo) == 0 {
                            plink = (*plink).link.next as *mut polymaplink_t;
                            continue;
                        } else {
                            polysec = (**((*po).lines).offset(0 as libc::c_int as isize))
                                .backsector;
                            if (*po).flags & POF_CLIPPLANES as libc::c_int != 0 {
                                polytop = (*polysec).ceilingheight;
                                polybottom = (*polysec).floorheight;
                            } else {
                                polytop = 2147483647 as libc::c_int;
                                polybottom = -(2147483647 as libc::c_int)
                                    - 1 as libc::c_int;
                            }
                            if (*(*player).mo).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                if polybottom > (*(*player).mo).ceilingz {
                                    plink = (*plink).link.next as *mut polymaplink_t;
                                    continue;
                                } else if polybottom
                                    > (*(*player).mo).z + (*(*player).mo).height + tiptop
                                    || polytop < (*(*player).mo).z
                                        && (*(*player).mo).z + (*(*player).mo).height
                                            < (*(*player).mo).ceilingz - tiptop
                                {
                                    teeter = true_0 as libc::c_int;
                                } else {
                                    teeter = false_0 as libc::c_int;
                                    break;
                                }
                            } else if polytop < (*(*player).mo).floorz {
                                plink = (*plink).link.next as *mut polymaplink_t;
                                continue;
                            } else if polytop < (*(*player).mo).z - tiptop
                                || polybottom > (*(*player).mo).z + (*(*player).mo).height
                                    && (*(*player).mo).z > (*(*player).mo).floorz + tiptop
                            {
                                teeter = true_0 as libc::c_int;
                            } else {
                                teeter = false_0 as libc::c_int;
                                break;
                            }
                        }
                    }
                    plink = (*plink).link.next as *mut polymaplink_t;
                }
            }
            bx += 1;
            bx;
        }
        by += 1;
        by;
    }
    if teeter != 0 {
        let mut oldtmthing: *mut mobj_t = tmthing;
        teeterer = (*player).mo;
        P_SetTarget2(&mut tmthing, teeterer);
        teeterxh = (*(*player).mo).x;
        teeterxl = teeterxh;
        teeteryh = (*(*player).mo).y;
        teeteryl = teeteryh;
        couldteeter = false_0 as libc::c_int;
        solidteeter = teeter;
        by = yl;
        's_456: while by <= yh {
            bx = xl;
            while bx <= xh {
                highesttop = -(2147483647 as libc::c_int) - 1 as libc::c_int;
                if P_BlockThingsIterator(
                    bx,
                    by,
                    Some(
                        PIT_CheckSolidsTeeter
                            as unsafe extern "C" fn(*mut mobj_t) -> boolean,
                    ),
                ) == 0
                {
                    break 's_456;
                }
                bx += 1;
                bx;
            }
            by += 1;
            by;
        }
        teeter = solidteeter;
        P_SetTarget2(&mut tmthing, oldtmthing);
    }
    if teeter != 0 {
        if (*player).panim as libc::c_uint == PA_IDLE as libc::c_int as libc::c_uint {
            P_SetPlayerMobjState((*player).mo, S_PLAY_EDGE);
        }
    } else if (*player).panim as libc::c_uint == PA_EDGE as libc::c_int as libc::c_uint {
        P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
    }
}
unsafe extern "C" fn P_SetWeaponDelay(mut player: *mut player_t, mut delay: int32_t) {
    (*player).weapondelay = delay;
    if (*player).skin == 2 as libc::c_int {
        (*player).weapondelay *= 2 as libc::c_int;
        (*player).weapondelay /= 3 as libc::c_int;
    }
}
unsafe extern "C" fn P_DrainWeaponAmmo(mut player: *mut player_t, mut power: int32_t) {
    (*player)
        .powers[power as usize] = ((*player).powers[power as usize]).wrapping_sub(1);
    (*player).powers[power as usize];
    if ((*player).rings as libc::c_int) < 1 as libc::c_int {
        (*player).ammoremovalweapon = (*player).currentweapon;
        (*player).ammoremovaltimer = ammoremovaltics as tic_t;
        if (*player).powers[power as usize] as libc::c_int > 0 as libc::c_int {
            (*player)
                .powers[power
                as usize] = ((*player).powers[power as usize]).wrapping_sub(1);
            (*player).powers[power as usize];
            (*player).ammoremoval = 2 as libc::c_int as uint16_t;
        } else {
            (*player).ammoremoval = 1 as libc::c_int as uint16_t;
        }
    } else {
        (*player).rings -= 1;
        (*player).rings;
    };
}
unsafe extern "C" fn P_DoFiring(mut player: *mut player_t, mut cmd: *mut ticcmd_t) {
    let mut i: int32_t = 0;
    let mut mo: *mut mobj_t = 0 as *mut mobj_t;
    if (*cmd).buttons as libc::c_int
        & (BT_ATTACK as libc::c_int | BT_FIRENORMAL as libc::c_int) == 0
    {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_ATTACKDOWN as libc::c_int) as libc::c_uint,
        );
        return;
    }
    if (*player).pflags as libc::c_uint & PF_ATTACKDOWN as libc::c_int as libc::c_uint
        != 0 || (*player).climbing as libc::c_int != 0
        || G_TagGametype() != 0
            && (*player).pflags as libc::c_uint & PF_TAGIT as libc::c_int as libc::c_uint
                == 0
    {
        return;
    }
    if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
        & SH_STACK as libc::c_int == SH_FIREFLOWER as libc::c_int
        && (*player).weapondelay == 0
    {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                | PF_ATTACKDOWN as libc::c_int as libc::c_uint,
        );
        mo = P_SPMAngle(
            (*player).mo,
            MT_FIREBALL,
            (*(*player).mo).angle,
            true_0 as libc::c_int as uint8_t,
            0 as libc::c_int as uint32_t,
        );
        if !mo.is_null() {
            P_InstaThrust(
                mo,
                (*(*player).mo).angle,
                ((*(*mo).info).speed >> 16 as libc::c_int) * (*(*player).mo).scale
                    + (*player).speed,
            );
        }
        S_StartSound((*player).mo as *const libc::c_void, sfx_mario7);
        P_SetWeaponDelay(player, 35 as libc::c_int);
        return;
    }
    if G_RingSlingerGametype() == 0 || (*player).weapondelay != 0 {
        return;
    }
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >((*player).pflags as libc::c_uint | PF_ATTACKDOWN as libc::c_int as libc::c_uint);
    let mut current_block_76: u64;
    if (*cmd).buttons as libc::c_int & BT_FIRENORMAL as libc::c_int != 0 {
        current_block_76 = 15449138515464383272;
    } else if (*player).currentweapon == 2 as libc::c_int
        && (*player).powers[pw_bouncering as libc::c_int as usize] as libc::c_int != 0
    {
        P_DrainWeaponAmmo(player, pw_bouncering as libc::c_int);
        P_SetWeaponDelay(player, 35 as libc::c_int / 4 as libc::c_int);
        mo = P_SPMAngle(
            (*player).mo,
            MT_THROWNBOUNCE,
            (*(*player).mo).angle,
            true_0 as libc::c_int as uint8_t,
            MF2_BOUNCERING as libc::c_int as uint32_t,
        );
        if !mo.is_null() {
            (*mo).fuse = 3 as libc::c_int * 35 as libc::c_int;
        }
        current_block_76 = 7252614138838059896;
    } else if (*player).currentweapon == 6 as libc::c_int
        && (*player).powers[pw_railring as libc::c_int as usize] as libc::c_int != 0
    {
        P_DrainWeaponAmmo(player, pw_railring as libc::c_int);
        P_SetWeaponDelay(
            player,
            3 as libc::c_int * 35 as libc::c_int / 2 as libc::c_int,
        );
        mo = P_SPMAngle(
            (*player).mo,
            MT_REDRING,
            (*(*player).mo).angle,
            true_0 as libc::c_int as uint8_t,
            (MF2_RAILRING as libc::c_int | MF2_DONTDRAW as libc::c_int) as uint32_t,
        );
        S_StartSound((*player).mo as *const libc::c_void, sfx_rail1);
        current_block_76 = 7252614138838059896;
    } else if (*player).currentweapon == 1 as libc::c_int
        && (*player).powers[pw_automaticring as libc::c_int as usize] as libc::c_int != 0
    {
        P_DrainWeaponAmmo(player, pw_automaticring as libc::c_int);
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_ATTACKDOWN as libc::c_int) as libc::c_uint,
        );
        P_SetWeaponDelay(player, 2 as libc::c_int);
        mo = P_SPMAngle(
            (*player).mo,
            MT_THROWNAUTOMATIC,
            (*(*player).mo).angle,
            true_0 as libc::c_int as uint8_t,
            MF2_AUTOMATIC as libc::c_int as uint32_t,
        );
        current_block_76 = 7252614138838059896;
    } else if (*player).currentweapon == 5 as libc::c_int
        && (*player).powers[pw_explosionring as libc::c_int as usize] as libc::c_int != 0
    {
        P_DrainWeaponAmmo(player, pw_explosionring as libc::c_int);
        P_SetWeaponDelay(
            player,
            3 as libc::c_int * 35 as libc::c_int / 2 as libc::c_int,
        );
        mo = P_SPMAngle(
            (*player).mo,
            MT_THROWNEXPLOSION,
            (*(*player).mo).angle,
            true_0 as libc::c_int as uint8_t,
            MF2_EXPLOSION as libc::c_int as uint32_t,
        );
        current_block_76 = 7252614138838059896;
    } else if (*player).currentweapon == 4 as libc::c_int
        && (*player).powers[pw_grenadering as libc::c_int as usize] as libc::c_int != 0
    {
        P_DrainWeaponAmmo(player, pw_grenadering as libc::c_int);
        P_SetWeaponDelay(player, 35 as libc::c_int / 3 as libc::c_int);
        mo = P_SPMAngle(
            (*player).mo,
            MT_THROWNGRENADE,
            (*(*player).mo).angle,
            true_0 as libc::c_int as uint8_t,
            MF2_EXPLOSION as libc::c_int as uint32_t,
        );
        if !mo.is_null() {
            (*mo).fuse = (*(*mo).info).reactiontime;
        }
        current_block_76 = 7252614138838059896;
    } else {
        if (*player).currentweapon == 3 as libc::c_int
            && (*player).powers[pw_scatterring as libc::c_int as usize] as libc::c_int
                != 0
        {
            let mut oldz: fixed_t = (*(*player).mo).z;
            let mut shotangle: angle_t = (*(*player).mo).angle;
            let mut oldaiming: angle_t = (*player).aiming;
            P_DrainWeaponAmmo(player, pw_scatterring as libc::c_int);
            P_SetWeaponDelay(
                player,
                2 as libc::c_int * 35 as libc::c_int / 3 as libc::c_int,
            );
            mo = P_SPMAngle(
                (*player).mo,
                MT_THROWNSCATTER,
                (*(*player).mo).angle,
                true_0 as libc::c_int as uint8_t,
                MF2_SCATTER as libc::c_int as uint32_t,
            );
            if !mo.is_null() {
                shotangle = R_PointToAngle2(
                    (*(*player).mo).x,
                    (*(*player).mo).y,
                    (*mo).x,
                    (*mo).y,
                );
            }
            mo = P_SPMAngle(
                (*player).mo,
                MT_THROWNSCATTER,
                shotangle.wrapping_sub(0x16c16c1 as libc::c_int as angle_t),
                true_0 as libc::c_int as uint8_t,
                MF2_SCATTER as libc::c_int as uint32_t,
            );
            mo = P_SPMAngle(
                (*player).mo,
                MT_THROWNSCATTER,
                shotangle.wrapping_add(0x16c16c1 as libc::c_int as angle_t),
                true_0 as libc::c_int as uint8_t,
                MF2_SCATTER as libc::c_int as uint32_t,
            );
            (*(*player).mo).z
                += FixedMul(
                    12 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    (*(*player).mo).scale,
                );
            (*player)
                .aiming = ((*player).aiming)
                .wrapping_add(0xb60b61 as libc::c_int as angle_t);
            mo = P_SPMAngle(
                (*player).mo,
                MT_THROWNSCATTER,
                shotangle,
                true_0 as libc::c_int as uint8_t,
                MF2_SCATTER as libc::c_int as uint32_t,
            );
            (*(*player).mo).z
                -= FixedMul(
                    24 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    (*(*player).mo).scale,
                );
            (*player)
                .aiming = ((*player).aiming)
                .wrapping_sub(0x16c16c1 as libc::c_int as angle_t);
            mo = P_SPMAngle(
                (*player).mo,
                MT_THROWNSCATTER,
                shotangle,
                true_0 as libc::c_int as uint8_t,
                MF2_SCATTER as libc::c_int as uint32_t,
            );
            (*(*player).mo).z = oldz;
            (*player).aiming = oldaiming;
            return;
        }
        current_block_76 = 15449138515464383272;
    }
    match current_block_76 {
        15449138515464383272 => {
            if (*player).currentweapon == 0 as libc::c_int
                && (*player).powers[pw_infinityring as libc::c_int as usize]
                    as libc::c_int != 0
            {
                P_SetWeaponDelay(player, 35 as libc::c_int / 4 as libc::c_int);
                mo = P_SPMAngle(
                    (*player).mo,
                    MT_THROWNINFINITY,
                    (*(*player).mo).angle,
                    true_0 as libc::c_int as uint8_t,
                    0 as libc::c_int as uint32_t,
                );
                (*player)
                    .powers[pw_infinityring as libc::c_int
                    as usize] = ((*player)
                    .powers[pw_infinityring as libc::c_int as usize])
                    .wrapping_sub(1);
                (*player).powers[pw_infinityring as libc::c_int as usize];
            } else {
                if (*player).rings as libc::c_int <= 0 as libc::c_int {
                    return;
                }
                P_SetWeaponDelay(player, 35 as libc::c_int / 4 as libc::c_int);
                mo = P_SPMAngle(
                    (*player).mo,
                    MT_REDRING,
                    (*(*player).mo).angle,
                    true_0 as libc::c_int as uint8_t,
                    0 as libc::c_int as uint32_t,
                );
                if !mo.is_null() {
                    P_ColorTeamMissile(mo, player);
                }
                (*player).rings -= 1;
                (*player).rings;
            }
        }
        _ => {}
    }
    if !mo.is_null() {
        if (*mo).flags & MF_MISSILE as libc::c_int as uint32_t != 0
            && (*mo).flags2 & MF2_RAILRING as libc::c_int as uint32_t != 0
        {
            let nblockmap: boolean = ((*mo).flags
                & MF_NOBLOCKMAP as libc::c_int as uint32_t == 0) as libc::c_int;
            i = 0 as libc::c_int;
            while i < 256 as libc::c_int {
                if nblockmap != 0 {
                    P_UnsetThingPosition(mo);
                    (*mo).flags |= MF_NOBLOCKMAP as libc::c_int as uint32_t;
                    P_SetThingPosition(mo);
                }
                if i & 1 as libc::c_int != 0 {
                    P_SpawnMobj((*mo).x, (*mo).y, (*mo).z, MT_SPARK);
                }
                if P_RailThinker(mo) != 0 {
                    break;
                }
                i += 1;
                i;
            }
            S_StartSound(mo as *const libc::c_void, sfx_rail2);
        }
    }
}
unsafe extern "C" fn P_DoSuperStuff(mut player: *mut player_t) {
    let mut spark: *mut mobj_t = 0 as *mut mobj_t;
    let mut cmd: *mut ticcmd_t = &mut (*player).cmd;
    if (*(*player).mo).state
        >= &mut *states.as_mut_ptr().offset(S_PLAY_SUPER_TRANS1 as libc::c_int as isize)
            as *mut state_t
        && (*(*player).mo).state
            < &mut *states
                .as_mut_ptr()
                .offset(S_PLAY_SUPER_TRANS6 as libc::c_int as isize) as *mut state_t
    {
        return;
    }
    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_NIGHTSMODE as libc::c_int
    {
        return;
    }
    if (*player).powers[pw_super as libc::c_int as usize] != 0 {
        if !(emeralds as libc::c_int
            & (1 as libc::c_int | 2 as libc::c_int | 4 as libc::c_int | 8 as libc::c_int
                | 16 as libc::c_int | 32 as libc::c_int | 64 as libc::c_int)
            == 1 as libc::c_int | 2 as libc::c_int | 4 as libc::c_int | 8 as libc::c_int
                | 16 as libc::c_int | 32 as libc::c_int | 64 as libc::c_int
            && (*player).charflags & SF_SUPER as libc::c_int as uint32_t != 0)
        {
            (*player)
                .powers[pw_super as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
            P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
            if P_IsLocalPlayer(player) != 0 {
                music_stack_noposition = true_0 as libc::c_int;
                music_stack_fadeout = (1000 as libc::c_int / 2 as libc::c_int)
                    as uint32_t;
            }
            P_RestoreMusic(player);
            P_SpawnShieldOrb(player);
            if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
                & SH_STACK as libc::c_int == SH_FIREFLOWER as libc::c_int
            {
                (*(*player).mo).color = SKINCOLOR_WHITE as libc::c_int as uint16_t;
                G_GhostAddColor(GHC_FIREFLOWER);
            } else {
                (*(*player).mo).color = (*player).skincolor;
                G_GhostAddColor(GHC_NORMAL);
            }
            if G_CoopGametype() == 0 {
                HU_SetCEchoFlags(0 as libc::c_int);
                HU_SetCEchoDuration(5 as libc::c_int);
                HU_DoCEcho(
                    va(
                        b"%s\\is no longer super.\\\\\\\\\0" as *const u8
                            as *const libc::c_char,
                        (player_names[player.offset_from(players.as_mut_ptr())
                            as libc::c_long as usize])
                            .as_mut_ptr(),
                    ),
                );
            }
            return;
        }
        (*(*player).mo)
            .color = (if (*player).pflags as libc::c_uint
            & PF_GODMODE as libc::c_int as libc::c_uint != 0
            && cv_debug == 0 as libc::c_int
        {
            SKINCOLOR_SUPERSILVER1 as libc::c_int
                + 5 as libc::c_int
                    * ((leveltime as libc::c_int >> 1 as libc::c_int) % 7 as libc::c_int)
        } else {
            skins[(*player).skin as usize].supercolor as libc::c_int
                + abs(
                    ((*player).powers[pw_super as libc::c_int as usize] as libc::c_int
                        >> 1 as libc::c_int) % 9 as libc::c_int - 4 as libc::c_int,
                )
        }) as uint16_t;
        G_GhostAddColor(GHC_SUPER);
        if (*(*player).mo).state
            == &mut *states
                .as_mut_ptr()
                .offset(S_PLAY_SUPER_TRANS6 as libc::c_int as isize) as *mut state_t
        {
            return;
        }
        if leveltime % 35 as libc::c_int as tic_t == 0 as libc::c_int as tic_t
            && (*player).exiting == 0
        {
            (*player).rings -= 1;
            (*player).rings;
        }
        if ((*cmd).forwardmove as libc::c_int != 0 as libc::c_int
            || (*cmd).sidemove as libc::c_int != 0 as libc::c_int
            || (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int != 0)
            && leveltime % 35 as libc::c_int as tic_t == 0
            && ((*(*player).mo).momx != 0 || (*(*player).mo).momy != 0)
        {
            spark = P_SpawnMobj(
                (*(*player).mo).x,
                (*(*player).mo).y,
                (*(*player).mo).z,
                MT_SUPERSPARK,
            );
            (*spark).destscale = (*(*player).mo).scale;
            P_SetScale(spark, (*(*player).mo).scale);
        }
        if (*player).rings as libc::c_int <= 0 as libc::c_int || (*player).exiting != 0 {
            (*player)
                .powers[pw_emeralds as libc::c_int
                as usize] = 0 as libc::c_int as uint16_t;
            P_SpawnGhostMobj((*player).mo);
            (*player)
                .powers[pw_super as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
            if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
                & SH_STACK as libc::c_int == SH_FIREFLOWER as libc::c_int
            {
                (*(*player).mo).color = SKINCOLOR_WHITE as libc::c_int as uint16_t;
                G_GhostAddColor(GHC_FIREFLOWER);
            } else {
                (*(*player).mo).color = (*player).skincolor;
                G_GhostAddColor(GHC_NORMAL);
            }
            if G_CoopGametype() == 0 {
                (*player)
                    .powers[pw_flashing as libc::c_int
                    as usize] = (flashingtics as libc::c_int - 1 as libc::c_int)
                    as uint16_t;
            }
            if (*(*player).mo).sprite2 as libc::c_int & 0x80 as libc::c_int != 0 {
                P_SetPlayerMobjState(
                    (*player).mo,
                    ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                        as libc::c_long as statenum_t,
                );
            }
            if G_CoopGametype() == 0 {
                S_StartSound(0 as *const libc::c_void, sfx_s3k66);
                HU_SetCEchoFlags(0 as libc::c_int);
                HU_SetCEchoDuration(5 as libc::c_int);
                HU_DoCEcho(
                    va(
                        b"%s\\is no longer super.\\\\\\\\\0" as *const u8
                            as *const libc::c_char,
                        (player_names[player.offset_from(players.as_mut_ptr())
                            as libc::c_long as usize])
                            .as_mut_ptr(),
                    ),
                );
            }
            if P_IsLocalPlayer(player) != 0 {
                music_stack_noposition = true_0 as libc::c_int;
                music_stack_fadeout = (1000 as libc::c_int / 2 as libc::c_int)
                    as uint32_t;
            }
            P_RestoreMusic(player);
            P_SpawnShieldOrb(player);
        }
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_SuperReady(mut player: *mut player_t) -> boolean {
    if (*player).powers[pw_super as libc::c_int as usize] == 0
        && (*player).powers[pw_invulnerability as libc::c_int as usize] == 0
        && (*player).powers[pw_tailsfly as libc::c_int as usize] == 0
        && (*player).charflags & SF_SUPER as libc::c_int as uint32_t != 0
        && (*player).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint
            != 0
        && (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
            & SH_NOSTACK as libc::c_int == 0
        && maptol & TOL_NIGHTS as libc::c_int as uint32_t == 0
        && emeralds as libc::c_int
            & (1 as libc::c_int | 2 as libc::c_int | 4 as libc::c_int | 8 as libc::c_int
                | 16 as libc::c_int | 32 as libc::c_int | 64 as libc::c_int)
            == 1 as libc::c_int | 2 as libc::c_int | 4 as libc::c_int | 8 as libc::c_int
                | 16 as libc::c_int | 32 as libc::c_int | 64 as libc::c_int
        && (*player).rings as libc::c_int >= 50 as libc::c_int
    {
        return true_0 as libc::c_int;
    }
    return false_0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_DoJump(
    mut player: *mut player_t,
    mut soundandstate: boolean,
) {
    let mut factor: fixed_t = 0;
    let dist6: fixed_t = FixedMul(
        FixedDiv((*player).speed, (*(*player).mo).scale),
        (*player).actionspd,
    ) / 20 as libc::c_int;
    if (*player).pflags as libc::c_uint & PF_JUMPSTASIS as libc::c_int as libc::c_uint
        != 0
    {
        return;
    }
    if (*player).jumpfactor == 0 {
        return;
    }
    if (*player).climbing != 0 {
        if (*player).powers[pw_super as libc::c_int as usize] != 0 {
            (*(*player).mo)
                .momz = 5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
        } else if (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int
            != 0
        {
            (*(*player).mo)
                .momz = 2 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
        } else {
            (*(*player).mo)
                .momz = 15 as libc::c_int
                * (((1 as libc::c_int) << 16 as libc::c_int) / 4 as libc::c_int);
        }
        (*(*player).mo)
            .angle = ((*(*player).mo).angle).wrapping_sub(0x80000000 as libc::c_uint);
        (*player).drawangle = (*(*player).mo).angle;
        if demoplayback == 0
            || (if (*player).pflags as libc::c_uint
                & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
            {
                CS_LMAOGALOG as libc::c_int
            } else {
                0 as libc::c_int
            })
                | (if (*player).pflags as libc::c_uint
                    & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                {
                    CS_STANDARD as libc::c_int
                } else {
                    0 as libc::c_int
                }) == CS_LMAOGALOG as libc::c_int
        {
            P_SetPlayerAngle(player, (*(*player).mo).angle);
        }
        (*player).climbing = 0 as libc::c_int as uint8_t;
        P_InstaThrust(
            (*player).mo,
            (*(*player).mo).angle,
            FixedMul(
                6 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*(*player).mo).scale,
            ),
        );
    } else if P_InQuicksand((*player).mo) != 0 {
        if (*(*player).mo).ceilingz - (*(*player).mo).floorz
            <= (*(*player).mo).height - 1 as libc::c_int
        {
            return;
        }
        (*(*player).mo).momz
            += 39 as libc::c_int
                * (((1 as libc::c_int) << 16 as libc::c_int) / 4 as libc::c_int)
                >> 1 as libc::c_int;
        if (*(*player).mo).momz
            >= 6 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
        {
            (*(*player).mo)
                .momz = 6 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
        } else if (*(*player).mo).momz < 0 as libc::c_int {
            (*(*player).mo)
                .momz = 39 as libc::c_int
                * (((1 as libc::c_int) << 16 as libc::c_int) / 4 as libc::c_int)
                >> 1 as libc::c_int;
        }
    } else if (*player).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint
        == 0
    {
        if (*(*player).mo).ceilingz - (*(*player).mo).floorz
            <= (*(*player).mo).height - 1 as libc::c_int
        {
            return;
        }
        if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_PTERABYTE as libc::c_int
        {
            S_StartSound((*player).mo as *const libc::c_void, sfx_s3kd7s);
            (*(*(*player).mo).tracer).cusval += 10 as libc::c_int;
            (*(*(*player).mo).tracer)
                .watertop = P_RandomRange(
                -(*(*(*player).mo).tracer).cusval,
                (*(*(*player).mo).tracer).cusval,
            ) << 16 as libc::c_int - 1 as libc::c_int;
            (*(*(*player).mo).tracer)
                .waterbottom = P_RandomRange(
                -(*(*(*player).mo).tracer).cusval,
                (*(*(*player).mo).tracer).cusval,
            ) << 16 as libc::c_int - 1 as libc::c_int;
            (*(*(*player).mo).tracer)
                .cvmem = P_RandomRange(
                -(*(*(*player).mo).tracer).cusval,
                (*(*(*player).mo).tracer).cusval,
            ) << 16 as libc::c_int - 1 as libc::c_int;
            return;
        }
        if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_PLAYER as libc::c_int
        {
            (*(*player).mo)
                .momz = 9 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
            (*player)
                .powers[pw_carry as libc::c_int
                as usize] = CR_NONE as libc::c_int as uint16_t;
            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
            if player.offset_from(players.as_mut_ptr()) as libc::c_long
                == consoleplayer as libc::c_long && botingame != 0
            {
                CV_SetValue(
                    &mut *cv_analog.as_mut_ptr().offset(1 as libc::c_int as isize),
                    true_0 as libc::c_int,
                );
            }
        } else if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_GENERIC as libc::c_int
        {
            (*(*player).mo)
                .momz = 9 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
            (*player)
                .powers[pw_carry as libc::c_int
                as usize] = CR_NONE as libc::c_int as uint16_t;
            if (*(*(*player).mo).tracer).flags & MF_MISSILE as libc::c_int as uint32_t
                == 0
            {
                P_SetTarget2(&mut (*(*(*player).mo).tracer).target, 0 as *mut mobj_t);
            }
            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
        } else if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_ROPEHANG as libc::c_int
        {
            (*(*player).mo)
                .momz = 12 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
            (*player)
                .powers[pw_carry as libc::c_int
                as usize] = CR_NONE as libc::c_int as uint16_t;
            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
        } else if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_ROLLOUT as libc::c_int
        {
            (*(*player).mo)
                .momz = 9 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
            if !((*(*player).mo).tracer).is_null() {
                if P_MobjFlip((*(*player).mo).tracer) as libc::c_int
                    * (*(*(*player).mo).tracer).momz > 0 as libc::c_int
                {
                    (*(*player).mo).momz += (*(*(*player).mo).tracer).momz;
                }
                if P_IsObjectOnGround((*(*player).mo).tracer) == 0 {
                    P_SetObjectMomZ(
                        (*(*player).mo).tracer,
                        -(9 as libc::c_int) * ((1 as libc::c_int) << 16 as libc::c_int),
                        true_0 as libc::c_int,
                    );
                }
                (*(*(*player).mo).tracer).flags
                    |= MF_PUSHABLE as libc::c_int as uint32_t;
                P_SetTarget2(&mut (*(*(*player).mo).tracer).tracer, 0 as *mut mobj_t);
            }
            (*player)
                .powers[pw_carry as libc::c_int
                as usize] = CR_NONE as libc::c_int as uint16_t;
            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
        } else if (*(*player).mo).eflags as libc::c_int & MFE_GOOWATER as libc::c_int
            != 0
        {
            (*(*player).mo)
                .momz = 7 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
            if (*player).charability as libc::c_int == CA_JUMPBOOST as libc::c_int
                && onground != 0
            {
                if (*player).charflags & SF_MULTIABILITY as libc::c_int as uint32_t != 0
                {
                    (*(*player).mo).momz
                        += FixedMul(
                            ((1 as libc::c_int) << 16 as libc::c_int) / 4 as libc::c_int,
                            dist6,
                        );
                } else {
                    (*(*player).mo).momz
                        += FixedMul(
                            ((1 as libc::c_int) << 16 as libc::c_int) / 8 as libc::c_int,
                            dist6,
                        );
                }
            }
        } else if maptol & TOL_NIGHTS as libc::c_int as uint32_t != 0 {
            (*(*player).mo)
                .momz = 18 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
        } else if (*player).powers[pw_super as libc::c_int as usize] as libc::c_int != 0
            && (*player).charflags & SF_NOSUPERJUMPBOOST as libc::c_int as uint32_t == 0
        {
            (*(*player).mo)
                .momz = 13 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
            if (*player).charability as libc::c_int == CA_JUMPBOOST as libc::c_int {
                if (*player).charflags & SF_MULTIABILITY as libc::c_int as uint32_t != 0
                {
                    (*(*player).mo).momz
                        += FixedMul(
                            ((1 as libc::c_int) << 16 as libc::c_int) / 4 as libc::c_int,
                            dist6,
                        );
                } else {
                    (*(*player).mo).momz
                        += FixedMul(
                            ((1 as libc::c_int) << 16 as libc::c_int) / 8 as libc::c_int,
                            dist6,
                        );
                }
            }
        } else {
            (*(*player).mo)
                .momz = 39 as libc::c_int
                * (((1 as libc::c_int) << 16 as libc::c_int) / 4 as libc::c_int);
            if (*player).charability as libc::c_int == CA_JUMPBOOST as libc::c_int
                && onground != 0
            {
                if (*player).charflags & SF_MULTIABILITY as libc::c_int as uint32_t != 0
                {
                    (*(*player).mo).momz
                        += FixedMul(
                            ((1 as libc::c_int) << 16 as libc::c_int) / 4 as libc::c_int,
                            dist6,
                        );
                } else {
                    (*(*player).mo).momz
                        += FixedMul(
                            ((1 as libc::c_int) << 16 as libc::c_int) / 8 as libc::c_int,
                            dist6,
                        );
                }
            }
        }
        if (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int != 0 {
            (*(*player).mo)
                .momz = FixedMul(
                (*(*player).mo).momz,
                FixedDiv(
                    117 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    200 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                ),
            );
        }
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                | PF_STARTJUMP as libc::c_int as libc::c_uint,
        );
    }
    factor = (*player).jumpfactor;
    if maptol & TOL_2D as libc::c_int as uint32_t != 0
        || (*(*player).mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0
    {
        factor += (*player).jumpfactor / 10 as libc::c_int;
    }
    if (*player).charflags & SF_MULTIABILITY as libc::c_int as uint32_t != 0
        && (*player).charability as libc::c_int == CA_DOUBLEJUMP as libc::c_int
        && (*player).actionspd >> 16 as libc::c_int != -(1 as libc::c_int)
    {
        factor
            -= if 0 as libc::c_int
                > (*player).secondjump as libc::c_int * (*player).jumpfactor
                    / (((*player).actionspd >> 16 as libc::c_int) + 1 as libc::c_int)
            {
                0 as libc::c_int
            } else {
                (*player).secondjump as libc::c_int * (*player).jumpfactor
                    / (((*player).actionspd >> 16 as libc::c_int) + 1 as libc::c_int)
            };
    }
    P_SetObjectMomZ(
        (*player).mo,
        FixedMul(factor, (*(*player).mo).momz),
        false_0 as libc::c_int,
    );
    if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        (*(*player).mo).z -= 1;
        (*(*player).mo).z;
        if (*(*player).mo).pmomz < 0 as libc::c_int {
            (*(*player).mo).momz += (*(*player).mo).pmomz;
        }
        (*(*player).mo).pmomz = 0 as libc::c_int;
    } else {
        (*(*player).mo).z += 1;
        (*(*player).mo).z;
        if (*(*player).mo).pmomz > 0 as libc::c_int {
            (*(*player).mo).momz += (*(*player).mo).pmomz;
        }
        (*(*player).mo).pmomz = 0 as libc::c_int;
    }
    (*(*player).mo)
        .eflags = ((*(*player).mo).eflags as libc::c_int
        & !(MFE_APPLYPMOMZ as libc::c_int)) as uint16_t;
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >((*player).pflags as libc::c_uint | P_GetJumpFlags(player) as libc::c_uint);
    if (*player).charflags & SF_NOJUMPDAMAGE as libc::c_int as uint32_t != 0 {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_SPINNING as libc::c_int) as libc::c_uint,
        );
    }
    if P_InJumpFlipSector((*player).mo) != 0 {
        (*(*player).mo).flags2 ^= MF2_OBJECTFLIP as libc::c_int as uint32_t;
        S_StartSound((*player).mo as *const libc::c_void, sfx_s3k73);
    }
    if soundandstate != 0 {
        if (*player).spectator == 0 {
            S_StartSound((*player).mo as *const libc::c_void, sfx_jump);
        }
        P_SetPlayerMobjState((*player).mo, S_PLAY_JUMP);
    }
}
unsafe extern "C" fn P_DoSpinDashDust(mut player: *mut player_t) {
    let mut i: uint32_t = 0;
    let mut particle: *mut mobj_t = 0 as *mut mobj_t;
    let mut prandom: [int32_t; 3] = [0; 3];
    i = 0 as libc::c_int as uint32_t;
    while i <= leveltime % 7 as libc::c_int as tic_t / 2 as libc::c_int as tic_t {
        particle = P_SpawnMobjFromMobj(
            (*player).mo,
            0 as libc::c_int,
            0 as libc::c_int,
            0 as libc::c_int,
            MT_SPINDUST,
        );
        if (*(*player).mo).eflags as libc::c_int
            & (MFE_TOUCHWATER as libc::c_int | MFE_UNDERWATER as libc::c_int) != 0
        {
            P_SetMobjState(particle, S_SPINDUST_BUBBLE1);
        } else if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
            == SH_ELEMENTAL as libc::c_int
        {
            P_SetMobjState(particle, S_SPINDUST_FIRE1);
        }
        P_SetTarget2(&mut (*particle).target, (*player).mo);
        (*particle)
            .destscale = 2 as libc::c_int * (*(*player).mo).scale / 3 as libc::c_int;
        P_SetScale(particle, (*particle).destscale);
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            (*particle)
                .z = (*(*player).mo).z + (*(*player).mo).height - (*particle).height;
        }
        prandom[0 as libc::c_int as usize] = P_RandomFixed() << 2 as libc::c_int;
        prandom[1 as libc::c_int
            as usize] = P_RandomRange(-(30 as libc::c_int), 30 as libc::c_int);
        prandom[2 as libc::c_int as usize] = P_RandomFixed() << 3 as libc::c_int;
        P_SetObjectMomZ(
            particle,
            (*player).dashspeed / 50 as libc::c_int + prandom[0 as libc::c_int as usize],
            false_0 as libc::c_int,
        );
        P_InstaThrust(
            particle,
            ((*player).drawangle)
                .wrapping_add(
                    (prandom[1 as libc::c_int as usize] * 0xb60b61 as libc::c_int)
                        as angle_t,
                ),
            -FixedMul(
                (*player).dashspeed / 12 as libc::c_int
                    + ((1 as libc::c_int) << 16 as libc::c_int)
                    + prandom[2 as libc::c_int as usize],
                (*(*player).mo).scale,
            ),
        );
        P_TryMove(
            particle,
            (*particle).x + (*particle).momx,
            (*particle).y + (*particle).momy,
            true_0 as libc::c_int,
        );
        i = i.wrapping_add(1);
        i;
    }
}
unsafe extern "C" fn P_DoSpinAbility(mut player: *mut player_t, mut cmd: *mut ticcmd_t) {
    let mut canstand: boolean = true_0 as libc::c_int;
    if (*player).pflags as libc::c_uint & PF_STASIS as libc::c_int as libc::c_uint != 0
        && ((*player).pflags as libc::c_uint
            & PF_JUMPSTASIS as libc::c_int as libc::c_uint != 0
            || ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
                != S_PLAY_GLIDE_LANDING as libc::c_int as libc::c_long)
    {
        return;
    }
    if (*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0 {
        if LUA_HookPlayer(player, hook_SpinSpecial as libc::c_int) != 0 {
            return;
        }
    }
    canstand = (((*(*player).mo).standingslope).is_null()
        || (*(*(*player).mo).standingslope).flags as libc::c_int
            & SL_NOPHYSICS as libc::c_int != 0
        || abs((*(*(*player).mo).standingslope).zdelta)
            < ((1 as libc::c_int) << 16 as libc::c_int) / 2 as libc::c_int)
        as libc::c_int;
    if (*player).pflags as libc::c_uint & PF_SLIDING as libc::c_int as libc::c_uint == 0
        && (*player).exiting == 0 && P_PlayerInPain(player) == 0
    {
        match (*player).charability2 as libc::c_int {
            1 => {
                if (*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0
                    && ((*player).speed
                        < FixedMul(
                            (5 as libc::c_int) << 16 as libc::c_int,
                            (*(*player).mo).scale,
                        )
                        || ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                            as libc::c_long
                            == S_PLAY_GLIDE_LANDING as libc::c_int as libc::c_long)
                    && (*(*player).mo).momz == 0 && onground != 0
                    && (*player).pflags as libc::c_uint
                        & (PF_SPINDOWN as libc::c_int | PF_SPINNING as libc::c_int)
                            as libc::c_uint == 0 && canstand != 0
                {
                    (*(*player).mo).momx = (*player).cmomx;
                    (*(*player).mo).momy = (*player).cmomy;
                    (*player)
                        .pflags = ::core::mem::transmute::<
                        libc::c_uint,
                        pflags_t,
                    >(
                        (*player).pflags as libc::c_uint
                            | (PF_SPINDOWN as libc::c_int | PF_STARTDASH as libc::c_int
                                | PF_SPINNING as libc::c_int) as libc::c_uint,
                    );
                    (*player).dashspeed = (*player).mindash;
                    P_SetPlayerMobjState((*player).mo, S_PLAY_SPINDASH);
                    if (*player).spectator == 0 {
                        S_StartSound((*player).mo as *const libc::c_void, sfx_spndsh);
                    }
                } else if (*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0
                    && (*player).pflags as libc::c_uint
                        & PF_STARTDASH as libc::c_int as libc::c_uint != 0
                {
                    if (*player).speed > 5 as libc::c_int * (*(*player).mo).scale {
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                & !(PF_STARTDASH as libc::c_int) as libc::c_uint,
                        );
                        P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                        S_StartSound((*player).mo as *const libc::c_void, sfx_spin);
                    } else {
                        if (*player).dashspeed < (*player).mindash {
                            (*player).dashspeed = (*player).mindash;
                        }
                        if (*player).dashspeed > (*player).maxdash {
                            (*player).dashspeed = (*player).maxdash;
                        }
                        if (*player).dashspeed < (*player).maxdash
                            && (*player).mindash != (*player).maxdash
                        {
                            let mut soundcalculation: fixed_t = 6 as libc::c_int
                                * ((*player).dashspeed - (*player).mindash)
                                / ((*player).maxdash - (*player).mindash);
                            (*player).dashspeed
                                += (1 as libc::c_int) << 16 as libc::c_int;
                            if (*player).spectator == 0
                                && soundcalculation
                                    != 6 as libc::c_int
                                        * ((*player).dashspeed - (*player).mindash)
                                        / ((*player).maxdash - (*player).mindash)
                            {
                                S_StartSound(
                                    (*player).mo as *const libc::c_void,
                                    sfx_spndsh,
                                );
                            }
                        }
                        if (*player).revitem as libc::c_uint != 0
                            && leveltime % 5 as libc::c_int as tic_t == 0
                        {
                            P_SpawnSpinMobj(player, (*player).revitem);
                            G_GhostAddRev();
                        }
                    }
                } else if ((*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0
                    || (maptol & TOL_2D as libc::c_int as uint32_t != 0
                        || (*(*player).mo).flags2 & MF2_TWOD as libc::c_int as uint32_t
                            != 0)
                        && ((*cmd).forwardmove as libc::c_int) < -(20 as libc::c_int))
                    && (*player).climbing == 0 && (*(*player).mo).momz == 0
                    && onground != 0
                    && ((*player).speed
                        > FixedMul(
                            (5 as libc::c_int) << 16 as libc::c_int,
                            (*(*player).mo).scale,
                        ) || canstand == 0)
                    && (*player).pflags as libc::c_uint
                        & (PF_SPINDOWN as libc::c_int | PF_SPINNING as libc::c_int)
                            as libc::c_uint == 0
                {
                    (*player)
                        .pflags = ::core::mem::transmute::<
                        libc::c_uint,
                        pflags_t,
                    >(
                        (*player).pflags as libc::c_uint
                            | (PF_SPINDOWN as libc::c_int | PF_SPINNING as libc::c_int)
                                as libc::c_uint,
                    );
                    P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                    if (*player).spectator == 0 {
                        S_StartSound((*player).mo as *const libc::c_void, sfx_spin);
                    }
                } else if onground != 0
                    && (*player).pflags as libc::c_uint
                        & PF_SPINDOWN as libc::c_int as libc::c_uint == 0
                    && (*player).pflags as libc::c_uint
                        & PF_STARTDASH as libc::c_int as libc::c_uint != 0
                    && (*player).pflags as libc::c_uint
                        & PF_SPINNING as libc::c_int as libc::c_uint != 0
                {
                    (*player)
                        .pflags = ::core::mem::transmute::<
                        libc::c_uint,
                        pflags_t,
                    >(
                        (*player).pflags as libc::c_uint
                            & !(PF_STARTDASH as libc::c_int) as libc::c_uint,
                    );
                    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
                        == CR_BRAKGOOP as libc::c_int
                    {
                        (*player).dashspeed = 0 as libc::c_int;
                    }
                    if !(gametyperules & GTR_RACE as libc::c_int as uint32_t != 0
                        && leveltime < (4 as libc::c_int * 35 as libc::c_int) as tic_t)
                    {
                        if (*player).dashspeed != 0 {
                            P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                            (*player)
                                .speed = FixedMul(
                                (*player).dashspeed,
                                (*(*player).mo).scale,
                            );
                            P_InstaThrust(
                                (*player).mo,
                                (*(*player).mo).angle,
                                (*player).speed,
                            );
                        } else {
                            P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    & !(PF_SPINNING as libc::c_int) as libc::c_uint,
                            );
                        }
                        if (*player).spectator == 0 {
                            S_StartSound((*player).mo as *const libc::c_void, sfx_zoom);
                        }
                    }
                    (*player).dashspeed = 0 as libc::c_int;
                }
            }
            2 => {
                if (*(*player).mo).momz == 0 && onground != 0
                    && (*player).weapondelay == 0 && canstand != 0
                {
                    if !((*player).speed
                        > FixedMul(
                            (10 as libc::c_int) << 16 as libc::c_int,
                            (*(*player).mo).scale,
                        ))
                    {
                        let mut lockon: *mut mobj_t = P_LookForEnemies(
                            player,
                            false_0 as libc::c_int,
                            true_0 as libc::c_int,
                        );
                        if !lockon.is_null() {
                            if P_IsLocalPlayer(player) != 0 {
                                let mut visual: *mut mobj_t = P_SpawnMobj(
                                    (*lockon).x,
                                    (*lockon).y,
                                    (*lockon).z,
                                    MT_LOCKON,
                                );
                                P_SetTarget2(&mut (*visual).target, lockon);
                                (*visual).drawonlyforplayer = player;
                            }
                        }
                        if (*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0
                            && (*player).pflags as libc::c_uint
                                & PF_SPINDOWN as libc::c_int as libc::c_uint == 0
                        {
                            let mut bullet: *mut mobj_t = 0 as *mut mobj_t;
                            P_SetPlayerMobjState((*player).mo, S_PLAY_FIRE);
                            if !lockon.is_null() {
                                (*(*player).mo)
                                    .angle = R_PointToAngle2(
                                    (*(*player).mo).x,
                                    (*(*player).mo).y,
                                    (*lockon).x,
                                    (*lockon).y,
                                );
                                bullet = P_SpawnPointMissile(
                                    (*player).mo,
                                    (*lockon).x,
                                    (*lockon).y,
                                    (*lockon).z
                                        + ((*lockon).height
                                            - mobjinfo[(*player).revitem as usize].height)
                                            / 2 as libc::c_int,
                                    (*player).revitem,
                                    (*(*player).mo).x,
                                    (*(*player).mo).y,
                                    (*(*player).mo).z
                                        + ((*(*player).mo).height
                                            - mobjinfo[(*player).revitem as usize].height)
                                            / 2 as libc::c_int,
                                );
                                if demoplayback == 0
                                    || (if (*player).pflags as libc::c_uint
                                        & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                    {
                                        CS_LMAOGALOG as libc::c_int
                                    } else {
                                        0 as libc::c_int
                                    })
                                        | (if (*player).pflags as libc::c_uint
                                            & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                        {
                                            CS_STANDARD as libc::c_int
                                        } else {
                                            0 as libc::c_int
                                        }) == CS_LMAOGALOG as libc::c_int
                                {
                                    P_SetPlayerAngle(player, (*(*player).mo).angle);
                                }
                            } else {
                                bullet = P_SpawnPointMissile(
                                    (*player).mo,
                                    (*(*player).mo).x
                                        + P_ReturnThrustX(
                                            0 as *mut mobj_t,
                                            (*(*player).mo).angle,
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                        ),
                                    (*(*player).mo).y
                                        + P_ReturnThrustY(
                                            0 as *mut mobj_t,
                                            (*(*player).mo).angle,
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                        ),
                                    (*(*player).mo).z
                                        + ((*(*player).mo).height
                                            - mobjinfo[(*player).revitem as usize].height)
                                            / 2 as libc::c_int,
                                    (*player).revitem,
                                    (*(*player).mo).x,
                                    (*(*player).mo).y,
                                    (*(*player).mo).z
                                        + ((*(*player).mo).height
                                            - mobjinfo[(*player).revitem as usize].height)
                                            / 2 as libc::c_int,
                                );
                                if !bullet.is_null() {
                                    (*bullet).flags
                                        &= !(MF_NOGRAVITY as libc::c_int) as uint32_t;
                                    (*bullet).momx >>= 1 as libc::c_int;
                                    (*bullet).momy >>= 1 as libc::c_int;
                                }
                            }
                            (*player).drawangle = (*(*player).mo).angle;
                            (*(*player).mo).momx >>= 1 as libc::c_int;
                            (*(*player).mo).momy >>= 1 as libc::c_int;
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    | PF_SPINDOWN as libc::c_int as libc::c_uint,
                            );
                            P_SetWeaponDelay(
                                player,
                                35 as libc::c_int / 2 as libc::c_int,
                            );
                        }
                    }
                }
            }
            3 => {
                if (*player).panim as libc::c_uint
                    != PA_ABILITY2 as libc::c_int as libc::c_uint
                    && (*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0
                    && (*(*player).mo).momz == 0 && onground != 0
                    && (*player).pflags as libc::c_uint
                        & PF_SPINDOWN as libc::c_int as libc::c_uint == 0
                    && canstand != 0
                {
                    P_ResetPlayer(player);
                    (*player)
                        .pflags = ::core::mem::transmute::<
                        libc::c_uint,
                        pflags_t,
                    >(
                        (*player).pflags as libc::c_uint
                            | PF_THOKKED as libc::c_int as libc::c_uint,
                    );
                    (*(*player).mo).z += P_MobjFlip((*player).mo) as libc::c_int;
                    P_SetObjectMomZ(
                        (*player).mo,
                        (*player).mindash,
                        false_0 as libc::c_int,
                    );
                    if P_MobjFlip((*player).mo) as libc::c_int * (*(*player).mo).pmomz
                        > 0 as libc::c_int
                    {
                        (*(*player).mo).momz += (*(*player).mo).pmomz;
                    } else {
                        (*(*player).mo).pmomz = 0 as libc::c_int;
                    }
                    if (*(*player).mo).eflags as libc::c_int
                        & MFE_UNDERWATER as libc::c_int != 0
                    {
                        (*(*player).mo).momz >>= 1 as libc::c_int;
                    }
                    if (*player).speed
                        < FixedMul((*player).maxdash, (*(*player).mo).scale)
                    {
                        if (*player).panim as libc::c_uint
                            == PA_IDLE as libc::c_int as libc::c_uint
                        {
                            (*player).drawangle = (*(*player).mo).angle;
                        }
                        P_InstaThrust(
                            (*player).mo,
                            (*player).drawangle,
                            FixedMul((*player).maxdash, (*(*player).mo).scale),
                        );
                    }
                    (*(*player).mo).momx += (*player).cmomx;
                    (*(*player).mo).momy += (*player).cmomy;
                    P_SetPlayerMobjState((*player).mo, S_PLAY_MELEE);
                    (*player)
                        .powers[pw_strong as libc::c_int
                        as usize] = STR_MELEE as libc::c_int as uint16_t;
                    S_StartSound((*player).mo as *const libc::c_void, sfx_s3k42);
                    (*player)
                        .pflags = ::core::mem::transmute::<
                        libc::c_uint,
                        pflags_t,
                    >(
                        (*player).pflags as libc::c_uint
                            | PF_SPINDOWN as libc::c_int as libc::c_uint,
                    );
                }
            }
            _ => {}
        }
    }
    if onground != 0
        && (*player).pflags as libc::c_uint & PF_SPINNING as libc::c_int as libc::c_uint
            != 0
        && (*player).pflags as libc::c_uint & PF_STARTDASH as libc::c_int as libc::c_uint
            == 0 && (*player).speed < 5 as libc::c_int * (*(*player).mo).scale
        && canstand != 0
    {
        if (*(*(*(*player).mo).subsector).sector).specialflags as libc::c_uint
            & SSF_FORCESPIN as libc::c_int as libc::c_uint != 0
            || (*(*player).mo).ceilingz - (*(*player).mo).floorz
                < FixedMul((*player).height, (*(*player).mo).scale)
        {
            P_InstaThrust(
                (*player).mo,
                (*(*player).mo).angle,
                10 as libc::c_int * (*(*player).mo).scale,
            );
        } else {
            (*player).skidtime = 0 as libc::c_int as tic_t;
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    & !(PF_SPINNING as libc::c_int) as libc::c_uint,
            );
            P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
            (*(*player).mo).momx = (*player).cmomx;
            (*(*player).mo).momy = (*player).cmomy;
        }
    }
    if onground != 0
        && (*player).pflags as libc::c_uint & PF_STARTDASH as libc::c_int as libc::c_uint
            != 0
    {
        if (*player).charflags & SF_NOSPINDASHDUST as libc::c_int as uint32_t == 0
            && (*(*player).mo).eflags as libc::c_int & MFE_GOOWATER as libc::c_int == 0
        {
            P_DoSpinDashDust(player);
        }
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_DoJumpShield(mut player: *mut player_t) {
    let mut electric: boolean = ((*player).powers[pw_shield as libc::c_int as usize]
        as libc::c_int & SH_PROTECTELECTRIC as libc::c_int
        == SH_PROTECTELECTRIC as libc::c_int) as libc::c_int;
    if (*player).pflags as libc::c_uint & PF_THOKKED as libc::c_int as libc::c_uint != 0
    {
        return;
    }
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >((*player).pflags as libc::c_uint & !(PF_JUMPED as libc::c_int) as libc::c_uint);
    P_DoJump(player, false_0 as libc::c_int);
    (*player).secondjump = 0 as libc::c_int as uint8_t;
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >(
        (*player).pflags as libc::c_uint
            | (PF_THOKKED as libc::c_int | PF_SHIELDABILITY as libc::c_int)
                as libc::c_uint,
    );
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >(
        (*player).pflags as libc::c_uint
            & !(PF_STARTJUMP as libc::c_int | PF_SPINNING as libc::c_int
                | PF_BOUNCING as libc::c_int) as libc::c_uint,
    );
    if electric != 0 {
        let mut spark: *mut mobj_t = 0 as *mut mobj_t;
        let mut i: int32_t = 0;
        let travelangle: angle_t = ((*(*player).mo).angle)
            .wrapping_add(
                (P_RandomRange(
                    -(360 as libc::c_int / 6 as libc::c_int),
                    360 as libc::c_int / 6 as libc::c_int,
                ) * 0xb60b61 as libc::c_int) as angle_t,
            );
        i = 0 as libc::c_int;
        while i < 6 as libc::c_int {
            spark = P_SpawnMobjFromMobj(
                (*player).mo,
                0 as libc::c_int,
                0 as libc::c_int,
                0 as libc::c_int,
                MT_THUNDERCOIN_SPARK,
            );
            P_InstaThrust(
                spark,
                travelangle
                    .wrapping_add(
                        (i as libc::c_uint)
                            .wrapping_mul(
                                (0xffffffff as libc::c_uint)
                                    .wrapping_div(6 as libc::c_int as libc::c_uint),
                            ),
                    ),
                FixedMul(
                    4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    (*spark).scale,
                ),
            );
            if i % 2 as libc::c_int != 0 {
                P_SetObjectMomZ(
                    spark,
                    -(4 as libc::c_int) * ((1 as libc::c_int) << 16 as libc::c_int),
                    false_0 as libc::c_int,
                );
            }
            (*spark).fuse = 18 as libc::c_int;
            i += 1;
            i;
        }
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_NOJUMPDAMAGE as libc::c_int) as libc::c_uint,
        );
        P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
        S_StartSound((*player).mo as *const libc::c_void, sfx_s3k45);
    } else {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_JUMPED as libc::c_int | PF_NOJUMPDAMAGE as libc::c_int)
                    as libc::c_uint,
        );
        P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
        S_StartSound((*player).mo as *const libc::c_void, sfx_wdjump);
    };
}
#[no_mangle]
pub unsafe extern "C" fn P_DoBubbleBounce(mut player: *mut player_t) {
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >(
        (*player).pflags as libc::c_uint
            & !(PF_JUMPED as libc::c_int | PF_NOJUMPDAMAGE as libc::c_int
                | PF_SHIELDABILITY as libc::c_int) as libc::c_uint,
    );
    S_StartSound((*player).mo as *const libc::c_void, sfx_s3k44);
    P_MobjCheckWater((*player).mo);
    P_DoJump(player, false_0 as libc::c_int);
    if (*player).charflags & SF_NOJUMPSPIN as libc::c_int as uint32_t != 0 {
        P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
    } else {
        P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
    }
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >((*player).pflags as libc::c_uint | PF_THOKKED as libc::c_int as libc::c_uint);
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >((*player).pflags as libc::c_uint & !(PF_STARTJUMP as libc::c_int) as libc::c_uint);
    (*player).secondjump = 255 as libc::c_int as uint8_t;
    (*(*player).mo)
        .momz = FixedMul(
        (*(*player).mo).momz,
        11 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int) / 8 as libc::c_int,
    );
}
#[no_mangle]
pub unsafe extern "C" fn P_DoAbilityBounce(
    mut player: *mut player_t,
    mut changemomz: boolean,
) {
    if ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
        == S_PLAY_BOUNCE_LANDING as libc::c_int as libc::c_long
    {
        return;
    }
    if changemomz != 0 {
        let mut prevmomz: fixed_t = (*(*player).mo).momz;
        let mut minmomz: fixed_t = 0;
        if P_MobjFlip((*player).mo) as libc::c_int * prevmomz < 0 as libc::c_int {
            prevmomz = 0 as libc::c_int;
        } else if (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int
            != 0
        {
            prevmomz /= 2 as libc::c_int;
        }
        P_DoJump(player, false_0 as libc::c_int);
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_STARTJUMP as libc::c_int | PF_JUMPED as libc::c_int)
                    as libc::c_uint,
        );
        minmomz = FixedMul(
            (*(*player).mo).momz,
            3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                / 2 as libc::c_int,
        );
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            (*(*player).mo)
                .momz = if minmomz < (minmomz + prevmomz) / 2 as libc::c_int {
                minmomz
            } else {
                (minmomz + prevmomz) / 2 as libc::c_int
            };
        } else {
            (*(*player).mo)
                .momz = if minmomz > (minmomz + prevmomz) / 2 as libc::c_int {
                minmomz
            } else {
                (minmomz + prevmomz) / 2 as libc::c_int
            };
        }
    }
    S_StartSound((*player).mo as *const libc::c_void, sfx_boingf);
    P_SetPlayerMobjState((*player).mo, S_PLAY_BOUNCE_LANDING);
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >(
        (*player).pflags as libc::c_uint
            | (PF_BOUNCING as libc::c_int | PF_THOKKED as libc::c_int) as libc::c_uint,
    );
}
#[no_mangle]
pub unsafe extern "C" fn P_TwinSpinRejuvenate(
    mut player: *mut player_t,
    mut type_0: mobjtype_t,
) {
    let mut actionspd: fixed_t = 0;
    let mut movang: angle_t = 0;
    let mut ang: angle_t = 0;
    let mut fa: angle_t = 0;
    let mut v: fixed_t = 0;
    let mut h: fixed_t = 0;
    let mut i: uint8_t = 0;
    if ((*player).mo).is_null() || type_0 as u64 == 0 {
        return;
    }
    actionspd = FixedMul((*player).actionspd, (*(*player).mo).scale);
    fa = R_PointToAngle2(
        0 as libc::c_int,
        0 as libc::c_int,
        (*(*player).mo).momz,
        FixedHypot((*(*player).mo).momx, (*(*player).mo).momy),
    ) >> 19 as libc::c_int & (8192 as libc::c_int - 1 as libc::c_int) as angle_t;
    movang = R_PointToAngle2(
        0 as libc::c_int,
        0 as libc::c_int,
        (*(*player).mo).momx,
        (*(*player).mo).momy,
    );
    ang = 0 as libc::c_int as angle_t;
    v = FixedMul(
        actionspd,
        finesine[fa as usize] >> 16 as libc::c_int - 16 as libc::c_int,
    );
    h = actionspd
        - FixedMul(
            actionspd,
            *finecosine.offset(fa as isize) >> 16 as libc::c_int - 16 as libc::c_int,
        );
    i = 0 as libc::c_int as uint8_t;
    while i as libc::c_int <= 7 as libc::c_int {
        let mut side: fixed_t = actionspd
            - FixedMul(
                h,
                abs(
                    finesine[(ang >> 19 as libc::c_int
                        & (8192 as libc::c_int - 1 as libc::c_int) as angle_t) as usize]
                        >> 16 as libc::c_int - 16 as libc::c_int,
                ),
            );
        let mut xo: fixed_t = P_ReturnThrustX(
            0 as *mut mobj_t,
            ang.wrapping_add(movang),
            side,
        );
        let mut yo: fixed_t = P_ReturnThrustY(
            0 as *mut mobj_t,
            ang.wrapping_add(movang),
            side,
        );
        let mut zo: fixed_t = -FixedMul(
            *finecosine
                .offset(
                    (ang >> 19 as libc::c_int
                        & (8192 as libc::c_int - 1 as libc::c_int) as angle_t) as isize,
                ) >> 16 as libc::c_int - 16 as libc::c_int,
            v,
        );
        let mut missile: *mut mobj_t = P_SpawnMobjFromMobj(
            (*player).mo,
            xo,
            yo,
            (*(*player).mo).height / 2 as libc::c_int + zo,
            type_0,
        );
        P_SetTarget2(&mut (*missile).target, (*player).mo);
        (*missile).destscale >>= 1 as libc::c_int;
        P_SetScale(missile, (*missile).destscale);
        (*missile).angle = ang.wrapping_add(movang);
        (*missile).fuse = 35 as libc::c_int / 2 as libc::c_int;
        (*missile)
            .extravalue2 = 99 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
            / 100 as libc::c_int;
        (*missile).momx = xo;
        (*missile).momy = yo;
        (*missile).momz = zo;
        ang = ang.wrapping_add(0x20000000 as libc::c_int as angle_t);
        i = i.wrapping_add(1);
        i;
    }
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >((*player).pflags as libc::c_uint & !(PF_THOKKED as libc::c_int) as libc::c_uint);
}
#[no_mangle]
pub unsafe extern "C" fn P_Telekinesis(
    mut player: *mut player_t,
    mut thrust: fixed_t,
    mut range: fixed_t,
) {
    let mut th: *mut thinker_t = 0 as *mut thinker_t;
    let mut mo2: *mut mobj_t = 0 as *mut mobj_t;
    let mut dist: fixed_t = 0 as libc::c_int;
    let mut an: angle_t = 0;
    if (*player).powers[pw_super as libc::c_int as usize] != 0 {
        range *= 2 as libc::c_int;
    }
    th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
    while th
        != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
            as *mut thinker_t
    {
        if !((*th).function.acp1
            == ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                actionf_p1,
            >(
                Some(
                    P_RemoveThinkerDelayed as unsafe extern "C" fn(*mut thinker_t) -> (),
                ),
            ))
        {
            mo2 = th as *mut mobj_t;
            if !(mo2 == (*player).mo) {
                if (*mo2).flags & MF_SHOOTABLE as libc::c_int as uint32_t != 0
                    && (*mo2).flags & MF_ENEMY as libc::c_int as uint32_t != 0
                    || (*mo2).type_0 as libc::c_uint
                        == MT_EGGGUARD as libc::c_int as libc::c_uint
                    || !((*mo2).player).is_null()
                {
                    dist = P_AproxDistance(
                        P_AproxDistance(
                            (*(*player).mo).x - (*mo2).x,
                            (*(*player).mo).y - (*mo2).y,
                        ),
                        (*(*player).mo).z - (*mo2).z,
                    );
                    if !(range < dist) {
                        if !(P_CheckSight((*player).mo, mo2) == 0) {
                            an = R_PointToAngle2(
                                (*(*player).mo).x,
                                (*(*player).mo).y,
                                (*mo2).x,
                                (*mo2).y,
                            );
                            if (*mo2).health > 0 as libc::c_int {
                                P_Thrust(mo2, an, thrust);
                                if (*mo2).type_0 as libc::c_uint
                                    == MT_GOLDBUZZ as libc::c_int as libc::c_uint
                                    || (*mo2).type_0 as libc::c_uint
                                        == MT_REDBUZZ as libc::c_int as libc::c_uint
                                {
                                    (*mo2).tics += 8 as libc::c_int;
                                }
                            }
                        }
                    }
                }
            }
        }
        th = (*th).next;
    }
    P_SpawnThokMobj(player);
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >((*player).pflags as libc::c_uint | PF_THOKKED as libc::c_int as libc::c_uint);
}
unsafe extern "C" fn P_DoTwinSpin(mut player: *mut player_t) {
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >(
        (*player).pflags as libc::c_uint
            & !(PF_NOJUMPDAMAGE as libc::c_int | PF_SPINNING as libc::c_int)
                as libc::c_uint,
    );
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >(
        (*player).pflags as libc::c_uint
            | (P_GetJumpFlags(player) as libc::c_uint
                | PF_THOKKED as libc::c_int as libc::c_uint),
    );
    S_StartSound((*player).mo as *const libc::c_void, sfx_s3k42);
    (*(*player).mo).frame = 0 as libc::c_int as uint32_t;
    P_SetPlayerMobjState((*player).mo, S_PLAY_TWINSPIN);
    (*player)
        .powers[pw_strong as libc::c_int
        as usize] = STR_TWINSPIN as libc::c_int as uint16_t;
}
unsafe extern "C" fn P_PlayerShieldThink(
    mut player: *mut player_t,
    mut cmd: *mut ticcmd_t,
    mut lockonthok: *mut mobj_t,
    mut visual: *mut mobj_t,
) -> boolean {
    let mut lockonshield: *mut mobj_t = 0 as *mut mobj_t;
    if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
        & SH_NOSTACK as libc::c_int != 0
        && (*player).powers[pw_super as libc::c_int as usize] == 0
        && (*player).pflags as libc::c_uint & PF_SPINDOWN as libc::c_int as libc::c_uint
            == 0
        && ((*player).pflags as libc::c_uint & PF_THOKKED as libc::c_int as libc::c_uint
            == 0
            || ((*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
                & SH_NOSTACK as libc::c_int == SH_BUBBLEWRAP as libc::c_int
                || (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
                    & SH_NOSTACK as libc::c_int == SH_ATTRACT as libc::c_int)
                && (*player).secondjump as libc::c_int == 255 as libc::c_int)
    {
        if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
            & SH_NOSTACK as libc::c_int == SH_ATTRACT as libc::c_int
            && (*player).charflags & SF_NOSHIELDABILITY as libc::c_int as uint32_t == 0
        {
            lockonshield = P_LookForEnemies(
                player,
                false_0 as libc::c_int,
                false_0 as libc::c_int,
            );
            if !lockonshield.is_null() {
                if P_IsLocalPlayer(player) != 0 {
                    let mut dovis: boolean = true_0 as libc::c_int;
                    if lockonshield == lockonthok {
                        if leveltime & 2 as libc::c_int as tic_t != 0 {
                            dovis = false_0 as libc::c_int;
                        } else if !visual.is_null() {
                            P_RemoveMobj(visual);
                        }
                    }
                    if dovis != 0 {
                        visual = P_SpawnMobj(
                            (*lockonshield).x,
                            (*lockonshield).y,
                            (*lockonshield).z,
                            MT_LOCKON,
                        );
                        P_SetTarget2(&mut (*visual).target, lockonshield);
                        (*visual).drawonlyforplayer = player;
                        P_SetMobjStateNF(
                            visual,
                            ((*(*visual).info).spawnstate as libc::c_uint)
                                .wrapping_add(1 as libc::c_int as libc::c_uint)
                                as statenum_t,
                        );
                    }
                }
            }
        }
        if (*player).charflags & SF_NOSHIELDABILITY as libc::c_int as uint32_t == 0
            && ((*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0
                && LUA_HookPlayer(player, hook_ShieldSpecial as libc::c_int) == 0)
        {
            if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
                & !(SH_FORCEHP as libc::c_int | SH_STACK as libc::c_int)
                == SH_FORCE as libc::c_int
            {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        | (PF_THOKKED as libc::c_int | PF_SHIELDABILITY as libc::c_int)
                            as libc::c_uint,
                );
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        & !(PF_SPINNING as libc::c_int) as libc::c_uint,
                );
                (*(*player).mo).momz = 0 as libc::c_int;
                (*(*player).mo).momy = (*(*player).mo).momz;
                (*(*player).mo).momx = (*(*player).mo).momy;
                S_StartSound((*player).mo as *const libc::c_void, sfx_ngskid);
            } else {
                match (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
                    & SH_NOSTACK as libc::c_int
                {
                    2 | 4098 => {
                        P_DoJumpShield(player);
                    }
                    3 => {
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                | (PF_THOKKED as libc::c_int
                                    | PF_SHIELDABILITY as libc::c_int) as libc::c_uint,
                        );
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                & !(PF_SPINNING as libc::c_int) as libc::c_uint,
                        );
                        P_BlackOw(player);
                    }
                    4097 => {
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                | (PF_THOKKED as libc::c_int
                                    | PF_SHIELDABILITY as libc::c_int) as libc::c_uint,
                        );
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                & !(PF_SPINNING as libc::c_int) as libc::c_uint,
                        );
                        (*player).homing = 2 as libc::c_int as uint8_t;
                        P_SetTarget2(
                            &mut (*(*player).mo).target,
                            P_SetTarget2(&mut (*(*player).mo).tracer, lockonshield),
                        );
                        if !lockonshield.is_null() {
                            (*(*player).mo)
                                .angle = R_PointToAngle2(
                                (*(*player).mo).x,
                                (*(*player).mo).y,
                                (*lockonshield).x,
                                (*lockonshield).y,
                            );
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    & !(PF_NOJUMPDAMAGE as libc::c_int) as libc::c_uint,
                            );
                            P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                            S_StartSound((*player).mo as *const libc::c_void, sfx_s3k40);
                            (*player)
                                .homing = (3 as libc::c_int * 35 as libc::c_int) as uint8_t;
                        } else {
                            S_StartSound((*player).mo as *const libc::c_void, sfx_s3ka6);
                        }
                    }
                    3073 | 2049 => {
                        let mut elem: boolean = ((*player)
                            .powers[pw_shield as libc::c_int as usize] as libc::c_int
                            & SH_NOSTACK as libc::c_int == SH_ELEMENTAL as libc::c_int)
                            as libc::c_int;
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                | (PF_THOKKED as libc::c_int
                                    | PF_SHIELDABILITY as libc::c_int) as libc::c_uint,
                        );
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                & !(PF_SPINNING as libc::c_int) as libc::c_uint,
                        );
                        if elem != 0 {
                            (*(*player).mo).momy = 0 as libc::c_int;
                            (*(*player).mo).momx = (*(*player).mo).momy;
                            S_StartSound((*player).mo as *const libc::c_void, sfx_s3k43);
                        } else {
                            (*(*player).mo).momx
                                -= (*(*player).mo).momx / 3 as libc::c_int;
                            (*(*player).mo).momy
                                -= (*(*player).mo).momy / 3 as libc::c_int;
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    & !(PF_NOJUMPDAMAGE as libc::c_int) as libc::c_uint,
                            );
                            P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                            S_StartSound((*player).mo as *const libc::c_void, sfx_s3k44);
                        }
                        (*player).secondjump = 0 as libc::c_int as uint8_t;
                        P_SetObjectMomZ(
                            (*player).mo,
                            -(24 as libc::c_int)
                                * ((1 as libc::c_int) << 16 as libc::c_int),
                            false_0 as libc::c_int,
                        );
                    }
                    1025 => {
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                | (PF_THOKKED as libc::c_int
                                    | PF_SHIELDABILITY as libc::c_int) as libc::c_uint,
                        );
                        P_Thrust(
                            (*player).mo,
                            (*(*player).mo).angle,
                            FixedMul(
                                30 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int)
                                    - FixedSqrt(
                                        FixedDiv((*player).speed, (*(*player).mo).scale),
                                    ),
                                (*(*player).mo).scale,
                            ),
                        );
                        (*player).drawangle = (*(*player).mo).angle;
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                & !(PF_NOJUMPDAMAGE as libc::c_int
                                    | PF_SPINNING as libc::c_int) as libc::c_uint,
                        );
                        P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                        S_StartSound((*player).mo as *const libc::c_void, sfx_s3k43);
                    }
                    _ => {}
                }
            }
        }
        return ((*player).pflags as libc::c_uint
            & PF_SHIELDABILITY as libc::c_int as libc::c_uint) as boolean;
    }
    return false_0 as libc::c_int;
}
unsafe extern "C" fn P_DoJumpStuff(mut player: *mut player_t, mut cmd: *mut ticcmd_t) {
    let mut lockonthok: *mut mobj_t = 0 as *mut mobj_t;
    let mut visual: *mut mobj_t = 0 as *mut mobj_t;
    if (*player).pflags as libc::c_uint & PF_JUMPSTASIS as libc::c_int as libc::c_uint
        != 0
    {
        return;
    }
    if (*player).charability as libc::c_int == CA_HOMINGTHOK as libc::c_int
        && (*player).homing == 0
        && (*player).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint
            != 0
        && ((*player).pflags as libc::c_uint & PF_THOKKED as libc::c_int as libc::c_uint
            == 0
            || (*player).charflags & SF_MULTIABILITY as libc::c_int as uint32_t != 0)
        && {
            lockonthok = P_LookForEnemies(
                player,
                true_0 as libc::c_int,
                false_0 as libc::c_int,
            );
            !lockonthok.is_null()
        }
    {
        if P_IsLocalPlayer(player) != 0 {
            visual = P_SpawnMobj(
                (*lockonthok).x,
                (*lockonthok).y,
                (*lockonthok).z,
                MT_LOCKON,
            );
            P_SetTarget2(&mut (*visual).target, lockonthok);
            (*visual).drawonlyforplayer = player;
        }
    }
    if (*player).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint != 0
        && (*player).exiting == 0 && P_PlayerInPain(player) == 0
    {
        if !(onground != 0 || (*player).climbing as libc::c_int != 0
            || (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int != 0)
        {
            if !(gametyperules & GTR_TEAMFLAGS as libc::c_int as uint32_t != 0
                && (*player).gotflag as libc::c_int != 0)
            {
                if !((*player).pflags as libc::c_uint
                    & (PF_GLIDING as libc::c_int | PF_SLIDING as libc::c_int
                        | PF_SHIELDABILITY as libc::c_int) as libc::c_uint != 0)
                {
                    if !(P_PlayerShieldThink(player, cmd, lockonthok, visual) != 0) {
                        if (*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0 {
                            if (*player).pflags as libc::c_uint
                                & PF_SPINDOWN as libc::c_int as libc::c_uint == 0
                                && P_SuperReady(player) != 0
                            {
                                P_DoSuperTransformation(player, false_0 as libc::c_int);
                            } else if LUA_HookPlayer(
                                player,
                                hook_JumpSpinSpecial as libc::c_int,
                            ) == 0
                            {
                                match (*player).charability as libc::c_int {
                                    1 => {
                                        if (*player).powers[pw_super as libc::c_int as usize] != 0 {
                                            if (*player).speed
                                                > 5 as libc::c_int * (*(*player).mo).scale
                                                && P_MobjFlip((*player).mo) as libc::c_int
                                                    * (*(*player).mo).momz <= 0 as libc::c_int
                                            {
                                                if (*player).panim as libc::c_uint
                                                    != PA_RUN as libc::c_int as libc::c_uint
                                                    && (*player).panim as libc::c_uint
                                                        != PA_WALK as libc::c_int as libc::c_uint
                                                {
                                                    if (*player).speed
                                                        >= FixedMul((*player).runspeed, (*(*player).mo).scale)
                                                    {
                                                        P_SetPlayerMobjState((*player).mo, S_PLAY_FLOAT_RUN);
                                                    } else {
                                                        P_SetPlayerMobjState((*player).mo, S_PLAY_FLOAT);
                                                    }
                                                }
                                                (*(*player).mo).momz = 0 as libc::c_int;
                                                (*player)
                                                    .pflags = ::core::mem::transmute::<
                                                    libc::c_uint,
                                                    pflags_t,
                                                >(
                                                    (*player).pflags as libc::c_uint
                                                        & !(PF_STARTJUMP as libc::c_int
                                                            | PF_SPINNING as libc::c_int) as libc::c_uint,
                                                );
                                                (*player).secondjump = 1 as libc::c_int as uint8_t;
                                            }
                                        }
                                    }
                                    9 => {
                                        if (*player).pflags as libc::c_uint
                                            & (PF_THOKKED as libc::c_int | PF_SPINDOWN as libc::c_int)
                                                as libc::c_uint == 0
                                            || (*player).charflags
                                                & SF_MULTIABILITY as libc::c_int as uint32_t != 0
                                        {
                                            P_Telekinesis(
                                                player,
                                                -FixedMul((*player).actionspd, (*(*player).mo).scale),
                                                FixedMul(
                                                    384 as libc::c_int
                                                        * ((1 as libc::c_int) << 16 as libc::c_int),
                                                    (*(*player).mo).scale,
                                                ),
                                            );
                                        }
                                    }
                                    15 => {
                                        if (*player).charability2 as libc::c_int
                                            == CA2_MELEE as libc::c_int
                                            && ((*player).pflags as libc::c_uint
                                                & (PF_THOKKED as libc::c_int | PF_SPINDOWN as libc::c_int)
                                                    as libc::c_uint == 0
                                                || (*player).charflags
                                                    & SF_MULTIABILITY as libc::c_int as uint32_t != 0)
                                        {
                                            P_DoTwinSpin(player);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (*player).charability as libc::c_int == CA_AIRDRILL as libc::c_int {
        if (*player).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint
            != 0
        {
            if (*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0
                && ((*player).secondjump as libc::c_int) < 42 as libc::c_int
            {
                (*player).secondjump = ((*player).secondjump).wrapping_add(1);
                (*player).secondjump;
            }
            if (*player).flyangle > 0 as libc::c_int
                && (*player).pflags as libc::c_uint
                    & PF_THOKKED as libc::c_int as libc::c_uint != 0
            {
                (*player).flyangle -= 1;
                (*player).flyangle;
                P_SetObjectMomZ(
                    (*player).mo,
                    (((*player).flyangle - 24 as libc::c_int
                        - (*player).secondjump as libc::c_int * 3 as libc::c_int)
                        * (((*player).actionspd >> 16 as libc::c_int) / 12 as libc::c_int
                            + 1 as libc::c_int) << 16 as libc::c_int) / 7 as libc::c_int,
                    false_0 as libc::c_int,
                );
                P_SpawnThokMobj(player);
                if (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int
                    != 0
                {
                    P_InstaThrust(
                        (*player).mo,
                        (*(*player).mo).angle,
                        FixedMul((*player).normalspeed, (*(*player).mo).scale)
                            * (80 as libc::c_int - (*player).flyangle
                                - ((*player).actionspd >> 16 as libc::c_int)
                                    / 2 as libc::c_int) / 80 as libc::c_int,
                    );
                } else {
                    P_InstaThrust(
                        (*player).mo,
                        (*(*player).mo).angle,
                        FixedMul(
                            (*player).normalspeed
                                - (*player).actionspd / 4 as libc::c_int,
                            (*(*player).mo).scale,
                        ) * 2 as libc::c_int / 3 as libc::c_int,
                    );
                }
                (*player).drawangle = (*(*player).mo).angle;
            }
        }
    }
    if (*cmd).buttons as libc::c_int & BT_JUMP as libc::c_int != 0
        && (*player).exiting == 0 && P_PlayerInPain(player) == 0
    {
        if !(LUA_HookPlayer(player, hook_JumpSpecial as libc::c_int) != 0) {
            if !((*player).pflags as libc::c_uint
                & PF_JUMPDOWN as libc::c_int as libc::c_uint != 0)
            {
                if P_InQuicksand((*player).mo) != 0 {
                    P_DoJump(player, true_0 as libc::c_int);
                    (*player).secondjump = 0 as libc::c_int as uint8_t;
                    (*player)
                        .pflags = ::core::mem::transmute::<
                        libc::c_uint,
                        pflags_t,
                    >(
                        (*player).pflags as libc::c_uint
                            & !(PF_THOKKED as libc::c_int) as libc::c_uint,
                    );
                } else if (*player).powers[pw_carry as libc::c_int as usize]
                    as libc::c_int == CR_MACESPIN as libc::c_int
                    && !((*(*player).mo).tracer).is_null()
                {
                    (*player)
                        .powers[pw_carry as libc::c_int
                        as usize] = CR_NONE as libc::c_int as uint16_t;
                    P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                    (*player)
                        .powers[pw_flashing as libc::c_int
                        as usize] = (35 as libc::c_int / 4 as libc::c_int) as uint16_t;
                } else if onground != 0 || (*player).climbing as libc::c_int != 0
                    || (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
                        != 0
                {
                    P_DoJump(player, true_0 as libc::c_int);
                    (*player).secondjump = 0 as libc::c_int as uint8_t;
                    (*player)
                        .pflags = ::core::mem::transmute::<
                        libc::c_uint,
                        pflags_t,
                    >(
                        (*player).pflags as libc::c_uint
                            & !(PF_THOKKED as libc::c_int) as libc::c_uint,
                    );
                } else if !((*player).pflags as libc::c_uint
                    & PF_SLIDING as libc::c_int as libc::c_uint != 0
                    || gametyperules & GTR_TEAMFLAGS as libc::c_int as uint32_t != 0
                        && (*player).gotflag as libc::c_int != 0
                    || (*player).pflags as libc::c_uint
                        & PF_SHIELDABILITY as libc::c_int as libc::c_uint != 0)
                {
                    if (*player).pflags as libc::c_uint
                        & PF_JUMPED as libc::c_int as libc::c_uint != 0
                    {
                        if LUA_HookPlayer(player, hook_AbilitySpecial as libc::c_int)
                            == 0
                        {
                            match (*player).charability as libc::c_int {
                                1 | 4 | 13 => {
                                    if (*player).pflags as libc::c_uint
                                        & PF_THOKKED as libc::c_int as libc::c_uint == 0
                                        || (*player).charflags
                                            & SF_MULTIABILITY as libc::c_int as uint32_t != 0
                                    {
                                        let mut actionspd: fixed_t = (*player).actionspd;
                                        if (*player).charflags
                                            & SF_DASHMODE as libc::c_int as uint32_t != 0
                                        {
                                            actionspd = if (*player).actionspd
                                                > FixedDiv((*player).speed, (*(*player).mo).scale)
                                            {
                                                (*player).actionspd
                                            } else {
                                                FixedDiv((*player).speed, (*(*player).mo).scale)
                                            };
                                        }
                                        if (*(*player).mo).eflags as libc::c_int
                                            & MFE_UNDERWATER as libc::c_int != 0
                                        {
                                            actionspd >>= 1 as libc::c_int;
                                        }
                                        if (*player).charability as libc::c_int
                                            == CA_JUMPTHOK as libc::c_int
                                            && (*player).pflags as libc::c_uint
                                                & PF_THOKKED as libc::c_int as libc::c_uint == 0
                                        {
                                            (*player)
                                                .pflags = ::core::mem::transmute::<
                                                libc::c_uint,
                                                pflags_t,
                                            >(
                                                (*player).pflags as libc::c_uint
                                                    & !(PF_JUMPED as libc::c_int) as libc::c_uint,
                                            );
                                            P_DoJump(player, false_0 as libc::c_int);
                                        }
                                        P_InstaThrust(
                                            (*player).mo,
                                            (*(*player).mo).angle,
                                            FixedMul(actionspd, (*(*player).mo).scale),
                                        );
                                        if maptol & TOL_2D as libc::c_int as uint32_t != 0 {
                                            (*(*player).mo).momx /= 2 as libc::c_int;
                                            (*(*player).mo).momy /= 2 as libc::c_int;
                                        }
                                        if (*player).charability as libc::c_int
                                            == CA_HOMINGTHOK as libc::c_int
                                        {
                                            (*(*player).mo).momx /= 2 as libc::c_int;
                                            (*(*player).mo).momy /= 2 as libc::c_int;
                                        }
                                        if (*player).charability as libc::c_int
                                            == CA_HOMINGTHOK as libc::c_int
                                        {
                                            P_SetTarget2(
                                                &mut (*(*player).mo).target,
                                                P_SetTarget2(&mut (*(*player).mo).tracer, lockonthok),
                                            );
                                            if !lockonthok.is_null() {
                                                P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                                                (*(*player).mo)
                                                    .angle = R_PointToAngle2(
                                                    (*(*player).mo).x,
                                                    (*(*player).mo).y,
                                                    (*lockonthok).x,
                                                    (*lockonthok).y,
                                                );
                                                (*player)
                                                    .homing = (3 as libc::c_int * 35 as libc::c_int) as uint8_t;
                                            } else {
                                                P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
                                                (*player)
                                                    .pflags = ::core::mem::transmute::<
                                                    libc::c_uint,
                                                    pflags_t,
                                                >(
                                                    (*player).pflags as libc::c_uint
                                                        & !(PF_JUMPED as libc::c_int) as libc::c_uint,
                                                );
                                                (*(*player).mo)
                                                    .height = FixedMul((*player).height, (*(*player).mo).scale);
                                            }
                                            (*player)
                                                .pflags = ::core::mem::transmute::<
                                                libc::c_uint,
                                                pflags_t,
                                            >(
                                                (*player).pflags as libc::c_uint
                                                    & !(PF_NOJUMPDAMAGE as libc::c_int) as libc::c_uint,
                                            );
                                        }
                                        (*player).drawangle = (*(*player).mo).angle;
                                        if (*(*(*player).mo).info).attacksound as libc::c_uint != 0
                                            && (*player).spectator == 0
                                        {
                                            S_StartSound(
                                                (*player).mo as *const libc::c_void,
                                                (*(*(*player).mo).info).attacksound,
                                            );
                                        }
                                        P_SpawnThokMobj(player);
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                & !(PF_SPINNING as libc::c_int
                                                    | PF_STARTDASH as libc::c_int) as libc::c_uint,
                                        );
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | PF_THOKKED as libc::c_int as libc::c_uint,
                                        );
                                    }
                                }
                                2 | 5 => {
                                    if !((*player).charability as libc::c_int
                                        == CA_SWIM as libc::c_int
                                        && (*(*player).mo).eflags as libc::c_int
                                            & MFE_UNDERWATER as libc::c_int == 0)
                                    {
                                        if (*player).pflags as libc::c_uint
                                            & PF_THOKKED as libc::c_int as libc::c_uint == 0
                                            && (*player).powers[pw_tailsfly as libc::c_int as usize]
                                                == 0
                                        {
                                            P_SetPlayerMobjState((*player).mo, S_PLAY_FLY);
                                            (*player)
                                                .powers[pw_tailsfly as libc::c_int
                                                as usize] = (tailsflytics as libc::c_int + 1 as libc::c_int)
                                                as uint16_t;
                                            (*player)
                                                .pflags = ::core::mem::transmute::<
                                                libc::c_uint,
                                                pflags_t,
                                            >(
                                                (*player).pflags as libc::c_uint
                                                    & !(PF_JUMPED as libc::c_int
                                                        | PF_NOJUMPDAMAGE as libc::c_int
                                                        | PF_SPINNING as libc::c_int | PF_STARTDASH as libc::c_int)
                                                        as libc::c_uint,
                                            );
                                            if (*player).bot as libc::c_int == BOT_2PAI as libc::c_int {
                                                (*player)
                                                    .pflags = ::core::mem::transmute::<
                                                    libc::c_uint,
                                                    pflags_t,
                                                >(
                                                    (*player).pflags as libc::c_uint
                                                        | PF_THOKKED as libc::c_int as libc::c_uint,
                                                );
                                            } else {
                                                (*player)
                                                    .pflags = ::core::mem::transmute::<
                                                    libc::c_uint,
                                                    pflags_t,
                                                >(
                                                    (*player).pflags as libc::c_uint
                                                        | (PF_THOKKED as libc::c_int | PF_CANCARRY as libc::c_int)
                                                            as libc::c_uint,
                                                );
                                            }
                                            (*player)
                                                .powers[pw_strong as libc::c_int
                                                as usize] = STR_FLY as libc::c_int as uint16_t;
                                        }
                                    }
                                }
                                3 => {
                                    if (*player).pflags as libc::c_uint
                                        & PF_THOKKED as libc::c_int as libc::c_uint == 0
                                        || (*player).charflags
                                            & SF_MULTIABILITY as libc::c_int as uint32_t != 0
                                    {
                                        let mut glidespeed: fixed_t = FixedMul(
                                            (*player).actionspd,
                                            (*(*player).mo).scale,
                                        );
                                        let mut playerspeed: fixed_t = (*player).speed;
                                        if (*(*player).mo).eflags as libc::c_int
                                            & MFE_UNDERWATER as libc::c_int != 0
                                        {
                                            glidespeed >>= 1 as libc::c_int;
                                            playerspeed = 2 as libc::c_int * playerspeed
                                                / 3 as libc::c_int;
                                            if !((*player).powers[pw_super as libc::c_int as usize]
                                                as libc::c_int != 0
                                                || (*player).powers[pw_sneakers as libc::c_int as usize]
                                                    as libc::c_int != 0)
                                            {
                                                (*(*player).mo)
                                                    .momx = 2 as libc::c_int
                                                    * ((*(*player).mo).momx - (*player).cmomx)
                                                    / 3 as libc::c_int + (*player).cmomx;
                                                (*(*player).mo)
                                                    .momy = 2 as libc::c_int
                                                    * ((*(*player).mo).momy - (*player).cmomy)
                                                    / 3 as libc::c_int + (*player).cmomy;
                                            }
                                        }
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | (PF_GLIDING as libc::c_int | PF_THOKKED as libc::c_int)
                                                    as libc::c_uint,
                                        );
                                        (*player).glidetime = 0 as libc::c_int as tic_t;
                                        P_SetPlayerMobjState((*player).mo, S_PLAY_GLIDE);
                                        if playerspeed < glidespeed {
                                            P_Thrust(
                                                (*player).mo,
                                                (*(*player).mo).angle,
                                                glidespeed - playerspeed,
                                            );
                                        }
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                & !(PF_JUMPED as libc::c_int | PF_SPINNING as libc::c_int
                                                    | PF_STARTDASH as libc::c_int) as libc::c_uint,
                                        );
                                        (*player)
                                            .powers[pw_strong as libc::c_int
                                            as usize] = STR_GLIDE as libc::c_int as uint16_t;
                                    }
                                }
                                6 => {
                                    if (*player).pflags as libc::c_uint
                                        & PF_THOKKED as libc::c_int as libc::c_uint == 0
                                        || (*player).charflags
                                            & SF_MULTIABILITY as libc::c_int as uint32_t != 0
                                            && ((*player).secondjump as libc::c_int)
                                                < (*player).actionspd >> 16 as libc::c_int
                                    {
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | PF_THOKKED as libc::c_int as libc::c_uint,
                                        );
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                & !(PF_JUMPED as libc::c_int | PF_SPINNING as libc::c_int)
                                                    as libc::c_uint,
                                        );
                                        P_DoJump(player, true_0 as libc::c_int);
                                        (*player)
                                            .secondjump = ((*player).secondjump).wrapping_add(1);
                                        (*player).secondjump;
                                    }
                                }
                                7 | 8 => {
                                    if (*player).pflags as libc::c_uint
                                        & PF_THOKKED as libc::c_int as libc::c_uint == 0
                                        || (*player).charflags
                                            & SF_MULTIABILITY as libc::c_int as uint32_t != 0
                                    {
                                        if (*player).charflags
                                            & SF_DASHMODE as libc::c_int as uint32_t != 0
                                            && (*player).dashmode
                                                >= (3 as libc::c_int * 35 as libc::c_int) as tic_t
                                        {
                                            P_SetPlayerMobjState((*player).mo, S_PLAY_DASH);
                                        } else if (*player).speed
                                            >= FixedMul((*player).runspeed, (*(*player).mo).scale)
                                        {
                                            P_SetPlayerMobjState((*player).mo, S_PLAY_FLOAT_RUN);
                                        } else {
                                            P_SetPlayerMobjState((*player).mo, S_PLAY_FLOAT);
                                        }
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | PF_THOKKED as libc::c_int as libc::c_uint,
                                        );
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                & !(PF_JUMPED as libc::c_int
                                                    | PF_NOJUMPDAMAGE as libc::c_int
                                                    | PF_SPINNING as libc::c_int) as libc::c_uint,
                                        );
                                        (*player).secondjump = 1 as libc::c_int as uint8_t;
                                    }
                                }
                                9 => {
                                    if (*player).pflags as libc::c_uint
                                        & PF_THOKKED as libc::c_int as libc::c_uint == 0
                                        || (*player).charflags
                                            & SF_MULTIABILITY as libc::c_int as uint32_t != 0
                                    {
                                        P_Telekinesis(
                                            player,
                                            FixedMul((*player).actionspd, (*(*player).mo).scale),
                                            FixedMul(
                                                384 as libc::c_int
                                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                                (*(*player).mo).scale,
                                            ),
                                        );
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                & !(PF_SPINNING as libc::c_int) as libc::c_uint,
                                        );
                                    }
                                }
                                10 => {
                                    if (*player).pflags as libc::c_uint
                                        & PF_THOKKED as libc::c_int as libc::c_uint == 0
                                        || (*player).charflags
                                            & SF_MULTIABILITY as libc::c_int as uint32_t != 0
                                    {
                                        (*(*player).mo).momz = -(*(*player).mo).momz;
                                        P_SpawnThokMobj(player);
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | PF_THOKKED as libc::c_int as libc::c_uint,
                                        );
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                & !(PF_SPINNING as libc::c_int) as libc::c_uint,
                                        );
                                    }
                                }
                                12 => {
                                    if (*player).pflags as libc::c_uint
                                        & PF_THOKKED as libc::c_int as libc::c_uint == 0
                                        || (*player).charflags
                                            & SF_MULTIABILITY as libc::c_int as uint32_t != 0
                                    {
                                        (*player)
                                            .flyangle = 56 as libc::c_int
                                            + (60 as libc::c_int
                                                - ((*player).actionspd >> 16 as libc::c_int))
                                                / 3 as libc::c_int;
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | PF_THOKKED as libc::c_int as libc::c_uint,
                                        );
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                & !(PF_SPINNING as libc::c_int) as libc::c_uint,
                                        );
                                        S_StartSound(
                                            (*player).mo as *const libc::c_void,
                                            sfx_spndsh,
                                        );
                                    }
                                }
                                14 => {
                                    if (*player).pflags as libc::c_uint
                                        & PF_THOKKED as libc::c_int as libc::c_uint == 0
                                        || (*player).charflags
                                            & SF_MULTIABILITY as libc::c_int as uint32_t != 0
                                    {
                                        P_SetPlayerMobjState((*player).mo, S_PLAY_BOUNCE);
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                & !(PF_JUMPED as libc::c_int
                                                    | PF_NOJUMPDAMAGE as libc::c_int
                                                    | PF_SPINNING as libc::c_int) as libc::c_uint,
                                        );
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | (PF_THOKKED as libc::c_int | PF_BOUNCING as libc::c_int)
                                                    as libc::c_uint,
                                        );
                                        (*player)
                                            .powers[pw_strong as libc::c_int
                                            as usize] = STR_BOUNCE as libc::c_int as uint16_t;
                                        (*(*player).mo).momx >>= 1 as libc::c_int;
                                        (*(*player).mo).momy >>= 1 as libc::c_int;
                                        (*(*player).mo).momz >>= 1 as libc::c_int;
                                    }
                                }
                                15 => {
                                    if (*player).pflags as libc::c_uint
                                        & PF_THOKKED as libc::c_int as libc::c_uint == 0
                                        || (*player).charflags
                                            & SF_MULTIABILITY as libc::c_int as uint32_t != 0
                                    {
                                        P_DoTwinSpin(player);
                                    }
                                }
                                _ => {}
                            }
                        }
                    } else if (*player).pflags as libc::c_uint
                        & PF_THOKKED as libc::c_int as libc::c_uint != 0
                    {
                        if LUA_HookPlayer(player, hook_AbilitySpecial as libc::c_int)
                            == 0
                        {
                            match (*player).charability as libc::c_int {
                                2 | 5 => {
                                    if !((*player).charability as libc::c_int
                                        == CA_SWIM as libc::c_int
                                        && (*(*player).mo).eflags as libc::c_int
                                            & MFE_UNDERWATER as libc::c_int == 0)
                                    {
                                        if (*player).powers[pw_tailsfly as libc::c_int as usize]
                                            != 0
                                        {
                                            (*player).fly1 = 20 as libc::c_int as uint8_t;
                                            if (*player).charability as libc::c_int
                                                == CA_SWIM as libc::c_int
                                            {
                                                (*player)
                                                    .fly1 = ((*player).fly1 as libc::c_int / 2 as libc::c_int)
                                                    as uint8_t;
                                            }
                                            if (*player).speed
                                                > FixedMul(
                                                    8 as libc::c_int
                                                        * ((1 as libc::c_int) << 16 as libc::c_int),
                                                    (*(*player).mo).scale,
                                                )
                                                && (*player).speed
                                                    > FixedMul(
                                                        (*player).normalspeed >> 1 as libc::c_int,
                                                        (*(*player).mo).scale,
                                                    )
                                            {
                                                P_Thrust(
                                                    (*player).mo,
                                                    R_PointToAngle2(
                                                        0 as libc::c_int,
                                                        0 as libc::c_int,
                                                        (*(*player).mo).momx,
                                                        (*(*player).mo).momy,
                                                    ),
                                                    FixedMul(
                                                        -(4 as libc::c_int)
                                                            * ((1 as libc::c_int) << 16 as libc::c_int),
                                                        (*(*player).mo).scale,
                                                    ),
                                                );
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    } else if (*player).charflags
                        & SF_NOSHIELDABILITY as libc::c_int as uint32_t == 0
                        && ((*player).powers[pw_shield as libc::c_int as usize]
                            as libc::c_int & SH_NOSTACK as libc::c_int
                            == SH_WHIRLWIND as libc::c_int
                            && (*player).powers[pw_super as libc::c_int as usize] == 0
                            && LUA_HookPlayer(player, hook_ShieldSpecial as libc::c_int)
                                == 0)
                    {
                        P_DoJumpShield(player);
                    }
                }
            }
        }
    }
    if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
        & SH_NOSTACK as libc::c_int == SH_ATTRACT as libc::c_int
        && (*player).pflags as libc::c_uint
            & PF_SHIELDABILITY as libc::c_int as libc::c_uint != 0
    {
        if (*player).homing as libc::c_int != 0 && !((*(*player).mo).tracer).is_null() {
            if P_HomingAttack((*player).mo, (*(*player).mo).tracer) == 0 {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        & !(PF_SHIELDABILITY as libc::c_int) as libc::c_uint,
                );
                (*player).secondjump = 255 as libc::c_int as uint8_t;
                P_SetObjectMomZ(
                    (*player).mo,
                    6 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    false_0 as libc::c_int,
                );
                if (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int
                    != 0
                {
                    (*(*player).mo)
                        .momz = FixedMul(
                        (*(*player).mo).momz,
                        ((1 as libc::c_int) << 16 as libc::c_int) / 3 as libc::c_int,
                    );
                }
                (*player).homing = 0 as libc::c_int as uint8_t;
            }
        }
        if (*player).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint
            == 0
        {
            (*player).homing = 0 as libc::c_int as uint8_t;
        }
    } else if (*player).charability as libc::c_int == CA_HOMINGTHOK as libc::c_int {
        if (*player).homing as libc::c_int != 0 && !((*(*player).mo).tracer).is_null() {
            P_SpawnThokMobj(player);
            if P_HomingAttack((*player).mo, (*(*player).mo).tracer) == 0 {
                if (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int
                    != 0
                {
                    P_SetObjectMomZ(
                        (*player).mo,
                        FixedDiv(
                            457 as libc::c_int
                                * ((1 as libc::c_int) << 16 as libc::c_int),
                            72 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                        ),
                        false_0 as libc::c_int,
                    );
                } else {
                    P_SetObjectMomZ(
                        (*player).mo,
                        10 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                        false_0 as libc::c_int,
                    );
                }
                (*player).homing = 0 as libc::c_int as uint8_t;
                (*(*player).mo).momy = (*player).homing as fixed_t;
                (*(*player).mo).momx = (*(*player).mo).momy;
                if (*(*(*player).mo).tracer).flags2 & MF2_FRET as libc::c_int as uint32_t
                    != 0
                {
                    P_InstaThrust(
                        (*player).mo,
                        (*(*player).mo).angle,
                        -((*player).speed >> 3 as libc::c_int),
                    );
                }
                if (*(*(*player).mo).tracer).flags & MF_BOSS as libc::c_int as uint32_t
                    == 0
                {
                    (*player)
                        .pflags = ::core::mem::transmute::<
                        libc::c_uint,
                        pflags_t,
                    >(
                        (*player).pflags as libc::c_uint
                            & !(PF_THOKKED as libc::c_int) as libc::c_uint,
                    );
                }
                P_SetPlayerMobjState((*player).mo, S_PLAY_SPRING);
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        | PF_NOJUMPDAMAGE as libc::c_int as libc::c_uint,
                );
            }
        }
        if (*player).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint
            == 0
        {
            (*player).homing = 0 as libc::c_int as uint8_t;
        }
    } else {
        (*player).homing = 0 as libc::c_int as uint8_t;
    }
    if (*cmd).buttons as libc::c_int & BT_JUMP as libc::c_int != 0 {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >((*player).pflags as libc::c_uint | PF_JUMPDOWN as libc::c_int as libc::c_uint);
        if (gametyperules & GTR_TEAMFLAGS as libc::c_int as uint32_t == 0
            || (*player).gotflag == 0) && (*player).exiting == 0
        {
            if (*player).secondjump as libc::c_int == 1 as libc::c_int
                && (*player).charability as libc::c_int != CA_DOUBLEJUMP as libc::c_int
                && (*player).charability as libc::c_int != CA_THOK as libc::c_int
            {
                let mut potentialmomz: fixed_t = 0;
                if (*player).charability as libc::c_int == CA_SLOWFALL as libc::c_int {
                    potentialmomz = FixedMul(
                        gravity,
                        -(4 as libc::c_int) * (*(*player).mo).scale,
                    );
                } else {
                    potentialmomz = if (*player).speed
                        < 10 as libc::c_int * (*(*player).mo).scale
                    {
                        ((*player).speed - 10 as libc::c_int * (*(*player).mo).scale)
                            / 5 as libc::c_int
                    } else {
                        0 as libc::c_int
                    };
                }
                if P_MobjFlip((*player).mo) as libc::c_int * (*(*player).mo).momz
                    < potentialmomz
                {
                    (*(*player).mo)
                        .momz = P_MobjFlip((*player).mo) as libc::c_int * potentialmomz;
                }
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        & !(PF_SPINNING as libc::c_int) as libc::c_uint,
                );
            }
        }
    } else {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_JUMPDOWN as libc::c_int) as libc::c_uint,
        );
        if (*player).secondjump as libc::c_int == 1 as libc::c_int
            && (*player).charability as libc::c_int != CA_DOUBLEJUMP as libc::c_int
            && (*player).charability as libc::c_int != CA_AIRDRILL as libc::c_int
            && (*player).charability as libc::c_int != CA_THOK as libc::c_int
        {
            if (*player).charflags & SF_MULTIABILITY as libc::c_int as uint32_t != 0 {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        | (PF_JUMPED as libc::c_int | PF_NOJUMPDAMAGE as libc::c_int)
                            as libc::c_uint,
                );
                (*player).secondjump = 0 as libc::c_int as uint8_t;
            } else {
                (*player).secondjump = 2 as libc::c_int as uint8_t;
            }
            P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
        }
        if (*player).pflags as libc::c_uint
            & (PF_JUMPED as libc::c_int | PF_STARTJUMP as libc::c_int) as libc::c_uint
            == (PF_JUMPED as libc::c_int | PF_STARTJUMP as libc::c_int) as libc::c_uint
            && P_MobjFlip((*player).mo) as libc::c_int * (*(*player).mo).momz
                > 0 as libc::c_int
        {
            (*(*player).mo).momz >>= 1 as libc::c_int;
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    & !(PF_STARTJUMP as libc::c_int) as libc::c_uint,
            );
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn P_GetPlayerControlDirection(
    mut player: *mut player_t,
) -> int32_t {
    let mut cmd: *mut ticcmd_t = &mut (*player).cmd;
    let mut controllerdirection: angle_t = 0;
    let mut controlplayerdirection: angle_t = 0;
    let mut dangle: angle_t = 0;
    let mut tempx: fixed_t = 0 as libc::c_int;
    let mut tempy: fixed_t = 0 as libc::c_int;
    let mut tempangle: angle_t = 0;
    let mut origtempangle: angle_t = 0;
    if (*cmd).forwardmove == 0 && (*cmd).sidemove == 0 {
        return 0 as libc::c_int;
    }
    if (*(*player).mo).momx == 0 && (*(*player).mo).momy == 0 {
        return 0 as libc::c_int;
    }
    if maptol & TOL_2D as libc::c_int as uint32_t != 0
        || (*(*player).mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0
    {
        if (*cmd).sidemove == 0 {
            return 0 as libc::c_int;
        }
        if (*(*player).mo).momx == 0 {
            return 0 as libc::c_int;
        }
        tempangle = 0 as libc::c_int as angle_t;
        origtempangle = tempangle;
        controlplayerdirection = R_PointToAngle2(
            0 as libc::c_int,
            0 as libc::c_int,
            (*(*player).mo).momx,
            (*(*player).mo).momy,
        );
    } else {
        if (*player).awayviewtics != 0 {
            tempangle = (*(*player).awayviewmobj).angle;
            origtempangle = tempangle;
        } else if ((if (*player).pflags as libc::c_uint
            & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
        {
            CS_LMAOGALOG as libc::c_int
        } else {
            0 as libc::c_int
        })
            | (if (*player).pflags as libc::c_uint
                & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
            {
                CS_STANDARD as libc::c_int
            } else {
                0 as libc::c_int
            })) & CS_LMAOGALOG as libc::c_int != 0
        {
            tempangle = (((*cmd).angleturn as libc::c_int) << 16 as libc::c_int)
                as angle_t;
            origtempangle = tempangle;
        } else {
            tempangle = (*(*player).mo).angle;
            origtempangle = tempangle;
        }
        controlplayerdirection = R_PointToAngle2(
            0 as libc::c_int,
            0 as libc::c_int,
            (*(*player).mo).momx,
            (*(*player).mo).momy,
        );
    }
    tempangle >>= 19 as libc::c_int;
    if !(maptol & TOL_2D as libc::c_int as uint32_t != 0
        || (*(*player).mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0)
    {
        tempx
            += FixedMul(
                (*cmd).forwardmove as libc::c_int
                    * ((1 as libc::c_int) << 16 as libc::c_int),
                *finecosine.offset(tempangle as isize)
                    >> 16 as libc::c_int - 16 as libc::c_int,
            );
        tempy
            += FixedMul(
                (*cmd).forwardmove as libc::c_int
                    * ((1 as libc::c_int) << 16 as libc::c_int),
                finesine[tempangle as usize] >> 16 as libc::c_int - 16 as libc::c_int,
            );
        tempangle = origtempangle.wrapping_sub(0x40000000 as libc::c_int as angle_t);
        tempangle >>= 19 as libc::c_int;
    }
    tempx
        += FixedMul(
            (*cmd).sidemove as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
            *finecosine.offset(tempangle as isize)
                >> 16 as libc::c_int - 16 as libc::c_int,
        );
    tempy
        += FixedMul(
            (*cmd).sidemove as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
            finesine[tempangle as usize] >> 16 as libc::c_int - 16 as libc::c_int,
        );
    controllerdirection = R_PointToAngle2(
        0 as libc::c_int,
        0 as libc::c_int,
        tempx,
        tempy,
    );
    dangle = controllerdirection.wrapping_sub(controlplayerdirection);
    if dangle > 0x80000000 as libc::c_uint {
        dangle = InvAngle(dangle);
    }
    if dangle > 0x40000000 as libc::c_int as angle_t {
        return 2 as libc::c_int
    } else {
        return 1 as libc::c_int
    };
}
unsafe extern "C" fn P_ShouldResetConveyorMomentum(
    mut player: *mut player_t,
) -> boolean {
    match (*player).onconveyor {
        1 => return false_0 as libc::c_int,
        2 => {
            return ((*(*player).mo).eflags as libc::c_int
                & (MFE_UNDERWATER as libc::c_int | MFE_TOUCHWATER as libc::c_int) == 0)
                as libc::c_int;
        }
        4 => return (P_IsObjectOnGround((*player).mo) == 0) as libc::c_int,
        3 | _ => return true_0 as libc::c_int,
    };
}
unsafe extern "C" fn P_2dMovement(mut player: *mut player_t) {
    let mut cmd: *mut ticcmd_t = 0 as *mut ticcmd_t;
    let mut topspeed: int32_t = 0;
    let mut acceleration: int32_t = 0;
    let mut thrustfactor: int32_t = 0;
    let mut movepushforward: fixed_t = 0 as libc::c_int;
    let mut movepushangle: angle_t = 0 as libc::c_int as angle_t;
    let mut normalspd: fixed_t = FixedMul((*player).normalspeed, (*(*player).mo).scale);
    cmd = &mut (*player).cmd;
    if (*player).exiting != 0
        || (*player).pflags as libc::c_uint & PF_STASIS as libc::c_int as libc::c_uint
            != 0
    {
        (*cmd).sidemove = 0 as libc::c_int as int8_t;
        (*cmd).forwardmove = (*cmd).sidemove;
        if (*player).pflags as libc::c_uint & PF_GLIDING as libc::c_int as libc::c_uint
            != 0
        {
            if (*player).skidtime == 0 {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        & !(PF_GLIDING as libc::c_int) as libc::c_uint,
                );
            } else if (*player).exiting != 0 {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        & !(PF_GLIDING as libc::c_int) as libc::c_uint,
                );
                P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
                (*player).skidtime = 0 as libc::c_int as tic_t;
            }
        }
        if (*player).pflags as libc::c_uint & PF_BOUNCING as libc::c_int as libc::c_uint
            != 0
        {
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    & !(PF_BOUNCING as libc::c_int) as libc::c_uint,
            );
        }
        if (*player).pflags as libc::c_uint & PF_SPINNING as libc::c_int as libc::c_uint
            != 0 && (*player).exiting == 0
        {
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    & !(PF_SPINNING as libc::c_int) as libc::c_uint,
            );
            P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
        }
    }
    if P_ShouldResetConveyorMomentum(player) != 0 {
        (*player).cmomy = 0 as libc::c_int;
        (*player).cmomx = (*player).cmomy;
    }
    (*player).rmomx = (*(*player).mo).momx - (*player).cmomx;
    (*player).rmomy = (*(*player).mo).momy - (*player).cmomy;
    (*player).speed = abs((*player).rmomx);
    if (*player).pflags as libc::c_uint & PF_GLIDING as libc::c_int as libc::c_uint != 0
    {
        if (*(*player).mo).angle < 0x80000000 as libc::c_uint
            && (*(*player).mo).angle > 0x40000000 as libc::c_int as angle_t
        {
            (*(*player).mo).angle = 0x80000000 as libc::c_uint;
        } else if (*(*player).mo).angle < 0x40000000 as libc::c_int as angle_t
            && (*(*player).mo).angle > 0 as libc::c_int as angle_t
        {
            (*(*player).mo).angle = 0 as libc::c_int as angle_t;
        }
        if (*cmd).sidemove as libc::c_int > 0 as libc::c_int
            && (*(*player).mo).angle != 0 as libc::c_int as angle_t
            && (*(*player).mo).angle >= 0x80000000 as libc::c_uint
        {
            (*(*player).mo)
                .angle = ((*(*player).mo).angle)
                .wrapping_add(((1280 as libc::c_int) << 16 as libc::c_int) as angle_t);
        } else if ((*cmd).sidemove as libc::c_int) < 0 as libc::c_int
            && (*(*player).mo).angle != 0x80000000 as libc::c_uint
            && ((*(*player).mo).angle > 0x80000000 as libc::c_uint
                || (*(*player).mo).angle == 0 as libc::c_int as angle_t)
        {
            (*(*player).mo)
                .angle = ((*(*player).mo).angle)
                .wrapping_sub(((1280 as libc::c_int) << 16 as libc::c_int) as angle_t);
        } else if (*cmd).sidemove as libc::c_int == 0 as libc::c_int {
            if (*(*player).mo).angle >= 0xc0000000 as libc::c_uint {
                (*(*player).mo)
                    .angle = ((*(*player).mo).angle)
                    .wrapping_add(
                        ((1280 as libc::c_int) << 16 as libc::c_int) as angle_t,
                    );
            } else if (*(*player).mo).angle < 0xc0000000 as libc::c_uint
                && (*(*player).mo).angle > 0x80000000 as libc::c_uint
            {
                (*(*player).mo)
                    .angle = ((*(*player).mo).angle)
                    .wrapping_sub(
                        ((1280 as libc::c_int) << 16 as libc::c_int) as angle_t,
                    );
            }
        }
    } else if (*cmd).sidemove as libc::c_int != 0 && (*player).climbing == 0
        && P_PlayerInPain(player) == 0
    {
        if (*cmd).sidemove as libc::c_int > 0 as libc::c_int {
            (*(*player).mo).angle = 0 as libc::c_int as angle_t;
        } else if ((*cmd).sidemove as libc::c_int) < 0 as libc::c_int {
            (*(*player).mo).angle = 0x80000000 as libc::c_uint;
        }
    }
    P_SetPlayerAngle(player, (*(*player).mo).angle);
    if (*player).pflags as libc::c_uint & PF_GLIDING as libc::c_int as libc::c_uint != 0
    {
        movepushangle = (*(*player).mo).angle;
    } else if (*cmd).sidemove as libc::c_int > 0 as libc::c_int {
        movepushangle = 0 as libc::c_int as angle_t;
    } else if ((*cmd).sidemove as libc::c_int) < 0 as libc::c_int {
        movepushangle = 0x80000000 as libc::c_uint;
    } else {
        movepushangle = (*(*player).mo).angle;
    }
    onground = P_IsObjectOnGround((*player).mo);
    (*player).aiming = (((*cmd).aiming as libc::c_int) << 16 as libc::c_int) as angle_t;
    if maptol & TOL_2D as libc::c_int as uint32_t != 0 {
        normalspd = FixedMul(
            normalspd,
            2 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                / 3 as libc::c_int,
        );
    }
    if (*player).powers[pw_super as libc::c_int as usize] as libc::c_int != 0
        || (*player).powers[pw_sneakers as libc::c_int as usize] as libc::c_int != 0
    {
        thrustfactor = (*player).thrustfactor as libc::c_int * 2 as libc::c_int;
        acceleration = (*player).accelstart as libc::c_int / 2 as libc::c_int
            + (FixedDiv((*player).speed, (*(*player).mo).scale) >> 16 as libc::c_int)
                * (*player).acceleration as libc::c_int / 2 as libc::c_int;
        if (*player).powers[pw_tailsfly as libc::c_int as usize] != 0 {
            topspeed = normalspd;
        } else if (*(*player).mo).eflags as libc::c_int
            & (MFE_UNDERWATER as libc::c_int | MFE_GOOWATER as libc::c_int) != 0
            && (*player).pflags as libc::c_uint
                & PF_SLIDING as libc::c_int as libc::c_uint == 0
        {
            topspeed = normalspd;
            acceleration = 2 as libc::c_int * acceleration / 3 as libc::c_int;
        } else {
            topspeed = normalspd * 2 as libc::c_int;
        }
    } else {
        thrustfactor = (*player).thrustfactor as int32_t;
        acceleration = (*player).accelstart as libc::c_int
            + (FixedDiv((*player).speed, (*(*player).mo).scale) >> 16 as libc::c_int)
                * (*player).acceleration as libc::c_int;
        if (*player).powers[pw_tailsfly as libc::c_int as usize] != 0 {
            topspeed = normalspd / 2 as libc::c_int;
        } else if (*(*player).mo).eflags as libc::c_int
            & (MFE_UNDERWATER as libc::c_int | MFE_GOOWATER as libc::c_int) != 0
            && (*player).pflags as libc::c_uint
                & PF_SLIDING as libc::c_int as libc::c_uint == 0
        {
            topspeed = normalspd / 2 as libc::c_int;
            acceleration = 2 as libc::c_int * acceleration / 3 as libc::c_int;
        } else {
            topspeed = normalspd;
        }
    }
    if (*player).climbing != 0 {
        if (*cmd).forwardmove as libc::c_int != 0 as libc::c_int {
            P_SetObjectMomZ(
                (*player).mo,
                FixedDiv(
                    (*cmd).forwardmove as libc::c_int
                        * ((1 as libc::c_int) << 16 as libc::c_int),
                    if (*player).powers[pw_super as libc::c_int as usize] as libc::c_int
                        != 0
                    {
                        5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                    } else {
                        15 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                            >> 1 as libc::c_int
                    },
                ),
                false_0 as libc::c_int,
            );
        }
        (*(*player).mo).momx = 0 as libc::c_int;
    } else if (*cmd).sidemove as libc::c_int != 0 as libc::c_int
        && !((*player).pflags as libc::c_uint & PF_GLIDING as libc::c_int as libc::c_uint
            != 0 || (*player).exiting != 0
            || P_PlayerInPain(player) != 0 && onground == 0)
    {
        movepushforward = abs((*cmd).sidemove as libc::c_int)
            * (thrustfactor * acceleration);
        if onground == 0 {
            movepushforward >>= 1 as libc::c_int;
        }
        if (*player).pflags as libc::c_uint
            & (PF_SPINNING as libc::c_int | PF_THOKKED as libc::c_int) as libc::c_uint
            == PF_SPINNING as libc::c_int as libc::c_uint
        {
            if (*player).pflags as libc::c_uint
                & PF_STARTDASH as libc::c_int as libc::c_uint == 0
            {
                movepushforward = movepushforward / 48 as libc::c_int;
            } else {
                movepushforward = 0 as libc::c_int;
            }
        }
        movepushforward = FixedMul(movepushforward, (*(*player).mo).scale);
        if (*player).rmomx < topspeed
            && (*cmd).sidemove as libc::c_int > 0 as libc::c_int
        {
            P_Thrust((*player).mo, movepushangle, movepushforward);
        } else if (*player).rmomx > -topspeed
            && ((*cmd).sidemove as libc::c_int) < 0 as libc::c_int
        {
            P_Thrust((*player).mo, movepushangle, movepushforward);
        }
    }
}
unsafe extern "C" fn P_3dMovement(mut player: *mut player_t) {
    let mut cmd: *mut ticcmd_t = 0 as *mut ticcmd_t;
    let mut movepushangle: angle_t = 0;
    let mut movepushsideangle: angle_t = 0;
    let mut topspeed: int32_t = 0;
    let mut acceleration: int32_t = 0;
    let mut thrustfactor: int32_t = 0;
    let mut movepushforward: fixed_t = 0 as libc::c_int;
    let mut movepushside: fixed_t = 0 as libc::c_int;
    let mut mforward: int32_t = 0 as libc::c_int;
    let mut mbackward: int32_t = 0 as libc::c_int;
    let mut dangle: angle_t = 0;
    let mut normalspd: fixed_t = FixedMul((*player).normalspeed, (*(*player).mo).scale);
    let mut controlstyle: controlstyle_e = CS_LEGACY;
    onground = P_IsObjectOnGround((*player).mo);
    let mut spin: boolean = (onground != 0
        && (*player).pflags as libc::c_uint
            & (PF_SPINNING as libc::c_int | PF_THOKKED as libc::c_int) as libc::c_uint
            == PF_SPINNING as libc::c_int as libc::c_uint
        && ((*player).rmomx != 0 || (*player).rmomy != 0)
        && (*player).pflags as libc::c_uint & PF_STARTDASH as libc::c_int as libc::c_uint
            == 0) as libc::c_int;
    let mut oldMagnitude: fixed_t = 0;
    let mut newMagnitude: fixed_t = 0;
    let mut totalthrust: vector3_t = vector3_t { x: 0, y: 0, z: 0 };
    totalthrust.y = 0 as libc::c_int;
    totalthrust.x = totalthrust.y;
    totalthrust
        .z = ((1 as libc::c_int) << 16 as libc::c_int)
        * P_MobjFlip((*player).mo) as libc::c_int / 3 as libc::c_int;
    oldMagnitude = R_PointToDist2(
        (*(*player).mo).momx - (*player).cmomx,
        (*(*player).mo).momy - (*player).cmomy,
        0 as libc::c_int,
        0 as libc::c_int,
    );
    controlstyle = ((if (*player).pflags as libc::c_uint
        & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
    {
        CS_LMAOGALOG as libc::c_int
    } else {
        0 as libc::c_int
    })
        | (if (*player).pflags as libc::c_uint
            & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
        {
            CS_STANDARD as libc::c_int
        } else {
            0 as libc::c_int
        })) as controlstyle_e;
    cmd = &mut (*player).cmd;
    if (*player).exiting != 0
        || (*player).pflags as libc::c_uint & PF_STASIS as libc::c_int as libc::c_uint
            != 0
    {
        (*cmd).sidemove = 0 as libc::c_int as int8_t;
        (*cmd).forwardmove = (*cmd).sidemove;
        if (*player).pflags as libc::c_uint & PF_GLIDING as libc::c_int as libc::c_uint
            != 0
        {
            if (*player).skidtime == 0 {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        & !(PF_GLIDING as libc::c_int) as libc::c_uint,
                );
            } else if (*player).exiting != 0 {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        & !(PF_GLIDING as libc::c_int) as libc::c_uint,
                );
                P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
                (*player).skidtime = 0 as libc::c_int as tic_t;
            }
        }
        if (*player).pflags as libc::c_uint & PF_BOUNCING as libc::c_int as libc::c_uint
            != 0
        {
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    & !(PF_BOUNCING as libc::c_int) as libc::c_uint,
            );
        }
        if (*player).pflags as libc::c_uint & PF_SPINNING as libc::c_int as libc::c_uint
            != 0 && (*player).exiting == 0
        {
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    & !(PF_SPINNING as libc::c_int) as libc::c_uint,
            );
            P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
        }
    }
    if controlstyle as libc::c_uint & CS_LMAOGALOG as libc::c_int as libc::c_uint != 0 {
        movepushangle = (((*cmd).angleturn as libc::c_int) << 16 as libc::c_int)
            as angle_t;
    } else {
        movepushangle = (*(*player).mo).angle;
    }
    movepushsideangle = movepushangle.wrapping_sub(0x40000000 as libc::c_int as angle_t);
    if P_ShouldResetConveyorMomentum(player) != 0 {
        (*player).cmomy = 0 as libc::c_int;
        (*player).cmomx = (*player).cmomy;
    }
    (*player).rmomx = (*(*player).mo).momx - (*player).cmomx;
    (*player).rmomy = (*(*player).mo).momy - (*player).cmomy;
    (*player).speed = P_AproxDistance((*player).rmomx, (*player).rmomy);
    dangle = (R_PointToAngle2(
        0 as libc::c_int,
        0 as libc::c_int,
        (*player).rmomx,
        (*player).rmomy,
    ))
        .wrapping_sub((*(*player).mo).angle);
    if dangle > 0x80000000 as libc::c_uint {
        dangle = InvAngle(dangle);
    }
    if dangle <= 0x20000000 as libc::c_int as angle_t {
        mforward = 1 as libc::c_int;
    } else if dangle >= 0x60000000 as libc::c_int as angle_t {
        mbackward = 1 as libc::c_int;
    }
    if (*player).pflags as libc::c_uint & PF_SLIDING as libc::c_int as libc::c_uint != 0
    {
        (*cmd).forwardmove = 0 as libc::c_int as int8_t;
    } else if onground != 0
        && (*(*player).mo).state
            == states.as_mut_ptr().offset(S_PLAY_PAIN as libc::c_int as isize)
    {
        P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
    }
    (*player).aiming = (((*cmd).aiming as libc::c_int) << 16 as libc::c_int) as angle_t;
    if (*player).pflags as libc::c_uint & PF_SLIDING as libc::c_int as libc::c_uint != 0
    {
        normalspd = FixedMul(
            (36 as libc::c_int) << 16 as libc::c_int,
            (*(*player).mo).scale,
        );
        thrustfactor = 5 as libc::c_int;
        acceleration = 96 as libc::c_int
            + (FixedDiv((*player).speed, (*(*player).mo).scale) >> 16 as libc::c_int)
                * 40 as libc::c_int;
        topspeed = normalspd;
    } else {
        if (*player).powers[pw_super as libc::c_int as usize] as libc::c_int != 0
            || (*player).powers[pw_sneakers as libc::c_int as usize] as libc::c_int != 0
        {
            topspeed = 5 as libc::c_int * normalspd / 3 as libc::c_int;
            thrustfactor = (*player).thrustfactor as libc::c_int * 2 as libc::c_int;
            acceleration = (*player).accelstart as libc::c_int / 2 as libc::c_int
                + (FixedDiv((*player).speed, (*(*player).mo).scale) >> 16 as libc::c_int)
                    * (*player).acceleration as libc::c_int / 2 as libc::c_int;
        } else {
            topspeed = normalspd;
            thrustfactor = (*player).thrustfactor as int32_t;
            acceleration = (*player).accelstart as libc::c_int
                + (FixedDiv((*player).speed, (*(*player).mo).scale) >> 16 as libc::c_int)
                    * (*player).acceleration as libc::c_int;
        }
        if (*player).powers[pw_tailsfly as libc::c_int as usize] != 0 {
            topspeed >>= 1 as libc::c_int;
        } else if (*(*player).mo).eflags as libc::c_int
            & (MFE_UNDERWATER as libc::c_int | MFE_GOOWATER as libc::c_int) != 0
        {
            topspeed >>= 1 as libc::c_int;
            acceleration = 2 as libc::c_int * acceleration / 3 as libc::c_int;
        }
    }
    if spin != 0 {
        let ns: fixed_t = FixedDiv(
            549 as libc::c_int
                * ((0xe8 as libc::c_int) << 16 as libc::c_int - 8 as libc::c_int),
            500 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
        );
        topspeed = FixedMul(oldMagnitude, ns);
    }
    if (*player).powers[pw_tailsfly as libc::c_int as usize] != 0 {
        thrustfactor = (*player).thrustfactor as libc::c_int * 2 as libc::c_int;
        acceleration = (*player).accelstart as libc::c_int
            + (FixedDiv((*player).speed, (*(*player).mo).scale) >> 16 as libc::c_int)
                * (*player).acceleration as libc::c_int;
    } else {
        if (*player).pflags as libc::c_uint & PF_BOUNCING as libc::c_int as libc::c_uint
            != 0
        {
            if ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
                == S_PLAY_BOUNCE_LANDING as libc::c_int as libc::c_long
            {
                thrustfactor = (*player).thrustfactor as libc::c_int * 8 as libc::c_int;
                acceleration = (*player).accelstart as libc::c_int / 8 as libc::c_int
                    + (FixedDiv((*player).speed, (*(*player).mo).scale)
                        >> 16 as libc::c_int) * (*player).acceleration as libc::c_int
                        / 8 as libc::c_int;
            } else {
                thrustfactor = 3 as libc::c_int * (*player).thrustfactor as libc::c_int
                    / 4 as libc::c_int;
                acceleration = (*player).accelstart as libc::c_int
                    + (FixedDiv((*player).speed, (*(*player).mo).scale)
                        >> 16 as libc::c_int) * (*player).acceleration as libc::c_int;
            }
        }
        if (*(*player).mo).movefactor != (1 as libc::c_int) << 16 as libc::c_int {
            acceleration = FixedMul(
                acceleration << 16 as libc::c_int,
                (*(*player).mo).movefactor,
            ) >> 16 as libc::c_int;
        }
    }
    if (*player).climbing != 0 {
        if (*cmd).forwardmove != 0 {
            if (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int != 0
            {
                P_SetObjectMomZ(
                    (*player).mo,
                    FixedDiv(
                        (*cmd).forwardmove as libc::c_int
                            * ((1 as libc::c_int) << 16 as libc::c_int),
                        if (*player).powers[pw_super as libc::c_int as usize]
                            as libc::c_int != 0
                        {
                            20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                                / 3 as libc::c_int
                        } else {
                            10 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                        },
                    ),
                    false_0 as libc::c_int,
                );
            } else {
                P_SetObjectMomZ(
                    (*player).mo,
                    FixedDiv(
                        (*cmd).forwardmove as libc::c_int
                            * ((1 as libc::c_int) << 16 as libc::c_int),
                        if (*player).powers[pw_super as libc::c_int as usize]
                            as libc::c_int != 0
                        {
                            5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                        } else {
                            15 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                                >> 1 as libc::c_int
                        },
                    ),
                    false_0 as libc::c_int,
                );
            }
        }
    } else if !(controlstyle as libc::c_uint
        == CS_LMAOGALOG as libc::c_int as libc::c_uint)
        && (*cmd).forwardmove as libc::c_int != 0 as libc::c_int
        && !((*player).pflags as libc::c_uint & PF_GLIDING as libc::c_int as libc::c_uint
            != 0 || (*player).exiting != 0
            || P_PlayerInPain(player) != 0 && onground == 0)
    {
        movepushforward = (*cmd).forwardmove as libc::c_int
            * (thrustfactor * acceleration);
        if (*player).pflags as libc::c_uint
            & (PF_SPINNING as libc::c_int | PF_THOKKED as libc::c_int) as libc::c_uint
            == PF_SPINNING as libc::c_int as libc::c_uint
        {
            if mforward != 0 && (*cmd).forwardmove as libc::c_int > 0 as libc::c_int
                || mbackward != 0
                    && ((*cmd).forwardmove as libc::c_int) < 0 as libc::c_int
                || (*player).pflags as libc::c_uint
                    & PF_STARTDASH as libc::c_int as libc::c_uint != 0
            {
                movepushforward = 0 as libc::c_int;
            } else if onground != 0 {
                movepushforward >>= 4 as libc::c_int;
            } else {
                movepushforward >>= 3 as libc::c_int;
            }
        } else if onground == 0 {
            movepushforward >>= 2 as libc::c_int;
        }
        movepushforward = FixedMul(movepushforward, (*(*player).mo).scale);
        totalthrust.x += P_ReturnThrustX((*player).mo, movepushangle, movepushforward);
        totalthrust.y += P_ReturnThrustY((*player).mo, movepushangle, movepushforward);
    }
    if (*player).climbing != 0 {
        if (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int != 0 {
            P_InstaThrust(
                (*player).mo,
                ((*(*player).mo).angle)
                    .wrapping_sub(0x40000000 as libc::c_int as angle_t),
                FixedDiv(
                    (*cmd).sidemove as libc::c_int * (*(*player).mo).scale,
                    if (*player).powers[pw_super as libc::c_int as usize] as libc::c_int
                        != 0
                    {
                        20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                            / 3 as libc::c_int
                    } else {
                        10 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                    },
                ),
            );
        } else {
            P_InstaThrust(
                (*player).mo,
                ((*(*player).mo).angle)
                    .wrapping_sub(0x40000000 as libc::c_int as angle_t),
                FixedDiv(
                    (*cmd).sidemove as libc::c_int * (*(*player).mo).scale,
                    if (*player).powers[pw_super as libc::c_int as usize] as libc::c_int
                        != 0
                    {
                        5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                    } else {
                        15 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                            >> 1 as libc::c_int
                    },
                ),
            );
        }
    } else if controlstyle as libc::c_uint == CS_LMAOGALOG as libc::c_int as libc::c_uint
    {
        if !((*player).pflags as libc::c_uint & PF_GLIDING as libc::c_int as libc::c_uint
            != 0 || (*player).exiting != 0 || P_PlayerInPain(player) != 0)
        {
            let mut controldirection: angle_t = 0;
            controldirection = (R_PointToAngle2(
                0 as libc::c_int,
                0 as libc::c_int,
                (*cmd).forwardmove as libc::c_int
                    * ((1 as libc::c_int) << 16 as libc::c_int),
                -((*cmd).sidemove as libc::c_int)
                    * ((1 as libc::c_int) << 16 as libc::c_int),
            ))
                .wrapping_add(movepushangle);
            movepushforward = FixedHypot(
                (*cmd).sidemove as fixed_t,
                (*cmd).forwardmove as fixed_t,
            ) * (thrustfactor * acceleration);
            if (*player).pflags as libc::c_uint
                & (PF_SPINNING as libc::c_int | PF_THOKKED as libc::c_int)
                    as libc::c_uint == PF_SPINNING as libc::c_int as libc::c_uint
            {
                if mforward != 0 && (*cmd).forwardmove as libc::c_int > 0 as libc::c_int
                    || mbackward != 0
                        && ((*cmd).forwardmove as libc::c_int) < 0 as libc::c_int
                    || (*player).pflags as libc::c_uint
                        & PF_STARTDASH as libc::c_int as libc::c_uint != 0
                {
                    movepushforward = 0 as libc::c_int;
                } else if onground != 0 {
                    movepushforward >>= 4 as libc::c_int;
                } else {
                    movepushforward >>= 3 as libc::c_int;
                }
            } else if onground == 0 {
                movepushforward >>= 2 as libc::c_int;
            }
            movepushsideangle = controldirection;
            movepushforward = FixedMul(movepushforward, (*(*player).mo).scale);
            totalthrust.x
                += P_ReturnThrustX((*player).mo, controldirection, movepushforward);
            totalthrust.y
                += P_ReturnThrustY((*player).mo, controldirection, movepushforward);
        }
    } else if (*cmd).sidemove as libc::c_int != 0
        && (*player).pflags as libc::c_uint & PF_GLIDING as libc::c_int as libc::c_uint
            == 0 && (*player).exiting == 0 && P_PlayerInPain(player) == 0
    {
        movepushside = (*cmd).sidemove as libc::c_int * (thrustfactor * acceleration);
        if onground == 0 {
            movepushside >>= 2 as libc::c_int;
            if (*player).pflags as libc::c_uint
                & (PF_SPINNING as libc::c_int | PF_THOKKED as libc::c_int)
                    as libc::c_uint == PF_SPINNING as libc::c_int as libc::c_uint
                || (*player).powers[pw_tailsfly as libc::c_int as usize] as libc::c_int
                    != 0 && (*player).speed > topspeed
            {
                movepushside >>= 2 as libc::c_int;
            }
        } else if (*player).pflags as libc::c_uint
            & (PF_SPINNING as libc::c_int | PF_THOKKED as libc::c_int) as libc::c_uint
            == PF_SPINNING as libc::c_int as libc::c_uint
        {
            if (*player).pflags as libc::c_uint
                & PF_STARTDASH as libc::c_int as libc::c_uint != 0
            {
                movepushside = 0 as libc::c_int;
            } else if onground != 0 {
                movepushside >>= 4 as libc::c_int;
            } else {
                movepushside >>= 3 as libc::c_int;
            }
        }
        movepushside = FixedMul(movepushside, (*(*player).mo).scale);
        totalthrust.x += P_ReturnThrustX((*player).mo, movepushsideangle, movepushside);
        totalthrust.y += P_ReturnThrustY((*player).mo, movepushsideangle, movepushside);
    }
    if (totalthrust.x != 0 || totalthrust.y != 0)
        && !((*(*player).mo).standingslope).is_null()
        && (*(*(*player).mo).standingslope).flags as libc::c_int
            & SL_NOPHYSICS as libc::c_int == 0
        && abs((*(*(*player).mo).standingslope).zdelta)
            > ((1 as libc::c_int) << 16 as libc::c_int) / 2 as libc::c_int
    {
        let mut thrustangle: angle_t = (R_PointToAngle2(
            0 as libc::c_int,
            0 as libc::c_int,
            totalthrust.x,
            totalthrust.y,
        ))
            .wrapping_sub((*(*(*player).mo).standingslope).xydirection);
        if (*(*(*player).mo).standingslope).zdelta < 0 as libc::c_int {
            if thrustangle < 0x40000000 as libc::c_int as angle_t
                || thrustangle > 0xc0000000 as libc::c_uint
            {
                P_QuantizeMomentumToSlope(
                    &mut totalthrust,
                    (*(*player).mo).standingslope,
                );
            }
        } else if thrustangle > 0x40000000 as libc::c_int as angle_t
            && thrustangle < 0xc0000000 as libc::c_uint
        {
            P_QuantizeMomentumToSlope(&mut totalthrust, (*(*player).mo).standingslope);
        }
    }
    (*(*player).mo).momx += totalthrust.x;
    (*(*player).mo).momy += totalthrust.y;
    newMagnitude = R_PointToDist2(
        (*(*player).mo).momx - (*player).cmomx,
        (*(*player).mo).momy - (*player).cmomy,
        0 as libc::c_int,
        0 as libc::c_int,
    );
    if newMagnitude > topspeed {
        let mut tempmomx: fixed_t = 0;
        let mut tempmomy: fixed_t = 0;
        if oldMagnitude > topspeed && spin == 0 {
            if newMagnitude > oldMagnitude {
                tempmomx = FixedMul(
                    FixedDiv((*(*player).mo).momx - (*player).cmomx, newMagnitude),
                    oldMagnitude,
                );
                tempmomy = FixedMul(
                    FixedDiv((*(*player).mo).momy - (*player).cmomy, newMagnitude),
                    oldMagnitude,
                );
                (*(*player).mo).momx = tempmomx + (*player).cmomx;
                (*(*player).mo).momy = tempmomy + (*player).cmomy;
            }
        } else {
            tempmomx = FixedMul(
                FixedDiv((*(*player).mo).momx - (*player).cmomx, newMagnitude),
                topspeed,
            );
            tempmomy = FixedMul(
                FixedDiv((*(*player).mo).momy - (*player).cmomy, newMagnitude),
                topspeed,
            );
            (*(*player).mo).momx = tempmomx + (*player).cmomx;
            (*(*player).mo).momy = tempmomy + (*player).cmomy;
        }
    }
}
unsafe extern "C" fn P_SpectatorMovement(mut player: *mut player_t) {
    let mut cmd: *mut ticcmd_t = &mut (*player).cmd;
    (*(*player).mo)
        .angle = (((*cmd).angleturn as libc::c_int) << 16 as libc::c_int) as angle_t;
    ticruned += 1;
    ticruned;
    if (*cmd).angleturn as libc::c_int & 1 as libc::c_int == 0 {
        ticmiss += 1;
        ticmiss;
    }
    if (*cmd).buttons as libc::c_int & BT_JUMP as libc::c_int != 0 {
        (*(*player).mo).z
            += ((1 as libc::c_int) << 16 as libc::c_int) * 16 as libc::c_int;
    } else if (*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0 {
        (*(*player).mo).z
            -= ((1 as libc::c_int) << 16 as libc::c_int) * 16 as libc::c_int;
    }
    if (*(*player).mo).z > (*(*player).mo).ceilingz - (*(*player).mo).height {
        (*(*player).mo).z = (*(*player).mo).ceilingz - (*(*player).mo).height;
    }
    if (*(*player).mo).z < (*(*player).mo).floorz {
        (*(*player).mo).z = (*(*player).mo).floorz;
    }
    (*player).aiming = (((*cmd).aiming as libc::c_int) << 16 as libc::c_int) as angle_t;
    (*(*player).mo).momz = 0 as libc::c_int;
    (*(*player).mo).momy = (*(*player).mo).momz;
    (*(*player).mo).momx = (*(*player).mo).momy;
    if (*cmd).forwardmove as libc::c_int != 0 as libc::c_int {
        P_Thrust(
            (*player).mo,
            (*(*player).mo).angle,
            (*cmd).forwardmove as libc::c_int
                * (((1 as libc::c_int) << 16 as libc::c_int) / 2 as libc::c_int),
        );
        (*(*player).mo).momz
            += FixedMul(
                (*cmd).forwardmove as libc::c_int
                    * (((1 as libc::c_int) << 16 as libc::c_int) / 2 as libc::c_int),
                finesine[((*player).aiming >> 19 as libc::c_int
                    & (8192 as libc::c_int - 1 as libc::c_int) as angle_t) as usize]
                    >> 16 as libc::c_int - 16 as libc::c_int,
            );
    }
    if (*cmd).sidemove as libc::c_int != 0 as libc::c_int {
        P_Thrust(
            (*player).mo,
            ((*(*player).mo).angle).wrapping_sub(0x40000000 as libc::c_int as angle_t),
            (*cmd).sidemove as libc::c_int
                * (((1 as libc::c_int) << 16 as libc::c_int) / 2 as libc::c_int),
        );
    }
}
unsafe extern "C" fn P_ShootLine(
    mut source: *mut mobj_t,
    mut dest: *mut mobj_t,
    mut height: fixed_t,
) {
    let mut mo: *mut mobj_t = 0 as *mut mobj_t;
    let mut i: int32_t = 0;
    let mut temp: fixed_t = 0;
    let mut speed: int32_t = 0;
    let mut seesound: int32_t = 0;
    temp = (*dest).z;
    (*dest).z = height;
    seesound = mobjinfo[MT_REDRING as libc::c_int as usize].seesound as int32_t;
    speed = mobjinfo[MT_REDRING as libc::c_int as usize].speed;
    mobjinfo[MT_REDRING as libc::c_int as usize].seesound = sfx_None;
    mobjinfo[MT_REDRING as libc::c_int as usize]
        .speed = 20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
    mo = P_SpawnXYZMissile(source, dest, MT_REDRING, (*source).x, (*source).y, height);
    (*dest).z = temp;
    if !mo.is_null() {
        (*mo).flags2 |= MF2_RAILRING as libc::c_int as uint32_t;
        (*mo).flags2 |= MF2_DONTDRAW as libc::c_int as uint32_t;
        (*mo).flags |= MF_NOCLIPHEIGHT as libc::c_int as uint32_t;
        (*mo).flags |= MF_NOCLIP as libc::c_int as uint32_t;
        (*mo).flags &= !(MF_MISSILE as libc::c_int) as uint32_t;
        (*mo).fuse = 3 as libc::c_int;
    }
    i = 0 as libc::c_int;
    while i < 32 as libc::c_int {
        if !mo.is_null() {
            if (*mo).flags & MF_NOBLOCKMAP as libc::c_int as uint32_t == 0 {
                P_UnsetThingPosition(mo);
                (*mo).flags |= MF_NOBLOCKMAP as libc::c_int as uint32_t;
                P_SetThingPosition(mo);
            }
            if i & 1 as libc::c_int != 0 {
                P_SpawnMobj((*mo).x, (*mo).y, (*mo).z, MT_SPARK);
            }
            P_UnsetThingPosition(mo);
            (*mo).x += (*mo).momx;
            (*mo).y += (*mo).momy;
            (*mo).z += (*mo).momz;
            P_SetThingPosition(mo);
        } else {
            mobjinfo[MT_REDRING as libc::c_int as usize]
                .seesound = seesound as sfxenum_t;
            mobjinfo[MT_REDRING as libc::c_int as usize].speed = speed;
            return;
        }
        i += 1;
        i;
    }
    mobjinfo[MT_REDRING as libc::c_int as usize].seesound = seesound as sfxenum_t;
    mobjinfo[MT_REDRING as libc::c_int as usize].speed = speed;
}
unsafe extern "C" fn P_NightsTransferPoints(
    mut player: *mut player_t,
    mut xspeed: fixed_t,
    mut radius: fixed_t,
) {
    if (*player).pflags as libc::c_uint
        & PF_TRANSFERTOCLOSEST as libc::c_int as libc::c_uint != 0
    {
        let fa: angle_t = R_PointToAngle2(
            (*(*player).axis1).x,
            (*(*player).axis1).y,
            (*(*player).axis2).x,
            (*(*player).axis2).y,
        );
        P_InstaThrust((*player).mo, fa, xspeed / 10 as libc::c_int);
    } else {
        let fa_0: angle_t = (*player).angle_pos >> 19 as libc::c_int;
        let faold: angle_t = (*player).old_angle_pos >> 19 as libc::c_int;
        (*(*player).mo)
            .momx = FixedMul(
            *finecosine.offset(fa_0 as isize) >> 16 as libc::c_int - 16 as libc::c_int,
            radius,
        )
            - FixedMul(
                *finecosine.offset(faold as isize)
                    >> 16 as libc::c_int - 16 as libc::c_int,
                radius,
            );
        (*(*player).mo)
            .momy = FixedMul(
            finesine[fa_0 as usize] >> 16 as libc::c_int - 16 as libc::c_int,
            radius,
        )
            - FixedMul(
                finesine[faold as usize] >> 16 as libc::c_int - 16 as libc::c_int,
                radius,
            );
    }
    if (*player).exiting != 0 {
        return;
    }
    if P_CheckMove(
        (*player).mo,
        (*(*player).mo).x + (*(*player).mo).momx,
        (*(*player).mo).y + (*(*player).mo).momy,
        true_0 as libc::c_int,
    ) == 0
    {
        return;
    }
    let sequence: int32_t = (*(*(*player).mo).target).threshold;
    let mut transfer1: *mut mobj_t = 0 as *mut mobj_t;
    let mut transfer2: *mut mobj_t = 0 as *mut mobj_t;
    let mut axis: *mut mobj_t = 0 as *mut mobj_t;
    let mut mo2: *mut mobj_t = 0 as *mut mobj_t;
    let mut th: *mut thinker_t = 0 as *mut thinker_t;
    let mut transfer1line: line_t = line_s {
        v1: 0 as *mut vertex_t,
        v2: 0 as *mut vertex_t,
        dx: 0,
        dy: 0,
        angle: 0,
        flags: 0,
        special: 0,
        tags: taglist_t {
            tags: 0 as *mut mtag_t,
            count: 0,
        },
        args: [0; 10],
        stringargs: [0 as *mut libc::c_char; 2],
        sidenum: [0; 2],
        alpha: 0,
        blendmode: 0,
        executordelay: 0,
        bbox: [0; 4],
        slopetype: ST_HORIZONTAL,
        frontsector: 0 as *mut sector_t,
        backsector: 0 as *mut sector_t,
        validcount: 0,
        polyobj: 0 as *mut polyobj_t,
        callcount: 0,
    };
    let mut transfer2line: line_t = line_s {
        v1: 0 as *mut vertex_t,
        v2: 0 as *mut vertex_t,
        dx: 0,
        dy: 0,
        angle: 0,
        flags: 0,
        special: 0,
        tags: taglist_t {
            tags: 0 as *mut mtag_t,
            count: 0,
        },
        args: [0; 10],
        stringargs: [0 as *mut libc::c_char; 2],
        sidenum: [0; 2],
        alpha: 0,
        blendmode: 0,
        executordelay: 0,
        bbox: [0; 4],
        slopetype: ST_HORIZONTAL,
        frontsector: 0 as *mut sector_t,
        backsector: 0 as *mut sector_t,
        validcount: 0,
        polyobj: 0 as *mut polyobj_t,
        callcount: 0,
    };
    let mut transfer1last: boolean = false_0 as libc::c_int;
    let mut transfer2last: boolean = false_0 as libc::c_int;
    let mut vertices: [vertex_t; 4] = [vertex_t {
        x: 0,
        y: 0,
        floorzset: 0,
        ceilingzset: 0,
        floorz: 0,
        ceilingz: 0,
    }; 4];
    let mut truexspeed: fixed_t = xspeed
        * (if (*player).pflags as libc::c_uint
            & PF_TRANSFERTOCLOSEST as libc::c_int as libc::c_uint == 0
            && (*(*(*player).mo).target).flags2 & MF2_AMBUSH as libc::c_int as uint32_t
                != 0
        {
            -(1 as libc::c_int)
        } else {
            1 as libc::c_int
        });
    th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
    while th
        != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
            as *mut thinker_t
    {
        if !((*th).function.acp1
            == ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                actionf_p1,
            >(
                Some(
                    P_RemoveThinkerDelayed as unsafe extern "C" fn(*mut thinker_t) -> (),
                ),
            ))
        {
            mo2 = th as *mut mobj_t;
            if (*mo2).flags2 & MF2_AXIS as libc::c_int as uint32_t == 0 {
                break;
            }
            if (*mo2).type_0 as libc::c_uint
                == MT_AXISTRANSFER as libc::c_int as libc::c_uint
                || (*mo2).type_0 as libc::c_uint
                    == MT_AXISTRANSFERLINE as libc::c_int as libc::c_uint
            {
                if !((*mo2).threshold != sequence) {
                    if (*player).pflags as libc::c_uint
                        & PF_TRANSFERTOCLOSEST as libc::c_int as libc::c_uint != 0
                    {
                        if (*mo2).health == (*(*player).axis1).health {
                            transfer1 = mo2;
                        } else if (*mo2).health == (*(*player).axis2).health {
                            transfer2 = mo2;
                        }
                    } else if (*mo2).health == (*(*(*player).mo).target).health {
                        transfer1 = mo2;
                    } else if (*mo2).health
                        == (*(*(*player).mo).target).health + 1 as libc::c_int
                    {
                        transfer2 = mo2;
                    }
                }
            }
        }
        th = (*th).next;
    }
    if transfer1.is_null() {
        th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
        while th
            != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
                as *mut thinker_t
        {
            if !((*th).function.acp1
                == ::core::mem::transmute::<
                    Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                    actionf_p1,
                >(
                    Some(
                        P_RemoveThinkerDelayed
                            as unsafe extern "C" fn(*mut thinker_t) -> (),
                    ),
                ))
            {
                mo2 = th as *mut mobj_t;
                if (*mo2).flags2 & MF2_AXIS as libc::c_int as uint32_t == 0 {
                    break;
                }
                if (*mo2).type_0 as libc::c_uint
                    == MT_AXISTRANSFER as libc::c_int as libc::c_uint
                    || (*mo2).type_0 as libc::c_uint
                        == MT_AXISTRANSFERLINE as libc::c_int as libc::c_uint
                {
                    if !((*mo2).threshold != sequence) {
                        if transfer1.is_null() {
                            transfer1 = mo2;
                            transfer1last = true_0 as libc::c_int;
                        } else if (*mo2).health > (*transfer1).health {
                            transfer1 = mo2;
                            transfer1last = true_0 as libc::c_int;
                        }
                    }
                }
            }
            th = (*th).next;
        }
    }
    if transfer2.is_null() {
        th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
        while th
            != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
                as *mut thinker_t
        {
            if !((*th).function.acp1
                == ::core::mem::transmute::<
                    Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                    actionf_p1,
                >(
                    Some(
                        P_RemoveThinkerDelayed
                            as unsafe extern "C" fn(*mut thinker_t) -> (),
                    ),
                ))
            {
                mo2 = th as *mut mobj_t;
                if (*mo2).flags2 & MF2_AXIS as libc::c_int as uint32_t == 0 {
                    break;
                }
                if (*mo2).type_0 as libc::c_uint
                    == MT_AXISTRANSFER as libc::c_int as libc::c_uint
                    || (*mo2).type_0 as libc::c_uint
                        == MT_AXISTRANSFERLINE as libc::c_int as libc::c_uint
                {
                    if !((*mo2).threshold != sequence) {
                        if transfer2.is_null() {
                            transfer2 = mo2;
                            transfer2last = true_0 as libc::c_int;
                        } else if (*mo2).health > (*transfer2).health {
                            transfer2 = mo2;
                            transfer2last = true_0 as libc::c_int;
                        }
                    }
                }
            }
            th = (*th).next;
        }
    }
    if !(!transfer1.is_null() && !transfer2.is_null()) {
        I_Error(
            b"Mare does not form a complete circuit!\n\0" as *const u8
                as *const libc::c_char,
        );
    }
    transfer1line
        .v1 = &mut *vertices.as_mut_ptr().offset(0 as libc::c_int as isize)
        as *mut vertex_t;
    transfer1line
        .v2 = &mut *vertices.as_mut_ptr().offset(1 as libc::c_int as isize)
        as *mut vertex_t;
    transfer2line
        .v1 = &mut *vertices.as_mut_ptr().offset(2 as libc::c_int as isize)
        as *mut vertex_t;
    transfer2line
        .v2 = &mut *vertices.as_mut_ptr().offset(3 as libc::c_int as isize)
        as *mut vertex_t;
    if cv_debug != 0
        && leveltime % 35 as libc::c_int as tic_t == 0 as libc::c_int as tic_t
    {
        CONS_Debug(
            0x20 as libc::c_int,
            b"Transfer1 : %d\n\0" as *const u8 as *const libc::c_char,
            (*transfer1).health,
        );
        CONS_Debug(
            0x20 as libc::c_int,
            b"Transfer2 : %d\n\0" as *const u8 as *const libc::c_char,
            (*transfer2).health,
        );
    }
    if (P_AproxDistance(
        (*transfer1).x - (*(*player).mo).x,
        (*transfer1).y - (*(*player).mo).y,
    ) >> 16 as libc::c_int)
        < P_AproxDistance(
            (*transfer2).x - (*(*player).mo).x,
            (*transfer2).y - (*(*player).mo).y,
        ) >> 16 as libc::c_int
    {
        if (*transfer1).type_0 as libc::c_uint
            == MT_AXISTRANSFERLINE as libc::c_int as libc::c_uint
        {
            if transfer1last != 0 {
                axis = P_FindAxis(
                    (*transfer1).threshold,
                    (*transfer1).health - 2 as libc::c_int,
                );
            } else if (*player).pflags as libc::c_uint
                & PF_TRANSFERTOCLOSEST as libc::c_int as libc::c_uint != 0
            {
                axis = P_FindAxis(
                    (*transfer1).threshold,
                    (*transfer1).health - 1 as libc::c_int,
                );
            } else {
                axis = P_FindAxis((*transfer1).threshold, (*transfer1).health);
            }
            if axis.is_null() {
                CONS_Debug(
                    0x20 as libc::c_int,
                    b"Unable to find an axis - error code #1\n\0" as *const u8
                        as *const libc::c_char,
                );
                return;
            }
            (*transfer1line.v1).x = (*axis).x;
            (*transfer1line.v1).y = (*axis).y;
            (*transfer1line.v2).x = (*transfer1).x;
            (*transfer1line.v2).y = (*transfer1).y;
            if cv_debug & 0x20 as libc::c_int != 0 {
                P_ShootLine(axis, transfer1, (*(*player).mo).z);
            }
            transfer1line.dx = (*transfer1line.v2).x - (*transfer1line.v1).x;
            transfer1line.dy = (*transfer1line.v2).y - (*transfer1line.v1).y;
            if P_PointOnLineSide(
                (*(*player).mo).x,
                (*(*player).mo).y,
                &mut transfer1line,
            )
                != P_PointOnLineSide(
                    (*(*player).mo).x + (*(*player).mo).momx,
                    (*(*player).mo).y + (*(*player).mo).momy,
                    &mut transfer1line,
                ) && truexspeed < 0 as libc::c_int
            {
                if cv_debug & 0x20 as libc::c_int != 0 {
                    HU_SetCEchoDuration(1 as libc::c_int);
                    HU_DoCEcho(b"transfer!\0" as *const u8 as *const libc::c_char);
                    HU_SetCEchoDuration(5 as libc::c_int);
                    S_StartSound(0 as *const libc::c_void, sfx_strpst);
                }
                if (*player).pflags as libc::c_uint
                    & PF_TRANSFERTOCLOSEST as libc::c_int as libc::c_uint != 0
                {
                    (*player)
                        .pflags = ::core::mem::transmute::<
                        libc::c_uint,
                        pflags_t,
                    >(
                        (*player).pflags as libc::c_uint
                            & !(PF_TRANSFERTOCLOSEST as libc::c_int) as libc::c_uint,
                    );
                    P_TransferToAxis(player, (*transfer1).health - 1 as libc::c_int);
                } else {
                    (*player)
                        .pflags = ::core::mem::transmute::<
                        libc::c_uint,
                        pflags_t,
                    >(
                        (*player).pflags as libc::c_uint
                            | PF_TRANSFERTOCLOSEST as libc::c_int as libc::c_uint,
                    );
                    P_SetTarget2(&mut (*player).axis2, transfer1);
                    P_SetTarget2(
                        &mut (*player).axis1,
                        P_FindAxisTransfer(
                            (*transfer1).threshold,
                            (*transfer1).health - 1 as libc::c_int,
                            MT_AXISTRANSFERLINE,
                        ),
                    );
                }
            }
        } else {
            if transfer1last != 0 {
                axis = P_FindAxis((*transfer1).threshold, 1 as libc::c_int);
            } else {
                axis = P_FindAxis((*transfer1).threshold, (*transfer1).health);
            }
            if axis.is_null() {
                CONS_Debug(
                    0x20 as libc::c_int,
                    b"Unable to find an axis - error code #2\n\0" as *const u8
                        as *const libc::c_char,
                );
                return;
            }
            (*transfer1line.v1).x = (*axis).x;
            (*transfer1line.v1).y = (*axis).y;
            if cv_debug & 0x20 as libc::c_int != 0 {
                P_ShootLine(
                    transfer1,
                    P_FindAxis(
                        (*transfer1).threshold,
                        (*transfer1).health - 1 as libc::c_int,
                    ),
                    (*(*player).mo).z,
                );
            }
            (*transfer1line.v2).x = (*transfer1).x;
            (*transfer1line.v2).y = (*transfer1).y;
            transfer1line.dx = (*transfer1line.v2).x - (*transfer1line.v1).x;
            transfer1line.dy = (*transfer1line.v2).y - (*transfer1line.v1).y;
            if P_PointOnLineSide(
                (*(*player).mo).x,
                (*(*player).mo).y,
                &mut transfer1line,
            )
                != P_PointOnLineSide(
                    (*(*player).mo).x + (*(*player).mo).momx,
                    (*(*player).mo).y + (*(*player).mo).momy,
                    &mut transfer1line,
                ) && truexspeed < 0 as libc::c_int
            {
                if cv_debug & 0x20 as libc::c_int != 0 {
                    HU_SetCEchoDuration(1 as libc::c_int);
                    HU_DoCEcho(b"transfer!\0" as *const u8 as *const libc::c_char);
                    HU_SetCEchoDuration(5 as libc::c_int);
                    S_StartSound(0 as *const libc::c_void, sfx_strpst);
                }
                if (*(*(*player).mo).target).health < (*transfer1).health {
                    if transfer1last != 0 {
                        P_TransferToAxis(player, (*transfer1).health - 1 as libc::c_int);
                    } else {
                        P_TransferToAxis(player, (*transfer1).health);
                    }
                } else if (*(*(*player).mo).target).health >= (*transfer1).health {
                    P_TransferToAxis(player, (*transfer1).health - 1 as libc::c_int);
                }
            }
        }
    } else if (*transfer2).type_0 as libc::c_uint
        == MT_AXISTRANSFERLINE as libc::c_int as libc::c_uint
    {
        if transfer2last != 0 {
            axis = P_FindAxis((*transfer2).threshold, 1 as libc::c_int);
        } else if (*player).pflags as libc::c_uint
            & PF_TRANSFERTOCLOSEST as libc::c_int as libc::c_uint != 0
        {
            axis = P_FindAxis((*transfer2).threshold, (*transfer2).health);
        } else {
            axis = P_FindAxis(
                (*transfer2).threshold,
                (*transfer2).health - 1 as libc::c_int,
            );
        }
        if axis.is_null() {
            axis = P_FindAxis((*transfer2).threshold, 1 as libc::c_int);
        }
        if axis.is_null() {
            CONS_Debug(
                0x20 as libc::c_int,
                b"Unable to find an axis - error code #3\n\0" as *const u8
                    as *const libc::c_char,
            );
            return;
        }
        (*transfer2line.v1).x = (*axis).x;
        (*transfer2line.v1).y = (*axis).y;
        (*transfer2line.v2).x = (*transfer2).x;
        (*transfer2line.v2).y = (*transfer2).y;
        if cv_debug & 0x20 as libc::c_int != 0 {
            P_ShootLine(axis, transfer2, (*(*player).mo).z);
        }
        transfer2line.dx = (*transfer2line.v2).x - (*transfer2line.v1).x;
        transfer2line.dy = (*transfer2line.v2).y - (*transfer2line.v1).y;
        if P_PointOnLineSide((*(*player).mo).x, (*(*player).mo).y, &mut transfer2line)
            != P_PointOnLineSide(
                (*(*player).mo).x + (*(*player).mo).momx,
                (*(*player).mo).y + (*(*player).mo).momy,
                &mut transfer2line,
            ) && truexspeed > 0 as libc::c_int
        {
            if cv_debug & 0x20 as libc::c_int != 0 {
                HU_SetCEchoDuration(1 as libc::c_int);
                HU_DoCEcho(b"transfer!\0" as *const u8 as *const libc::c_char);
                HU_SetCEchoDuration(5 as libc::c_int);
                S_StartSound(0 as *const libc::c_void, sfx_strpst);
            }
            if (*player).pflags as libc::c_uint
                & PF_TRANSFERTOCLOSEST as libc::c_int as libc::c_uint != 0
            {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        & !(PF_TRANSFERTOCLOSEST as libc::c_int) as libc::c_uint,
                );
                if (P_FindAxis((*transfer2).threshold, (*transfer2).health)).is_null() {
                    transfer2last = true_0 as libc::c_int;
                }
                if transfer2last != 0 {
                    P_TransferToAxis(player, 1 as libc::c_int);
                } else {
                    P_TransferToAxis(player, (*transfer2).health);
                }
            } else {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        | PF_TRANSFERTOCLOSEST as libc::c_int as libc::c_uint,
                );
                P_SetTarget2(&mut (*player).axis1, transfer2);
                P_SetTarget2(
                    &mut (*player).axis2,
                    P_FindAxisTransfer(
                        (*transfer2).threshold,
                        (*transfer2).health + 1 as libc::c_int,
                        MT_AXISTRANSFERLINE,
                    ),
                );
            }
        }
    } else {
        if transfer2last != 0 {
            axis = P_FindAxis((*transfer2).threshold, 1 as libc::c_int);
        } else {
            axis = P_FindAxis((*transfer2).threshold, (*transfer2).health);
        }
        if axis.is_null() {
            axis = P_FindAxis((*transfer2).threshold, 1 as libc::c_int);
        }
        if axis.is_null() {
            CONS_Debug(
                0x20 as libc::c_int,
                b"Unable to find an axis - error code #4\n\0" as *const u8
                    as *const libc::c_char,
            );
            return;
        }
        (*transfer2line.v1).x = (*axis).x;
        (*transfer2line.v1).y = (*axis).y;
        if cv_debug & 0x20 as libc::c_int != 0 {
            P_ShootLine(
                transfer2,
                P_FindAxis(
                    (*transfer2).threshold,
                    (*transfer2).health - 1 as libc::c_int,
                ),
                (*(*player).mo).z,
            );
        }
        (*transfer2line.v2).x = (*transfer2).x;
        (*transfer2line.v2).y = (*transfer2).y;
        transfer2line.dx = (*transfer2line.v2).x - (*transfer2line.v1).x;
        transfer2line.dy = (*transfer2line.v2).y - (*transfer2line.v1).y;
        if P_PointOnLineSide((*(*player).mo).x, (*(*player).mo).y, &mut transfer2line)
            != P_PointOnLineSide(
                (*(*player).mo).x + (*(*player).mo).momx,
                (*(*player).mo).y + (*(*player).mo).momy,
                &mut transfer2line,
            ) && truexspeed > 0 as libc::c_int
        {
            if cv_debug & 0x20 as libc::c_int != 0 {
                HU_SetCEchoDuration(1 as libc::c_int);
                HU_DoCEcho(b"transfer!\0" as *const u8 as *const libc::c_char);
                HU_SetCEchoDuration(5 as libc::c_int);
                S_StartSound(0 as *const libc::c_void, sfx_strpst);
            }
            if (*(*(*player).mo).target).health < (*transfer2).health {
                if (P_FindAxis((*transfer2).threshold, (*transfer2).health)).is_null() {
                    transfer2last = true_0 as libc::c_int;
                }
                if transfer2last != 0 {
                    P_TransferToAxis(player, 1 as libc::c_int);
                } else {
                    P_TransferToAxis(player, (*transfer2).health);
                }
            } else if (*(*(*player).mo).target).health >= (*transfer2).health {
                P_TransferToAxis(player, (*transfer2).health - 1 as libc::c_int);
            }
        }
    };
}
unsafe extern "C" fn P_DoNiGHTSCapsule(mut player: *mut player_t) {
    let mut i: int32_t = 0;
    let mut spherecount: int32_t = 0;
    let mut totalduration: int32_t = 0;
    let mut popduration: int32_t = 0;
    let mut deductinterval: int32_t = 0;
    let mut deductquantity: int32_t = 0;
    let mut sphereresult: int32_t = 0;
    let mut firstpoptic: int32_t = 0;
    (*(*player).capsule).extravalue2 += 1;
    let mut tictimer: int32_t = (*(*player).capsule).extravalue2;
    if abs((*(*player).mo).x - (*(*player).capsule).x)
        <= 3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
    {
        P_UnsetThingPosition((*player).mo);
        (*(*player).mo).x = (*(*player).capsule).x;
        P_SetThingPosition((*player).mo);
        (*(*player).mo).momx = 0 as libc::c_int;
    }
    if abs((*(*player).mo).y - (*(*player).capsule).y)
        <= 3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
    {
        P_UnsetThingPosition((*player).mo);
        (*(*player).mo).y = (*(*player).capsule).y;
        P_SetThingPosition((*player).mo);
        (*(*player).mo).momy = 0 as libc::c_int;
    }
    if abs(
        (*(*player).mo).z
            - ((*(*player).capsule).z + (*(*player).capsule).height / 3 as libc::c_int),
    ) <= 3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
    {
        (*(*player).mo)
            .z = (*(*player).capsule).z + (*(*player).capsule).height / 3 as libc::c_int;
        (*(*player).mo).momz = 0 as libc::c_int;
    }
    if (*(*player).mo).x > (*(*player).capsule).x {
        (*(*player).mo)
            .momx = -(3 as libc::c_int) * ((1 as libc::c_int) << 16 as libc::c_int);
    } else if (*(*player).mo).x < (*(*player).capsule).x {
        (*(*player).mo)
            .momx = 3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
    }
    if (*(*player).mo).y > (*(*player).capsule).y {
        (*(*player).mo)
            .momy = -(3 as libc::c_int) * ((1 as libc::c_int) << 16 as libc::c_int);
    } else if (*(*player).mo).y < (*(*player).capsule).y {
        (*(*player).mo)
            .momy = 3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
    }
    if (*(*player).mo).z
        > (*(*player).capsule).z + (*(*player).capsule).height / 3 as libc::c_int
    {
        (*(*player).mo)
            .momz = -(3 as libc::c_int) * ((1 as libc::c_int) << 16 as libc::c_int);
    } else if (*(*player).mo).z
        < (*(*player).capsule).z + (*(*player).capsule).height / 3 as libc::c_int
    {
        (*(*player).mo)
            .momz = 3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
    }
    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_NIGHTSMODE as libc::c_int
    {
        if (*(*player).mo).momx != 0 || (*(*player).mo).momy != 0
            || (*(*player).mo).momz != 0
        {
            if (*(*player).mo).state
                != &mut *states
                    .as_mut_ptr()
                    .offset(S_PLAY_NIGHTS_PULL as libc::c_int as isize) as *mut state_t
            {
                P_SetPlayerMobjState((*player).mo, S_PLAY_NIGHTS_PULL);
            }
        } else if (*(*player).mo).state
            != &mut *states
                .as_mut_ptr()
                .offset(S_PLAY_NIGHTS_ATTACK as libc::c_int as isize) as *mut state_t
        {
            S_StartSound((*player).mo as *const libc::c_void, sfx_spin);
            P_SetPlayerMobjState((*player).mo, S_PLAY_NIGHTS_ATTACK);
        }
    } else {
        if (*player).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint
            == 0
            && (*player).pflags as libc::c_uint
                & PF_SPINNING as libc::c_int as libc::c_uint == 0
        {
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    | PF_JUMPED as libc::c_int as libc::c_uint,
            );
        }
        if (*player).panim as libc::c_uint != PA_ROLL as libc::c_int as libc::c_uint {
            P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
        }
    }
    if (*player).charflags & SF_NONIGHTSROTATION as libc::c_int as uint32_t == 0 {
        if (*(*player).mo).state
            == &mut *states
                .as_mut_ptr()
                .offset(S_PLAY_NIGHTS_PULL as libc::c_int as isize) as *mut state_t
            && (*(*player).mo).sprite2 as libc::c_int == SPR2_NPUL as libc::c_int
        {
            (*(*player).mo)
                .spriteroll = ((*(*player).mo).spriteroll)
                .wrapping_sub(0x15555555 as libc::c_int as angle_t);
        } else {
            (*(*player).mo).spriteroll = 0 as libc::c_int as angle_t;
        }
    }
    if G_IsSpecialStage(gamemap as int32_t) != 0 {
        i = 0 as libc::c_int;
        while i < 32 as libc::c_int {
            if playeringame[i as usize] != 0
                && &mut *players.as_mut_ptr().offset(i as isize) as *mut player_t
                    != player
                && players[i as usize].spheres as libc::c_int > 0 as libc::c_int
            {
                (*player)
                    .spheres = ((*player).spheres as libc::c_int
                    + players[i as usize].spheres as libc::c_int) as int16_t;
                players[i as usize].spheres = 0 as libc::c_int as int16_t;
            }
            i += 1;
            i;
        }
    }
    if (*(*player).capsule).extravalue2 <= 0 as libc::c_int
        && (*(*player).capsule).health > 0 as libc::c_int
    {
        P_RunNightsCapsuleTouchExecutors(
            (*player).mo,
            true_0 as libc::c_int,
            ((*player).spheres as libc::c_int >= (*(*player).capsule).health)
                as libc::c_int,
        );
    }
    if (*(*player).mo).x == (*(*player).capsule).x
        && (*(*player).mo).y == (*(*player).capsule).y
        && (*(*player).mo).z
            == (*(*player).capsule).z + (*(*player).capsule).height / 3 as libc::c_int
    {
        if (*(*player).capsule).lastlook < 0 as libc::c_int {
            spherecount = if ((*player).spheres as libc::c_int)
                < (*(*player).capsule).health
            {
                (*player).spheres as libc::c_int
            } else {
                (*(*player).capsule).health
            };
            totalduration = if 40 as libc::c_int + spherecount < 60 as libc::c_int {
                40 as libc::c_int + spherecount
            } else {
                60 as libc::c_int
            };
            (*(*player).capsule)
                .extravalue1 = if totalduration - tictimer > 1 as libc::c_int {
                totalduration - tictimer
            } else {
                1 as libc::c_int
            };
            popduration = (*(*player).capsule).extravalue1;
            (*(*player).capsule)
                .cvmem = if FixedFloor(FixedDiv(popduration, spherecount))
                / ((1 as libc::c_int) << 16 as libc::c_int) > 1 as libc::c_int
            {
                FixedFloor(FixedDiv(popduration, spherecount))
                    / ((1 as libc::c_int) << 16 as libc::c_int)
            } else {
                1 as libc::c_int
            };
            deductinterval = (*(*player).capsule).cvmem;
            (*(*player).capsule)
                .cusval = if FixedRound(FixedDiv(spherecount, popduration))
                / ((1 as libc::c_int) << 16 as libc::c_int) > 1 as libc::c_int
            {
                FixedRound(FixedDiv(spherecount, popduration))
                    / ((1 as libc::c_int) << 16 as libc::c_int)
            } else {
                1 as libc::c_int
            };
            deductquantity = (*(*player).capsule).cusval;
            (*(*player).capsule).movecount = (*(*player).capsule).health - spherecount;
            sphereresult = (*(*player).capsule).movecount;
            (*(*player).capsule).lastlook = tictimer;
            firstpoptic = (*(*player).capsule).lastlook;
        } else {
            popduration = (*(*player).capsule).extravalue1;
            deductinterval = (*(*player).capsule).cvmem;
            deductquantity = (*(*player).capsule).cusval;
            sphereresult = (*(*player).capsule).movecount;
            firstpoptic = (*(*player).capsule).lastlook;
        }
        if tictimer - firstpoptic < popduration {
            if (tictimer - firstpoptic) % deductinterval == 0 {
                if (*(*player).capsule).health <= sphereresult
                    && (*player).spheres as libc::c_int > 0 as libc::c_int
                    && (*(*player).capsule).health > 0 as libc::c_int
                {
                    sphereresult = if sphereresult - (*player).spheres as libc::c_int
                        > 0 as libc::c_int
                    {
                        sphereresult - (*player).spheres as libc::c_int
                    } else {
                        0 as libc::c_int
                    };
                }
                if (*(*player).capsule).health > sphereresult
                    && (*player).spheres as libc::c_int > 0 as libc::c_int
                {
                    deductquantity = if deductquantity
                        < (*(*player).capsule).health - sphereresult
                    {
                        deductquantity
                    } else {
                        (*(*player).capsule).health - sphereresult
                    };
                    (*player)
                        .spheres = ((*player).spheres as libc::c_int - deductquantity)
                        as int16_t;
                    (*(*player).capsule).health -= deductquantity;
                    if ((*player).spheres as libc::c_int) < 0 as libc::c_int {
                        (*player).spheres = 0 as libc::c_int as int16_t;
                    }
                }
            }
            if (tictimer - firstpoptic) % 2 as libc::c_int == 0 {
                S_StartSound(
                    P_SpawnMobj(
                        (*(*player).capsule).x
                            + (((P_RandomByte() as int32_t - 128 as libc::c_int)
                                / 2 as libc::c_int) << 16 as libc::c_int),
                        (*(*player).capsule).y
                            + (((P_RandomByte() as int32_t - 128 as libc::c_int)
                                / 2 as libc::c_int) << 16 as libc::c_int),
                        (*(*player).capsule).z
                            + (*(*player).capsule).height / 2 as libc::c_int
                            + (((P_RandomByte() as int32_t - 128 as libc::c_int)
                                / 2 as libc::c_int) << 16 as libc::c_int),
                        MT_SONIC3KBOSSEXPLODE,
                    ) as *const libc::c_void,
                    sfx_s3kb4,
                );
            }
        } else {
            if (*player).spheres as libc::c_int != 0 as libc::c_int
                && (*(*player).capsule).health > 0 as libc::c_int
            {
                if ((*player).spheres as libc::c_int) < (*(*player).capsule).health {
                    (*(*player).capsule).health -= (*player).spheres as libc::c_int;
                    (*player).spheres = 0 as libc::c_int as int16_t;
                } else {
                    (*player)
                        .spheres = ((*player).spheres as libc::c_int
                        - (*(*player).capsule).health) as int16_t;
                    (*(*player).capsule).health = 0 as libc::c_int;
                }
            }
            if (*(*player).capsule).health <= 0 as libc::c_int {
                (*(*player).capsule).flags &= !(MF_NOGRAVITY as libc::c_int) as uint32_t;
                (*(*player).capsule)
                    .momz = 5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
                (*(*player).capsule).reactiontime = 0 as libc::c_int;
                tictimer = -(1 as libc::c_int);
                i = 0 as libc::c_int;
                while i < 32 as libc::c_int {
                    if playeringame[i as usize] != 0 && (*player).exiting == 0
                        && players[i as usize].mare as libc::c_int
                            == (*player).mare as libc::c_int
                    {
                        players[i as usize].bonustime = true_0 as libc::c_int;
                        players[i as usize]
                            .texttimer = (4 as libc::c_int * 35 as libc::c_int)
                            as uint8_t;
                        players[i as usize].textvar = 1 as libc::c_int as uint8_t;
                        players[i as usize]
                            .finishedtime = players[i as usize].nightstime;
                        if G_IsSpecialStage(gamemap as int32_t) == 0 {
                            P_AddPlayerScore(
                                &mut *players.as_mut_ptr().offset(i as isize),
                                players[i as usize].finishedtime
                                    / 35 as libc::c_int as tic_t * 100 as libc::c_int as tic_t,
                            );
                        }
                        P_FlashPal(
                            &mut *players.as_mut_ptr().offset(i as isize),
                            1 as libc::c_int as uint16_t,
                            8 as libc::c_int as uint16_t,
                        );
                    }
                    i += 1;
                    i;
                }
                if G_IsSpecialStage(gamemap as int32_t) != 0 {
                    let mut lowest_time: tic_t = 0;
                    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
                        == CR_NIGHTSMODE as libc::c_int
                    {
                        let mut em: uint8_t = P_GetNextEmerald();
                        let mut emmo: *mut mobj_t = P_SpawnMobjFromMobj(
                            (*player).mo,
                            0 as libc::c_int,
                            0 as libc::c_int,
                            (*(*player).mo).height,
                            MT_GOTEMERALD,
                        );
                        (*emmo).health = em as int32_t;
                        P_SetTarget2(&mut (*emmo).target, (*player).mo);
                        P_SetMobjState(
                            emmo,
                            (mobjinfo[MT_GOTEMERALD as libc::c_int as usize].meleestate
                                as libc::c_uint)
                                .wrapping_add(em as libc::c_uint) as statenum_t,
                        );
                        P_SetTarget2(&mut (*(*player).mo).tracer, emmo);
                    }
                    lowest_time = (*player).finishedtime;
                    i = 0 as libc::c_int;
                    while i < 32 as libc::c_int {
                        if playeringame[i as usize] != 0
                            && players[i as usize]
                                .powers[pw_carry as libc::c_int as usize] as libc::c_int
                                == CR_NIGHTSMODE as libc::c_int
                        {
                            if players[i as usize].finishedtime < lowest_time {
                                lowest_time = players[i as usize].finishedtime;
                            }
                        }
                        i += 1;
                        i;
                    }
                    P_AddPlayerScore(
                        player,
                        lowest_time / 35 as libc::c_int as tic_t
                            * 100 as libc::c_int as tic_t,
                    );
                } else {
                    let mut idya: *mut mobj_t = P_SpawnMobjFromMobj(
                        (*player).mo,
                        0 as libc::c_int,
                        0 as libc::c_int,
                        (*(*player).mo).height,
                        MT_GOTEMERALD,
                    );
                    (*idya)
                        .extravalue2 = (*player).mare as libc::c_int / 5 as libc::c_int;
                    (*idya).health = (*player).mare as libc::c_int + 1 as libc::c_int;
                    P_SetTarget2(&mut (*idya).target, (*player).mo);
                    P_SetMobjState(
                        idya,
                        (mobjinfo[MT_GOTEMERALD as libc::c_int as usize].missilestate
                            as libc::c_uint)
                            .wrapping_add(
                                (((*player).mare as libc::c_int + 1 as libc::c_int)
                                    % 5 as libc::c_int) as libc::c_uint,
                            ) as statenum_t,
                    );
                    if !((*(*player).mo).tracer).is_null() {
                        P_SetTarget2(&mut (*idya).hnext, (*(*player).mo).tracer);
                        (*idya)
                            .extravalue1 = ((*(*(*player).mo).tracer).extravalue1
                            - 72 as libc::c_int * 0xb60b61 as libc::c_int) as angle_t
                            as int32_t;
                        if (*idya).extravalue1 > (*(*(*player).mo).tracer).extravalue1 {
                            (*idya).extravalue1
                                -= 72 as libc::c_int * 0xb60b61 as libc::c_int
                                    / (*idya).extravalue1;
                        }
                    }
                    P_SetTarget2(&mut (*(*player).mo).tracer, idya);
                }
                i = 0 as libc::c_int;
                while i < 32 as libc::c_int {
                    if playeringame[i as usize] != 0
                        && players[i as usize].mare as libc::c_int
                            == (*player).mare as libc::c_int
                    {
                        P_SetTarget2(
                            &mut (*players.as_mut_ptr().offset(i as isize)).capsule,
                            0 as *mut mobj_t,
                        );
                    }
                    i += 1;
                    i;
                }
                S_StartSound((*player).mo as *const libc::c_void, sfx_ngdone);
                P_SwitchSpheresBonusMode(true_0 as libc::c_int);
                P_RunNightsCapsuleTouchExecutors(
                    (*player).mo,
                    false_0 as libc::c_int,
                    true_0 as libc::c_int,
                );
            } else {
                S_StartSound((*player).mo as *const libc::c_void, sfx_lose);
                (*player).texttimer = (4 as libc::c_int * 35 as libc::c_int) as uint8_t;
                (*player).textvar = 3 as libc::c_int as uint8_t;
                (*(*player).capsule).reactiontime = 0 as libc::c_int;
                (*(*player).capsule).extravalue2 = -(1 as libc::c_int);
                (*(*player).capsule).lastlook = (*(*player).capsule).extravalue2;
                (*(*player).capsule).movecount = (*(*player).capsule).lastlook;
                (*(*player).capsule).cusval = (*(*player).capsule).movecount;
                (*(*player).capsule).cvmem = (*(*player).capsule).cusval;
                (*(*player).capsule).extravalue1 = (*(*player).capsule).cvmem;
                P_RunNightsCapsuleTouchExecutors(
                    (*player).mo,
                    false_0 as libc::c_int,
                    false_0 as libc::c_int,
                );
            }
        }
    } else if (*(*player).capsule).lastlook > -(1 as libc::c_int) {
        (*(*player).capsule).extravalue2 = -(1 as libc::c_int);
        (*(*player).capsule).lastlook = (*(*player).capsule).extravalue2;
    }
}
unsafe extern "C" fn P_MoveNiGHTSToDrone(mut player: *mut player_t) {
    let mut flip: boolean = 0;
    let mut topaligned: boolean = 0;
    let mut middlealigned: boolean = 0;
    let mut bottomoffsetted: boolean = 0;
    let mut droneboxmandiff: fixed_t = 0;
    let mut zofs: fixed_t = 0;
    if ((*player).drone).is_null() {
        return;
    }
    flip = ((*(*player).drone).flags2 & MF2_OBJECTFLIP as libc::c_int as uint32_t)
        as boolean;
    topaligned = ((*(*player).drone).flags & MF_SLIDEME as libc::c_int as uint32_t != 0
        && (*(*player).drone).flags & MF_GRENADEBOUNCE as libc::c_int as uint32_t == 0)
        as libc::c_int;
    middlealigned = ((*(*player).drone).flags
        & MF_GRENADEBOUNCE as libc::c_int as uint32_t != 0
        && (*(*player).drone).flags & MF_SLIDEME as libc::c_int as uint32_t == 0)
        as libc::c_int;
    bottomoffsetted = ((*(*player).drone).flags & MF_SLIDEME as libc::c_int as uint32_t
        == 0
        && (*(*player).drone).flags & MF_GRENADEBOUNCE as libc::c_int as uint32_t == 0)
        as libc::c_int;
    droneboxmandiff = if (*(*player).drone).height - (*(*player).mo).height
        > 0 as libc::c_int
    {
        (*(*player).drone).height - (*(*player).mo).height
    } else {
        0 as libc::c_int
    };
    if flip == 0 {
        if topaligned != 0 {
            zofs = droneboxmandiff;
        } else if middlealigned != 0 {
            zofs = droneboxmandiff / 2 as libc::c_int;
        } else if bottomoffsetted != 0 {
            zofs = FixedMul(
                24 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*(*player).drone).scale,
            );
        } else {
            zofs = 0 as libc::c_int;
        }
    } else if topaligned != 0 {
        zofs = 0 as libc::c_int;
    } else if middlealigned != 0 {
        zofs = droneboxmandiff / 2 as libc::c_int;
    } else if bottomoffsetted != 0 {
        zofs = droneboxmandiff
            - FixedMul(
                24 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*(*player).drone).scale,
            );
    } else {
        zofs = droneboxmandiff;
    }
    (*(*player).mo).momz = 0 as libc::c_int;
    (*(*player).mo).momy = (*(*player).mo).momz;
    (*(*player).mo).momx = (*(*player).mo).momy;
    P_MoveOrigin(
        (*player).mo,
        (*(*player).drone).x,
        (*(*player).drone).y,
        (*(*player).drone).z + zofs,
    );
    P_SetTarget2(&mut (*player).drone, 0 as *mut mobj_t);
}
unsafe extern "C" fn P_NiGHTSMovement(mut player: *mut player_t) {
    let mut drillamt: fixed_t = 0 as libc::c_int;
    let mut still: boolean = false_0 as libc::c_int;
    let mut moved: boolean = false_0 as libc::c_int;
    let mut backwardaxis: boolean = false_0 as libc::c_int;
    let mut firstdrill: boolean = 0;
    let mut newangle: int16_t = 0 as libc::c_int as int16_t;
    let mut xspeed: fixed_t = 0;
    let mut yspeed: fixed_t = 0;
    let mut th: *mut thinker_t = 0 as *mut thinker_t;
    let mut mo2: *mut mobj_t = 0 as *mut mobj_t;
    let mut closestaxis: *mut mobj_t = 0 as *mut mobj_t;
    let mut newx: fixed_t = 0;
    let mut newy: fixed_t = 0;
    let mut radius: fixed_t = 0;
    let mut movingangle: angle_t = 0;
    let mut cmd: *mut ticcmd_t = &mut (*player).cmd;
    let mut thrustfactor: int32_t = 0;
    let mut i: int32_t = 0;
    let mut flystate: statenum_t = S_NULL;
    let mut visangle: uint16_t = 0;
    let mut rollangle: angle_t = 0 as libc::c_int as angle_t;
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >((*player).pflags as libc::c_uint & !(PF_DRILLING as libc::c_int) as libc::c_uint);
    firstdrill = false_0 as libc::c_int;
    if (*player).drillmeter > 96 as libc::c_int * 20 as libc::c_int {
        (*player).drillmeter = 96 as libc::c_int * 20 as libc::c_int;
    }
    if (*player).drilldelay != 0 {
        (*player).drilldelay = ((*player).drilldelay).wrapping_sub(1);
        (*player).drilldelay;
    }
    if (*cmd).buttons as libc::c_int & BT_JUMP as libc::c_int == 0 {
        if (*player).drillmeter <= 0 as libc::c_int {
            (*player).drillmeter = 35 as libc::c_int / 10 as libc::c_int;
        }
    }
    if !((*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_NIGHTSMODE as libc::c_int)
    {
        P_DeNightserizePlayer(player);
        return;
    }
    if G_IsSpecialStage(gamemap as int32_t) != 0 {
        let mut capsule: boolean = false_0 as libc::c_int;
        i = 0 as libc::c_int;
        while i < 32 as libc::c_int {
            if playeringame[i as usize] != 0
                && (!(players[i as usize].capsule).is_null()
                    && (*players[i as usize].capsule).reactiontime != 0)
            {
                capsule = true_0 as libc::c_int;
            }
            i += 1;
            i;
        }
        if capsule == 0
            && !((*(*player).mo).state
                >= &mut *states
                    .as_mut_ptr()
                    .offset(S_PLAY_NIGHTS_TRANS1 as libc::c_int as isize) as *mut state_t
                && (*(*player).mo).state
                    <= &mut *states
                        .as_mut_ptr()
                        .offset(S_PLAY_NIGHTS_TRANS6 as libc::c_int as isize)
                        as *mut state_t) && (*player).exiting == 0
        {
            (*player).nightstime = ((*player).nightstime).wrapping_sub(1);
            (*player).nightstime;
        }
    } else if gametyperules & GTR_RACE as libc::c_int as uint32_t == 0
        && !((*(*player).mo).state
            >= &mut *states
                .as_mut_ptr()
                .offset(S_PLAY_NIGHTS_TRANS1 as libc::c_int as isize) as *mut state_t
            && (*(*player).mo).state
                <= &mut *states
                    .as_mut_ptr()
                    .offset(S_PLAY_NIGHTS_TRANS6 as libc::c_int as isize)
                    as *mut state_t)
        && !(!((*player).capsule).is_null() && (*(*player).capsule).reactiontime != 0)
        && (*player).exiting == 0
    {
        (*player).nightstime = ((*player).nightstime).wrapping_sub(1);
        (*player).nightstime;
    }
    if (*player).nightstime == 0 {
        P_DeNightserizePlayer(player);
        S_StartSound((*player).mo as *const libc::c_void, sfx_s3k66);
        return;
    } else if P_IsLocalPlayer(player) != 0
        && (*player).nightstime == (10 as libc::c_int * 35 as libc::c_int) as tic_t
    {
        if (*mapheaderinfo[(gamemap as libc::c_int - 1 as libc::c_int) as usize])
            .levelflags as libc::c_int & (1 as libc::c_int) << 6 as libc::c_int != 0
        {
            S_FadeMusicFromVolume(
                0 as libc::c_int as uint8_t,
                -(1 as libc::c_int) as int16_t,
                (10 as libc::c_int * 1000 as libc::c_int) as uint32_t,
            );
            S_StartSound(0 as *const libc::c_void, sfx_timeup);
        } else {
            P_PlayJingle(
                player,
                (if maptol & TOL_NIGHTS as libc::c_int as uint32_t != 0
                    && G_IsSpecialStage(gamemap as int32_t) == 0
                {
                    JT_NIGHTSTIMEOUT as libc::c_int
                } else {
                    JT_SSTIMEOUT as libc::c_int
                }) as jingletype_t,
            );
        }
    }
    if (*(*player).mo).z < (*(*player).mo).floorz {
        (*(*player).mo).z = (*(*player).mo).floorz;
    }
    if (*(*player).mo).z + (*(*player).mo).height > (*(*player).mo).ceilingz {
        (*(*player).mo).z = (*(*player).mo).ceilingz - (*(*player).mo).height;
    }
    newx = P_ReturnThrustX(
        (*player).mo,
        (*(*player).mo).angle,
        3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
    ) + (*(*player).mo).x;
    newy = P_ReturnThrustY(
        (*player).mo,
        (*(*player).mo).angle,
        3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
    ) + (*(*player).mo).y;
    if ((*(*player).mo).target).is_null() {
        let mut dist1: fixed_t = 0;
        let mut dist2: fixed_t = 0 as libc::c_int;
        th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
        while th
            != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
                as *mut thinker_t
        {
            if !((*th).function.acp1
                == ::core::mem::transmute::<
                    Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                    actionf_p1,
                >(
                    Some(
                        P_RemoveThinkerDelayed
                            as unsafe extern "C" fn(*mut thinker_t) -> (),
                    ),
                ))
            {
                mo2 = th as *mut mobj_t;
                if !((*mo2).type_0 as libc::c_uint
                    != MT_AXIS as libc::c_int as libc::c_uint)
                {
                    if !((*mo2).threshold != (*player).mare as libc::c_int) {
                        if closestaxis.is_null() {
                            closestaxis = mo2;
                            dist2 = R_PointToDist2(newx, newy, (*mo2).x, (*mo2).y)
                                - (*mo2).radius;
                        } else {
                            dist1 = R_PointToDist2(newx, newy, (*mo2).x, (*mo2).y)
                                - (*mo2).radius;
                            if dist1 < dist2 {
                                closestaxis = mo2;
                                dist2 = dist1;
                            }
                        }
                    }
                }
            }
            th = (*th).next;
        }
        P_SetTarget2(&mut (*(*player).mo).target, closestaxis);
    }
    if ((*(*player).mo).target).is_null() {
        CONS_Debug(
            0x20 as libc::c_int,
            b"No axis points found!\n\0" as *const u8 as *const libc::c_char,
        );
        return;
    }
    if (*(*(*player).mo).target).flags2 & MF2_AMBUSH as libc::c_int as uint32_t != 0 {
        backwardaxis = true_0 as libc::c_int;
    }
    (*player)
        .angle_pos = R_PointToAngle2(
        (*(*(*player).mo).target).x,
        (*(*(*player).mo).target).y,
        (*(*player).mo).x,
        (*(*player).mo).y,
    );
    (*player).old_angle_pos = (*player).angle_pos;
    radius = (*(*(*player).mo).target).radius;
    (*(*player).mo).flags |= MF_NOGRAVITY as libc::c_int as uint32_t;
    if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        (*cmd).forwardmove = -((*cmd).forwardmove as libc::c_int) as int8_t;
    }
    if (*player).pflags as libc::c_uint
        & PF_TRANSFERTOCLOSEST as libc::c_int as libc::c_uint == 0
    {
        let mut realdist: fixed_t = R_PointToDist2(
            (*(*player).mo).x,
            (*(*player).mo).y,
            (*(*(*player).mo).target).x,
            (*(*(*player).mo).target).y,
        );
        if realdist >> 16 as libc::c_int != radius >> 16 as libc::c_int {
            CONS_Debug(
                0x20 as libc::c_int,
                b"Aligning player with axis\n\0" as *const u8 as *const libc::c_char,
            );
            P_UnsetThingPosition((*player).mo);
            if realdist == 0 as libc::c_int {
                let fa: angle_t = (*player).old_angle_pos >> 19 as libc::c_int;
                (*(*player).mo)
                    .x = (*(*(*player).mo).target).x
                    + FixedMul(
                        *finecosine.offset(fa as isize)
                            >> 16 as libc::c_int - 16 as libc::c_int,
                        radius,
                    );
                (*(*player).mo)
                    .y = (*(*(*player).mo).target).y
                    + FixedMul(
                        finesine[fa as usize] >> 16 as libc::c_int - 16 as libc::c_int,
                        radius,
                    );
            } else {
                (*(*player).mo)
                    .x = (*(*(*player).mo).target).x
                    + FixedMul(
                        FixedDiv(
                            (*(*player).mo).x - (*(*(*player).mo).target).x,
                            realdist,
                        ),
                        radius,
                    );
                (*(*player).mo)
                    .y = (*(*(*player).mo).target).y
                    + FixedMul(
                        FixedDiv(
                            (*(*player).mo).y - (*(*(*player).mo).target).y,
                            realdist,
                        ),
                        radius,
                    );
            }
            P_SetThingPosition((*player).mo);
        }
    }
    if (*player).powers[pw_flashing as libc::c_int as usize] as libc::c_int
        > 2 as libc::c_int * flashingtics as libc::c_int / 3 as libc::c_int
    {
        let fa_0: angle_t = FixedAngle(
            (*player).flyangle * ((1 as libc::c_int) << 16 as libc::c_int),
        ) >> 19 as libc::c_int & (8192 as libc::c_int - 1 as libc::c_int) as angle_t;
        let speed: fixed_t = FixedDiv(
            (*player).speed * ((1 as libc::c_int) << 16 as libc::c_int),
            50 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
        );
        xspeed = FixedMul(
            *finecosine.offset(fa_0 as isize) >> 16 as libc::c_int - 16 as libc::c_int,
            speed,
        );
        yspeed = FixedMul(
            finesine[fa_0 as usize] >> 16 as libc::c_int - 16 as libc::c_int,
            speed,
        );
        if (*player).pflags as libc::c_uint
            & PF_TRANSFERTOCLOSEST as libc::c_int as libc::c_uint == 0
        {
            xspeed = FixedMul(
                xspeed,
                FixedDiv(
                    1024 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    (*(*(*player).mo).target).radius,
                ),
            );
            if backwardaxis != 0 {
                xspeed *= -(1 as libc::c_int);
            }
            (*player)
                .angle_pos = ((*player).angle_pos)
                .wrapping_add(
                    FixedAngleC(
                        FixedDiv(
                            xspeed,
                            5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                        ),
                        40 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    ),
                );
        }
        (*(*player).mo).momz = 0 as libc::c_int;
        P_NightsTransferPoints(player, xspeed, radius);
        return;
    }
    if (*(*player).mo).state
        >= &mut *states.as_mut_ptr().offset(S_PLAY_NIGHTS_TRANS1 as libc::c_int as isize)
            as *mut state_t
        && (*(*player).mo).state
            <= &mut *states
                .as_mut_ptr()
                .offset(S_PLAY_NIGHTS_TRANS6 as libc::c_int as isize) as *mut state_t
    {
        (*(*player).mo).momz = 0 as libc::c_int;
        (*(*player).mo).momy = (*(*player).mo).momz;
        (*(*player).mo).momx = (*(*player).mo).momy;
        (*(*player).mo).spriteroll = 0 as libc::c_int as angle_t;
        return;
    }
    if (*player).exiting > 0 as libc::c_int as tic_t {
        (*(*player).mo).momy = 0 as libc::c_int;
        (*(*player).mo).momx = (*(*player).mo).momy;
        if gametyperules & GTR_RACE as libc::c_int as uint32_t == 0 {
            P_SetObjectMomZ(
                (*player).mo,
                ((1 as libc::c_int) << 16 as libc::c_int) / 2 as libc::c_int,
                (P_MobjFlip((*player).mo) as libc::c_int * (*(*player).mo).momz
                    >= 0 as libc::c_int) as libc::c_int,
            );
        } else {
            (*(*player).mo).momz = 0 as libc::c_int;
        }
        if (*(*player).mo).state
            != &mut *states
                .as_mut_ptr()
                .offset(S_PLAY_NIGHTS_FLOAT as libc::c_int as isize) as *mut state_t
        {
            P_SetPlayerMobjState((*player).mo, S_PLAY_NIGHTS_FLOAT);
        }
        (*player)
            .drawangle = ((*player).drawangle)
            .wrapping_add(0x10000000 as libc::c_int as angle_t);
        (*(*player).mo).flags |= MF_NOCLIPHEIGHT as libc::c_int as uint32_t;
        return;
    }
    if leveltime & 1 as libc::c_int as tic_t != 0 {
        let mut firstmobj: *mut mobj_t = 0 as *mut mobj_t;
        let mut secondmobj: *mut mobj_t = 0 as *mut mobj_t;
        let mut spawndist: fixed_t = FixedMul(
            16 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
            (*(*player).mo).scale,
        );
        let mut z: fixed_t = (*(*player).mo).z
            + (*(*player).mo).height / 2 as libc::c_int;
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            z
                -= FixedMul(
                    mobjinfo[MT_NIGHTSPARKLE as libc::c_int as usize].height,
                    (*(*player).mo).scale,
                );
        }
        firstmobj = P_SpawnMobj(
            (*(*player).mo).x
                + P_ReturnThrustX(
                    (*player).mo,
                    ((*(*player).mo).angle)
                        .wrapping_add(0x40000000 as libc::c_int as angle_t),
                    spawndist,
                ),
            (*(*player).mo).y
                + P_ReturnThrustY(
                    (*player).mo,
                    ((*(*player).mo).angle)
                        .wrapping_add(0x40000000 as libc::c_int as angle_t),
                    spawndist,
                ),
            z,
            MT_NIGHTSPARKLE,
        );
        secondmobj = P_SpawnMobj(
            (*(*player).mo).x
                + P_ReturnThrustX(
                    (*player).mo,
                    ((*(*player).mo).angle)
                        .wrapping_sub(0x40000000 as libc::c_int as angle_t),
                    spawndist,
                ),
            (*(*player).mo).y
                + P_ReturnThrustY(
                    (*player).mo,
                    ((*(*player).mo).angle)
                        .wrapping_sub(0x40000000 as libc::c_int as angle_t),
                    spawndist,
                ),
            z,
            MT_NIGHTSPARKLE,
        );
        (*secondmobj).destscale = (*(*player).mo).scale;
        (*firstmobj).destscale = (*secondmobj).destscale;
        P_SetTarget2(&mut (*firstmobj).target, (*player).mo);
        P_SetScale(firstmobj, (*(*player).mo).scale);
        P_SetTarget2(&mut (*secondmobj).target, (*player).mo);
        P_SetScale(secondmobj, (*(*player).mo).scale);
        if (*player).powers[pw_nights_superloop as libc::c_int as usize] != 0 {
            P_SetMobjState(
                firstmobj,
                mobjinfo[MT_NIGHTSPARKLE as libc::c_int as usize].seestate,
            );
            P_SetMobjState(
                secondmobj,
                mobjinfo[MT_NIGHTSPARKLE as libc::c_int as usize].seestate,
            );
        }
    }
    let mut helpermobj: *mut mobj_t = P_SpawnMobj(
        (*(*player).mo).x,
        (*(*player).mo).y,
        (*(*player).mo).z + (*(*player).mo).height / 2 as libc::c_int,
        MT_NIGHTSLOOPHELPER,
    );
    (*(*player).mo).fuse = leveltime as int32_t;
    (*helpermobj).fuse = (*(*player).mo).fuse;
    P_SetTarget2(&mut (*helpermobj).target, (*player).mo);
    P_SetScale(helpermobj, (*(*player).mo).scale);
    if (*player).bumpertime != 0 {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                | (PF_STARTJUMP as libc::c_int | PF_DRILLING as libc::c_int)
                    as libc::c_uint,
        );
        newangle = (*player).flyangle as int16_t;
    } else if (*cmd).buttons as libc::c_int & BT_JUMP as libc::c_int != 0
        && (*player).drillmeter != 0
        && (*player).drilldelay as libc::c_int == 0 as libc::c_int
    {
        if (*player).pflags as libc::c_uint & PF_STARTJUMP as libc::c_int as libc::c_uint
            == 0
        {
            firstdrill = true_0 as libc::c_int;
        }
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                | (PF_STARTJUMP as libc::c_int | PF_DRILLING as libc::c_int)
                    as libc::c_uint,
        );
    } else {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_STARTJUMP as libc::c_int) as libc::c_uint,
        );
        if (*cmd).sidemove as libc::c_int != 0 as libc::c_int {
            moved = true_0 as libc::c_int;
        }
        if (*player).drillmeter & 1 as libc::c_int != 0 {
            (*player).drillmeter += 1;
            (*player).drillmeter;
        }
    }
    if (*cmd).forwardmove as libc::c_int != 0 as libc::c_int {
        moved = true_0 as libc::c_int;
    }
    if (*player).bumpertime == 0 {
        if moved != 0 {
            if (*player).pflags as libc::c_uint
                & PF_DRILLING as libc::c_int as libc::c_uint != 0
            {
                drillamt
                    += 100 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
            } else {
                let fforward: fixed_t = abs((*cmd).forwardmove as libc::c_int)
                    * ((1 as libc::c_int) << 16 as libc::c_int);
                let fside: fixed_t = abs((*cmd).sidemove as libc::c_int)
                    * ((1 as libc::c_int) << 16 as libc::c_int);
                let dist: fixed_t = FixedHypot(fforward, fside);
                drillamt
                    += if dist
                        > 50 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                    {
                        50 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                    } else {
                        dist
                    };
                drillamt = FixedMul(
                    drillamt,
                    5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                        / 2 as libc::c_int,
                );
            }
            if (*player).pflags as libc::c_uint
                & PF_DRILLING as libc::c_int as libc::c_uint != 0
                && (*player).speed < 14000 as libc::c_int
                || (*player).speed < 6250 as libc::c_int
            {
                (*player).speed += FixedInt(drillamt);
            }
        }
        if (*player).pflags as libc::c_uint & PF_DRILLING as libc::c_int as libc::c_uint
            != 0
        {
            if (*player).speed < 14000 as libc::c_int {
                (*player).speed += 150 as libc::c_int;
            }
            (*player).drillmeter -= 1;
            if (*player).drillmeter == 0 as libc::c_int {
                (*player).drilldelay = (35 as libc::c_int * 2 as libc::c_int) as uint8_t;
            }
        }
        if (*player).speed < 0 as libc::c_int {
            (*player).speed = 0 as libc::c_int;
        }
        if (*cmd).forwardmove == 0 {
            if (*cmd).sidemove as libc::c_int > 0 as libc::c_int {
                newangle = 0 as libc::c_int as int16_t;
            } else if ((*cmd).sidemove as libc::c_int) < 0 as libc::c_int {
                newangle = 180 as libc::c_int as int16_t;
            }
        } else if (*cmd).sidemove == 0 {
            if (*cmd).forwardmove as libc::c_int > 0 as libc::c_int {
                newangle = 90 as libc::c_int as int16_t;
            } else if ((*cmd).forwardmove as libc::c_int) < 0 as libc::c_int {
                newangle = 270 as libc::c_int as int16_t;
            }
        } else {
            newangle = FixedInt(
                AngleFixed(
                    R_PointToAngle2(
                        0 as libc::c_int,
                        0 as libc::c_int,
                        (*cmd).sidemove as libc::c_int
                            * ((1 as libc::c_int) << 16 as libc::c_int),
                        (*cmd).forwardmove as libc::c_int
                            * ((1 as libc::c_int) << 16 as libc::c_int),
                    ),
                ),
            ) as int16_t;
        }
        newangle = (newangle as angle_t)
            .wrapping_sub((*player).viewrollangle / 0xb60b61 as libc::c_int as angle_t)
            as int16_t as int16_t;
        if (newangle as libc::c_int) < 0 as libc::c_int && moved != 0 {
            newangle = (360 as libc::c_int + newangle as libc::c_int) as int16_t;
        }
    }
    if (*player).pflags as libc::c_uint & PF_DRILLING as libc::c_int as libc::c_uint != 0
    {
        thrustfactor = 2 as libc::c_int;
    } else {
        thrustfactor = 8 as libc::c_int;
        if moved != 0 && (*player).flyangle != newangle as libc::c_int
            && (*player).speed > 12000 as libc::c_int
        {
            (*player).speed -= 60 as libc::c_int;
        }
    }
    i = 0 as libc::c_int;
    while i < thrustfactor {
        if moved != 0 && (*player).flyangle != newangle as libc::c_int {
            let mut anglediff: int32_t = (newangle as libc::c_int - (*player).flyangle
                + 360 as libc::c_int) % 360 as libc::c_int;
            let mut angledif2: int32_t = ((*player).flyangle - newangle as libc::c_int
                + 360 as libc::c_int) % 360 as libc::c_int;
            if anglediff == 0 as libc::c_int && angledif2 == 0 as libc::c_int {
                break;
            }
            if anglediff > angledif2 {
                (*player).flyangle -= 1;
                (*player).flyangle;
            } else {
                (*player).flyangle += 1;
                (*player).flyangle;
            }
        }
        (*player)
            .flyangle = ((*player).flyangle + 360 as libc::c_int) % 360 as libc::c_int;
        i += 1;
        i;
    }
    if (*player).speed == 0 && (*cmd).forwardmove as libc::c_int == 0 as libc::c_int {
        still = true_0 as libc::c_int;
    }
    if (*player).bumpertime == 0
        && ((*cmd).buttons as libc::c_int
            & (BT_CAMLEFT as libc::c_int | BT_CAMRIGHT as libc::c_int)
            == BT_CAMLEFT as libc::c_int | BT_CAMRIGHT as libc::c_int
            || (*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0)
    {
        if (*player).pflags as libc::c_uint & PF_STARTDASH as libc::c_int as libc::c_uint
            == 0
        {
            S_StartSound((*player).mo as *const libc::c_void, sfx_ngskid);
        }
        if (*player).speed > 8000 as libc::c_int {
            (*player).speed -= 2000 as libc::c_int;
        } else if (*player).speed > 1000 as libc::c_int {
            (*player).speed -= (*player).speed / 4 as libc::c_int;
        } else {
            (*player).speed -= 60 as libc::c_int;
            if (*player).speed < 0 as libc::c_int {
                (*player).speed = 0 as libc::c_int;
                still = true_0 as libc::c_int;
            }
        }
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                | PF_STARTDASH as libc::c_int as libc::c_uint,
        );
    } else {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_STARTDASH as libc::c_int) as libc::c_uint,
        );
    }
    let fa_1: angle_t = FixedAngle(
        (*player).flyangle * ((1 as libc::c_int) << 16 as libc::c_int),
    ) >> 19 as libc::c_int & (8192 as libc::c_int - 1 as libc::c_int) as angle_t;
    let speed_0: fixed_t = FixedDiv(
        (*player).speed * ((1 as libc::c_int) << 16 as libc::c_int),
        50 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
    );
    xspeed = FixedMul(
        *finecosine.offset(fa_1 as isize) >> 16 as libc::c_int - 16 as libc::c_int,
        speed_0,
    );
    yspeed = FixedMul(
        finesine[fa_1 as usize] >> 16 as libc::c_int - 16 as libc::c_int,
        speed_0,
    );
    if (*player).pflags as libc::c_uint
        & PF_TRANSFERTOCLOSEST as libc::c_int as libc::c_uint == 0
    {
        xspeed = FixedMul(
            xspeed,
            FixedDiv(
                1024 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*(*(*player).mo).target).radius,
            ),
        );
        if backwardaxis != 0 {
            xspeed *= -(1 as libc::c_int);
        }
        (*player)
            .angle_pos = ((*player).angle_pos)
            .wrapping_add(
                FixedAngleC(
                    FixedDiv(
                        xspeed,
                        5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    ),
                    40 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                ),
            );
    }
    P_NightsTransferPoints(player, xspeed, radius);
    if still != 0 {
        (*(*player).mo).momz = -((1 as libc::c_int) << 16 as libc::c_int);
    } else {
        (*(*player).mo).momz = yspeed / 11 as libc::c_int;
    }
    if (*(*player).mo).momz
        > 20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
    {
        (*(*player).mo)
            .momz = 20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
    } else if (*(*player).mo).momz
        < -(20 as libc::c_int) * ((1 as libc::c_int) << 16 as libc::c_int)
    {
        (*(*player).mo)
            .momz = -(20 as libc::c_int) * ((1 as libc::c_int) << 16 as libc::c_int);
    }
    if ((*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int == 0
        && (*(*player).mo).z + FixedMul((*player).height, (*(*player).mo).scale)
            >= (*(*player).mo).watertop && (*(*player).mo).z <= (*(*player).mo).watertop
        || (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0
            && (*(*player).mo).z + (*(*player).mo).height
                - FixedMul((*player).height, (*(*player).mo).scale)
                <= (*(*player).mo).waterbottom
            && (*(*player).mo).z + (*(*player).mo).height >= (*(*player).mo).waterbottom)
        && (*player).speed > 9000 as libc::c_int
        && leveltime % (35 as libc::c_int / 7 as libc::c_int) as tic_t
            == 0 as libc::c_int as tic_t && (*player).spectator == 0
    {
        let mut splishtype: mobjtype_t = (if (*(*player).mo).eflags as libc::c_int
            & MFE_TOUCHLAVA as libc::c_int != 0
        {
            MT_LAVASPLISH as libc::c_int
        } else {
            MT_SPLISH as libc::c_int
        }) as mobjtype_t;
        let mut water: *mut mobj_t = P_SpawnMobj(
            (*(*player).mo).x,
            (*(*player).mo).y,
            if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                != 0
            {
                (*(*player).mo).waterbottom
                    - FixedMul(
                        mobjinfo[splishtype as usize].height,
                        (*(*player).mo).scale,
                    )
            } else {
                (*(*player).mo).watertop
            },
            splishtype,
        );
        if (*(*player).mo).eflags as libc::c_int & MFE_GOOWATER as libc::c_int != 0 {
            S_StartSound(water as *const libc::c_void, sfx_ghit);
        } else if (*(*player).mo).eflags as libc::c_int & MFE_TOUCHLAVA as libc::c_int
            != 0
        {
            S_StartSound(water as *const libc::c_void, sfx_splash);
        } else {
            S_StartSound(water as *const libc::c_void, sfx_wslap);
        }
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            (*water).flags2 |= MF2_OBJECTFLIP as libc::c_int as uint32_t;
            (*water)
                .eflags = ((*water).eflags as libc::c_int
                | MFE_VERTICALFLIP as libc::c_int) as uint16_t;
        }
        (*water).destscale = (*(*player).mo).scale;
        P_SetScale(water, (*(*player).mo).scale);
    }
    if (*(*player).mo).momx != 0 || (*(*player).mo).momy != 0 {
        (*(*player).mo)
            .angle = R_PointToAngle2(
            0 as libc::c_int,
            0 as libc::c_int,
            (*(*player).mo).momx,
            (*(*player).mo).momy,
        );
        (*player).drawangle = (*(*player).mo).angle;
    }
    if still != 0 {
        (*player).anotherflyangle = 0 as libc::c_int;
        movingangle = 0 as libc::c_int as angle_t;
    } else {
        let mut neg: int32_t = 1 as libc::c_int;
        if backwardaxis != 0
            && ((*player).old_angle_pos > 0xf8e38e39 as libc::c_uint
                && (*player).angle_pos < 0x71c71c7 as libc::c_int as angle_t)
        {
            neg = -(1 as libc::c_int);
        } else if backwardaxis
            ^ ((*player).old_angle_pos < 0x71c71c7 as libc::c_int as angle_t
                && (*player).angle_pos > 0xf8e38e39 as libc::c_uint) as libc::c_int != 0
        {
            neg = -(1 as libc::c_int);
        } else if (*player).angle_pos > (*player).old_angle_pos {
            neg = -(1 as libc::c_int);
        }
        movingangle = R_PointToAngle2(
            0 as libc::c_int,
            0 as libc::c_int,
            neg
                * R_PointToDist2(
                    (*(*player).mo).momx,
                    (*(*player).mo).momy,
                    0 as libc::c_int,
                    0 as libc::c_int,
                ),
            (*(*player).mo).momz,
        );
        (*player)
            .anotherflyangle = ((movingangle >> 19 as libc::c_int)
            * 360 as libc::c_int as angle_t / 8192 as libc::c_int as angle_t) as int32_t;
    }
    if still != 0 {
        flystate = (if P_IsObjectOnGround((*player).mo) != 0 {
            S_PLAY_NIGHTS_STAND as libc::c_int
        } else {
            S_PLAY_NIGHTS_FLOAT as libc::c_int
        }) as statenum_t;
    } else {
        flystate = (if (*player).pflags as libc::c_uint
            & PF_DRILLING as libc::c_int as libc::c_uint != 0
        {
            S_PLAY_NIGHTS_DRILL as libc::c_int
        } else {
            S_PLAY_NIGHTS_FLY as libc::c_int
        }) as statenum_t;
        if !((*player).charflags & SF_NONIGHTSROTATION as libc::c_int as uint32_t != 0) {
            let mut a: angle_t = (R_PointToAngle((*(*player).mo).x, (*(*player).mo).y))
                .wrapping_sub((*(*player).mo).angle);
            visangle = ((*player).flyangle % 360 as libc::c_int) as uint16_t;
            if (*player).flyangle >= 90 as libc::c_int
                && (*player).flyangle <= 270 as libc::c_int
            {
                if !((*player).flyangle == 270 as libc::c_int
                    && a < 0x80000000 as libc::c_uint)
                {
                    if !((*player).flyangle == 90 as libc::c_int
                        && a < 0x80000000 as libc::c_uint)
                    {
                        visangle = (visangle as libc::c_int + 180 as libc::c_int)
                            as uint16_t;
                    }
                }
            }
            rollangle = FixedAngle((visangle as libc::c_int) << 16 as libc::c_int);
        }
    }
    if (*(*player).mo).state
        != &mut *states.as_mut_ptr().offset(flystate as isize) as *mut state_t
    {
        P_SetPlayerMobjState((*player).mo, flystate);
    }
    if (*player).charflags & SF_NONIGHTSROTATION as libc::c_int as uint32_t != 0 {
        (*(*player).mo).spriteroll = 0 as libc::c_int as angle_t;
    } else {
        (*(*player).mo).spriteroll = rollangle;
    }
    P_SetPlayerAngle(player, (*(*player).mo).angle);
    if (*(*player).mo).ceilingz - (*(*player).mo).floorz < (*(*player).mo).height
        && (*(*player).mo).flags & MF_NOCLIP as libc::c_int as uint32_t == 0
    {
        if (*player).powers[pw_flashing as libc::c_int as usize] as libc::c_int
            == 1 as libc::c_int
        {
            (*player)
                .powers[pw_flashing as libc::c_int
                as usize] = 3 as libc::c_int as uint16_t;
        } else {
            P_DamageMobj(
                (*player).mo,
                0 as *mut mobj_t,
                0 as *mut mobj_t,
                1 as libc::c_int,
                0 as libc::c_int as uint8_t,
            );
        }
    }
    if movingangle >= 0x40000000 as libc::c_int as angle_t
        && movingangle <= 0x80000000 as libc::c_uint
    {
        movingangle = movingangle.wrapping_sub(0x80000000 as libc::c_uint);
    } else if movingangle >= 0x80000000 as libc::c_uint
        && movingangle <= 0xc0000000 as libc::c_uint
    {
        movingangle = movingangle.wrapping_sub(0x80000000 as libc::c_uint);
    } else if movingangle >= 0xc0000000 as libc::c_uint {
        movingangle = InvAngle(movingangle);
    }
    if player
        == &mut *players.as_mut_ptr().offset(consoleplayer as isize) as *mut player_t
    {
        localaiming = movingangle as int32_t;
    } else if player
        == &mut *players.as_mut_ptr().offset(secondarydisplayplayer as isize)
            as *mut player_t
    {
        localaiming2 = movingangle as int32_t;
    }
    if (*player).pflags as libc::c_uint & PF_DRILLING as libc::c_int as libc::c_uint != 0
        && (*player).bumpertime == 0
    {
        if firstdrill != 0 {
            S_StartSound((*player).mo as *const libc::c_void, sfx_drill1);
            (*player).drilltimer = 32 as libc::c_int as tic_t;
        } else if (*player).drilltimer == 32 as libc::c_int as tic_t {
            (*player).drilltimer = 31 as libc::c_int as tic_t;
            (*player).drillmeter -= 35 as libc::c_int / 2 as libc::c_int;
            if (*player).drillmeter <= 0 as libc::c_int {
                (*player).drillmeter = 35 as libc::c_int / 10 as libc::c_int;
            }
        } else {
            (*player).drilltimer = ((*player).drilltimer).wrapping_sub(1);
            if (*player).drilltimer == 11 as libc::c_int as tic_t {
                (*player).drillmeter += 35 as libc::c_int / 2 as libc::c_int;
            } else if (*player).drilltimer <= 0 as libc::c_int as tic_t {
                (*player).drilltimer = 10 as libc::c_int as tic_t;
                S_StartSound((*player).mo as *const libc::c_void, sfx_drill2);
            }
        }
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_BlackOw(mut player: *mut player_t) {
    let mut i: int32_t = 0;
    S_StartSound((*player).mo as *const libc::c_void, sfx_bkpoof);
    i = 0 as libc::c_int;
    while i < 32 as libc::c_int {
        if playeringame[i as usize] != 0
            && P_AproxDistance(
                (*(*player).mo).x - (*players[i as usize].mo).x,
                (*(*player).mo).y - (*players[i as usize].mo).y,
            ) < 1536 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
        {
            P_FlashPal(
                &mut *players.as_mut_ptr().offset(i as isize),
                4 as libc::c_int as uint16_t,
                10 as libc::c_int as uint16_t,
            );
        }
        i += 1;
        i;
    }
    P_NukeEnemies(
        (*player).mo,
        (*player).mo,
        1536 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
    );
    (*player)
        .powers[pw_shield as libc::c_int
        as usize] = ((*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
        & SH_STACK as libc::c_int) as uint16_t;
}
#[no_mangle]
pub unsafe extern "C" fn P_ElementalFire(
    mut player: *mut player_t,
    mut cropcircle: boolean,
) {
    let mut newx: fixed_t = 0;
    let mut newy: fixed_t = 0;
    let mut ground: fixed_t = 0;
    let mut flame: *mut mobj_t = 0 as *mut mobj_t;
    let mut travelangle: angle_t = 0;
    let mut i: int32_t = 0;
    if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        ground = (*(*player).mo).ceilingz
            - FixedMul(
                mobjinfo[MT_SPINFIRE as libc::c_int as usize].height,
                (*(*player).mo).scale,
            );
    } else {
        ground = (*(*player).mo).floorz;
    }
    if cropcircle != 0 {
        ground += P_MobjFlip((*player).mo) as libc::c_int;
        travelangle = ((*(*player).mo).angle)
            .wrapping_add(
                (P_RandomRange(
                    -(180 as libc::c_int / 8 as libc::c_int),
                    180 as libc::c_int / 8 as libc::c_int,
                ) * 0xb60b61 as libc::c_int) as angle_t,
            );
        i = 0 as libc::c_int;
        while i < 8 as libc::c_int {
            flame = P_SpawnMobj(
                (*(*player).mo).x,
                (*(*player).mo).y,
                ground,
                MT_SPINFIRE,
            );
            (*flame).flags &= !(MF_NOGRAVITY as libc::c_int) as uint32_t;
            P_SetTarget2(&mut (*flame).target, (*player).mo);
            (*flame)
                .angle = travelangle
                .wrapping_add(
                    (i as libc::c_uint)
                        .wrapping_mul(
                            (0xffffffff as libc::c_uint)
                                .wrapping_div(8 as libc::c_int as libc::c_uint),
                        ),
                );
            (*flame).fuse = 35 as libc::c_int * 7 as libc::c_int;
            (*flame).destscale = (*(*player).mo).scale;
            P_SetScale(flame, (*(*player).mo).scale);
            if ((*(*player).mo).flags2 & MF2_OBJECTFLIP as libc::c_int as uint32_t == 0)
                as libc::c_int
                != ((*player).powers[pw_gravityboots as libc::c_int as usize] == 0)
                    as libc::c_int
            {
                (*flame).flags2 |= MF2_OBJECTFLIP as libc::c_int as uint32_t;
            }
            (*flame)
                .eflags = ((*flame).eflags as libc::c_int
                & !(MFE_VERTICALFLIP as libc::c_int)
                | (*(*player).mo).eflags as libc::c_int
                    & MFE_VERTICALFLIP as libc::c_int) as uint16_t;
            P_InstaThrust(
                flame,
                (*flame).angle,
                FixedMul(
                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    (*flame).scale,
                ),
            );
            P_SetObjectMomZ(
                flame,
                3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                false_0 as libc::c_int,
            );
            if gametyperules & GTR_FRIENDLY as libc::c_int as uint32_t == 0 {
                P_SetMobjState(flame, S_TEAM_SPINFIRE1);
                (*flame).color = (*(*player).mo).color;
            }
            i += 1;
            i;
        }
    } else {
        travelangle = R_PointToAngle2(
            0 as libc::c_int,
            0 as libc::c_int,
            (*player).rmomx,
            (*player).rmomy,
        );
        i = 0 as libc::c_int;
        while i < 2 as libc::c_int {
            newx = (*(*player).mo).x
                + P_ReturnThrustX(
                    (*player).mo,
                    travelangle
                        .wrapping_add(
                            ((if i & 1 as libc::c_int != 0 {
                                -(1 as libc::c_int)
                            } else {
                                1 as libc::c_int
                            }) * 0x60000000 as libc::c_int) as angle_t,
                        ),
                    FixedMul(
                        24 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                        (*(*player).mo).scale,
                    ),
                );
            newy = (*(*player).mo).y
                + P_ReturnThrustY(
                    (*player).mo,
                    travelangle
                        .wrapping_add(
                            ((if i & 1 as libc::c_int != 0 {
                                -(1 as libc::c_int)
                            } else {
                                1 as libc::c_int
                            }) * 0x60000000 as libc::c_int) as angle_t,
                        ),
                    FixedMul(
                        24 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                        (*(*player).mo).scale,
                    ),
                );
            if !((*(*player).mo).standingslope).is_null() {
                ground = P_GetSlopeZAt((*(*player).mo).standingslope, newx, newy);
                if (*(*player).mo).eflags as libc::c_int
                    & MFE_VERTICALFLIP as libc::c_int != 0
                {
                    ground
                        -= FixedMul(
                            mobjinfo[MT_SPINFIRE as libc::c_int as usize].height,
                            (*(*player).mo).scale,
                        );
                }
            }
            flame = P_SpawnMobj(newx, newy, ground, MT_SPINFIRE);
            P_SetTarget2(&mut (*flame).target, (*player).mo);
            (*flame).angle = travelangle;
            (*flame).fuse = 35 as libc::c_int * 6 as libc::c_int;
            (*flame).destscale = (*(*player).mo).scale;
            P_SetScale(flame, (*(*player).mo).scale);
            if ((*(*player).mo).flags2 & MF2_OBJECTFLIP as libc::c_int as uint32_t == 0)
                as libc::c_int
                != ((*player).powers[pw_gravityboots as libc::c_int as usize] == 0)
                    as libc::c_int
            {
                (*flame).flags2 |= MF2_OBJECTFLIP as libc::c_int as uint32_t;
            }
            (*flame)
                .eflags = ((*flame).eflags as libc::c_int
                & !(MFE_VERTICALFLIP as libc::c_int)
                | (*(*player).mo).eflags as libc::c_int
                    & MFE_VERTICALFLIP as libc::c_int) as uint16_t;
            if gametyperules & GTR_FRIENDLY as libc::c_int as uint32_t == 0 {
                P_SetMobjState(flame, S_TEAM_SPINFIRE1);
                (*flame).color = (*(*player).mo).color;
            }
            (*flame).momx = 8 as libc::c_int;
            P_XYMovement(flame);
            if !(P_MobjWasRemoved(flame) != 0) {
                if (*(*player).mo).eflags as libc::c_int
                    & MFE_VERTICALFLIP as libc::c_int != 0
                {
                    if (*flame).z + (*flame).height < (*flame).ceilingz {
                        P_RemoveMobj(flame);
                    }
                } else if (*flame).z > (*flame).floorz {
                    P_RemoveMobj(flame);
                }
            }
            i += 1;
            i;
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn P_SpawnSkidDust(
    mut player: *mut player_t,
    mut radius: fixed_t,
    mut sound: boolean,
) {
    let mut mo: *mut mobj_t = (*player).mo;
    let mut particle: *mut mobj_t = 0 as *mut mobj_t;
    particle = P_SpawnMobjFromMobj(
        mo,
        0 as libc::c_int,
        0 as libc::c_int,
        0 as libc::c_int,
        MT_SPINDUST,
    );
    radius >>= 16 as libc::c_int;
    if radius != 0 {
        P_UnsetThingPosition(particle);
        (*particle).x += P_RandomRange(-radius, radius) << 16 as libc::c_int;
        (*particle).y += P_RandomRange(-radius, radius) << 16 as libc::c_int;
        P_SetThingPosition(particle);
    }
    (*particle).tics = 10 as libc::c_int;
    (*particle).destscale = 2 as libc::c_int * (*mo).scale / 3 as libc::c_int;
    P_SetScale(particle, (*particle).destscale);
    P_SetObjectMomZ(
        particle,
        (1 as libc::c_int) << 16 as libc::c_int,
        false_0 as libc::c_int,
    );
    if (*mo).eflags as libc::c_int
        & (MFE_TOUCHWATER as libc::c_int | MFE_UNDERWATER as libc::c_int) != 0
    {
        P_SetMobjState(particle, S_SPINDUST_BUBBLE1);
    } else if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
        == SH_ELEMENTAL as libc::c_int
    {
        P_SetMobjState(particle, S_SPINDUST_FIRE1);
    }
    if sound != 0 {
        S_StartSound(mo as *const libc::c_void, sfx_s3k7e);
    }
}
unsafe extern "C" fn P_SkidStuff(mut player: *mut player_t) {
    let mut pmx: fixed_t = (*player).rmomx + (*player).cmomx;
    let mut pmy: fixed_t = (*player).rmomy + (*player).cmomy;
    if (*player).pflags as libc::c_uint & PF_GLIDING as libc::c_int as libc::c_uint != 0
        && (*player).skidtime != 0
    {
        if onground == 0 {
            (*player).skidtime = 0 as libc::c_int as tic_t;
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    & !(PF_GLIDING as libc::c_int | PF_JUMPED as libc::c_int
                        | PF_NOJUMPDAMAGE as libc::c_int) as libc::c_uint,
            );
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    | PF_THOKKED as libc::c_int as libc::c_uint,
            );
            P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
        } else if (*player).glidetime > 15 as libc::c_int as tic_t
            || (*player).cmd.buttons as libc::c_int & BT_JUMP as libc::c_int == 0
        {
            P_ResetPlayer(player);
            P_SetPlayerMobjState((*player).mo, S_PLAY_GLIDE_LANDING);
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    | PF_STASIS as libc::c_int as libc::c_uint,
            );
            if (*player).speed > FixedMul((*player).runspeed, (*(*player).mo).scale) {
                (*player)
                    .skidtime = ((*player).skidtime)
                    .wrapping_add((*(*player).mo).tics as tic_t);
            }
            (*(*player).mo)
                .momx = ((*(*player).mo).momx - (*player).cmomx) / 2 as libc::c_int
                + (*player).cmomx;
            (*(*player).mo)
                .momy = ((*(*player).mo).momy - (*player).cmomy) / 2 as libc::c_int
                + (*player).cmomy;
        } else if (*player).skidtime == 1 as libc::c_int as tic_t {
            (*player)
                .skidtime = (3 as libc::c_int * 35 as libc::c_int + 1 as libc::c_int)
                as tic_t;
        } else if (*player).skidtime % 3 as libc::c_int as tic_t == 0
            && (*player).charflags & SF_NOSKID as libc::c_int as uint32_t == 0
        {
            P_SpawnSkidDust(player, (*(*player).mo).radius, true_0 as libc::c_int);
        }
    } else if onground != 0
        && (*(*player).mo).eflags as libc::c_int & MFE_GOOWATER as libc::c_int == 0
        && (*player).pflags as libc::c_uint
            & (PF_JUMPED as libc::c_int | PF_SPINNING as libc::c_int
                | PF_SLIDING as libc::c_int) as libc::c_uint == 0
        && (*player).charflags & SF_NOSKID as libc::c_int as uint32_t == 0
    {
        if (*player).skidtime != 0 {
            if (*player).skidtime % 3 as libc::c_int as tic_t == 0 {
                if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                    as libc::c_long
                    == S_PLAY_GLIDE_LANDING as libc::c_int as libc::c_long
                {
                    P_SpawnSkidDust(
                        player,
                        (*(*player).mo).radius,
                        true_0 as libc::c_int,
                    );
                } else {
                    P_SpawnSkidDust(player, 0 as libc::c_int, false_0 as libc::c_int);
                }
            }
        } else if P_AproxDistance(pmx, pmy)
            >= FixedMul((*player).runspeed / 2 as libc::c_int, (*(*player).mo).scale)
            && ((*(*player).mo).momx != pmx || (*(*player).mo).momy != pmy)
            && P_GetPlayerControlDirection(player) == 2 as libc::c_int
        {
            let mut mang: angle_t = R_PointToAngle2(
                0 as libc::c_int,
                0 as libc::c_int,
                pmx,
                pmy,
            );
            let mut pang: angle_t = R_PointToAngle2(
                pmx,
                pmy,
                (*(*player).mo).momx,
                (*(*player).mo).momy,
            );
            let mut dang: angle_t = mang.wrapping_sub(pang);
            if dang > 0x80000000 as libc::c_uint {
                dang = InvAngle(dang);
            }
            if dang > 0x70000000 as libc::c_int as angle_t {
                if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                    as libc::c_long != S_PLAY_SKID as libc::c_int as libc::c_long
                {
                    P_SetPlayerMobjState((*player).mo, S_PLAY_SKID);
                }
                (*player)
                    .skidtime = (if (*(*player).mo).movefactor
                    == (1 as libc::c_int) << 16 as libc::c_int
                {
                    35 as libc::c_int / 2 as libc::c_int
                } else {
                    FixedDiv(
                        (35 as libc::c_int) << 16 as libc::c_int - 1 as libc::c_int,
                        FixedSqrt((*(*player).mo).movefactor),
                    ) >> 16 as libc::c_int
                }) as tic_t;
                (*(*player).mo).tics = (*player).skidtime as int32_t;
                S_StartSound((*player).mo as *const libc::c_void, sfx_skid);
            }
        }
    } else if (*player).skidtime != 0 {
        (*player).skidtime = 0 as libc::c_int as tic_t;
        S_StopSound((*player).mo as *mut libc::c_void);
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_MovePlayer(mut player: *mut player_t) {
    let mut cmd: *mut ticcmd_t = 0 as *mut ticcmd_t;
    let mut i: int32_t = 0;
    let mut runspd: fixed_t = 0;
    if (*(*player).mo).state
        >= &mut *states.as_mut_ptr().offset(S_PLAY_SUPER_TRANS1 as libc::c_int as isize)
            as *mut state_t
        && (*(*player).mo).state
            <= &mut *states
                .as_mut_ptr()
                .offset(S_PLAY_SUPER_TRANS6 as libc::c_int as isize) as *mut state_t
    {
        (*(*player).mo).momz = 0 as libc::c_int;
        (*(*player).mo).momy = (*(*player).mo).momz;
        (*(*player).mo).momx = (*(*player).mo).momy;
        return;
    }
    cmd = &mut (*player).cmd;
    runspd = FixedMul((*player).runspeed, (*(*player).mo).scale);
    if (*player).powers[pw_super as libc::c_int as usize] != 0 {
        runspd = FixedMul(
            runspd,
            5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                / 3 as libc::c_int,
        );
    }
    runspd = FixedMul(runspd, (*(*player).mo).movefactor);
    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_BRAKGOOP as libc::c_int
        || (*player).pflags as libc::c_uint & PF_GLIDING as libc::c_int as libc::c_uint
            != 0 && (*player).skidtime != 0
        || (*player).charability2 as libc::c_int == CA2_GUNSLINGER as libc::c_int
            && (*player).panim as libc::c_uint
                == PA_ABILITY2 as libc::c_int as libc::c_uint
        || (*player).charability2 as libc::c_int == CA2_MELEE as libc::c_int
            && ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
                == S_PLAY_MELEE_LANDING as libc::c_int as libc::c_long
    {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                | PF_FULLSTASIS as libc::c_int as libc::c_uint,
        );
    } else if (*player).powers[pw_nocontrol as libc::c_int as usize] != 0 {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >((*player).pflags as libc::c_uint | PF_STASIS as libc::c_int as libc::c_uint);
        if (*player).powers[pw_nocontrol as libc::c_int as usize] as libc::c_int
            & (1 as libc::c_int) << 15 as libc::c_int == 0
        {
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    | PF_JUMPSTASIS as libc::c_int as libc::c_uint,
            );
        }
    }
    if (*player).charability as libc::c_int == CA_GLIDEANDCLIMB as libc::c_int
        && ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
            == S_PLAY_GLIDE_LANDING as libc::c_int as libc::c_long
    {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >((*player).pflags as libc::c_uint | PF_STASIS as libc::c_int as libc::c_uint);
    }
    if (*player).spectator == 0 && G_TagGametype() != 0 {
        let mut forcestasis: boolean = false_0 as libc::c_int;
        if leveltime < hidetime * 35 as libc::c_int as tic_t {
            if (*player).pflags as libc::c_uint & PF_TAGIT as libc::c_int as libc::c_uint
                != 0
            {
                forcestasis = true_0 as libc::c_int;
            }
        } else if gametyperules & GTR_HIDEFROZEN as libc::c_int as uint32_t != 0 {
            if (*player).pflags as libc::c_uint & PF_TAGIT as libc::c_int as libc::c_uint
                == 0
            {
                forcestasis = true_0 as libc::c_int;
                if (*player).pflags as libc::c_uint
                    & PF_GAMETYPEOVER as libc::c_int as libc::c_uint != 0
                {
                    (*player)
                        .powers[pw_flashing as libc::c_int
                        as usize] = 5 as libc::c_int as uint16_t;
                }
            }
        }
        if forcestasis != 0 {
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    | PF_FULLSTASIS as libc::c_int as libc::c_uint,
            );
            if (*player).powers[pw_underwater as libc::c_int as usize] as libc::c_int
                <= 12 as libc::c_int * 35 as libc::c_int + 1 as libc::c_int
            {
                P_RestoreMusic(player);
            }
            (*player)
                .powers[pw_spacetime as libc::c_int
                as usize] = 0 as libc::c_int as uint16_t;
            (*player)
                .powers[pw_underwater as libc::c_int
                as usize] = (*player).powers[pw_spacetime as libc::c_int as usize];
        }
    }
    if (*player).spectator != 0 {
        (*(*player).mo)
            .eflags = ((*(*player).mo).eflags as libc::c_int
            & !(MFE_VERTICALFLIP as libc::c_int)) as uint16_t;
        P_SpectatorMovement(player);
        return;
    } else if maptol & TOL_NIGHTS as libc::c_int as uint32_t != 0 {
        if P_PlayerFullbright(player) != 0 {
            (*(*player).mo)
                .color = ((*((*(*player).mo).skin as *mut skin_t)).supercolor
                as libc::c_int
                + (if (*player).nightstime == (*player).startedtime {
                    4 as libc::c_int
                } else {
                    abs(
                        (leveltime as libc::c_int >> 1 as libc::c_int) % 9 as libc::c_int
                            - 4 as libc::c_int,
                    )
                })) as uint16_t;
            G_GhostAddColor(GHC_SUPER);
        }
        if ((*player).capsule).is_null() && (*player).bonustime == 0 {
            let mut th: *mut thinker_t = 0 as *mut thinker_t;
            let mut mo2: *mut mobj_t = 0 as *mut mobj_t;
            th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
            while th
                != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
                    as *mut thinker_t
            {
                if !((*th).function.acp1
                    == ::core::mem::transmute::<
                        Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                        actionf_p1,
                    >(
                        Some(
                            P_RemoveThinkerDelayed
                                as unsafe extern "C" fn(*mut thinker_t) -> (),
                        ),
                    ))
                {
                    mo2 = th as *mut mobj_t;
                    if (*mo2).type_0 as libc::c_uint
                        == MT_EGGCAPSULE as libc::c_int as libc::c_uint
                        && (*mo2).threshold == (*player).mare as libc::c_int
                    {
                        P_SetTarget2(&mut (*player).capsule, mo2);
                    }
                }
                th = (*th).next;
            }
        } else if !((*player).capsule).is_null()
            && (*(*player).capsule).reactiontime > 0 as libc::c_int
            && player
                == &mut *players
                    .as_mut_ptr()
                    .offset(
                        ((*(*player).capsule).reactiontime - 1 as libc::c_int) as isize,
                    ) as *mut player_t
        {
            P_DoNiGHTSCapsule(player);
            return;
        }
        if !((*player).drone).is_null() {
            P_MoveNiGHTSToDrone(player);
            return;
        }
        if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_NIGHTSMODE as libc::c_int
        {
            P_NiGHTSMovement(player);
            if CheckForBustableBlocks != 0 {
                P_CheckBustableBlocks(player);
            }
            if CheckForBouncySector != 0 {
                P_CheckBouncySectors(player);
            }
            if CheckForQuicksand != 0 {
                P_CheckQuicksand(player);
            }
            return;
        } else if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_NIGHTSFALL as libc::c_int && P_IsObjectOnGround((*player).mo) != 0
        {
            if G_IsSpecialStage(gamemap as int32_t) != 0 {
                if player
                    == &mut *players.as_mut_ptr().offset(displayplayer as isize)
                        as *mut player_t
                {
                    S_StartSound(0 as *const libc::c_void, sfx_s3k6a);
                }
                i = 0 as libc::c_int;
                while i < 32 as libc::c_int {
                    if playeringame[i as usize] != 0 {
                        players[i as usize]
                            .exiting = (14 as libc::c_int * 35 as libc::c_int
                            / 5 as libc::c_int + 1 as libc::c_int) as tic_t;
                    }
                    i += 1;
                    i;
                }
            } else {
                P_DamageMobj(
                    (*player).mo,
                    0 as *mut mobj_t,
                    0 as *mut mobj_t,
                    1 as libc::c_int,
                    0 as libc::c_int as uint8_t,
                );
                (*player).rings = 0 as libc::c_int as int16_t;
                (*player).spheres = (*player).rings;
                (*player).marescore = (*player).spheres as uint32_t;
            }
            (*player)
                .powers[pw_carry as libc::c_int
                as usize] = CR_NONE as libc::c_int as uint16_t;
        }
    }
    if maptol & TOL_2D as libc::c_int as uint32_t != 0
        || (*(*player).mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0
    {
        P_2dMovement(player);
    } else {
        if (*player).climbing == 0 {
            match (if (*player).pflags as libc::c_uint
                & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
            {
                CS_LMAOGALOG as libc::c_int
            } else {
                0 as libc::c_int
            })
                | (if (*player).pflags as libc::c_uint
                    & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                {
                    CS_STANDARD as libc::c_int
                } else {
                    0 as libc::c_int
                })
            {
                0 | 2 => {
                    (*(*player).mo)
                        .angle = (((*cmd).angleturn as libc::c_int) << 16 as libc::c_int)
                        as angle_t;
                }
                3 => {
                    if (*cmd).forwardmove as libc::c_int != 0
                        || (*cmd).sidemove as libc::c_int != 0
                    {
                        let mut controlangle: angle_t = R_PointToAngle2(
                            0 as libc::c_int,
                            0 as libc::c_int,
                            ((*cmd).forwardmove as libc::c_int) << 16 as libc::c_int,
                            -((*cmd).sidemove as libc::c_int) << 16 as libc::c_int,
                        );
                        (*(*player).mo)
                            .angle = ((((*cmd).angleturn as libc::c_int)
                            << 16 as libc::c_int) as angle_t)
                            .wrapping_add(controlangle);
                    } else {
                        let mut drawangleoffset: angle_t = if (*player)
                            .powers[pw_carry as libc::c_int as usize] as libc::c_int
                            == CR_ROLLOUT as libc::c_int
                        {
                            0x80000000 as libc::c_uint
                        } else {
                            0 as libc::c_int as libc::c_uint
                        };
                        (*(*player).mo)
                            .angle = ((*player).drawangle).wrapping_add(drawangleoffset);
                    }
                }
                1 | _ => {}
            }
        }
        ticruned += 1;
        ticruned;
        if (*cmd).angleturn as libc::c_int & 1 as libc::c_int == 0 as libc::c_int {
            ticmiss += 1;
            ticmiss;
        }
        P_3dMovement(player);
    }
    if maptol & TOL_2D as libc::c_int as uint32_t != 0 {
        runspd = FixedMul(
            runspd,
            2 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                / 3 as libc::c_int,
        );
    }
    P_SkidStuff(player);
    if (*cmd).forwardmove as libc::c_int != 0 as libc::c_int
        || (*cmd).sidemove as libc::c_int != 0 as libc::c_int
        || (*player).powers[pw_super as libc::c_int as usize] as libc::c_int != 0
            && onground == 0
    {
        if (*player).charflags & SF_DASHMODE as libc::c_int as uint32_t != 0
            && (*player).dashmode >= (3 as libc::c_int * 35 as libc::c_int) as tic_t
            && (*player).panim as libc::c_uint == PA_RUN as libc::c_int as libc::c_uint
            && (*player).skidtime == 0
            && (onground != 0
                || ((*player).charability as libc::c_int == CA_FLOAT as libc::c_int
                    || (*player).charability as libc::c_int
                        == CA_SLOWFALL as libc::c_int)
                    && (*player).secondjump as libc::c_int == 1 as libc::c_int
                || (*player).powers[pw_super as libc::c_int as usize] as libc::c_int
                    != 0)
        {
            P_SetPlayerMobjState((*player).mo, S_PLAY_DASH);
        } else if (*player).speed >= runspd
            && (*player).panim as libc::c_uint == PA_WALK as libc::c_int as libc::c_uint
            && (*player).skidtime == 0
            && (onground != 0
                || ((*player).charability as libc::c_int == CA_FLOAT as libc::c_int
                    || (*player).charability as libc::c_int
                        == CA_SLOWFALL as libc::c_int)
                    && (*player).secondjump as libc::c_int == 1 as libc::c_int
                || (*player).powers[pw_super as libc::c_int as usize] as libc::c_int
                    != 0)
        {
            if onground == 0 {
                P_SetPlayerMobjState((*player).mo, S_PLAY_FLOAT_RUN);
            } else {
                P_SetPlayerMobjState((*player).mo, S_PLAY_RUN);
            }
        } else if (((*player).charability as libc::c_int == CA_FLOAT as libc::c_int
            || (*player).charability as libc::c_int == CA_SLOWFALL as libc::c_int)
            && (*player).secondjump as libc::c_int == 1 as libc::c_int
            || (*player).powers[pw_super as libc::c_int as usize] as libc::c_int != 0)
            && (*player).panim as libc::c_uint == PA_IDLE as libc::c_int as libc::c_uint
            && onground == 0
        {
            P_SetPlayerMobjState((*player).mo, S_PLAY_FLOAT);
        } else if ((*player).rmomx != 0 || (*player).rmomy != 0)
            && (*player).panim as libc::c_uint == PA_IDLE as libc::c_int as libc::c_uint
        {
            P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
        }
    }
    if (*player).charflags & SF_DASHMODE as libc::c_int as uint32_t != 0
        && (*player).panim as libc::c_uint == PA_DASH as libc::c_int as libc::c_uint
        && (*player).dashmode < (3 as libc::c_int * 35 as libc::c_int) as tic_t
    {
        P_SetPlayerMobjState((*player).mo, S_PLAY_RUN);
    }
    if (*player).panim as libc::c_uint == PA_RUN as libc::c_int as libc::c_uint
        && (*player).speed < runspd
    {
        if onground == 0
            && (((*player).charability as libc::c_int == CA_FLOAT as libc::c_int
                || (*player).charability as libc::c_int == CA_SLOWFALL as libc::c_int)
                && (*player).secondjump as libc::c_int == 1 as libc::c_int
                || (*player).powers[pw_super as libc::c_int as usize] as libc::c_int
                    != 0)
        {
            P_SetPlayerMobjState((*player).mo, S_PLAY_FLOAT);
        } else {
            P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
        }
    }
    if onground != 0 {
        if ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
            == S_PLAY_FLOAT as libc::c_int as libc::c_long
        {
            P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
        } else if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
            as libc::c_long == S_PLAY_FLOAT_RUN as libc::c_int as libc::c_long
        {
            P_SetPlayerMobjState((*player).mo, S_PLAY_RUN);
        }
    }
    if (*player).panim as libc::c_uint == PA_SPRING as libc::c_int as libc::c_uint
        && P_MobjFlip((*player).mo) as libc::c_int * (*(*player).mo).momz
            < 0 as libc::c_int
        || (*player).charflags & SF_NOJUMPSPIN as libc::c_int as uint32_t != 0
            && (*player).pflags as libc::c_uint
                & PF_JUMPED as libc::c_int as libc::c_uint != 0
            && (*player).panim as libc::c_uint == PA_JUMP as libc::c_int as libc::c_uint
            && P_MobjFlip((*player).mo) as libc::c_int * (*(*player).mo).momz
                < 0 as libc::c_int
    {
        P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
    } else if onground != 0
        && ((*player).panim as libc::c_uint == PA_SPRING as libc::c_int as libc::c_uint
            || (*player).panim as libc::c_uint == PA_FALL as libc::c_int as libc::c_uint
            || (*player).panim as libc::c_uint == PA_RIDE as libc::c_int as libc::c_uint
            || (*player).panim as libc::c_uint == PA_JUMP as libc::c_int as libc::c_uint)
        && (*(*player).mo).momz == 0
    {
        P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
    }
    if (*(*player).mo).momx == 0 && (*(*player).mo).momy == 0
        && (*(*player).mo).momz == 0
        && (*player).panim as libc::c_uint == PA_WALK as libc::c_int as libc::c_uint
    {
        P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
    }
    if onground != 0
        && (*player).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint
            != 0
        && (*player).pflags as libc::c_uint & PF_GLIDING as libc::c_int as libc::c_uint
            == 0
        && P_MobjFlip((*player).mo) as libc::c_int * (*(*player).mo).momz
            < 0 as libc::c_int
    {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_STARTJUMP as libc::c_int | PF_JUMPED as libc::c_int
                    | PF_NOJUMPDAMAGE as libc::c_int | PF_THOKKED as libc::c_int
                    | PF_SHIELDABILITY as libc::c_int) as libc::c_uint,
        );
        (*player).secondjump = 0 as libc::c_int as uint8_t;
        P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
    }
    if (!((*player).charability as libc::c_int == CA_GLIDEANDCLIMB as libc::c_int)
        || (*player).gotflag as libc::c_int != 0)
        && ((*player).pflags as libc::c_uint & PF_GLIDING as libc::c_int as libc::c_uint
            != 0 || (*player).climbing as libc::c_int != 0)
    {
        if onground != 0 {
            P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
        } else {
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >((*player).pflags as libc::c_uint | P_GetJumpFlags(player) as libc::c_uint);
            P_SetPlayerMobjState((*player).mo, S_PLAY_JUMP);
        }
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_GLIDING as libc::c_int) as libc::c_uint,
        );
        (*player).glidetime = 0 as libc::c_int as tic_t;
        (*player).climbing = 0 as libc::c_int as uint8_t;
    }
    if (!((*player).charability as libc::c_int == CA_BOUNCE as libc::c_int)
        || (*player).gotflag as libc::c_int != 0)
        && (*player).pflags as libc::c_uint & PF_BOUNCING as libc::c_int as libc::c_uint
            != 0
    {
        if onground != 0 {
            P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
        } else {
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >((*player).pflags as libc::c_uint | P_GetJumpFlags(player) as libc::c_uint);
            P_SetPlayerMobjState((*player).mo, S_PLAY_JUMP);
        }
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_BOUNCING as libc::c_int) as libc::c_uint,
        );
    }
    if (*player).pflags as libc::c_uint & PF_GLIDING as libc::c_int as libc::c_uint != 0
    {
        let mut mo: *mut mobj_t = (*player).mo;
        let mut glidespeed: fixed_t = (*player).actionspd;
        let mut momx: fixed_t = (*mo).momx - (*player).cmomx;
        let mut momy: fixed_t = (*mo).momy - (*player).cmomy;
        let mut angle: angle_t = 0;
        let mut moveangle: angle_t = R_PointToAngle2(
            0 as libc::c_int,
            0 as libc::c_int,
            momx,
            momy,
        );
        let mut swimming: boolean = (((*mo).state).offset_from(states.as_mut_ptr())
            as libc::c_long == S_PLAY_SWIM as libc::c_int as libc::c_long)
            as libc::c_int;
        let mut in2d: boolean = ((*mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0
            || maptol & TOL_2D as libc::c_int as uint32_t != 0) as libc::c_int;
        if (*player).powers[pw_super as libc::c_int as usize] as libc::c_int != 0
            || (*player).powers[pw_sneakers as libc::c_int as usize] as libc::c_int != 0
        {
            glidespeed *= 2 as libc::c_int;
        }
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            if (*(*player).mo).momz
                > FixedMul(
                    2 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    (*(*player).mo).scale,
                )
            {
                (*(*player).mo).momz
                    -= FixedMul(
                        3 as libc::c_int
                            * (((1 as libc::c_int) << 16 as libc::c_int)
                                / 4 as libc::c_int),
                        (*(*player).mo).scale,
                    );
            }
        } else if (*(*player).mo).momz
            < FixedMul(
                -(2 as libc::c_int) * ((1 as libc::c_int) << 16 as libc::c_int),
                (*(*player).mo).scale,
            )
        {
            (*(*player).mo).momz
                += FixedMul(
                    3 as libc::c_int
                        * (((1 as libc::c_int) << 16 as libc::c_int) / 4 as libc::c_int),
                    (*(*player).mo).scale,
                );
        }
        if ((if (*player).pflags as libc::c_uint
            & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
        {
            CS_LMAOGALOG as libc::c_int
        } else {
            0 as libc::c_int
        })
            | (if (*player).pflags as libc::c_uint
                & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
            {
                CS_STANDARD as libc::c_int
            } else {
                0 as libc::c_int
            })) & CS_LMAOGALOG as libc::c_int != 0 || in2d != 0
        {
            angle = (*mo).angle;
        } else if swimming != 0 {
            angle = ((*mo).angle)
                .wrapping_add(
                    R_PointToAngle2(
                        0 as libc::c_int,
                        0 as libc::c_int,
                        ((*cmd).forwardmove as libc::c_int) << 16 as libc::c_int,
                        -((*cmd).sidemove as libc::c_int) << 16 as libc::c_int,
                    ),
                );
        } else {
            angle = ((*mo).angle)
                .wrapping_sub(
                    FixedAngle(
                        (*cmd).sidemove as libc::c_int
                            * ((1 as libc::c_int) << 16 as libc::c_int),
                    ),
                );
        }
        if (*player).skidtime == 0 {
            let mut anglediff: angle_t = angle.wrapping_sub(moveangle);
            let mut accelfactor: fixed_t = 4 as libc::c_int
                * ((1 as libc::c_int) << 16 as libc::c_int)
                - 3 as libc::c_int
                    * (*finecosine
                        .offset(
                            (anglediff >> 19 as libc::c_int
                                & (8192 as libc::c_int - 1 as libc::c_int) as angle_t)
                                as isize,
                        ) >> 16 as libc::c_int - 16 as libc::c_int);
            let mut speed: fixed_t = 0;
            let mut scale: fixed_t = (*mo).scale;
            if in2d != 0 {
                if (*mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int != 0 {
                    speed = FixedMul(
                        ((glidespeed >> 1 as libc::c_int) as tic_t)
                            .wrapping_add(
                                (*player).glidetime * 750 as libc::c_int as tic_t,
                            ) as fixed_t,
                        scale,
                    );
                } else {
                    speed = FixedMul(
                        (glidespeed as tic_t)
                            .wrapping_add(
                                (*player).glidetime * 1500 as libc::c_int as tic_t,
                            ) as fixed_t,
                        scale,
                    );
                }
                P_InstaThrust(mo, angle, speed);
            } else if swimming != 0 {
                let mut minspeed: fixed_t = 0;
                if anglediff > 0x80000000 as libc::c_uint {
                    anglediff = InvAngle(InvAngle(anglediff) >> 3 as libc::c_int);
                } else {
                    anglediff = anglediff >> 3 as libc::c_int;
                }
                minspeed = FixedMul(
                    ((glidespeed >> 1 as libc::c_int) as tic_t)
                        .wrapping_add((*player).glidetime * 750 as libc::c_int as tic_t)
                        as fixed_t,
                    scale,
                );
                speed = FixedHypot(momx, momy)
                    - abs(P_ReturnThrustY(mo, anglediff, (*mo).scale));
                if speed < minspeed {
                    momx += P_ReturnThrustX(mo, angle, FixedMul(accelfactor, scale));
                    momy += P_ReturnThrustY(mo, angle, FixedMul(accelfactor, scale));
                    speed = FixedHypot(momx, momy);
                }
                (*mo)
                    .momx = P_ReturnThrustX(mo, moveangle.wrapping_add(anglediff), speed)
                    + (*player).cmomx;
                (*mo)
                    .momy = P_ReturnThrustY(mo, moveangle.wrapping_add(anglediff), speed)
                    + (*player).cmomy;
            } else {
                let mut newMagnitude: fixed_t = 0;
                let mut oldMagnitude: fixed_t = R_PointToDist2(
                    momx,
                    momy,
                    0 as libc::c_int,
                    0 as libc::c_int,
                );
                if (*mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int != 0 {
                    speed = FixedMul(
                        ((glidespeed >> 1 as libc::c_int) as tic_t)
                            .wrapping_add(
                                (*player).glidetime * 750 as libc::c_int as tic_t,
                            ) as fixed_t,
                        scale,
                    );
                } else {
                    speed = FixedMul(
                        (glidespeed as tic_t)
                            .wrapping_add(
                                (*player).glidetime * 1500 as libc::c_int as tic_t,
                            ) as fixed_t,
                        scale,
                    );
                }
                P_Thrust(mo, angle, FixedMul(accelfactor, scale));
                newMagnitude = R_PointToDist2(
                    (*(*player).mo).momx - (*player).cmomx,
                    (*(*player).mo).momy - (*player).cmomy,
                    0 as libc::c_int,
                    0 as libc::c_int,
                );
                if newMagnitude > speed {
                    let mut tempmomx: fixed_t = 0;
                    let mut tempmomy: fixed_t = 0;
                    if oldMagnitude > speed {
                        if newMagnitude > oldMagnitude {
                            tempmomx = FixedMul(
                                FixedDiv(
                                    (*(*player).mo).momx - (*player).cmomx,
                                    newMagnitude,
                                ),
                                oldMagnitude,
                            );
                            tempmomy = FixedMul(
                                FixedDiv(
                                    (*(*player).mo).momy - (*player).cmomy,
                                    newMagnitude,
                                ),
                                oldMagnitude,
                            );
                            (*(*player).mo).momx = tempmomx + (*player).cmomx;
                            (*(*player).mo).momy = tempmomy + (*player).cmomy;
                        }
                    } else {
                        tempmomx = FixedMul(
                            FixedDiv(
                                (*(*player).mo).momx - (*player).cmomx,
                                newMagnitude,
                            ),
                            speed,
                        );
                        tempmomy = FixedMul(
                            FixedDiv(
                                (*(*player).mo).momy - (*player).cmomy,
                                newMagnitude,
                            ),
                            speed,
                        );
                        (*(*player).mo).momx = tempmomx + (*player).cmomx;
                        (*(*player).mo).momy = tempmomy + (*player).cmomy;
                    }
                }
            }
        }
        (*player).glidetime = ((*player).glidetime).wrapping_add(1);
        (*player).glidetime;
        if (*player).pflags as libc::c_uint & PF_JUMPDOWN as libc::c_int as libc::c_uint
            == 0
        {
            P_ResetPlayer(player);
            if onground != 0 {
                P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
            } else if (*player).charflags & SF_MULTIABILITY as libc::c_int as uint32_t
                != 0
            {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        | P_GetJumpFlags(player) as libc::c_uint,
                );
                P_SetPlayerMobjState((*player).mo, S_PLAY_JUMP);
            } else {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        | PF_THOKKED as libc::c_int as libc::c_uint,
                );
                (*(*player).mo).momx >>= 1 as libc::c_int;
                (*(*player).mo).momy >>= 1 as libc::c_int;
                P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
            }
        }
    } else if (*player).climbing != 0 {
        if (*player).cmd.forwardmove == 0 {
            (*(*player).mo).momz = 0 as libc::c_int;
        }
    } else if (*player).pflags as libc::c_uint
        & PF_BOUNCING as libc::c_int as libc::c_uint != 0
    {
        if (*player).pflags as libc::c_uint & PF_JUMPDOWN as libc::c_int as libc::c_uint
            == 0
        {
            P_ResetPlayer(player);
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    | PF_THOKKED as libc::c_int as libc::c_uint,
            );
            if onground != 0 {
                P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
            } else if (*player).charflags & SF_MULTIABILITY as libc::c_int as uint32_t
                != 0
            {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        | P_GetJumpFlags(player) as libc::c_uint,
                );
                P_SetPlayerMobjState((*player).mo, S_PLAY_JUMP);
            } else {
                (*(*player).mo).momx >>= 1 as libc::c_int;
                (*(*player).mo).momy >>= 1 as libc::c_int;
                (*(*player).mo).momz >>= 1 as libc::c_int;
                P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
            }
        }
    } else if ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
        == S_PLAY_BOUNCE as libc::c_int as libc::c_long
    {
        P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
    }
    if (*player).climbing == 0
        && ((*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int == 0
            && (*(*player).mo).z + (*(*player).mo).height >= (*(*player).mo).watertop
            && (*(*player).mo).z <= (*(*player).mo).watertop
            || (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                != 0
                && (*(*player).mo).z + (*(*player).mo).height
                    >= (*(*player).mo).waterbottom
                && (*(*player).mo).z <= (*(*player).mo).waterbottom)
        && ((*player).speed > runspd
            || (*player).pflags as libc::c_uint
                & PF_STARTDASH as libc::c_int as libc::c_uint != 0)
        && leveltime % (35 as libc::c_int / 7 as libc::c_int) as tic_t
            == 0 as libc::c_int as tic_t && (*(*player).mo).momz == 0 as libc::c_int
        && (*player).pflags as libc::c_uint & PF_SLIDING as libc::c_int as libc::c_uint
            == 0 && (*player).spectator == 0
    {
        let mut splishtype: mobjtype_t = (if (*(*player).mo).eflags as libc::c_int
            & MFE_TOUCHLAVA as libc::c_int != 0
        {
            MT_LAVASPLISH as libc::c_int
        } else {
            MT_SPLISH as libc::c_int
        }) as mobjtype_t;
        let mut water: *mut mobj_t = P_SpawnMobj(
            (*(*player).mo).x
                - P_ReturnThrustX(
                    0 as *mut mobj_t,
                    (*(*player).mo).angle,
                    (*(*player).mo).radius,
                ),
            (*(*player).mo).y
                - P_ReturnThrustY(
                    0 as *mut mobj_t,
                    (*(*player).mo).angle,
                    (*(*player).mo).radius,
                ),
            if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                != 0
            {
                (*(*player).mo).waterbottom
                    - FixedMul(
                        mobjinfo[splishtype as usize].height,
                        (*(*player).mo).scale,
                    )
            } else {
                (*(*player).mo).watertop
            },
            splishtype,
        );
        if (*(*player).mo).eflags as libc::c_int & MFE_GOOWATER as libc::c_int != 0 {
            S_StartSound(water as *const libc::c_void, sfx_ghit);
        } else if (*(*player).mo).eflags as libc::c_int & MFE_TOUCHLAVA as libc::c_int
            != 0
        {
            S_StartSound(water as *const libc::c_void, sfx_splash);
        } else {
            S_StartSound(water as *const libc::c_void, sfx_wslap);
        }
        if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            (*water).flags2 |= MF2_OBJECTFLIP as libc::c_int as uint32_t;
            (*water)
                .eflags = ((*water).eflags as libc::c_int
                | MFE_VERTICALFLIP as libc::c_int) as uint16_t;
        }
        (*water).destscale = (*(*player).mo).scale;
        P_SetScale(water, (*(*player).mo).scale);
    }
    if (*(*player).mo).eflags as libc::c_int & MFE_TOUCHWATER as libc::c_int != 0
        && (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int == 0
        && (*player).spectator == 0
    {
        if P_RandomFixed() < ((1 as libc::c_int) << 16 as libc::c_int) / 2 as libc::c_int
            && leveltime % 35 as libc::c_int as tic_t == 0 as libc::c_int as tic_t
        {
            S_StartSound((*player).mo as *const libc::c_void, sfx_floush);
        }
    }
    if !((*player).charability as libc::c_int == CA_FLY as libc::c_int
        || (*player).charability as libc::c_int == CA_SWIM as libc::c_int)
    {
        if (*player).powers[pw_tailsfly as libc::c_int as usize] as libc::c_int != 0
            || ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
                == S_PLAY_FLY_TIRED as libc::c_int as libc::c_long
        {
            if onground != 0 {
                P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
            } else {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        | P_GetJumpFlags(player) as libc::c_uint,
                );
                P_SetPlayerMobjState((*player).mo, S_PLAY_JUMP);
            }
        }
        (*player)
            .powers[pw_tailsfly as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
    }
    if (*player).gotflag as libc::c_int != 0
        && (*player).powers[pw_tailsfly as libc::c_int as usize] as libc::c_int != 0
    {
        (*player)
            .powers[pw_tailsfly as libc::c_int as usize] = 1 as libc::c_int as uint16_t;
    }
    if (*player).panim as libc::c_uint != PA_ABILITY as libc::c_int as libc::c_uint {
        (*player)
            .powers[pw_tailsfly as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
    }
    if (*player).charability as libc::c_int == CA_FLY as libc::c_int
        || (*player).charability as libc::c_int == CA_SWIM as libc::c_int
            && (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int != 0
    {
        if (*player).powers[pw_tailsfly as libc::c_int as usize] != 0 {
            let actionspd: fixed_t = (*player).actionspd / 100 as libc::c_int;
            if (*player).charflags & SF_MULTIABILITY as libc::c_int as uint32_t != 0 {
                if (*cmd).buttons as libc::c_int & BT_JUMP as libc::c_int != 0
                    && (*player).pflags as libc::c_uint
                        & PF_STASIS as libc::c_int as libc::c_uint == 0
                    && (*player).exiting == 0
                {
                    P_SetObjectMomZ(
                        (*player).mo,
                        actionspd / 4 as libc::c_int,
                        true_0 as libc::c_int,
                    );
                }
            } else if (*player).fly1 != 0 {
                if P_MobjFlip((*player).mo) as libc::c_int * (*(*player).mo).momz
                    < FixedMul(5 as libc::c_int * actionspd, (*(*player).mo).scale)
                {
                    P_SetObjectMomZ(
                        (*player).mo,
                        actionspd / 2 as libc::c_int,
                        true_0 as libc::c_int,
                    );
                }
                P_SetPlayerMobjState((*player).mo, (*(*(*player).mo).state).nextstate);
                (*player).fly1 = ((*player).fly1).wrapping_sub(1);
                (*player).fly1;
            }
            if (*player).charability as libc::c_int == CA_FLY as libc::c_int
                && (*player).pflags as libc::c_uint
                    & PF_CANCARRY as libc::c_int as libc::c_uint != 0
                && (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int
                    == 0
                && leveltime % 10 as libc::c_int as tic_t == 0 as libc::c_int as tic_t
                && (*player).spectator == 0
            {
                S_StartSound((*player).mo as *const libc::c_void, sfx_putput);
            }
            if (*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0
                && (*player).pflags as libc::c_uint
                    & PF_STASIS as libc::c_int as libc::c_uint == 0
                && (*player).exiting == 0
                && (*(*player).mo).eflags as libc::c_int & MFE_GOOWATER as libc::c_int
                    == 0
            {
                if P_MobjFlip((*player).mo) as libc::c_int * (*(*player).mo).momz
                    > -FixedMul(5 as libc::c_int * actionspd, (*(*player).mo).scale)
                {
                    if (*player).fly1 as libc::c_int > 2 as libc::c_int {
                        (*player).fly1 = 2 as libc::c_int as uint8_t;
                    }
                    P_SetObjectMomZ(
                        (*player).mo,
                        -actionspd / 2 as libc::c_int,
                        true_0 as libc::c_int,
                    );
                }
            }
        } else {
            if (*player).panim as libc::c_uint
                == PA_ABILITY as libc::c_int as libc::c_uint
                && ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                    as libc::c_long != S_PLAY_FLY_TIRED as libc::c_int as libc::c_long
            {
                P_SetPlayerMobjState((*player).mo, S_PLAY_FLY_TIRED);
            }
            if (*player).charability as libc::c_int == CA_FLY as libc::c_int
                && leveltime % 10 as libc::c_int as tic_t == 0 as libc::c_int as tic_t
                && ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                    as libc::c_long == S_PLAY_FLY_TIRED as libc::c_int as libc::c_long
                && (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int
                    == 0 && (*player).spectator == 0
            {
                S_StartSound((*player).mo as *const libc::c_void, sfx_pudpud);
            }
        }
    }
    if (onground != 0 || (*player).climbing as libc::c_int != 0)
        && (*player).pflags as libc::c_uint
            & (PF_STARTDASH as libc::c_int | PF_SPINNING as libc::c_int) as libc::c_uint
            != PF_SPINNING as libc::c_int as libc::c_uint
        && (*player).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint
            == 0
        && (*player).powers[pw_invulnerability as libc::c_int as usize] as libc::c_int
            <= 1 as libc::c_int
    {
        (*player).scoreadd = 0 as libc::c_int as uint8_t;
    }
    if (*player).pflags as libc::c_uint & PF_SPINNING as libc::c_int as libc::c_uint != 0
        && P_AproxDistance((*player).speed, (*(*player).mo).momz)
            > FixedMul((15 as libc::c_int) << 16 as libc::c_int, (*(*player).mo).scale)
        && (*player).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint
            == 0
    {
        P_SpawnSpinMobj(player, (*player).spinitem);
        G_GhostAddSpin();
    }
    if onground == 0
        && (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            != CR_NIGHTSMODE as libc::c_int
    {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_STARTDASH as libc::c_int) as libc::c_uint,
        );
        (*player).dashspeed = 0 as libc::c_int;
    }
    if (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
        & SH_NOSTACK as libc::c_int == SH_ELEMENTAL as libc::c_int
        && (*player).pflags as libc::c_uint & PF_SPINNING as libc::c_int as libc::c_uint
            != 0
        && (*player).speed
            > FixedMul((4 as libc::c_int) << 16 as libc::c_int, (*(*player).mo).scale)
        && onground != 0 && leveltime & 1 as libc::c_int as tic_t != 0
        && (*(*player).mo).eflags as libc::c_int
            & (MFE_UNDERWATER as libc::c_int | MFE_TOUCHWATER as libc::c_int) == 0
    {
        P_ElementalFire(player, false_0 as libc::c_int);
    }
    P_DoSpinAbility(player, cmd);
    P_DoJumpStuff(player, cmd);
    if (*player).pflags as libc::c_uint & PF_SPINNING as libc::c_int as libc::c_uint == 0
        && (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            != CR_NIGHTSMODE as libc::c_int
    {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_STARTDASH as libc::c_int) as libc::c_uint,
        );
    }
    if (if (*player).pflags as libc::c_uint
        & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
    {
        CS_LMAOGALOG as libc::c_int
    } else {
        0 as libc::c_int
    })
        | (if (*player).pflags as libc::c_uint
            & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
        {
            CS_STANDARD as libc::c_int
        } else {
            0 as libc::c_int
        }) == CS_LMAOGALOG as libc::c_int
        && ((*cmd).forwardmove as libc::c_int != 0 as libc::c_int
            || (*cmd).sidemove as libc::c_int != 0 as libc::c_int)
        && (*player).climbing == 0 && maptol & TOL_2D as libc::c_int as uint32_t == 0
        && (*(*player).mo).flags2 & MF2_TWOD as libc::c_int as uint32_t == 0
    {
        if (*player).speed
            < FixedMul(
                5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*(*player).mo).scale,
            )
            || (*player).pflags as libc::c_uint
                & PF_GLIDING as libc::c_int as libc::c_uint != 0 || onground == 0
        {
            let mut tempangle: angle_t = 0;
            tempangle = (((*cmd).angleturn as libc::c_int) << 16 as libc::c_int)
                as angle_t;
            (*(*player).mo)
                .angle = (R_PointToAngle2(
                0 as libc::c_int,
                0 as libc::c_int,
                (*cmd).forwardmove as libc::c_int
                    * ((1 as libc::c_int) << 16 as libc::c_int),
                -((*cmd).sidemove as libc::c_int)
                    * ((1 as libc::c_int) << 16 as libc::c_int),
            ))
                .wrapping_add(tempangle);
        } else if (*player).panim as libc::c_uint
            == PA_WALK as libc::c_int as libc::c_uint
            || (*player).panim as libc::c_uint == PA_RUN as libc::c_int as libc::c_uint
            || (*player).panim as libc::c_uint == PA_DASH as libc::c_int as libc::c_uint
            || (*player).panim as libc::c_uint == PA_ROLL as libc::c_int as libc::c_uint
            || (*player).panim as libc::c_uint == PA_JUMP as libc::c_int as libc::c_uint
            || (*player).panim as libc::c_uint
                == PA_ABILITY as libc::c_int as libc::c_uint
                && ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                    as libc::c_long == S_PLAY_GLIDE as libc::c_int as libc::c_long
        {
            (*(*player).mo)
                .angle = R_PointToAngle2(
                0 as libc::c_int,
                0 as libc::c_int,
                (*player).rmomx,
                (*player).rmomy,
            );
        }
        P_SetPlayerAngle(player, (*(*player).mo).angle);
    }
    if (*player).climbing as libc::c_int == 1 as libc::c_int {
        P_DoClimbing(player);
    }
    if (*player).climbing as libc::c_int > 1 as libc::c_int {
        P_InstaThrust(
            (*player).mo,
            (*(*player).mo).angle,
            FixedMul(
                4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*(*player).mo).scale,
            ),
        );
        (*player).climbing = ((*player).climbing).wrapping_sub(1);
        (*player).climbing;
    }
    if (*player).panim as libc::c_uint == PA_EDGE as libc::c_int as libc::c_uint
        && ((*(*player).mo).momx != 0 || (*(*player).mo).momy != 0
            || (*(*player).mo).momz != 0)
    {
        P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
    }
    if !((*(*player).mo).momz != 0 || (*(*player).mo).momx != 0
        || (*(*player).mo).momy != 0)
        && (*(*player).mo).eflags as libc::c_int & MFE_GOOWATER as libc::c_int == 0
        && (*player).panim as libc::c_uint == PA_IDLE as libc::c_int as libc::c_uint
        && (*player).powers[pw_carry as libc::c_int as usize] == 0
    {
        P_DoTeeter(player);
    }
    if G_GametypeHasTeams() != 0
        && (*cmd).buttons as libc::c_int & BT_TOSSFLAG as libc::c_int != 0
        && (*player).powers[pw_super as libc::c_int as usize] == 0
        && (*player).tossdelay == 0
    {
        if (*player).gotflag as libc::c_int & (1 as libc::c_int | 2 as libc::c_int) == 0
        {
            P_PlayerEmeraldBurst(player, true_0 as libc::c_int);
        } else {
            P_PlayerFlagBurst(player, true_0 as libc::c_int);
        }
    }
    if (*player).exiting == 0 {
        P_DoFiring(player, cmd);
    }
    let mut atspinheight: boolean = false_0 as libc::c_int;
    let mut oldheight: fixed_t = (*(*player).mo).height;
    let mut luaheight: fixed_t = LUA_HookPlayerHeight(player);
    if luaheight != -(1 as libc::c_int) {
        (*(*player).mo).height = luaheight;
        if luaheight <= FixedMul((*player).spinheight, (*(*player).mo).scale) {
            atspinheight = true_0 as libc::c_int;
        }
    } else if P_PlayerShouldUseSpinHeight(player) != 0 {
        (*(*player).mo).height = FixedMul((*player).spinheight, (*(*player).mo).scale);
        atspinheight = true_0 as libc::c_int;
    } else {
        (*(*player).mo).height = FixedMul((*player).height, (*(*player).mo).scale);
    }
    if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0
        && (*(*player).mo).height != oldheight
    {
        (*(*player).mo).z -= (*(*player).mo).height - oldheight;
        (*(*player).mo).old_z -= (*(*player).mo).height - oldheight;
    }
    if (*(*player).mo).ceilingz - (*(*player).mo).floorz < (*(*player).mo).height
        && (*(*player).mo).flags & MF_NOCLIP as libc::c_int as uint32_t == 0
    {
        if atspinheight == 0 {
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    | PF_SPINNING as libc::c_int as libc::c_uint,
            );
            P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
        } else if (*(*player).mo).ceilingz - (*(*player).mo).floorz
            < (*(*player).mo).height
        {
            if (netgame != 0 || multiplayer != 0) && (*player).spectator != 0 {
                P_DamageMobj(
                    (*player).mo,
                    0 as *mut mobj_t,
                    0 as *mut mobj_t,
                    1 as libc::c_int,
                    (0x80 as libc::c_int + 5 as libc::c_int) as uint8_t,
                );
            } else {
                P_DamageMobj(
                    (*player).mo,
                    0 as *mut mobj_t,
                    0 as *mut mobj_t,
                    1 as libc::c_int,
                    (0x80 as libc::c_int + 4 as libc::c_int) as uint8_t,
                );
            }
            if (*player).playerstate as libc::c_uint
                == PST_DEAD as libc::c_int as libc::c_uint
            {
                return;
            }
        }
    }
    if CheckForBustableBlocks != 0 {
        P_CheckBustableBlocks(player);
    }
    if CheckForBouncySector != 0 {
        P_CheckBouncySectors(player);
    }
    if CheckForQuicksand != 0 {
        P_CheckQuicksand(player);
    }
    if P_IsObjectOnGround((*player).mo) != 0 {
        (*(*player).mo).pmomz = 0 as libc::c_int;
    }
}
unsafe extern "C" fn P_DoZoomTube(mut player: *mut player_t) {
    let mut speed: fixed_t = 0;
    let mut waypoint: *mut mobj_t = 0 as *mut mobj_t;
    let mut dist: fixed_t = 0;
    let mut reverse: boolean = 0;
    (*(*player).mo).height = FixedMul((*player).spinheight, (*(*player).mo).scale);
    if (*player).speed > 0 as libc::c_int {
        reverse = false_0 as libc::c_int;
    } else {
        reverse = true_0 as libc::c_int;
    }
    (*player).powers[pw_flashing as libc::c_int as usize] = 1 as libc::c_int as uint16_t;
    speed = abs((*player).speed);
    dist = P_AproxDistance(
        P_AproxDistance(
            (*(*(*player).mo).tracer).x - (*(*player).mo).x,
            (*(*(*player).mo).tracer).y - (*(*player).mo).y,
        ),
        (*(*(*player).mo).tracer).z - (*(*player).mo).z,
    );
    if dist < 1 as libc::c_int {
        dist = 1 as libc::c_int;
    }
    (*(*player).mo)
        .momx = FixedMul(
        FixedDiv((*(*(*player).mo).tracer).x - (*(*player).mo).x, dist),
        speed,
    );
    (*(*player).mo)
        .momy = FixedMul(
        FixedDiv((*(*(*player).mo).tracer).y - (*(*player).mo).y, dist),
        speed,
    );
    (*(*player).mo)
        .momz = FixedMul(
        FixedDiv((*(*(*player).mo).tracer).z - (*(*player).mo).z, dist),
        speed,
    );
    if speed > dist {
        speed -= dist;
        P_UnsetThingPosition((*player).mo);
        (*(*player).mo).x = (*(*(*player).mo).tracer).x;
        (*(*player).mo).y = (*(*(*player).mo).tracer).y;
        (*(*player).mo).z = (*(*(*player).mo).tracer).z;
        P_SetThingPosition((*player).mo);
        (*(*player).mo).floorz = (*(*(*(*player).mo).subsector).sector).floorheight;
        (*(*player).mo).ceilingz = (*(*(*(*player).mo).subsector).sector).ceilingheight;
        CONS_Debug(
            0x80 as libc::c_int,
            b"Looking for next waypoint...\n\0" as *const u8 as *const libc::c_char,
        );
        waypoint = if reverse != 0 {
            P_GetPreviousWaypoint((*(*player).mo).tracer, false_0 as libc::c_int)
        } else {
            P_GetNextWaypoint((*(*player).mo).tracer, false_0 as libc::c_int)
        };
        if !waypoint.is_null() {
            CONS_Debug(
                0x80 as libc::c_int,
                b"Found waypoint (sequence %d, number %d).\n\0" as *const u8
                    as *const libc::c_char,
                (*waypoint).threshold,
                (*waypoint).health,
            );
            P_SetTarget2(&mut (*(*player).mo).tracer, waypoint);
            dist = P_AproxDistance(
                P_AproxDistance(
                    (*(*(*player).mo).tracer).x - (*(*player).mo).x,
                    (*(*(*player).mo).tracer).y - (*(*player).mo).y,
                ),
                (*(*(*player).mo).tracer).z - (*(*player).mo).z,
            );
            if dist < 1 as libc::c_int {
                dist = 1 as libc::c_int;
            }
            (*(*player).mo)
                .momx = FixedMul(
                FixedDiv((*(*(*player).mo).tracer).x - (*(*player).mo).x, dist),
                speed,
            );
            (*(*player).mo)
                .momy = FixedMul(
                FixedDiv((*(*(*player).mo).tracer).y - (*(*player).mo).y, dist),
                speed,
            );
            (*(*player).mo)
                .momz = FixedMul(
                FixedDiv((*(*(*player).mo).tracer).z - (*(*player).mo).z, dist),
                speed,
            );
        } else {
            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
            (*player)
                .powers[pw_carry as libc::c_int
                as usize] = CR_NONE as libc::c_int as uint16_t;
            CONS_Debug(
                0x80 as libc::c_int,
                b"Next waypoint not found, releasing from track...\n\0" as *const u8
                    as *const libc::c_char,
            );
        }
    }
    if !((*(*player).mo).tracer).is_null() {
        (*(*player).mo)
            .angle = R_PointToAngle2(
            (*(*player).mo).x,
            (*(*player).mo).y,
            (*(*(*player).mo).tracer).x,
            (*(*(*player).mo).tracer).y,
        );
        P_SetPlayerAngle(player, (*(*player).mo).angle);
    }
}
unsafe extern "C" fn P_DoRopeHang(mut player: *mut player_t) {
    let mut sequence: int32_t = 0;
    let mut speed: fixed_t = 0;
    let mut waypoint: *mut mobj_t = 0 as *mut mobj_t;
    let mut dist: fixed_t = 0;
    let mut playerz: fixed_t = 0;
    (*(*player).mo).height = FixedMul((*player).height, (*(*player).mo).scale);
    if leveltime & 7 as libc::c_int as tic_t == 0 && (*player).speed != 0 {
        S_StartSound((*player).mo as *const libc::c_void, sfx_s3k55);
    }
    playerz = (*(*player).mo).z + (*(*player).mo).height;
    speed = abs((*player).speed);
    sequence = (*(*(*player).mo).tracer).threshold;
    dist = P_AproxDistance(
        P_AproxDistance(
            (*(*(*player).mo).tracer).x - (*(*player).mo).x,
            (*(*(*player).mo).tracer).y - (*(*player).mo).y,
        ),
        (*(*(*player).mo).tracer).z - playerz,
    );
    if dist < 1 as libc::c_int {
        dist = 1 as libc::c_int;
    }
    (*(*player).mo)
        .momx = FixedMul(
        FixedDiv((*(*(*player).mo).tracer).x - (*(*player).mo).x, dist),
        speed,
    );
    (*(*player).mo)
        .momy = FixedMul(
        FixedDiv((*(*(*player).mo).tracer).y - (*(*player).mo).y, dist),
        speed,
    );
    (*(*player).mo)
        .momz = FixedMul(FixedDiv((*(*(*player).mo).tracer).z - playerz, dist), speed);
    if (*player).cmd.buttons as libc::c_int & BT_SPIN as libc::c_int != 0
        && (*player).pflags as libc::c_uint & PF_STASIS as libc::c_int as libc::c_uint
            == 0
    {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                | (P_GetJumpFlags(player) as libc::c_uint
                    | PF_SPINDOWN as libc::c_int as libc::c_uint),
        );
        P_SetPlayerMobjState((*player).mo, S_PLAY_JUMP);
        P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
        (*player)
            .powers[pw_carry as libc::c_int
            as usize] = CR_NONE as libc::c_int as uint16_t;
        return;
    }
    if ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
        != S_PLAY_RIDE as libc::c_int as libc::c_long
    {
        P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
    }
    if speed == 0 {
        return;
    }
    if speed > dist {
        speed -= dist;
        P_UnsetThingPosition((*player).mo);
        (*(*player).mo).x = (*(*(*player).mo).tracer).x;
        (*(*player).mo).y = (*(*(*player).mo).tracer).y;
        (*(*player).mo).z = (*(*(*player).mo).tracer).z - (*(*player).mo).height;
        playerz = (*(*(*player).mo).tracer).z;
        P_SetThingPosition((*player).mo);
        CONS_Debug(
            0x80 as libc::c_int,
            b"Looking for next waypoint...\n\0" as *const u8 as *const libc::c_char,
        );
        waypoint = P_GetNextWaypoint((*(*player).mo).tracer, false_0 as libc::c_int);
        if (*(*(*player).mo).tracer).flags & MF_SLIDEME as libc::c_int as uint32_t == 0
            && waypoint.is_null()
        {
            CONS_Debug(
                0x80 as libc::c_int,
                b"Next waypoint not found, wrapping to start...\n\0" as *const u8
                    as *const libc::c_char,
            );
            waypoint = P_GetFirstWaypoint(sequence as uint8_t);
        }
        if !waypoint.is_null() {
            CONS_Debug(
                0x80 as libc::c_int,
                b"Found waypoint (sequence %d, number %d).\n\0" as *const u8
                    as *const libc::c_char,
                (*waypoint).threshold,
                (*waypoint).health,
            );
            P_SetTarget2(&mut (*(*player).mo).tracer, waypoint);
            dist = P_AproxDistance(
                P_AproxDistance(
                    (*(*(*player).mo).tracer).x - (*(*player).mo).x,
                    (*(*(*player).mo).tracer).y - (*(*player).mo).y,
                ),
                (*(*(*player).mo).tracer).z - playerz,
            );
            if dist < 1 as libc::c_int {
                dist = 1 as libc::c_int;
            }
            (*(*player).mo)
                .momx = FixedMul(
                FixedDiv((*(*(*player).mo).tracer).x - (*(*player).mo).x, dist),
                speed,
            );
            (*(*player).mo)
                .momy = FixedMul(
                FixedDiv((*(*(*player).mo).tracer).y - (*(*player).mo).y, dist),
                speed,
            );
            (*(*player).mo)
                .momz = FixedMul(
                FixedDiv((*(*(*player).mo).tracer).z - playerz, dist),
                speed,
            );
        } else {
            if (*(*(*player).mo).tracer).flags & MF_SLIDEME as libc::c_int as uint32_t
                != 0
            {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        | P_GetJumpFlags(player) as libc::c_uint,
                );
                P_SetPlayerMobjState((*player).mo, S_PLAY_JUMP);
            }
            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
            (*player)
                .powers[pw_carry as libc::c_int
                as usize] = CR_NONE as libc::c_int as uint16_t;
            CONS_Debug(
                0x80 as libc::c_int,
                b"Next waypoint not found!\n\0" as *const u8 as *const libc::c_char,
            );
        }
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_NukeEnemies(
    mut inflictor: *mut mobj_t,
    mut source: *mut mobj_t,
    mut radius: fixed_t,
) {
    let ns: fixed_t = (60 as libc::c_int) << 16 as libc::c_int;
    let mut mo: *mut mobj_t = 0 as *mut mobj_t;
    let mut fa: angle_t = 0;
    let mut think: *mut thinker_t = 0 as *mut thinker_t;
    let mut i: int32_t = 0;
    i = 0 as libc::c_int;
    while i < 16 as libc::c_int {
        fa = (i * (8192 as libc::c_int / 16 as libc::c_int)) as angle_t;
        mo = P_SpawnMobj((*inflictor).x, (*inflictor).y, (*inflictor).z, MT_SUPERSPARK);
        if P_MobjWasRemoved(mo) == 0 {
            (*mo)
                .momx = FixedMul(
                finesine[fa as usize] >> 16 as libc::c_int - 16 as libc::c_int,
                ns,
            );
            (*mo)
                .momy = FixedMul(
                *finecosine.offset(fa as isize) >> 16 as libc::c_int - 16 as libc::c_int,
                ns,
            );
        }
        i += 1;
        i;
    }
    think = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
    while think
        != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
            as *mut thinker_t
    {
        if !((*think).function.acp1
            == ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                actionf_p1,
            >(
                Some(
                    P_RemoveThinkerDelayed as unsafe extern "C" fn(*mut thinker_t) -> (),
                ),
            ))
        {
            mo = think as *mut mobj_t;
            if !((*mo).flags & MF_SHOOTABLE as libc::c_int as uint32_t == 0
                && !((*mo).type_0 as libc::c_uint
                    == MT_EGGGUARD as libc::c_int as libc::c_uint
                    || (*mo).type_0 as libc::c_uint
                        == MT_MINUS as libc::c_int as libc::c_uint))
            {
                if !((*mo).flags & MF_MONITOR as libc::c_int as uint32_t != 0) {
                    if !(G_RingSlingerGametype() == 0
                        && (*mo).type_0 as libc::c_uint
                            == MT_PLAYER as libc::c_int as libc::c_uint)
                    {
                        if !(abs((*inflictor).x - (*mo).x) > radius
                            || abs((*inflictor).y - (*mo).y) > radius
                            || abs((*inflictor).z - (*mo).z) > radius)
                        {
                            if !(P_AproxDistance(
                                P_AproxDistance(
                                    (*inflictor).x - (*mo).x,
                                    (*inflictor).y - (*mo).y,
                                ),
                                (*inflictor).z - (*mo).z,
                            ) > radius)
                            {
                                if (*mo).type_0 as libc::c_uint
                                    == MT_MINUS as libc::c_int as libc::c_uint
                                    && (*mo).flags
                                        & (MF_SPECIAL as libc::c_int | MF_SHOOTABLE as libc::c_int)
                                            as uint32_t == 0
                                {
                                    (*mo)
                                        .flags = (*mo).flags
                                        & !(MF_NOCLIPTHING as libc::c_int) as uint32_t
                                        | MF_SPECIAL as libc::c_int as uint32_t
                                        | MF_SHOOTABLE as libc::c_int as uint32_t;
                                }
                                if (*mo).type_0 as libc::c_uint
                                    == MT_EGGGUARD as libc::c_int as libc::c_uint
                                    && !((*mo).tracer).is_null()
                                {
                                    P_KillMobj(
                                        (*mo).tracer,
                                        inflictor,
                                        source,
                                        5 as libc::c_int as uint8_t,
                                    );
                                    P_KillMobj(
                                        mo,
                                        inflictor,
                                        source,
                                        5 as libc::c_int as uint8_t,
                                    );
                                }
                                if (*mo).flags & MF_BOSS as libc::c_int as uint32_t != 0
                                    || (*mo).type_0 as libc::c_uint
                                        == MT_PLAYER as libc::c_int as libc::c_uint
                                {
                                    P_DamageMobj(
                                        mo,
                                        inflictor,
                                        source,
                                        1 as libc::c_int,
                                        5 as libc::c_int as uint8_t,
                                    );
                                } else {
                                    P_DamageMobj(
                                        mo,
                                        inflictor,
                                        source,
                                        1000 as libc::c_int,
                                        5 as libc::c_int as uint8_t,
                                    );
                                }
                            }
                        }
                    }
                }
            }
        }
        think = (*think).next;
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_Earthquake(
    mut inflictor: *mut mobj_t,
    mut source: *mut mobj_t,
    mut radius: fixed_t,
) {
    let scaledradius: fixed_t = FixedMul(radius, (*inflictor).scale);
    let ns: fixed_t = scaledradius / 12 as libc::c_int;
    let mut mo: *mut mobj_t = 0 as *mut mobj_t;
    let mut fa: angle_t = 0;
    let mut i: int32_t = 0;
    let mut grounded: boolean = P_IsObjectOnGround(inflictor);
    i = 0 as libc::c_int;
    while i < 16 as libc::c_int {
        fa = (i * (8192 as libc::c_int / 16 as libc::c_int)) as angle_t;
        mo = P_SpawnMobjFromMobj(
            inflictor,
            0 as libc::c_int,
            0 as libc::c_int,
            0 as libc::c_int,
            MT_SUPERSPARK,
        );
        if P_MobjWasRemoved(mo) == 0 {
            if grounded != 0 {
                (*mo)
                    .momx = FixedMul(
                    finesine[fa as usize] >> 16 as libc::c_int - 16 as libc::c_int,
                    ns,
                );
                (*mo)
                    .momy = FixedMul(
                    *finecosine.offset(fa as isize)
                        >> 16 as libc::c_int - 16 as libc::c_int,
                    ns,
                );
            } else {
                P_InstaThrust(
                    mo,
                    ((*inflictor).angle)
                        .wrapping_add(0x40000000 as libc::c_int as angle_t),
                    FixedMul(
                        *finecosine.offset(fa as isize)
                            >> 16 as libc::c_int - 16 as libc::c_int,
                        ns,
                    ),
                );
                (*mo)
                    .momz = FixedMul(
                    finesine[fa as usize] >> 16 as libc::c_int - 16 as libc::c_int,
                    ns,
                );
            }
        }
        i += 1;
        i;
    }
    if !((*inflictor).player).is_null() && P_IsLocalPlayer((*inflictor).player) != 0 {
        quake.epicenter = 0 as *mut mappoint_t;
        quake.intensity = 8 as libc::c_int * (*inflictor).scale;
        quake.time = 8 as libc::c_int as uint16_t;
        quake.radius = scaledradius;
    }
    P_RadiusAttack(
        inflictor,
        source,
        radius,
        0 as libc::c_int as uint8_t,
        false_0 as libc::c_int,
    );
}
#[no_mangle]
pub unsafe extern "C" fn P_LookForFocusTarget(
    mut player: *mut player_t,
    mut exclude: *mut mobj_t,
    mut direction: int8_t,
    mut lockonflags: uint8_t,
) -> *mut mobj_t {
    let mut mo: *mut mobj_t = 0 as *mut mobj_t;
    let mut think: *mut thinker_t = 0 as *mut thinker_t;
    let mut closestmo: *mut mobj_t = 0 as *mut mobj_t;
    let maxdist: fixed_t = 2560 as libc::c_int * (*(*player).mo).scale;
    let span: angle_t = 0x20000000 as libc::c_int as angle_t;
    let mut dist: fixed_t = 0;
    let mut closestdist: fixed_t = 0 as libc::c_int;
    let mut dangle: angle_t = 0;
    let mut closestdangle: angle_t = 0 as libc::c_int as angle_t;
    let mut current_block_10: u64;
    think = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
    while think
        != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
            as *mut thinker_t
    {
        if !((*think).function.acp1
            == ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                actionf_p1,
            >(
                Some(
                    P_RemoveThinkerDelayed as unsafe extern "C" fn(*mut thinker_t) -> (),
                ),
            ))
        {
            mo = think as *mut mobj_t;
            if !((*mo).flags & MF_NOCLIPTHING as libc::c_int as uint32_t != 0) {
                if !(mo == (*player).mo || mo == exclude) {
                    if !((*mo).health <= 0 as libc::c_int) {
                        match (*mo).type_0 as libc::c_uint {
                            3 | 14 => {}
                            71 => {
                                current_block_10 = 14997636438975428582;
                                match current_block_10 {
                                    14997636438975428582 => {
                                        if lockonflags as libc::c_int & LOCK_BOSS as libc::c_int
                                            == 0
                                        {
                                            current_block_10 = 16658872821858055392;
                                        } else {
                                            current_block_10 = 2838571290723028321;
                                        }
                                    }
                                    18064522466398504669 => {
                                        if lockonflags as libc::c_int & LOCK_ENEMY as libc::c_int
                                            == 0
                                        {
                                            current_block_10 = 16658872821858055392;
                                        } else {
                                            current_block_10 = 2838571290723028321;
                                        }
                                    }
                                    5195850171578238614 => {
                                        if tutorialmode != 0 {
                                            current_block_10 = 2838571290723028321;
                                        } else {
                                            current_block_10 = 11840070049721714514;
                                        }
                                    }
                                    _ => {}
                                }
                                match current_block_10 {
                                    16658872821858055392 => {}
                                    _ => {
                                        match current_block_10 {
                                            11840070049721714514 => {
                                                if lockonflags as libc::c_int & LOCK_BOSS as libc::c_int
                                                    != 0
                                                    && (*mo).flags & MF_BOSS as libc::c_int as uint32_t != 0
                                                {
                                                    current_block_10 = 2838571290723028321;
                                                } else if lockonflags as libc::c_int
                                                    & LOCK_ENEMY as libc::c_int != 0
                                                    && !((*mo).flags
                                                        & (MF_ENEMY as libc::c_int | MF_SHOOTABLE as libc::c_int)
                                                            as uint32_t
                                                        == (MF_ENEMY as libc::c_int | MF_SHOOTABLE as libc::c_int)
                                                            as uint32_t) as libc::c_int
                                                        != ((*mo).flags2
                                                            & MF2_INVERTAIMABLE as libc::c_int as uint32_t == 0)
                                                            as libc::c_int
                                                {
                                                    current_block_10 = 2838571290723028321;
                                                } else if lockonflags as libc::c_int
                                                    & LOCK_INTERESTS as libc::c_int != 0
                                                    && (*mo).flags
                                                        & (MF_PUSHABLE as libc::c_int | MF_MONITOR as libc::c_int)
                                                            as uint32_t != 0
                                                {
                                                    current_block_10 = 2838571290723028321;
                                                } else {
                                                    current_block_10 = 16658872821858055392;
                                                }
                                            }
                                            _ => {}
                                        }
                                        match current_block_10 {
                                            16658872821858055392 => {}
                                            _ => {
                                                let mut zdist: fixed_t = (*(*player).mo).z
                                                    + (*(*player).mo).height / 2 as libc::c_int
                                                    - ((*mo).z + (*mo).height / 2 as libc::c_int);
                                                dist = P_AproxDistance(
                                                    (*(*player).mo).x - (*mo).x,
                                                    (*(*player).mo).y - (*mo).y,
                                                );
                                                if !(abs(zdist) > dist) {
                                                    dist = P_AproxDistance(dist, zdist);
                                                    if !(dist > maxdist) {
                                                        if !((maptol & TOL_2D as libc::c_int as uint32_t != 0
                                                            || (*(*player).mo).flags2
                                                                & MF2_TWOD as libc::c_int as uint32_t != 0)
                                                            && abs((*(*player).mo).y - (*mo).y)
                                                                > (*(*player).mo).radius)
                                                        {
                                                            dangle = (R_PointToAngle2(
                                                                (*(*player).mo).x,
                                                                (*(*player).mo).y,
                                                                (*mo).x,
                                                                (*mo).y,
                                                            ))
                                                                .wrapping_sub(
                                                                    (if exclude.is_null() {
                                                                        (*(*player).mo).angle
                                                                    } else {
                                                                        R_PointToAngle2(
                                                                            (*(*player).mo).x,
                                                                            (*(*player).mo).y,
                                                                            (*exclude).x,
                                                                            (*exclude).y,
                                                                        )
                                                                    }),
                                                                );
                                                            if direction != 0 {
                                                                if direction as libc::c_int == 1 as libc::c_int
                                                                    && dangle > 0x80000000 as libc::c_uint
                                                                {
                                                                    current_block_10 = 16658872821858055392;
                                                                } else if direction as libc::c_int == -(1 as libc::c_int)
                                                                    && dangle < 0x80000000 as libc::c_uint
                                                                {
                                                                    current_block_10 = 16658872821858055392;
                                                                } else {
                                                                    current_block_10 = 14359455889292382949;
                                                                }
                                                            } else {
                                                                current_block_10 = 14359455889292382949;
                                                            }
                                                            match current_block_10 {
                                                                16658872821858055392 => {}
                                                                _ => {
                                                                    if dangle > 0x80000000 as libc::c_uint {
                                                                        dangle = InvAngle(dangle);
                                                                    }
                                                                    if !(dangle > span) {
                                                                        dist = FixedDiv(
                                                                            dist,
                                                                            (*finecosine.offset((dangle >> 19 as libc::c_int) as isize)
                                                                                >> 16 as libc::c_int - 16 as libc::c_int) * 3 as libc::c_int,
                                                                        );
                                                                        if !(!closestmo.is_null()
                                                                            && (if !exclude.is_null() {
                                                                                (dangle > closestdangle) as libc::c_int
                                                                            } else {
                                                                                (dist > closestdist) as libc::c_int
                                                                            }) != 0)
                                                                        {
                                                                            if !(P_CheckSight((*player).mo, mo) == 0) {
                                                                                closestmo = mo;
                                                                                closestdist = dist;
                                                                                closestdangle = dangle;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            33 => {
                                current_block_10 = 18064522466398504669;
                                match current_block_10 {
                                    14997636438975428582 => {
                                        if lockonflags as libc::c_int & LOCK_BOSS as libc::c_int
                                            == 0
                                        {
                                            current_block_10 = 16658872821858055392;
                                        } else {
                                            current_block_10 = 2838571290723028321;
                                        }
                                    }
                                    18064522466398504669 => {
                                        if lockonflags as libc::c_int & LOCK_ENEMY as libc::c_int
                                            == 0
                                        {
                                            current_block_10 = 16658872821858055392;
                                        } else {
                                            current_block_10 = 2838571290723028321;
                                        }
                                    }
                                    5195850171578238614 => {
                                        if tutorialmode != 0 {
                                            current_block_10 = 2838571290723028321;
                                        } else {
                                            current_block_10 = 11840070049721714514;
                                        }
                                    }
                                    _ => {}
                                }
                                match current_block_10 {
                                    16658872821858055392 => {}
                                    _ => {
                                        match current_block_10 {
                                            11840070049721714514 => {
                                                if lockonflags as libc::c_int & LOCK_BOSS as libc::c_int
                                                    != 0
                                                    && (*mo).flags & MF_BOSS as libc::c_int as uint32_t != 0
                                                {
                                                    current_block_10 = 2838571290723028321;
                                                } else if lockonflags as libc::c_int
                                                    & LOCK_ENEMY as libc::c_int != 0
                                                    && !((*mo).flags
                                                        & (MF_ENEMY as libc::c_int | MF_SHOOTABLE as libc::c_int)
                                                            as uint32_t
                                                        == (MF_ENEMY as libc::c_int | MF_SHOOTABLE as libc::c_int)
                                                            as uint32_t) as libc::c_int
                                                        != ((*mo).flags2
                                                            & MF2_INVERTAIMABLE as libc::c_int as uint32_t == 0)
                                                            as libc::c_int
                                                {
                                                    current_block_10 = 2838571290723028321;
                                                } else if lockonflags as libc::c_int
                                                    & LOCK_INTERESTS as libc::c_int != 0
                                                    && (*mo).flags
                                                        & (MF_PUSHABLE as libc::c_int | MF_MONITOR as libc::c_int)
                                                            as uint32_t != 0
                                                {
                                                    current_block_10 = 2838571290723028321;
                                                } else {
                                                    current_block_10 = 16658872821858055392;
                                                }
                                            }
                                            _ => {}
                                        }
                                        match current_block_10 {
                                            16658872821858055392 => {}
                                            _ => {
                                                let mut zdist: fixed_t = (*(*player).mo).z
                                                    + (*(*player).mo).height / 2 as libc::c_int
                                                    - ((*mo).z + (*mo).height / 2 as libc::c_int);
                                                dist = P_AproxDistance(
                                                    (*(*player).mo).x - (*mo).x,
                                                    (*(*player).mo).y - (*mo).y,
                                                );
                                                if !(abs(zdist) > dist) {
                                                    dist = P_AproxDistance(dist, zdist);
                                                    if !(dist > maxdist) {
                                                        if !((maptol & TOL_2D as libc::c_int as uint32_t != 0
                                                            || (*(*player).mo).flags2
                                                                & MF2_TWOD as libc::c_int as uint32_t != 0)
                                                            && abs((*(*player).mo).y - (*mo).y)
                                                                > (*(*player).mo).radius)
                                                        {
                                                            dangle = (R_PointToAngle2(
                                                                (*(*player).mo).x,
                                                                (*(*player).mo).y,
                                                                (*mo).x,
                                                                (*mo).y,
                                                            ))
                                                                .wrapping_sub(
                                                                    (if exclude.is_null() {
                                                                        (*(*player).mo).angle
                                                                    } else {
                                                                        R_PointToAngle2(
                                                                            (*(*player).mo).x,
                                                                            (*(*player).mo).y,
                                                                            (*exclude).x,
                                                                            (*exclude).y,
                                                                        )
                                                                    }),
                                                                );
                                                            if direction != 0 {
                                                                if direction as libc::c_int == 1 as libc::c_int
                                                                    && dangle > 0x80000000 as libc::c_uint
                                                                {
                                                                    current_block_10 = 16658872821858055392;
                                                                } else if direction as libc::c_int == -(1 as libc::c_int)
                                                                    && dangle < 0x80000000 as libc::c_uint
                                                                {
                                                                    current_block_10 = 16658872821858055392;
                                                                } else {
                                                                    current_block_10 = 14359455889292382949;
                                                                }
                                                            } else {
                                                                current_block_10 = 14359455889292382949;
                                                            }
                                                            match current_block_10 {
                                                                16658872821858055392 => {}
                                                                _ => {
                                                                    if dangle > 0x80000000 as libc::c_uint {
                                                                        dangle = InvAngle(dangle);
                                                                    }
                                                                    if !(dangle > span) {
                                                                        dist = FixedDiv(
                                                                            dist,
                                                                            (*finecosine.offset((dangle >> 19 as libc::c_int) as isize)
                                                                                >> 16 as libc::c_int - 16 as libc::c_int) * 3 as libc::c_int,
                                                                        );
                                                                        if !(!closestmo.is_null()
                                                                            && (if !exclude.is_null() {
                                                                                (dangle > closestdangle) as libc::c_int
                                                                            } else {
                                                                                (dist > closestdist) as libc::c_int
                                                                            }) != 0)
                                                                        {
                                                                            if !(P_CheckSight((*player).mo, mo) == 0) {
                                                                                closestmo = mo;
                                                                                closestdist = dist;
                                                                                closestdangle = dangle;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            271 => {
                                current_block_10 = 5195850171578238614;
                                match current_block_10 {
                                    14997636438975428582 => {
                                        if lockonflags as libc::c_int & LOCK_BOSS as libc::c_int
                                            == 0
                                        {
                                            current_block_10 = 16658872821858055392;
                                        } else {
                                            current_block_10 = 2838571290723028321;
                                        }
                                    }
                                    18064522466398504669 => {
                                        if lockonflags as libc::c_int & LOCK_ENEMY as libc::c_int
                                            == 0
                                        {
                                            current_block_10 = 16658872821858055392;
                                        } else {
                                            current_block_10 = 2838571290723028321;
                                        }
                                    }
                                    5195850171578238614 => {
                                        if tutorialmode != 0 {
                                            current_block_10 = 2838571290723028321;
                                        } else {
                                            current_block_10 = 11840070049721714514;
                                        }
                                    }
                                    _ => {}
                                }
                                match current_block_10 {
                                    16658872821858055392 => {}
                                    _ => {
                                        match current_block_10 {
                                            11840070049721714514 => {
                                                if lockonflags as libc::c_int & LOCK_BOSS as libc::c_int
                                                    != 0
                                                    && (*mo).flags & MF_BOSS as libc::c_int as uint32_t != 0
                                                {
                                                    current_block_10 = 2838571290723028321;
                                                } else if lockonflags as libc::c_int
                                                    & LOCK_ENEMY as libc::c_int != 0
                                                    && !((*mo).flags
                                                        & (MF_ENEMY as libc::c_int | MF_SHOOTABLE as libc::c_int)
                                                            as uint32_t
                                                        == (MF_ENEMY as libc::c_int | MF_SHOOTABLE as libc::c_int)
                                                            as uint32_t) as libc::c_int
                                                        != ((*mo).flags2
                                                            & MF2_INVERTAIMABLE as libc::c_int as uint32_t == 0)
                                                            as libc::c_int
                                                {
                                                    current_block_10 = 2838571290723028321;
                                                } else if lockonflags as libc::c_int
                                                    & LOCK_INTERESTS as libc::c_int != 0
                                                    && (*mo).flags
                                                        & (MF_PUSHABLE as libc::c_int | MF_MONITOR as libc::c_int)
                                                            as uint32_t != 0
                                                {
                                                    current_block_10 = 2838571290723028321;
                                                } else {
                                                    current_block_10 = 16658872821858055392;
                                                }
                                            }
                                            _ => {}
                                        }
                                        match current_block_10 {
                                            16658872821858055392 => {}
                                            _ => {
                                                let mut zdist: fixed_t = (*(*player).mo).z
                                                    + (*(*player).mo).height / 2 as libc::c_int
                                                    - ((*mo).z + (*mo).height / 2 as libc::c_int);
                                                dist = P_AproxDistance(
                                                    (*(*player).mo).x - (*mo).x,
                                                    (*(*player).mo).y - (*mo).y,
                                                );
                                                if !(abs(zdist) > dist) {
                                                    dist = P_AproxDistance(dist, zdist);
                                                    if !(dist > maxdist) {
                                                        if !((maptol & TOL_2D as libc::c_int as uint32_t != 0
                                                            || (*(*player).mo).flags2
                                                                & MF2_TWOD as libc::c_int as uint32_t != 0)
                                                            && abs((*(*player).mo).y - (*mo).y)
                                                                > (*(*player).mo).radius)
                                                        {
                                                            dangle = (R_PointToAngle2(
                                                                (*(*player).mo).x,
                                                                (*(*player).mo).y,
                                                                (*mo).x,
                                                                (*mo).y,
                                                            ))
                                                                .wrapping_sub(
                                                                    (if exclude.is_null() {
                                                                        (*(*player).mo).angle
                                                                    } else {
                                                                        R_PointToAngle2(
                                                                            (*(*player).mo).x,
                                                                            (*(*player).mo).y,
                                                                            (*exclude).x,
                                                                            (*exclude).y,
                                                                        )
                                                                    }),
                                                                );
                                                            if direction != 0 {
                                                                if direction as libc::c_int == 1 as libc::c_int
                                                                    && dangle > 0x80000000 as libc::c_uint
                                                                {
                                                                    current_block_10 = 16658872821858055392;
                                                                } else if direction as libc::c_int == -(1 as libc::c_int)
                                                                    && dangle < 0x80000000 as libc::c_uint
                                                                {
                                                                    current_block_10 = 16658872821858055392;
                                                                } else {
                                                                    current_block_10 = 14359455889292382949;
                                                                }
                                                            } else {
                                                                current_block_10 = 14359455889292382949;
                                                            }
                                                            match current_block_10 {
                                                                16658872821858055392 => {}
                                                                _ => {
                                                                    if dangle > 0x80000000 as libc::c_uint {
                                                                        dangle = InvAngle(dangle);
                                                                    }
                                                                    if !(dangle > span) {
                                                                        dist = FixedDiv(
                                                                            dist,
                                                                            (*finecosine.offset((dangle >> 19 as libc::c_int) as isize)
                                                                                >> 16 as libc::c_int - 16 as libc::c_int) * 3 as libc::c_int,
                                                                        );
                                                                        if !(!closestmo.is_null()
                                                                            && (if !exclude.is_null() {
                                                                                (dangle > closestdangle) as libc::c_int
                                                                            } else {
                                                                                (dist > closestdist) as libc::c_int
                                                                            }) != 0)
                                                                        {
                                                                            if !(P_CheckSight((*player).mo, mo) == 0) {
                                                                                closestmo = mo;
                                                                                closestdist = dist;
                                                                                closestdangle = dangle;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {
                                current_block_10 = 11840070049721714514;
                                match current_block_10 {
                                    14997636438975428582 => {
                                        if lockonflags as libc::c_int & LOCK_BOSS as libc::c_int
                                            == 0
                                        {
                                            current_block_10 = 16658872821858055392;
                                        } else {
                                            current_block_10 = 2838571290723028321;
                                        }
                                    }
                                    18064522466398504669 => {
                                        if lockonflags as libc::c_int & LOCK_ENEMY as libc::c_int
                                            == 0
                                        {
                                            current_block_10 = 16658872821858055392;
                                        } else {
                                            current_block_10 = 2838571290723028321;
                                        }
                                    }
                                    5195850171578238614 => {
                                        if tutorialmode != 0 {
                                            current_block_10 = 2838571290723028321;
                                        } else {
                                            current_block_10 = 11840070049721714514;
                                        }
                                    }
                                    _ => {}
                                }
                                match current_block_10 {
                                    16658872821858055392 => {}
                                    _ => {
                                        match current_block_10 {
                                            11840070049721714514 => {
                                                if lockonflags as libc::c_int & LOCK_BOSS as libc::c_int
                                                    != 0
                                                    && (*mo).flags & MF_BOSS as libc::c_int as uint32_t != 0
                                                {
                                                    current_block_10 = 2838571290723028321;
                                                } else if lockonflags as libc::c_int
                                                    & LOCK_ENEMY as libc::c_int != 0
                                                    && !((*mo).flags
                                                        & (MF_ENEMY as libc::c_int | MF_SHOOTABLE as libc::c_int)
                                                            as uint32_t
                                                        == (MF_ENEMY as libc::c_int | MF_SHOOTABLE as libc::c_int)
                                                            as uint32_t) as libc::c_int
                                                        != ((*mo).flags2
                                                            & MF2_INVERTAIMABLE as libc::c_int as uint32_t == 0)
                                                            as libc::c_int
                                                {
                                                    current_block_10 = 2838571290723028321;
                                                } else if lockonflags as libc::c_int
                                                    & LOCK_INTERESTS as libc::c_int != 0
                                                    && (*mo).flags
                                                        & (MF_PUSHABLE as libc::c_int | MF_MONITOR as libc::c_int)
                                                            as uint32_t != 0
                                                {
                                                    current_block_10 = 2838571290723028321;
                                                } else {
                                                    current_block_10 = 16658872821858055392;
                                                }
                                            }
                                            _ => {}
                                        }
                                        match current_block_10 {
                                            16658872821858055392 => {}
                                            _ => {
                                                let mut zdist: fixed_t = (*(*player).mo).z
                                                    + (*(*player).mo).height / 2 as libc::c_int
                                                    - ((*mo).z + (*mo).height / 2 as libc::c_int);
                                                dist = P_AproxDistance(
                                                    (*(*player).mo).x - (*mo).x,
                                                    (*(*player).mo).y - (*mo).y,
                                                );
                                                if !(abs(zdist) > dist) {
                                                    dist = P_AproxDistance(dist, zdist);
                                                    if !(dist > maxdist) {
                                                        if !((maptol & TOL_2D as libc::c_int as uint32_t != 0
                                                            || (*(*player).mo).flags2
                                                                & MF2_TWOD as libc::c_int as uint32_t != 0)
                                                            && abs((*(*player).mo).y - (*mo).y)
                                                                > (*(*player).mo).radius)
                                                        {
                                                            dangle = (R_PointToAngle2(
                                                                (*(*player).mo).x,
                                                                (*(*player).mo).y,
                                                                (*mo).x,
                                                                (*mo).y,
                                                            ))
                                                                .wrapping_sub(
                                                                    (if exclude.is_null() {
                                                                        (*(*player).mo).angle
                                                                    } else {
                                                                        R_PointToAngle2(
                                                                            (*(*player).mo).x,
                                                                            (*(*player).mo).y,
                                                                            (*exclude).x,
                                                                            (*exclude).y,
                                                                        )
                                                                    }),
                                                                );
                                                            if direction != 0 {
                                                                if direction as libc::c_int == 1 as libc::c_int
                                                                    && dangle > 0x80000000 as libc::c_uint
                                                                {
                                                                    current_block_10 = 16658872821858055392;
                                                                } else if direction as libc::c_int == -(1 as libc::c_int)
                                                                    && dangle < 0x80000000 as libc::c_uint
                                                                {
                                                                    current_block_10 = 16658872821858055392;
                                                                } else {
                                                                    current_block_10 = 14359455889292382949;
                                                                }
                                                            } else {
                                                                current_block_10 = 14359455889292382949;
                                                            }
                                                            match current_block_10 {
                                                                16658872821858055392 => {}
                                                                _ => {
                                                                    if dangle > 0x80000000 as libc::c_uint {
                                                                        dangle = InvAngle(dangle);
                                                                    }
                                                                    if !(dangle > span) {
                                                                        dist = FixedDiv(
                                                                            dist,
                                                                            (*finecosine.offset((dangle >> 19 as libc::c_int) as isize)
                                                                                >> 16 as libc::c_int - 16 as libc::c_int) * 3 as libc::c_int,
                                                                        );
                                                                        if !(!closestmo.is_null()
                                                                            && (if !exclude.is_null() {
                                                                                (dangle > closestdangle) as libc::c_int
                                                                            } else {
                                                                                (dist > closestdist) as libc::c_int
                                                                            }) != 0)
                                                                        {
                                                                            if !(P_CheckSight((*player).mo, mo) == 0) {
                                                                                closestmo = mo;
                                                                                closestdist = dist;
                                                                                closestdangle = dangle;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        think = (*think).next;
    }
    return closestmo;
}
#[no_mangle]
pub unsafe extern "C" fn P_LookForEnemies(
    mut player: *mut player_t,
    mut nonenemies: boolean,
    mut bullet: boolean,
) -> *mut mobj_t {
    let mut mo: *mut mobj_t = 0 as *mut mobj_t;
    let mut think: *mut thinker_t = 0 as *mut thinker_t;
    let mut closestmo: *mut mobj_t = 0 as *mut mobj_t;
    let maxdist: fixed_t = FixedMul(
        if bullet != 0 {
            512 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                * 2 as libc::c_int
        } else {
            512 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
        },
        (*(*player).mo).scale,
    );
    let span: angle_t = (if bullet != 0 {
        0x15555555 as libc::c_int
    } else {
        0x40000000 as libc::c_int
    }) as angle_t;
    let mut dist: fixed_t = 0;
    let mut closestdist: fixed_t = 0 as libc::c_int;
    let nonenemiesdisregard: mobjflag_t = ((if bullet != 0 {
        0 as libc::c_int
    } else {
        MF_MONITOR as libc::c_int
    }) | MF_SPRING as libc::c_int) as mobjflag_t;
    let mut current_block_5: u64;
    think = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
    while think
        != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
            as *mut thinker_t
    {
        if !((*think).function.acp1
            == ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                actionf_p1,
            >(
                Some(
                    P_RemoveThinkerDelayed as unsafe extern "C" fn(*mut thinker_t) -> (),
                ),
            ))
        {
            mo = think as *mut mobj_t;
            if !((*mo).flags & MF_NOCLIPTHING as libc::c_int as uint32_t != 0) {
                if !((*mo).health <= 0 as libc::c_int) {
                    if !(!((*mo).flags
                        & (MF_ENEMY as libc::c_int | MF_BOSS as libc::c_int
                            | MF_MONITOR as libc::c_int) as uint32_t != 0
                        && (*mo).flags & MF_SHOOTABLE as libc::c_int as uint32_t != 0
                        || (*mo).flags & MF_SPRING as libc::c_int as uint32_t != 0)
                        as libc::c_int
                        == ((*mo).flags2 & MF2_INVERTAIMABLE as libc::c_int as uint32_t
                            == 0) as libc::c_int)
                    {
                        if !(mo == (*player).mo) {
                            if !((*mo).flags2 & MF2_FRET as libc::c_int as uint32_t != 0)
                            {
                                if !(nonenemies == 0
                                    && (*mo).flags & nonenemiesdisregard as libc::c_uint != 0)
                                {
                                    if !(bullet == 0
                                        && (*mo).type_0 as libc::c_uint
                                            == MT_DETON as libc::c_int as libc::c_uint)
                                    {
                                        let mut zdist: fixed_t = (*(*player).mo).z
                                            + (*(*player).mo).height / 2 as libc::c_int
                                            - ((*mo).z + (*mo).height / 2 as libc::c_int);
                                        dist = R_PointToDist2(
                                            0 as libc::c_int,
                                            0 as libc::c_int,
                                            (*(*player).mo).x - (*mo).x,
                                            (*(*player).mo).y - (*mo).y,
                                        );
                                        if bullet != 0 {
                                            if (R_PointToAngle2(
                                                0 as libc::c_int,
                                                0 as libc::c_int,
                                                dist,
                                                zdist,
                                            ))
                                                .wrapping_add(span) > span * 2 as libc::c_int as angle_t
                                            {
                                                current_block_5 = 16658872821858055392;
                                            } else {
                                                current_block_5 = 224731115979188411;
                                            }
                                        } else if (*(*player).mo).eflags as libc::c_int
                                            & MFE_VERTICALFLIP as libc::c_int != 0
                                        {
                                            if (*mo).z + (*mo).height
                                                < (*(*player).mo).z + (*(*player).mo).height
                                                    - FixedMul(
                                                        24 as libc::c_int
                                                            * ((1 as libc::c_int) << 16 as libc::c_int),
                                                        (*(*player).mo).scale,
                                                    )
                                            {
                                                current_block_5 = 16658872821858055392;
                                            } else {
                                                current_block_5 = 224731115979188411;
                                            }
                                        } else if (*mo).z
                                            > (*(*player).mo).z
                                                + FixedMul(
                                                    24 as libc::c_int
                                                        * ((1 as libc::c_int) << 16 as libc::c_int),
                                                    (*(*player).mo).scale,
                                                )
                                        {
                                            current_block_5 = 16658872821858055392;
                                        } else {
                                            current_block_5 = 224731115979188411;
                                        }
                                        match current_block_5 {
                                            16658872821858055392 => {}
                                            _ => {
                                                dist = R_PointToDist2(
                                                    0 as libc::c_int,
                                                    0 as libc::c_int,
                                                    dist,
                                                    zdist,
                                                );
                                                if !(dist > maxdist) {
                                                    if !((maptol & TOL_2D as libc::c_int as uint32_t != 0
                                                        || (*(*player).mo).flags2
                                                            & MF2_TWOD as libc::c_int as uint32_t != 0)
                                                        && abs((*(*player).mo).y - (*mo).y)
                                                            > (*(*player).mo).radius)
                                                    {
                                                        if !((*mo).type_0 as libc::c_uint
                                                            == MT_PLAYER as libc::c_int as libc::c_uint)
                                                        {
                                                            if !(!closestmo.is_null() && dist > closestdist) {
                                                                if !((R_PointToAngle2(
                                                                    (*(*player).mo).x
                                                                        + P_ReturnThrustX(
                                                                            (*player).mo,
                                                                            (*(*player).mo).angle,
                                                                            (*(*player).mo).radius,
                                                                        ),
                                                                    (*(*player).mo).y
                                                                        + P_ReturnThrustY(
                                                                            (*player).mo,
                                                                            (*(*player).mo).angle,
                                                                            (*(*player).mo).radius,
                                                                        ),
                                                                    (*mo).x,
                                                                    (*mo).y,
                                                                ))
                                                                    .wrapping_sub((*(*player).mo).angle)
                                                                    .wrapping_add(span) > span * 2 as libc::c_int as angle_t)
                                                                {
                                                                    if !(P_CheckSight((*player).mo, mo) == 0) {
                                                                        closestmo = mo;
                                                                        closestdist = dist;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        think = (*think).next;
    }
    return closestmo;
}
#[no_mangle]
pub unsafe extern "C" fn P_HomingAttack(
    mut source: *mut mobj_t,
    mut enemy: *mut mobj_t,
) -> boolean {
    let mut zdist: fixed_t = 0;
    let mut dist: fixed_t = 0;
    let mut ns: fixed_t = 0 as libc::c_int;
    if enemy.is_null() {
        return false_0 as libc::c_int;
    }
    if (*enemy).flags & MF_NOCLIPTHING as libc::c_int as uint32_t != 0 {
        return false_0 as libc::c_int;
    }
    if (*enemy).health <= 0 as libc::c_int {
        return false_0 as libc::c_int;
    }
    if !((*source).player).is_null()
        && !((*enemy).flags
            & (MF_ENEMY as libc::c_int | MF_BOSS as libc::c_int
                | MF_MONITOR as libc::c_int) as uint32_t != 0
            && (*enemy).flags & MF_SHOOTABLE as libc::c_int as uint32_t != 0
            || (*enemy).flags & MF_SPRING as libc::c_int as uint32_t != 0) as libc::c_int
            == ((*enemy).flags2 & MF2_INVERTAIMABLE as libc::c_int as uint32_t == 0)
                as libc::c_int
    {
        return false_0 as libc::c_int;
    }
    if (*enemy).flags2 & MF2_FRET as libc::c_int as uint32_t != 0 {
        return false_0 as libc::c_int;
    }
    (*source).angle = R_PointToAngle2((*source).x, (*source).y, (*enemy).x, (*enemy).y);
    if !((*source).player).is_null() {
        (*(*source).player).drawangle = (*source).angle;
        if demoplayback == 0
            || (if (*(*source).player).pflags as libc::c_uint
                & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
            {
                CS_LMAOGALOG as libc::c_int
            } else {
                0 as libc::c_int
            })
                | (if (*(*source).player).pflags as libc::c_uint
                    & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                {
                    CS_STANDARD as libc::c_int
                } else {
                    0 as libc::c_int
                }) == CS_LMAOGALOG as libc::c_int
        {
            P_SetPlayerAngle((*source).player, (*source).angle);
        }
    }
    zdist = if P_MobjFlip(source) as libc::c_int == -(1 as libc::c_int) {
        (*enemy).z + (*enemy).height - ((*source).z + (*source).height)
    } else {
        (*enemy).z - (*source).z
    };
    dist = P_AproxDistance(
        P_AproxDistance((*enemy).x - (*source).x, (*enemy).y - (*source).y),
        zdist,
    );
    if dist < 1 as libc::c_int {
        dist = 1 as libc::c_int;
    }
    if (*source).type_0 as libc::c_uint == MT_DETON as libc::c_int as libc::c_uint
        && !((*enemy).player).is_null()
    {
        ns = FixedDiv(
            FixedMul((*(*enemy).player).normalspeed, (*enemy).scale),
            FixedDiv(
                20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                17 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
            ),
        );
    } else if (*source).type_0 as libc::c_uint
        != MT_PLAYER as libc::c_int as libc::c_uint
    {
        if (*source).threshold == 32000 as libc::c_int {
            ns = FixedMul((*(*source).info).speed / 2 as libc::c_int, (*source).scale);
        } else {
            ns = FixedMul((*(*source).info).speed, (*source).scale);
        }
    } else if !((*source).player).is_null() {
        if (*(*source).player).charability as libc::c_int == CA_HOMINGTHOK as libc::c_int
            && (*(*source).player).pflags as libc::c_uint
                & PF_SHIELDABILITY as libc::c_int as libc::c_uint == 0
        {
            ns = FixedDiv(
                FixedMul((*(*source).player).actionspd, (*source).scale),
                3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                    / 2 as libc::c_int,
            );
        } else {
            ns = FixedMul(
                45 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*source).scale,
            );
        }
    }
    (*source).momx = FixedMul(FixedDiv((*enemy).x - (*source).x, dist), ns);
    (*source).momy = FixedMul(FixedDiv((*enemy).y - (*source).y, dist), ns);
    (*source).momz = FixedMul(FixedDiv(zdist, dist), ns);
    return true_0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_FindEmerald() {
    let mut th: *mut thinker_t = 0 as *mut thinker_t;
    let mut mo2: *mut mobj_t = 0 as *mut mobj_t;
    hunt3 = 0 as *mut mobj_t;
    hunt2 = hunt3;
    hunt1 = hunt2;
    th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
    while th
        != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
            as *mut thinker_t
    {
        if !((*th).function.acp1
            == ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                actionf_p1,
            >(
                Some(
                    P_RemoveThinkerDelayed as unsafe extern "C" fn(*mut thinker_t) -> (),
                ),
            ))
        {
            mo2 = th as *mut mobj_t;
            if (*mo2).type_0 as libc::c_uint
                == MT_EMERHUNT as libc::c_int as libc::c_uint
            {
                if hunt1.is_null() {
                    hunt1 = mo2;
                } else if hunt2.is_null() {
                    hunt2 = mo2;
                } else if hunt3.is_null() {
                    hunt3 = mo2;
                }
            }
        }
        th = (*th).next;
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_GetLives(mut player: *mut player_t) -> boolean {
    let mut i: int32_t = 0;
    let mut maxlivesplayer: int32_t = -(1 as libc::c_int);
    let mut livescheck: int32_t = 1 as libc::c_int;
    if !(netgame != 0 || multiplayer != 0) || G_GametypeUsesCoopLives() == 0
        || (*player).lives as libc::c_int == 0x7f as libc::c_int
    {
        return true_0 as libc::c_int;
    }
    if cv_cooplives.value == 0 as libc::c_int {
        if ((*player).lives as libc::c_int) < 1 as libc::c_int {
            (*player).lives = 1 as libc::c_int as int8_t;
        }
        return true_0 as libc::c_int;
    }
    if (cv_cooplives.value == 2 as libc::c_int || cv_cooplives.value == 1 as libc::c_int)
        && (*player).lives as libc::c_int > 0 as libc::c_int
    {
        return true_0 as libc::c_int;
    }
    if cv_cooplives.value == 1 as libc::c_int {
        return false_0 as libc::c_int;
    }
    i = 0 as libc::c_int;
    while i < 32 as libc::c_int {
        if !(playeringame[i as usize] == 0) {
            if players[i as usize].lives as libc::c_int > livescheck {
                maxlivesplayer = i;
                livescheck = players[i as usize].lives as int32_t;
            }
        }
        i += 1;
        i;
    }
    if maxlivesplayer != -(1 as libc::c_int)
        && &mut *players.as_mut_ptr().offset(maxlivesplayer as isize) as *mut player_t
            != player
    {
        if cv_cooplives.value == 2 as libc::c_int
            && (P_IsLocalPlayer(player) != 0
                || P_IsLocalPlayer(
                    &mut *players.as_mut_ptr().offset(maxlivesplayer as isize),
                ) != 0)
        {
            S_StartSound(0 as *const libc::c_void, sfx_jshard);
        }
        if players[maxlivesplayer as usize].lives as libc::c_int != 0x7f as libc::c_int {
            players[maxlivesplayer as usize].lives -= 1;
            players[maxlivesplayer as usize].lives;
        }
        (*player).lives += 1;
        (*player).lives;
        if ((*player).lives as libc::c_int) < 1 as libc::c_int {
            (*player).lives = 1 as libc::c_int as int8_t;
        }
        return true_0 as libc::c_int;
    }
    return ((*player).lives as libc::c_int > 0 as libc::c_int) as libc::c_int;
}
unsafe extern "C" fn P_ConsiderAllGone() {
    let mut i: int32_t = 0;
    let mut lastdeadplayer: int32_t = -(1 as libc::c_int);
    let mut deadtimercheck: int32_t = 2147483647 as libc::c_int;
    if countdown2 != 0 {
        return;
    }
    i = 0 as libc::c_int;
    while i < 32 as libc::c_int {
        if !(playeringame[i as usize] == 0) {
            if players[i as usize].playerstate as libc::c_uint
                != PST_DEAD as libc::c_int as libc::c_uint
                && players[i as usize].spectator == 0
                && !(players[i as usize].mo).is_null()
                && (*players[i as usize].mo).health != 0
            {
                break;
            }
            if players[i as usize].spectator != 0 {
                if lastdeadplayer == -(1 as libc::c_int) {
                    lastdeadplayer = i;
                }
            } else if players[i as usize].lives as libc::c_int > 0 as libc::c_int {
                lastdeadplayer = i;
                if players[i as usize].deadtimer < deadtimercheck {
                    deadtimercheck = players[i as usize].deadtimer;
                }
            }
        }
        i += 1;
        i;
    }
    if i == 32 as libc::c_int && lastdeadplayer != -(1 as libc::c_int)
        && deadtimercheck > 2 as libc::c_int * 35 as libc::c_int
    {
        players[lastdeadplayer as usize].outofcoop = true_0 as libc::c_int;
        players[lastdeadplayer as usize].playerstate = PST_REBORN;
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_RestoreMultiMusic(mut player: *mut player_t) {
    if netgame != 0 {
        if P_IsLocalPlayer(player) != 0 {
            S_ChangeMusicEx(
                mapmusname.as_mut_ptr(),
                mapmusflags,
                true_0 as libc::c_int,
                0 as libc::c_int as uint32_t,
                0 as libc::c_int as uint32_t,
                0 as libc::c_int as uint32_t,
            );
        }
    } else if multiplayer != 0 {
        if player
            == &mut *players.as_mut_ptr().offset(displayplayer as isize) as *mut player_t
            && players[secondarydisplayplayer as usize].lives as libc::c_int
                > 0 as libc::c_int
        {
            P_RestoreMusic(
                &mut *players.as_mut_ptr().offset(secondarydisplayplayer as isize),
            );
        } else if player
            == &mut *players.as_mut_ptr().offset(secondarydisplayplayer as isize)
                as *mut player_t
            && players[displayplayer as usize].lives as libc::c_int > 0 as libc::c_int
        {
            P_RestoreMusic(&mut *players.as_mut_ptr().offset(displayplayer as isize));
        }
    }
}
unsafe extern "C" fn P_DeathThink(mut player: *mut player_t) {
    let mut j: int32_t = 32 as libc::c_int;
    let mut cmd: *mut ticcmd_t = &mut (*player).cmd;
    (*player).deltaviewheight = 0 as libc::c_int;
    if (*player).deadtimer < 2147483647 as libc::c_int {
        (*player).deadtimer += 1;
        (*player).deadtimer;
    }
    if !((*player).bot as libc::c_int == BOT_2PAI as libc::c_int
        || (*player).bot as libc::c_int == BOT_2PHUMAN as libc::c_int)
    {
        if !(netgame != 0 || multiplayer != 0)
            && (*player).lives as libc::c_int <= 0 as libc::c_int
            && player
                == &mut *players.as_mut_ptr().offset(consoleplayer as isize)
                    as *mut player_t
        {
            if (*player).deadtimer > 3 as libc::c_int * 35 as libc::c_int
                && ((*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0
                    || (*cmd).buttons as libc::c_int & BT_JUMP as libc::c_int != 0)
                && (!(multiplayer == 0
                    && (ultimatemode as libc::c_int != 0
                        || useContinues as libc::c_int != 0 && marathonmode as u64 == 0
                        || modeattacking == 0 && !(cursaveslot > 0 as libc::c_int)))
                    || (*player).continues as libc::c_int > 0 as libc::c_int)
            {
                G_UseContinue();
            } else if (*player).deadtimer >= gameovertics {
                G_UseContinue();
            }
        }
        if cv_cooplives.value != 1 as libc::c_int && G_GametypeUsesCoopLives() != 0
            && (netgame != 0 || multiplayer != 0)
            && (*player).lives as libc::c_int <= 0 as libc::c_int
        {
            j = 0 as libc::c_int;
            while j < 32 as libc::c_int {
                if !(playeringame[j as usize] == 0) {
                    if players[j as usize].lives as libc::c_int > 1 as libc::c_int {
                        break;
                    }
                }
                j += 1;
                j;
            }
        }
        if (*player).deadtimer > 30 as libc::c_int * 35 as libc::c_int
            && G_PlatformGametype() == 0
        {
            (*player).playerstate = PST_REBORN;
        } else if ((*player).lives as libc::c_int > 0 as libc::c_int
            || j != 32 as libc::c_int)
            && !(!(netgame != 0 || multiplayer != 0)
                && G_IsSpecialStage(gamemap as int32_t) != 0)
        {
            if G_GametypeUsesCoopStarposts() != 0 && (netgame != 0 || multiplayer != 0)
                && cv_coopstarposts.value == 2 as libc::c_int
            {
                P_ConsiderAllGone();
                if (*player).deadtimer > (35 as libc::c_int) << 1 as libc::c_int
                    || (*cmd).buttons as libc::c_int & BT_JUMP as libc::c_int != 0
                        && (*player).deadtimer > 35 as libc::c_int
                {
                    (*player).outofcoop = true_0 as libc::c_int;
                    (*player).playerstate = PST_REBORN;
                }
            } else {
                if (*cmd).buttons as libc::c_int & BT_JUMP as libc::c_int != 0 {
                    if gametyperules & GTR_SPECTATORS as libc::c_int as uint32_t != 0
                        && (*player).spectator != 0
                    {
                        (*player).playerstate = PST_REBORN;
                    } else {
                        let mut respawndelay: int32_t = 35 as libc::c_int;
                        if gametyperules & GTR_RESPAWNDELAY as libc::c_int as uint32_t
                            != 0
                        {
                            respawndelay = cv_respawntime.value * 35 as libc::c_int;
                        }
                        if (*player).deadtimer > respawndelay {
                            (*player).playerstate = PST_REBORN;
                        }
                    }
                }
                if !(netgame != 0 || multiplayer != 0)
                    && (*player).deadtimer > (35 as libc::c_int) << 1 as libc::c_int
                {
                    (*player).playerstate = PST_REBORN;
                }
            }
        } else if (netgame != 0 || multiplayer != 0)
            && (*player).deadtimer >= 8 as libc::c_int * 35 as libc::c_int
        {
            let mut i: int32_t = 0;
            let mut deadtimercheck: int32_t = 2147483647 as libc::c_int;
            if G_CompetitionGametype() != 0 {
                i = 0 as libc::c_int;
                while i < 32 as libc::c_int {
                    if !(playeringame[i as usize] == 0) {
                        if players[i as usize].exiting == 0
                            && players[i as usize].lives as libc::c_int != 0
                        {
                            break;
                        }
                        if players[i as usize].deadtimer < deadtimercheck {
                            deadtimercheck = players[i as usize].deadtimer;
                        }
                    }
                    i += 1;
                    i;
                }
                if i == 32 as libc::c_int
                    && deadtimercheck == 8 as libc::c_int * 35 as libc::c_int
                {
                    if countdown2 == 0
                        || countdown2
                            > (1 as libc::c_int * 35 as libc::c_int) as uint32_t
                    {
                        countdown2 = (1 as libc::c_int * 35 as libc::c_int) as uint32_t;
                    }
                }
            }
        }
        if G_CoopGametype() != 0 && (multiplayer != 0 || netgame != 0)
            && (*player).lives as libc::c_int <= 0 as libc::c_int
            && ((*player).deadtimer >= 8 as libc::c_int * 35 as libc::c_int
                || (*cmd).buttons as libc::c_int & BT_JUMP as libc::c_int != 0
                    && (*player).deadtimer > 35 as libc::c_int)
        {
            (*player).outofcoop = true_0 as libc::c_int;
            (*player).playerstate = PST_REBORN;
        }
        if gametyperules & GTR_RACE as libc::c_int as uint32_t != 0
            || G_CoopGametype() != 0 && (multiplayer != 0 || netgame != 0)
        {
            if !(countdown2 != 0 && countdown == 0) && (*player).exiting == 0
                && (*player).pflags as libc::c_uint
                    & PF_GAMETYPEOVER as libc::c_int as libc::c_uint == 0
                && stoppedclock == 0
            {
                if gametyperules & GTR_RACE as libc::c_int as uint32_t != 0 {
                    if leveltime >= (4 as libc::c_int * 35 as libc::c_int) as tic_t {
                        (*player)
                            .realtime = leveltime
                            .wrapping_sub(
                                (4 as libc::c_int * 35 as libc::c_int) as tic_t,
                            );
                    } else {
                        (*player).realtime = 0 as libc::c_int as tic_t;
                    }
                } else {
                    (*player).realtime = leveltime;
                }
            }
            if G_CoopGametype() == 0
                && (*player).lives as libc::c_int <= 0 as libc::c_int
                && (*player).deadtimer == gameovertics
            {
                P_RestoreMultiMusic(player);
            }
        }
    }
    if ((*player).mo).is_null() {
        return;
    }
    P_CalcHeight(player);
}
#[no_mangle]
pub static mut camera: camera_t = camera_s {
    chase: 0,
    aiming: 0,
    viewheight: 0,
    startangle: 0,
    x: 0,
    y: 0,
    z: 0,
    reset: 0,
    angle: 0,
    subsector: 0 as *const subsector_s as *mut subsector_s,
    floorz: 0,
    ceilingz: 0,
    radius: 0,
    height: 0,
    relativex: 0,
    momx: 0,
    momy: 0,
    momz: 0,
};
#[no_mangle]
pub static mut camera2: camera_t = camera_s {
    chase: 0,
    aiming: 0,
    viewheight: 0,
    startangle: 0,
    x: 0,
    y: 0,
    z: 0,
    reset: 0,
    angle: 0,
    subsector: 0 as *const subsector_s as *mut subsector_s,
    floorz: 0,
    ceilingz: 0,
    radius: 0,
    height: 0,
    relativex: 0,
    momx: 0,
    momy: 0,
    momz: 0,
};
unsafe extern "C" fn CV_CamRotate_OnChange() {
    if cv_cam_rotate.value < 0 as libc::c_int {
        CV_SetValue(&mut cv_cam_rotate, cv_cam_rotate.value + 360 as libc::c_int);
    } else if cv_cam_rotate.value > 359 as libc::c_int {
        CV_SetValue(&mut cv_cam_rotate, cv_cam_rotate.value % 360 as libc::c_int);
    }
}
unsafe extern "C" fn CV_CamRotate2_OnChange() {
    if cv_cam2_rotate.value < 0 as libc::c_int {
        CV_SetValue(&mut cv_cam2_rotate, cv_cam2_rotate.value + 360 as libc::c_int);
    } else if cv_cam2_rotate.value > 359 as libc::c_int {
        CV_SetValue(&mut cv_cam2_rotate, cv_cam2_rotate.value % 360 as libc::c_int);
    }
}
static mut CV_CamSpeed: [CV_PossibleValue_t; 3] = [
    {
        let mut init = CV_PossibleValue_s {
            value: 0 as libc::c_int,
            strvalue: b"MIN\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = CV_PossibleValue_s {
            value: 1 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
            strvalue: b"MAX\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = CV_PossibleValue_s {
            value: 0 as libc::c_int,
            strvalue: 0 as *const libc::c_char,
        };
        init
    },
];
static mut rotation_cons_t: [CV_PossibleValue_t; 3] = [
    {
        let mut init = CV_PossibleValue_s {
            value: 1 as libc::c_int,
            strvalue: b"MIN\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = CV_PossibleValue_s {
            value: 25 as libc::c_int,
            strvalue: b"MAX\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = CV_PossibleValue_s {
            value: 0 as libc::c_int,
            strvalue: 0 as *const libc::c_char,
        };
        init
    },
];
static mut CV_CamRotate: [CV_PossibleValue_t; 3] = [
    {
        let mut init = CV_PossibleValue_s {
            value: -(720 as libc::c_int),
            strvalue: b"MIN\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = CV_PossibleValue_s {
            value: 720 as libc::c_int,
            strvalue: b"MAX\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = CV_PossibleValue_s {
            value: 0 as libc::c_int,
            strvalue: 0 as *const libc::c_char,
        };
        init
    },
];
static mut multiplier_cons_t: [CV_PossibleValue_t; 3] = [
    {
        let mut init = CV_PossibleValue_s {
            value: 0 as libc::c_int,
            strvalue: b"MIN\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = CV_PossibleValue_s {
            value: 3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
            strvalue: b"MAX\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = CV_PossibleValue_s {
            value: 0 as libc::c_int,
            strvalue: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut cv_cam_dist: consvar_t = {
    let mut init = consvar_s {
        name: b"cam_curdist\0" as *const u8 as *const libc::c_char,
        defaultvalue: b"160\0" as *const u8 as *const libc::c_char,
        flags: CV_FLOAT as libc::c_int | CV_ALLOWLUA as libc::c_int,
        PossibleValue: 0 as *const CV_PossibleValue_t as *mut CV_PossibleValue_t,
        func: None,
        value: 0 as libc::c_int,
        string: 0 as *const libc::c_char,
        zstring: 0 as *const libc::c_char as *mut libc::c_char,
        revert: {
            let mut init = C2RustUnnamed_5 {
                allocated: 0 as libc::c_int as libc::c_char,
                v: C2RustUnnamed_6 {
                    string: 0 as *const libc::c_char as *mut libc::c_char,
                },
            };
            init
        },
        netid: 0 as libc::c_uint as uint16_t,
        changed: 0 as libc::c_int as libc::c_char,
        next: 0 as *const consvar_s as *mut consvar_s,
    };
    init
};
#[no_mangle]
pub static mut cv_cam_height: consvar_t = {
    let mut init = consvar_s {
        name: b"cam_curheight\0" as *const u8 as *const libc::c_char,
        defaultvalue: b"25\0" as *const u8 as *const libc::c_char,
        flags: CV_FLOAT as libc::c_int | CV_ALLOWLUA as libc::c_int,
        PossibleValue: 0 as *const CV_PossibleValue_t as *mut CV_PossibleValue_t,
        func: None,
        value: 0 as libc::c_int,
        string: 0 as *const libc::c_char,
        zstring: 0 as *const libc::c_char as *mut libc::c_char,
        revert: {
            let mut init = C2RustUnnamed_5 {
                allocated: 0 as libc::c_int as libc::c_char,
                v: C2RustUnnamed_6 {
                    string: 0 as *const libc::c_char as *mut libc::c_char,
                },
            };
            init
        },
        netid: 0 as libc::c_uint as uint16_t,
        changed: 0 as libc::c_int as libc::c_char,
        next: 0 as *const consvar_s as *mut consvar_s,
    };
    init
};
#[no_mangle]
pub static mut cv_cam_still: consvar_t = unsafe {
    {
        let mut init = consvar_s {
            name: b"cam_still\0" as *const u8 as *const libc::c_char,
            defaultvalue: b"Off\0" as *const u8 as *const libc::c_char,
            flags: CV_ALLOWLUA as libc::c_int,
            PossibleValue: CV_OnOff.as_ptr() as *mut _,
            func: None,
            value: 0 as libc::c_int,
            string: 0 as *const libc::c_char,
            zstring: 0 as *const libc::c_char as *mut libc::c_char,
            revert: {
                let mut init = C2RustUnnamed_5 {
                    allocated: 0 as libc::c_int as libc::c_char,
                    v: C2RustUnnamed_6 {
                        string: 0 as *const libc::c_char as *mut libc::c_char,
                    },
                };
                init
            },
            netid: 0 as libc::c_uint as uint16_t,
            changed: 0 as libc::c_int as libc::c_char,
            next: 0 as *const consvar_s as *mut consvar_s,
        };
        init
    }
};
#[no_mangle]
pub static mut cv_cam_speed: consvar_t = unsafe {
    {
        let mut init = consvar_s {
            name: b"cam_speed\0" as *const u8 as *const libc::c_char,
            defaultvalue: b"0.3\0" as *const u8 as *const libc::c_char,
            flags: CV_FLOAT as libc::c_int | CV_SAVE as libc::c_int
                | CV_ALLOWLUA as libc::c_int,
            PossibleValue: CV_CamSpeed.as_ptr() as *mut _,
            func: None,
            value: 0 as libc::c_int,
            string: 0 as *const libc::c_char,
            zstring: 0 as *const libc::c_char as *mut libc::c_char,
            revert: {
                let mut init = C2RustUnnamed_5 {
                    allocated: 0 as libc::c_int as libc::c_char,
                    v: C2RustUnnamed_6 {
                        string: 0 as *const libc::c_char as *mut libc::c_char,
                    },
                };
                init
            },
            netid: 0 as libc::c_uint as uint16_t,
            changed: 0 as libc::c_int as libc::c_char,
            next: 0 as *const consvar_s as *mut consvar_s,
        };
        init
    }
};
#[no_mangle]
pub static mut cv_cam_rotate: consvar_t = unsafe {
    {
        let mut init = consvar_s {
            name: b"cam_rotate\0" as *const u8 as *const libc::c_char,
            defaultvalue: b"0\0" as *const u8 as *const libc::c_char,
            flags: CV_CALL as libc::c_int | CV_NOINIT as libc::c_int
                | CV_ALLOWLUA as libc::c_int,
            PossibleValue: CV_CamRotate.as_ptr() as *mut _,
            func: Some(CV_CamRotate_OnChange as unsafe extern "C" fn() -> ()),
            value: 0 as libc::c_int,
            string: 0 as *const libc::c_char,
            zstring: 0 as *const libc::c_char as *mut libc::c_char,
            revert: {
                let mut init = C2RustUnnamed_5 {
                    allocated: 0 as libc::c_int as libc::c_char,
                    v: C2RustUnnamed_6 {
                        string: 0 as *const libc::c_char as *mut libc::c_char,
                    },
                };
                init
            },
            netid: 0 as libc::c_uint as uint16_t,
            changed: 0 as libc::c_int as libc::c_char,
            next: 0 as *const consvar_s as *mut consvar_s,
        };
        init
    }
};
#[no_mangle]
pub static mut cv_cam_rotspeed: consvar_t = unsafe {
    {
        let mut init = consvar_s {
            name: b"cam_rotspeed\0" as *const u8 as *const libc::c_char,
            defaultvalue: b"10\0" as *const u8 as *const libc::c_char,
            flags: CV_SAVE as libc::c_int | CV_ALLOWLUA as libc::c_int,
            PossibleValue: rotation_cons_t.as_ptr() as *mut _,
            func: None,
            value: 0 as libc::c_int,
            string: 0 as *const libc::c_char,
            zstring: 0 as *const libc::c_char as *mut libc::c_char,
            revert: {
                let mut init = C2RustUnnamed_5 {
                    allocated: 0 as libc::c_int as libc::c_char,
                    v: C2RustUnnamed_6 {
                        string: 0 as *const libc::c_char as *mut libc::c_char,
                    },
                };
                init
            },
            netid: 0 as libc::c_uint as uint16_t,
            changed: 0 as libc::c_int as libc::c_char,
            next: 0 as *const consvar_s as *mut consvar_s,
        };
        init
    }
};
#[no_mangle]
pub static mut cv_cam_turnmultiplier: consvar_t = unsafe {
    {
        let mut init = consvar_s {
            name: b"cam_turnmultiplier\0" as *const u8 as *const libc::c_char,
            defaultvalue: b"0.75\0" as *const u8 as *const libc::c_char,
            flags: CV_FLOAT as libc::c_int | CV_SAVE as libc::c_int
                | CV_ALLOWLUA as libc::c_int,
            PossibleValue: multiplier_cons_t.as_ptr() as *mut _,
            func: None,
            value: 0 as libc::c_int,
            string: 0 as *const libc::c_char,
            zstring: 0 as *const libc::c_char as *mut libc::c_char,
            revert: {
                let mut init = C2RustUnnamed_5 {
                    allocated: 0 as libc::c_int as libc::c_char,
                    v: C2RustUnnamed_6 {
                        string: 0 as *const libc::c_char as *mut libc::c_char,
                    },
                };
                init
            },
            netid: 0 as libc::c_uint as uint16_t,
            changed: 0 as libc::c_int as libc::c_char,
            next: 0 as *const consvar_s as *mut consvar_s,
        };
        init
    }
};
#[no_mangle]
pub static mut cv_cam_orbit: consvar_t = unsafe {
    {
        let mut init = consvar_s {
            name: b"cam_orbit\0" as *const u8 as *const libc::c_char,
            defaultvalue: b"Off\0" as *const u8 as *const libc::c_char,
            flags: CV_SAVE as libc::c_int | CV_ALLOWLUA as libc::c_int,
            PossibleValue: CV_OnOff.as_ptr() as *mut _,
            func: None,
            value: 0 as libc::c_int,
            string: 0 as *const libc::c_char,
            zstring: 0 as *const libc::c_char as *mut libc::c_char,
            revert: {
                let mut init = C2RustUnnamed_5 {
                    allocated: 0 as libc::c_int as libc::c_char,
                    v: C2RustUnnamed_6 {
                        string: 0 as *const libc::c_char as *mut libc::c_char,
                    },
                };
                init
            },
            netid: 0 as libc::c_uint as uint16_t,
            changed: 0 as libc::c_int as libc::c_char,
            next: 0 as *const consvar_s as *mut consvar_s,
        };
        init
    }
};
#[no_mangle]
pub static mut cv_cam_adjust: consvar_t = unsafe {
    {
        let mut init = consvar_s {
            name: b"cam_adjust\0" as *const u8 as *const libc::c_char,
            defaultvalue: b"On\0" as *const u8 as *const libc::c_char,
            flags: CV_SAVE as libc::c_int | CV_ALLOWLUA as libc::c_int,
            PossibleValue: CV_OnOff.as_ptr() as *mut _,
            func: None,
            value: 0 as libc::c_int,
            string: 0 as *const libc::c_char,
            zstring: 0 as *const libc::c_char as *mut libc::c_char,
            revert: {
                let mut init = C2RustUnnamed_5 {
                    allocated: 0 as libc::c_int as libc::c_char,
                    v: C2RustUnnamed_6 {
                        string: 0 as *const libc::c_char as *mut libc::c_char,
                    },
                };
                init
            },
            netid: 0 as libc::c_uint as uint16_t,
            changed: 0 as libc::c_int as libc::c_char,
            next: 0 as *const consvar_s as *mut consvar_s,
        };
        init
    }
};
#[no_mangle]
pub static mut cv_cam2_dist: consvar_t = {
    let mut init = consvar_s {
        name: b"cam2_curdist\0" as *const u8 as *const libc::c_char,
        defaultvalue: b"160\0" as *const u8 as *const libc::c_char,
        flags: CV_FLOAT as libc::c_int | CV_ALLOWLUA as libc::c_int,
        PossibleValue: 0 as *const CV_PossibleValue_t as *mut CV_PossibleValue_t,
        func: None,
        value: 0 as libc::c_int,
        string: 0 as *const libc::c_char,
        zstring: 0 as *const libc::c_char as *mut libc::c_char,
        revert: {
            let mut init = C2RustUnnamed_5 {
                allocated: 0 as libc::c_int as libc::c_char,
                v: C2RustUnnamed_6 {
                    string: 0 as *const libc::c_char as *mut libc::c_char,
                },
            };
            init
        },
        netid: 0 as libc::c_uint as uint16_t,
        changed: 0 as libc::c_int as libc::c_char,
        next: 0 as *const consvar_s as *mut consvar_s,
    };
    init
};
#[no_mangle]
pub static mut cv_cam2_height: consvar_t = {
    let mut init = consvar_s {
        name: b"cam2_curheight\0" as *const u8 as *const libc::c_char,
        defaultvalue: b"25\0" as *const u8 as *const libc::c_char,
        flags: CV_FLOAT as libc::c_int | CV_ALLOWLUA as libc::c_int,
        PossibleValue: 0 as *const CV_PossibleValue_t as *mut CV_PossibleValue_t,
        func: None,
        value: 0 as libc::c_int,
        string: 0 as *const libc::c_char,
        zstring: 0 as *const libc::c_char as *mut libc::c_char,
        revert: {
            let mut init = C2RustUnnamed_5 {
                allocated: 0 as libc::c_int as libc::c_char,
                v: C2RustUnnamed_6 {
                    string: 0 as *const libc::c_char as *mut libc::c_char,
                },
            };
            init
        },
        netid: 0 as libc::c_uint as uint16_t,
        changed: 0 as libc::c_int as libc::c_char,
        next: 0 as *const consvar_s as *mut consvar_s,
    };
    init
};
#[no_mangle]
pub static mut cv_cam2_still: consvar_t = unsafe {
    {
        let mut init = consvar_s {
            name: b"cam2_still\0" as *const u8 as *const libc::c_char,
            defaultvalue: b"Off\0" as *const u8 as *const libc::c_char,
            flags: CV_ALLOWLUA as libc::c_int,
            PossibleValue: CV_OnOff.as_ptr() as *mut _,
            func: None,
            value: 0 as libc::c_int,
            string: 0 as *const libc::c_char,
            zstring: 0 as *const libc::c_char as *mut libc::c_char,
            revert: {
                let mut init = C2RustUnnamed_5 {
                    allocated: 0 as libc::c_int as libc::c_char,
                    v: C2RustUnnamed_6 {
                        string: 0 as *const libc::c_char as *mut libc::c_char,
                    },
                };
                init
            },
            netid: 0 as libc::c_uint as uint16_t,
            changed: 0 as libc::c_int as libc::c_char,
            next: 0 as *const consvar_s as *mut consvar_s,
        };
        init
    }
};
#[no_mangle]
pub static mut cv_cam2_speed: consvar_t = unsafe {
    {
        let mut init = consvar_s {
            name: b"cam2_speed\0" as *const u8 as *const libc::c_char,
            defaultvalue: b"0.3\0" as *const u8 as *const libc::c_char,
            flags: CV_FLOAT as libc::c_int | CV_SAVE as libc::c_int
                | CV_ALLOWLUA as libc::c_int,
            PossibleValue: CV_CamSpeed.as_ptr() as *mut _,
            func: None,
            value: 0 as libc::c_int,
            string: 0 as *const libc::c_char,
            zstring: 0 as *const libc::c_char as *mut libc::c_char,
            revert: {
                let mut init = C2RustUnnamed_5 {
                    allocated: 0 as libc::c_int as libc::c_char,
                    v: C2RustUnnamed_6 {
                        string: 0 as *const libc::c_char as *mut libc::c_char,
                    },
                };
                init
            },
            netid: 0 as libc::c_uint as uint16_t,
            changed: 0 as libc::c_int as libc::c_char,
            next: 0 as *const consvar_s as *mut consvar_s,
        };
        init
    }
};
#[no_mangle]
pub static mut cv_cam2_rotate: consvar_t = unsafe {
    {
        let mut init = consvar_s {
            name: b"cam2_rotate\0" as *const u8 as *const libc::c_char,
            defaultvalue: b"0\0" as *const u8 as *const libc::c_char,
            flags: CV_CALL as libc::c_int | CV_NOINIT as libc::c_int
                | CV_ALLOWLUA as libc::c_int,
            PossibleValue: CV_CamRotate.as_ptr() as *mut _,
            func: Some(CV_CamRotate2_OnChange as unsafe extern "C" fn() -> ()),
            value: 0 as libc::c_int,
            string: 0 as *const libc::c_char,
            zstring: 0 as *const libc::c_char as *mut libc::c_char,
            revert: {
                let mut init = C2RustUnnamed_5 {
                    allocated: 0 as libc::c_int as libc::c_char,
                    v: C2RustUnnamed_6 {
                        string: 0 as *const libc::c_char as *mut libc::c_char,
                    },
                };
                init
            },
            netid: 0 as libc::c_uint as uint16_t,
            changed: 0 as libc::c_int as libc::c_char,
            next: 0 as *const consvar_s as *mut consvar_s,
        };
        init
    }
};
#[no_mangle]
pub static mut cv_cam2_rotspeed: consvar_t = unsafe {
    {
        let mut init = consvar_s {
            name: b"cam2_rotspeed\0" as *const u8 as *const libc::c_char,
            defaultvalue: b"10\0" as *const u8 as *const libc::c_char,
            flags: CV_SAVE as libc::c_int | CV_ALLOWLUA as libc::c_int,
            PossibleValue: rotation_cons_t.as_ptr() as *mut _,
            func: None,
            value: 0 as libc::c_int,
            string: 0 as *const libc::c_char,
            zstring: 0 as *const libc::c_char as *mut libc::c_char,
            revert: {
                let mut init = C2RustUnnamed_5 {
                    allocated: 0 as libc::c_int as libc::c_char,
                    v: C2RustUnnamed_6 {
                        string: 0 as *const libc::c_char as *mut libc::c_char,
                    },
                };
                init
            },
            netid: 0 as libc::c_uint as uint16_t,
            changed: 0 as libc::c_int as libc::c_char,
            next: 0 as *const consvar_s as *mut consvar_s,
        };
        init
    }
};
#[no_mangle]
pub static mut cv_cam2_turnmultiplier: consvar_t = unsafe {
    {
        let mut init = consvar_s {
            name: b"cam2_turnmultiplier\0" as *const u8 as *const libc::c_char,
            defaultvalue: b"0.75\0" as *const u8 as *const libc::c_char,
            flags: CV_FLOAT as libc::c_int | CV_SAVE as libc::c_int
                | CV_ALLOWLUA as libc::c_int,
            PossibleValue: multiplier_cons_t.as_ptr() as *mut _,
            func: None,
            value: 0 as libc::c_int,
            string: 0 as *const libc::c_char,
            zstring: 0 as *const libc::c_char as *mut libc::c_char,
            revert: {
                let mut init = C2RustUnnamed_5 {
                    allocated: 0 as libc::c_int as libc::c_char,
                    v: C2RustUnnamed_6 {
                        string: 0 as *const libc::c_char as *mut libc::c_char,
                    },
                };
                init
            },
            netid: 0 as libc::c_uint as uint16_t,
            changed: 0 as libc::c_int as libc::c_char,
            next: 0 as *const consvar_s as *mut consvar_s,
        };
        init
    }
};
#[no_mangle]
pub static mut cv_cam2_orbit: consvar_t = unsafe {
    {
        let mut init = consvar_s {
            name: b"cam2_orbit\0" as *const u8 as *const libc::c_char,
            defaultvalue: b"Off\0" as *const u8 as *const libc::c_char,
            flags: CV_SAVE as libc::c_int | CV_ALLOWLUA as libc::c_int,
            PossibleValue: CV_OnOff.as_ptr() as *mut _,
            func: None,
            value: 0 as libc::c_int,
            string: 0 as *const libc::c_char,
            zstring: 0 as *const libc::c_char as *mut libc::c_char,
            revert: {
                let mut init = C2RustUnnamed_5 {
                    allocated: 0 as libc::c_int as libc::c_char,
                    v: C2RustUnnamed_6 {
                        string: 0 as *const libc::c_char as *mut libc::c_char,
                    },
                };
                init
            },
            netid: 0 as libc::c_uint as uint16_t,
            changed: 0 as libc::c_int as libc::c_char,
            next: 0 as *const consvar_s as *mut consvar_s,
        };
        init
    }
};
#[no_mangle]
pub static mut cv_cam2_adjust: consvar_t = unsafe {
    {
        let mut init = consvar_s {
            name: b"cam2_adjust\0" as *const u8 as *const libc::c_char,
            defaultvalue: b"On\0" as *const u8 as *const libc::c_char,
            flags: CV_SAVE as libc::c_int | CV_ALLOWLUA as libc::c_int,
            PossibleValue: CV_OnOff.as_ptr() as *mut _,
            func: None,
            value: 0 as libc::c_int,
            string: 0 as *const libc::c_char,
            zstring: 0 as *const libc::c_char as *mut libc::c_char,
            revert: {
                let mut init = C2RustUnnamed_5 {
                    allocated: 0 as libc::c_int as libc::c_char,
                    v: C2RustUnnamed_6 {
                        string: 0 as *const libc::c_char as *mut libc::c_char,
                    },
                };
                init
            },
            netid: 0 as libc::c_uint as uint16_t,
            changed: 0 as libc::c_int as libc::c_char,
            next: 0 as *const consvar_s as *mut consvar_s,
        };
        init
    }
};
#[no_mangle]
pub static mut cv_cam_savedist: [[consvar_t; 2]; 2] = unsafe {
    [
        [
            {
                let mut init = consvar_s {
                    name: b"cam_dist\0" as *const u8 as *const libc::c_char,
                    defaultvalue: b"192\0" as *const u8 as *const libc::c_char,
                    flags: CV_FLOAT as libc::c_int | CV_SAVE as libc::c_int
                        | CV_CALL as libc::c_int | CV_ALLOWLUA as libc::c_int,
                    PossibleValue: 0 as *const CV_PossibleValue_t
                        as *mut CV_PossibleValue_t,
                    func: Some(CV_UpdateCamDist as unsafe extern "C" fn() -> ()),
                    value: 0 as libc::c_int,
                    string: 0 as *const libc::c_char,
                    zstring: 0 as *const libc::c_char as *mut libc::c_char,
                    revert: {
                        let mut init = C2RustUnnamed_5 {
                            allocated: 0 as libc::c_int as libc::c_char,
                            v: C2RustUnnamed_6 {
                                string: 0 as *const libc::c_char as *mut libc::c_char,
                            },
                        };
                        init
                    },
                    netid: 0 as libc::c_uint as uint16_t,
                    changed: 0 as libc::c_int as libc::c_char,
                    next: 0 as *const consvar_s as *mut consvar_s,
                };
                init
            },
            {
                let mut init = consvar_s {
                    name: b"cam2_dist\0" as *const u8 as *const libc::c_char,
                    defaultvalue: b"192\0" as *const u8 as *const libc::c_char,
                    flags: CV_FLOAT as libc::c_int | CV_SAVE as libc::c_int
                        | CV_CALL as libc::c_int | CV_ALLOWLUA as libc::c_int,
                    PossibleValue: 0 as *const CV_PossibleValue_t
                        as *mut CV_PossibleValue_t,
                    func: Some(CV_UpdateCam2Dist as unsafe extern "C" fn() -> ()),
                    value: 0 as libc::c_int,
                    string: 0 as *const libc::c_char,
                    zstring: 0 as *const libc::c_char as *mut libc::c_char,
                    revert: {
                        let mut init = C2RustUnnamed_5 {
                            allocated: 0 as libc::c_int as libc::c_char,
                            v: C2RustUnnamed_6 {
                                string: 0 as *const libc::c_char as *mut libc::c_char,
                            },
                        };
                        init
                    },
                    netid: 0 as libc::c_uint as uint16_t,
                    changed: 0 as libc::c_int as libc::c_char,
                    next: 0 as *const consvar_s as *mut consvar_s,
                };
                init
            },
        ],
        [
            {
                let mut init = consvar_s {
                    name: b"cam_simpledist\0" as *const u8 as *const libc::c_char,
                    defaultvalue: b"256\0" as *const u8 as *const libc::c_char,
                    flags: CV_FLOAT as libc::c_int | CV_SAVE as libc::c_int
                        | CV_CALL as libc::c_int | CV_ALLOWLUA as libc::c_int,
                    PossibleValue: 0 as *const CV_PossibleValue_t
                        as *mut CV_PossibleValue_t,
                    func: Some(CV_UpdateCamDist as unsafe extern "C" fn() -> ()),
                    value: 0 as libc::c_int,
                    string: 0 as *const libc::c_char,
                    zstring: 0 as *const libc::c_char as *mut libc::c_char,
                    revert: {
                        let mut init = C2RustUnnamed_5 {
                            allocated: 0 as libc::c_int as libc::c_char,
                            v: C2RustUnnamed_6 {
                                string: 0 as *const libc::c_char as *mut libc::c_char,
                            },
                        };
                        init
                    },
                    netid: 0 as libc::c_uint as uint16_t,
                    changed: 0 as libc::c_int as libc::c_char,
                    next: 0 as *const consvar_s as *mut consvar_s,
                };
                init
            },
            {
                let mut init = consvar_s {
                    name: b"cam2_simpledist\0" as *const u8 as *const libc::c_char,
                    defaultvalue: b"256\0" as *const u8 as *const libc::c_char,
                    flags: CV_FLOAT as libc::c_int | CV_SAVE as libc::c_int
                        | CV_CALL as libc::c_int | CV_ALLOWLUA as libc::c_int,
                    PossibleValue: 0 as *const CV_PossibleValue_t
                        as *mut CV_PossibleValue_t,
                    func: Some(CV_UpdateCam2Dist as unsafe extern "C" fn() -> ()),
                    value: 0 as libc::c_int,
                    string: 0 as *const libc::c_char,
                    zstring: 0 as *const libc::c_char as *mut libc::c_char,
                    revert: {
                        let mut init = C2RustUnnamed_5 {
                            allocated: 0 as libc::c_int as libc::c_char,
                            v: C2RustUnnamed_6 {
                                string: 0 as *const libc::c_char as *mut libc::c_char,
                            },
                        };
                        init
                    },
                    netid: 0 as libc::c_uint as uint16_t,
                    changed: 0 as libc::c_int as libc::c_char,
                    next: 0 as *const consvar_s as *mut consvar_s,
                };
                init
            },
        ],
    ]
};
#[no_mangle]
pub static mut cv_cam_saveheight: [[consvar_t; 2]; 2] = unsafe {
    [
        [
            {
                let mut init = consvar_s {
                    name: b"cam_height\0" as *const u8 as *const libc::c_char,
                    defaultvalue: b"40\0" as *const u8 as *const libc::c_char,
                    flags: CV_FLOAT as libc::c_int | CV_SAVE as libc::c_int
                        | CV_CALL as libc::c_int | CV_ALLOWLUA as libc::c_int,
                    PossibleValue: 0 as *const CV_PossibleValue_t
                        as *mut CV_PossibleValue_t,
                    func: Some(CV_UpdateCamDist as unsafe extern "C" fn() -> ()),
                    value: 0 as libc::c_int,
                    string: 0 as *const libc::c_char,
                    zstring: 0 as *const libc::c_char as *mut libc::c_char,
                    revert: {
                        let mut init = C2RustUnnamed_5 {
                            allocated: 0 as libc::c_int as libc::c_char,
                            v: C2RustUnnamed_6 {
                                string: 0 as *const libc::c_char as *mut libc::c_char,
                            },
                        };
                        init
                    },
                    netid: 0 as libc::c_uint as uint16_t,
                    changed: 0 as libc::c_int as libc::c_char,
                    next: 0 as *const consvar_s as *mut consvar_s,
                };
                init
            },
            {
                let mut init = consvar_s {
                    name: b"cam2_height\0" as *const u8 as *const libc::c_char,
                    defaultvalue: b"40\0" as *const u8 as *const libc::c_char,
                    flags: CV_FLOAT as libc::c_int | CV_SAVE as libc::c_int
                        | CV_CALL as libc::c_int | CV_ALLOWLUA as libc::c_int,
                    PossibleValue: 0 as *const CV_PossibleValue_t
                        as *mut CV_PossibleValue_t,
                    func: Some(CV_UpdateCam2Dist as unsafe extern "C" fn() -> ()),
                    value: 0 as libc::c_int,
                    string: 0 as *const libc::c_char,
                    zstring: 0 as *const libc::c_char as *mut libc::c_char,
                    revert: {
                        let mut init = C2RustUnnamed_5 {
                            allocated: 0 as libc::c_int as libc::c_char,
                            v: C2RustUnnamed_6 {
                                string: 0 as *const libc::c_char as *mut libc::c_char,
                            },
                        };
                        init
                    },
                    netid: 0 as libc::c_uint as uint16_t,
                    changed: 0 as libc::c_int as libc::c_char,
                    next: 0 as *const consvar_s as *mut consvar_s,
                };
                init
            },
        ],
        [
            {
                let mut init = consvar_s {
                    name: b"cam_simpleheight\0" as *const u8 as *const libc::c_char,
                    defaultvalue: b"60\0" as *const u8 as *const libc::c_char,
                    flags: CV_FLOAT as libc::c_int | CV_SAVE as libc::c_int
                        | CV_CALL as libc::c_int | CV_ALLOWLUA as libc::c_int,
                    PossibleValue: 0 as *const CV_PossibleValue_t
                        as *mut CV_PossibleValue_t,
                    func: Some(CV_UpdateCamDist as unsafe extern "C" fn() -> ()),
                    value: 0 as libc::c_int,
                    string: 0 as *const libc::c_char,
                    zstring: 0 as *const libc::c_char as *mut libc::c_char,
                    revert: {
                        let mut init = C2RustUnnamed_5 {
                            allocated: 0 as libc::c_int as libc::c_char,
                            v: C2RustUnnamed_6 {
                                string: 0 as *const libc::c_char as *mut libc::c_char,
                            },
                        };
                        init
                    },
                    netid: 0 as libc::c_uint as uint16_t,
                    changed: 0 as libc::c_int as libc::c_char,
                    next: 0 as *const consvar_s as *mut consvar_s,
                };
                init
            },
            {
                let mut init = consvar_s {
                    name: b"cam2_simpleheight\0" as *const u8 as *const libc::c_char,
                    defaultvalue: b"60\0" as *const u8 as *const libc::c_char,
                    flags: CV_FLOAT as libc::c_int | CV_SAVE as libc::c_int
                        | CV_CALL as libc::c_int | CV_ALLOWLUA as libc::c_int,
                    PossibleValue: 0 as *const CV_PossibleValue_t
                        as *mut CV_PossibleValue_t,
                    func: Some(CV_UpdateCam2Dist as unsafe extern "C" fn() -> ()),
                    value: 0 as libc::c_int,
                    string: 0 as *const libc::c_char,
                    zstring: 0 as *const libc::c_char as *mut libc::c_char,
                    revert: {
                        let mut init = C2RustUnnamed_5 {
                            allocated: 0 as libc::c_int as libc::c_char,
                            v: C2RustUnnamed_6 {
                                string: 0 as *const libc::c_char as *mut libc::c_char,
                            },
                        };
                        init
                    },
                    netid: 0 as libc::c_uint as uint16_t,
                    changed: 0 as libc::c_int as libc::c_char,
                    next: 0 as *const consvar_s as *mut consvar_s,
                };
                init
            },
        ],
    ]
};
#[no_mangle]
pub unsafe extern "C" fn CV_UpdateCamDist() {
    CV_Set(
        &mut cv_cam_dist,
        va(
            b"%f\0" as *const u8 as *const libc::c_char,
            FixedToFloat(
                cv_cam_savedist[cv_useranalog[0 as libc::c_int as usize].value
                        as usize][0 as libc::c_int as usize]
                    .value,
            ) as libc::c_double,
        ),
    );
    CV_Set(
        &mut cv_cam_height,
        va(
            b"%f\0" as *const u8 as *const libc::c_char,
            FixedToFloat(
                cv_cam_saveheight[cv_useranalog[0 as libc::c_int as usize].value
                        as usize][0 as libc::c_int as usize]
                    .value,
            ) as libc::c_double,
        ),
    );
}
#[no_mangle]
pub unsafe extern "C" fn CV_UpdateCam2Dist() {
    CV_Set(
        &mut cv_cam2_dist,
        va(
            b"%f\0" as *const u8 as *const libc::c_char,
            FixedToFloat(
                cv_cam_savedist[cv_useranalog[1 as libc::c_int as usize].value
                        as usize][1 as libc::c_int as usize]
                    .value,
            ) as libc::c_double,
        ),
    );
    CV_Set(
        &mut cv_cam2_height,
        va(
            b"%f\0" as *const u8 as *const libc::c_char,
            FixedToFloat(
                cv_cam_saveheight[cv_useranalog[1 as libc::c_int as usize].value
                        as usize][1 as libc::c_int as usize]
                    .value,
            ) as libc::c_double,
        ),
    );
}
#[no_mangle]
pub static mut t_cam_dist: fixed_t = -(42 as libc::c_int);
#[no_mangle]
pub static mut t_cam_height: fixed_t = -(42 as libc::c_int);
#[no_mangle]
pub static mut t_cam_rotate: fixed_t = -(42 as libc::c_int);
#[no_mangle]
pub static mut t_cam2_dist: fixed_t = -(42 as libc::c_int);
#[no_mangle]
pub static mut t_cam2_height: fixed_t = -(42 as libc::c_int);
#[no_mangle]
pub static mut t_cam2_rotate: fixed_t = -(42 as libc::c_int);
#[no_mangle]
pub unsafe extern "C" fn P_ResetCamera(
    mut player: *mut player_t,
    mut thiscam: *mut camera_t,
) {
    let mut tries: tic_t = 0 as libc::c_int as tic_t;
    let mut x: fixed_t = 0;
    let mut y: fixed_t = 0;
    let mut z: fixed_t = 0;
    if ((*player).mo).is_null() {
        return;
    }
    if (*thiscam).chase != 0 && (*(*player).mo).health <= 0 as libc::c_int {
        return;
    }
    (*thiscam).chase = true_0 as libc::c_int;
    x = (*(*player).mo).x
        - P_ReturnThrustX((*player).mo, (*thiscam).angle, (*(*player).mo).radius);
    y = (*(*player).mo).y
        - P_ReturnThrustY((*player).mo, (*thiscam).angle, (*(*player).mo).radius);
    if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        z = (*(*player).mo).z + (*(*player).mo).height
            - 41 as libc::c_int * (*player).height / 48 as libc::c_int
            - 16 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
    } else {
        z = (*(*player).mo).z + 41 as libc::c_int * (*player).height / 48 as libc::c_int;
    }
    (*thiscam).x = x;
    (*thiscam).y = y;
    (*thiscam).z = z;
    (*thiscam).reset = true_0 as libc::c_int;
    if thiscam == &mut camera as *mut camera_t
        && (if cv_directionchar[(1 as libc::c_int - 1 as libc::c_int) as usize].value
            == 3 as libc::c_int
        {
            CS_LMAOGALOG as libc::c_int
        } else {
            (if objectplacing == 0
                && cv_analog[(1 as libc::c_int - 1 as libc::c_int) as usize].value != 0
            {
                CS_LMAOGALOG as libc::c_int
            } else {
                0 as libc::c_int
            })
                | (if cv_directionchar[(1 as libc::c_int - 1 as libc::c_int) as usize]
                    .value != 0
                {
                    CS_STANDARD as libc::c_int
                } else {
                    0 as libc::c_int
                })
        }) == CS_SIMPLE as libc::c_int
        || thiscam == &mut camera2 as *mut camera_t
            && (if cv_directionchar[(2 as libc::c_int - 1 as libc::c_int) as usize].value
                == 3 as libc::c_int
            {
                CS_LMAOGALOG as libc::c_int
            } else {
                (if objectplacing == 0
                    && cv_analog[(2 as libc::c_int - 1 as libc::c_int) as usize].value
                        != 0
                {
                    CS_LMAOGALOG as libc::c_int
                } else {
                    0 as libc::c_int
                })
                    | (if cv_directionchar[(2 as libc::c_int - 1 as libc::c_int)
                            as usize]
                        .value != 0
                    {
                        CS_STANDARD as libc::c_int
                    } else {
                        0 as libc::c_int
                    })
            }) == CS_SIMPLE as libc::c_int
    {
        (*thiscam).angle = P_GetLocalAngle(player);
        (*thiscam)
            .aiming = (if thiscam == &mut camera as *mut camera_t {
            localaiming
        } else {
            localaiming2
        }) as angle_t;
    } else if !(thiscam == &mut camera as *mut camera_t
        && (cv_cam_still.value != 0 || cv_analog[0 as libc::c_int as usize].value != 0))
        && !(thiscam == &mut camera2 as *mut camera_t
            && (cv_cam2_still.value != 0
                || cv_analog[1 as libc::c_int as usize].value != 0))
    {
        (*thiscam).angle = (*(*player).mo).angle;
        (*thiscam).aiming = 0 as libc::c_int as angle_t;
    }
    (*thiscam).relativex = 0 as libc::c_int;
    (*thiscam).subsector = R_PointInSubsector((*thiscam).x, (*thiscam).y);
    (*thiscam).radius = 20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
    (*thiscam).height = 16 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
    while P_MoveChaseCamera(player, thiscam, true_0 as libc::c_int) == 0
        && {
            tries = tries.wrapping_add(1);
            tries < (2 as libc::c_int * 35 as libc::c_int) as tic_t
        }
    {}
}
#[no_mangle]
pub unsafe extern "C" fn P_MoveChaseCamera(
    mut player: *mut player_t,
    mut thiscam: *mut camera_t,
    mut resetcalled: boolean,
) -> boolean {
    let mut angle: angle_t = 0 as libc::c_int as angle_t;
    let mut focusangle: angle_t = 0 as libc::c_int as angle_t;
    let mut focusaiming: angle_t = 0 as libc::c_int as angle_t;
    let mut x: fixed_t = 0;
    let mut y: fixed_t = 0;
    let mut z: fixed_t = 0;
    let mut dist: fixed_t = 0;
    let mut distxy: fixed_t = 0;
    let mut distz: fixed_t = 0;
    let mut checkdist: fixed_t = 0;
    let mut viewpointx: fixed_t = 0;
    let mut viewpointy: fixed_t = 0;
    let mut camspeed: fixed_t = 0;
    let mut camdist: fixed_t = 0;
    let mut camheight: fixed_t = 0;
    let mut pviewheight: fixed_t = 0;
    let mut slopez: fixed_t = 0 as libc::c_int;
    let mut camrotate: int32_t = 0;
    let mut camstill: boolean = 0;
    let mut cameranoclip: boolean = 0;
    let mut camorbit: boolean = 0;
    let mut mo: *mut mobj_t = 0 as *mut mobj_t;
    let mut sign: *mut mobj_t = 0 as *mut mobj_t;
    let mut newsubsec: *mut subsector_t = 0 as *mut subsector_t;
    let mut f1: fixed_t = 0;
    let mut f2: fixed_t = 0;
    static mut camsideshift: [fixed_t; 2] = [0 as libc::c_int, 0 as libc::c_int];
    let mut shiftx: fixed_t = 0 as libc::c_int;
    let mut shifty: fixed_t = 0 as libc::c_int;
    if player.is_null() || ((*player).mo).is_null() {
        return true_0 as libc::c_int;
    }
    mo = (*player).mo;
    if (*player).playerstate as libc::c_uint == PST_REBORN as libc::c_int as libc::c_uint
    {
        P_CalcChasePostImg(player, thiscam);
        return true_0 as libc::c_int;
    }
    if (*player).exiting != 0 {
        if !((*mo).target).is_null()
            && (*(*mo).target).type_0 as libc::c_uint
                == MT_SIGN as libc::c_int as libc::c_uint
            && !((*(*mo).target).spawnpoint).is_null()
            && !(gametyperules & GTR_FRIENDLY as libc::c_int as uint32_t != 0
                && (netgame != 0 || multiplayer != 0) && cv_exitmove.value != 0)
            && !(maptol & TOL_2D as libc::c_int as uint32_t != 0
                || (*mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0)
        {
            sign = (*mo).target;
        } else if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_NIGHTSMODE as libc::c_int
            && !((*(*player).mo).state
                >= &mut *states
                    .as_mut_ptr()
                    .offset(S_PLAY_NIGHTS_TRANS1 as libc::c_int as isize) as *mut state_t
                && (*(*player).mo).state
                    <= &mut *states
                        .as_mut_ptr()
                        .offset(S_PLAY_NIGHTS_TRANS6 as libc::c_int as isize)
                        as *mut state_t)
        {
            P_CalcChasePostImg(player, thiscam);
            return true_0 as libc::c_int;
        }
    }
    cameranoclip = (!sign.is_null()
        || (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_NIGHTSMODE as libc::c_int
        || (*player).pflags as libc::c_uint & PF_NOCLIP as libc::c_int as libc::c_uint
            != 0
        || (*mo).flags
            & (MF_NOCLIP as libc::c_int | MF_NOCLIPHEIGHT as libc::c_int) as uint32_t
            != 0) as libc::c_int;
    if !((*player).climbing as libc::c_int != 0
        || (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_NIGHTSMODE as libc::c_int
        || (*player).playerstate as libc::c_uint
            == PST_DEAD as libc::c_int as libc::c_uint || tutorialmode != 0)
    {
        if (*player).spectator != 0 {
            return true_0 as libc::c_int;
        }
        if cv_chasecam.value == 0 && thiscam == &mut camera as *mut camera_t {
            return true_0 as libc::c_int;
        }
        if cv_chasecam2.value == 0 && thiscam == &mut camera2 as *mut camera_t {
            return true_0 as libc::c_int;
        }
    }
    if (*thiscam).chase == 0 && resetcalled == 0 {
        if player
            == &mut *players.as_mut_ptr().offset(consoleplayer as isize) as *mut player_t
        {
            focusangle = localangle;
        } else if player
            == &mut *players.as_mut_ptr().offset(secondarydisplayplayer as isize)
                as *mut player_t
        {
            focusangle = localangle2;
        } else {
            focusangle = (*mo).angle;
        }
        if thiscam == &mut camera as *mut camera_t {
            camrotate = cv_cam_rotate.value;
        } else if thiscam == &mut camera2 as *mut camera_t {
            camrotate = cv_cam2_rotate.value;
        } else {
            camrotate = 0 as libc::c_int;
        }
        (*thiscam)
            .angle = focusangle
            .wrapping_add(
                FixedAngle(camrotate * ((1 as libc::c_int) << 16 as libc::c_int)),
            );
        P_ResetCamera(player, thiscam);
        return true_0 as libc::c_int;
    }
    (*thiscam)
        .radius = FixedMul(
        20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
        (*mo).scale,
    );
    (*thiscam)
        .height = FixedMul(
        16 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
        (*mo).scale,
    );
    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_NIGHTSMODE as libc::c_int
    {
        focusangle = (*mo).angle;
        focusaiming = 0 as libc::c_int as angle_t;
    } else if !sign.is_null() {
        focusangle = (FixedAngle(
            ((*(*sign).spawnpoint).angle as libc::c_int) << 16 as libc::c_int,
        ))
            .wrapping_add(0x80000000 as libc::c_uint);
        focusaiming = 0 as libc::c_int as angle_t;
    } else if player
        == &mut *players.as_mut_ptr().offset(consoleplayer as isize) as *mut player_t
    {
        focusangle = localangle;
        focusaiming = localaiming as angle_t;
    } else if player
        == &mut *players.as_mut_ptr().offset(secondarydisplayplayer as isize)
            as *mut player_t
    {
        focusangle = localangle2;
        focusaiming = localaiming2 as angle_t;
    } else {
        focusangle = (((*player).cmd.angleturn as libc::c_int) << 16 as libc::c_int)
            as angle_t;
        focusaiming = (*player).aiming;
    }
    if P_CameraThinker(player, thiscam, resetcalled) != 0 {
        return true_0 as libc::c_int;
    }
    if thiscam == &mut camera as *mut camera_t {
        camspeed = cv_cam_speed.value;
        camstill = cv_cam_still.value;
        camorbit = cv_cam_orbit.value;
        camrotate = cv_cam_rotate.value;
        camdist = FixedMul(cv_cam_dist.value, (*mo).scale);
        camheight = FixedMul(cv_cam_height.value, (*mo).scale);
    } else {
        camspeed = cv_cam2_speed.value;
        camstill = cv_cam2_still.value;
        camorbit = cv_cam2_orbit.value;
        camrotate = cv_cam2_rotate.value;
        camdist = FixedMul(cv_cam2_dist.value, (*mo).scale);
        camheight = FixedMul(cv_cam2_height.value, (*mo).scale);
    }
    if !(maptol & TOL_2D as libc::c_int as uint32_t != 0
        || (*mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0)
        && !((*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_NIGHTSMODE as libc::c_int)
    {
        camheight = FixedMul(camheight, (*player).camerascale);
    }
    if (*mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        camheight += (*thiscam).height;
    }
    if maptol & TOL_2D as libc::c_int as uint32_t != 0
        || (*mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0
    {
        angle = 0x40000000 as libc::c_int as angle_t;
    } else if camstill != 0 || resetcalled != 0
        || (*player).playerstate as libc::c_uint
            == PST_DEAD as libc::c_int as libc::c_uint
    {
        angle = (*thiscam).angle;
    } else if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_NIGHTSMODE as libc::c_int
    {
        if (*player).pflags as libc::c_uint
            & PF_TRANSFERTOCLOSEST as libc::c_int as libc::c_uint != 0
            && !((*player).axis1).is_null() && !((*player).axis2).is_null()
        {
            angle = R_PointToAngle2(
                (*(*player).axis1).x,
                (*(*player).axis1).y,
                (*(*player).axis2).x,
                (*(*player).axis2).y,
            );
            angle = angle.wrapping_add(0x40000000 as libc::c_int as angle_t);
        } else if !((*mo).target).is_null() {
            if (*(*mo).target).flags2 & MF2_AMBUSH as libc::c_int as uint32_t != 0 {
                angle = R_PointToAngle2(
                    (*(*mo).target).x,
                    (*(*mo).target).y,
                    (*mo).x,
                    (*mo).y,
                );
            } else {
                angle = R_PointToAngle2(
                    (*mo).x,
                    (*mo).y,
                    (*(*mo).target).x,
                    (*(*mo).target).y,
                );
            }
        }
    } else if (if (*player).pflags as libc::c_uint
        & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
    {
        CS_LMAOGALOG as libc::c_int
    } else {
        0 as libc::c_int
    })
        | (if (*player).pflags as libc::c_uint
            & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
        {
            CS_STANDARD as libc::c_int
        } else {
            0 as libc::c_int
        }) == CS_LMAOGALOG as libc::c_int && sign.is_null()
    {
        angle = R_PointToAngle2((*thiscam).x, (*thiscam).y, (*mo).x, (*mo).y);
    } else if demoplayback != 0 {
        angle = focusangle;
        focusangle = R_PointToAngle2((*thiscam).x, (*thiscam).y, (*mo).x, (*mo).y);
        if player
            == &mut *players.as_mut_ptr().offset(consoleplayer as isize) as *mut player_t
        {
            if focusangle >= localangle {
                P_ForceLocalAngle(
                    player,
                    localangle
                        .wrapping_add(
                            (abs(focusangle.wrapping_sub(localangle) as libc::c_int)
                                >> 5 as libc::c_int) as angle_t,
                        ),
                );
            } else {
                P_ForceLocalAngle(
                    player,
                    localangle
                        .wrapping_sub(
                            (abs(focusangle.wrapping_sub(localangle) as libc::c_int)
                                >> 5 as libc::c_int) as angle_t,
                        ),
                );
            }
        }
    } else {
        angle = focusangle
            .wrapping_add(
                FixedAngle(camrotate * ((1 as libc::c_int) << 16 as libc::c_int)),
            );
    }
    if resetcalled == 0
        && (cv_analog[0 as libc::c_int as usize].value != 0 || demoplayback != 0)
        && (thiscam == &mut camera as *mut camera_t
            && t_cam_rotate != -(42 as libc::c_int)
            || thiscam == &mut camera2 as *mut camera_t
                && t_cam2_rotate != -(42 as libc::c_int))
    {
        angle = FixedAngle(camrotate * ((1 as libc::c_int) << 16 as libc::c_int));
        (*thiscam).angle = angle;
    }
    if (thiscam == &mut camera as *mut camera_t
        && cv_analog[0 as libc::c_int as usize].value != 0
        || thiscam != &mut camera as *mut camera_t
            && cv_analog[1 as libc::c_int as usize].value != 0 || demoplayback != 0)
        && sign.is_null() && objectplacing == 0
        && !(maptol & TOL_2D as libc::c_int as uint32_t != 0
            || (*mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0)
        && (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            != CR_NIGHTSMODE as libc::c_int && displayplayer == consoleplayer
    {
        if (*player).cmd.buttons as libc::c_int & BT_CAMRIGHT as libc::c_int != 0 {
            if thiscam == &mut camera as *mut camera_t {
                angle = angle
                    .wrapping_sub(
                        FixedAngle(
                            cv_cam_rotspeed.value
                                * ((1 as libc::c_int) << 16 as libc::c_int),
                        ),
                    );
            } else {
                angle = angle
                    .wrapping_sub(
                        FixedAngle(
                            cv_cam2_rotspeed.value
                                * ((1 as libc::c_int) << 16 as libc::c_int),
                        ),
                    );
            }
        } else if (*player).cmd.buttons as libc::c_int & BT_CAMLEFT as libc::c_int != 0 {
            if thiscam == &mut camera as *mut camera_t {
                angle = angle
                    .wrapping_add(
                        FixedAngle(
                            cv_cam_rotspeed.value
                                * ((1 as libc::c_int) << 16 as libc::c_int),
                        ),
                    );
            } else {
                angle = angle
                    .wrapping_add(
                        FixedAngle(
                            cv_cam2_rotspeed.value
                                * ((1 as libc::c_int) << 16 as libc::c_int),
                        ),
                    );
            }
        }
    }
    if (if cv_directionchar[((if thiscam == &mut camera as *mut camera_t {
            1 as libc::c_int
        } else {
            2 as libc::c_int
        }) - 1 as libc::c_int) as usize]
        .value == 3 as libc::c_int
    {
        CS_LMAOGALOG as libc::c_int
    } else {
        (if objectplacing == 0
            && cv_analog[((if thiscam == &mut camera as *mut camera_t {
                    1 as libc::c_int
                } else {
                    2 as libc::c_int
                }) - 1 as libc::c_int) as usize]
                .value != 0
        {
            CS_LMAOGALOG as libc::c_int
        } else {
            0 as libc::c_int
        })
            | (if cv_directionchar[((if thiscam == &mut camera as *mut camera_t {
                    1 as libc::c_int
                } else {
                    2 as libc::c_int
                }) - 1 as libc::c_int) as usize]
                .value != 0
            {
                CS_STANDARD as libc::c_int
            } else {
                0 as libc::c_int
            })
    }) == CS_SIMPLE as libc::c_int && sign.is_null()
    {
        let mut forplayer: uint8_t = (if thiscam == &mut camera as *mut camera_t {
            0 as libc::c_int
        } else {
            1 as libc::c_int
        }) as uint8_t;
        let mut shift: fixed_t = FixedMul(
            finesine[(((*(*player).mo).angle).wrapping_sub(angle) >> 19 as libc::c_int)
                as usize] >> 16 as libc::c_int - 16 as libc::c_int,
            cv_cam_shiftfacing[forplayer as usize].value,
        );
        if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_NIGHTSMODE as libc::c_int
        {
            let mut cos: fixed_t = *finecosine
                .offset(
                    (((*player).flyangle * 0xb60b61 as libc::c_int) as angle_t
                        >> 19 as libc::c_int) as isize,
                ) >> 16 as libc::c_int - 16 as libc::c_int;
            shift = FixedMul(
                shift,
                if ((1 as libc::c_int) << 16 as libc::c_int)
                    < (*player).speed * abs(cos) / 6000 as libc::c_int
                {
                    (1 as libc::c_int) << 16 as libc::c_int
                } else {
                    (*player).speed * abs(cos) / 6000 as libc::c_int
                },
            );
            shift
                += FixedMul(
                    camsideshift[forplayer as usize] - shift,
                    ((1 as libc::c_int) << 16 as libc::c_int)
                        - (camspeed >> 2 as libc::c_int),
                );
        } else if ticcmd_centerviewdown[(if thiscam == &mut camera as *mut camera_t {
            0 as libc::c_int
        } else {
            1 as libc::c_int
        }) as usize] != 0
        {
            shift = FixedMul(
                camsideshift[forplayer as usize],
                ((1 as libc::c_int) << 16 as libc::c_int) - camspeed,
            );
        } else {
            shift
                += FixedMul(
                    camsideshift[forplayer as usize] - shift,
                    ((1 as libc::c_int) << 16 as libc::c_int)
                        - (camspeed >> 3 as libc::c_int),
                );
        }
        camsideshift[forplayer as usize] = shift;
        shift = FixedMul(shift, camdist);
        shiftx = -FixedMul(
            finesine[(angle >> 19 as libc::c_int) as usize]
                >> 16 as libc::c_int - 16 as libc::c_int,
            shift,
        );
        shifty = FixedMul(
            *finecosine.offset((angle >> 19 as libc::c_int) as isize)
                >> 16 as libc::c_int - 16 as libc::c_int,
            shift,
        );
    }
    if maptol & TOL_2D as libc::c_int as uint32_t != 0
        || (*mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0
    {
        dist = (480 as libc::c_int) << 16 as libc::c_int;
    } else if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_NIGHTSMODE as libc::c_int
        || maptol & TOL_NIGHTS as libc::c_int as uint32_t != 0
            && !((*player).capsule).is_null()
            && (*(*player).capsule).reactiontime > 0 as libc::c_int
            && player
                == &mut *players
                    .as_mut_ptr()
                    .offset(
                        ((*(*player).capsule).reactiontime - 1 as libc::c_int) as isize,
                    ) as *mut player_t
    {
        dist = (320 as libc::c_int) << 16 as libc::c_int;
    } else {
        dist = camdist;
        if !sign.is_null() {
            camheight = (*mo).scale << 7 as libc::c_int;
            camspeed = ((1 as libc::c_int) << 16 as libc::c_int) / 12 as libc::c_int;
        } else if (if (*player).pflags as libc::c_uint
            & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
        {
            CS_LMAOGALOG as libc::c_int
        } else {
            0 as libc::c_int
        })
            | (if (*player).pflags as libc::c_uint
                & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
            {
                CS_STANDARD as libc::c_int
            } else {
                0 as libc::c_int
            }) == CS_LMAOGALOG as libc::c_int
        {
            dist = FixedMul(
                dist,
                6 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                    / 5 as libc::c_int,
            );
            camheight = FixedMul(
                camheight,
                6 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                    / 5 as libc::c_int,
            );
        }
        if (*player).climbing as libc::c_int != 0 || (*player).exiting != 0
            || (*player).playerstate as libc::c_uint
                == PST_DEAD as libc::c_int as libc::c_uint
            || ((*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
                == CR_ROPEHANG as libc::c_int
                || (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
                    == CR_GENERIC as libc::c_int
                || (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
                    == CR_MACESPIN as libc::c_int)
        {
            dist <<= 1 as libc::c_int;
        }
    }
    if sign.is_null()
        && !(maptol & TOL_2D as libc::c_int as uint32_t != 0
            || (*mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0)
        && !((*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_NIGHTSMODE as libc::c_int)
    {
        dist = FixedMul(dist, (*player).camerascale);
    }
    checkdist = dist;
    if checkdist < 128 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int) {
        checkdist = 128 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
    }
    if !(maptol & TOL_2D as libc::c_int as uint32_t != 0
        || (*mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0)
        && !((*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_NIGHTSMODE as libc::c_int)
    {
        if resetcalled == 0
            && (thiscam == &mut camera as *mut camera_t && cv_cam_adjust.value != 0
                || thiscam == &mut camera2 as *mut camera_t && cv_cam2_adjust.value != 0)
        {
            if (*mo).eflags as libc::c_int & MFE_JUSTHITFLOOR as libc::c_int == 0
                && P_IsObjectOnGround(mo) != 0
                && (*thiscam).ceilingz - (*thiscam).floorz
                    >= FixedMul((*player).height, (*(*player).mo).scale)
            {
                if (*mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
                    slopez
                        += if (*thiscam).ceilingz - (*mo).z < 0 as libc::c_int {
                            (*thiscam).ceilingz - (*mo).z
                        } else {
                            0 as libc::c_int
                        };
                } else {
                    slopez
                        += if (*thiscam).floorz - (*mo).z - (*mo).height
                            > 0 as libc::c_int
                        {
                            (*thiscam).floorz - (*mo).z - (*mo).height
                        } else {
                            0 as libc::c_int
                        };
                }
            }
        }
    }
    if camorbit != 0 {
        distxy = dist;
        distz = -FixedMul(
            dist,
            finesine[(focusaiming >> 19 as libc::c_int
                & (8192 as libc::c_int - 1 as libc::c_int) as angle_t) as usize]
                >> 16 as libc::c_int - 16 as libc::c_int,
        ) + slopez;
    } else {
        distxy = dist;
        distz = slopez;
    }
    if !sign.is_null() {
        x = (*sign).x
            - FixedMul(
                *finecosine
                    .offset(
                        (angle >> 19 as libc::c_int
                            & (8192 as libc::c_int - 1 as libc::c_int) as angle_t)
                            as isize,
                    ) >> 16 as libc::c_int - 16 as libc::c_int,
                distxy,
            );
        y = (*sign).y
            - FixedMul(
                finesine[(angle >> 19 as libc::c_int
                    & (8192 as libc::c_int - 1 as libc::c_int) as angle_t) as usize]
                    >> 16 as libc::c_int - 16 as libc::c_int,
                distxy,
            );
    } else {
        x = (*mo).x
            - FixedMul(
                *finecosine
                    .offset(
                        (angle >> 19 as libc::c_int
                            & (8192 as libc::c_int - 1 as libc::c_int) as angle_t)
                            as isize,
                    ) >> 16 as libc::c_int - 16 as libc::c_int,
                distxy,
            );
        y = (*mo).y
            - FixedMul(
                finesine[(angle >> 19 as libc::c_int
                    & (8192 as libc::c_int - 1 as libc::c_int) as angle_t) as usize]
                    >> 16 as libc::c_int - 16 as libc::c_int,
                distxy,
            );
    }
    pviewheight = FixedMul(
        41 as libc::c_int * (*player).height / 48 as libc::c_int,
        (*mo).scale,
    );
    if !sign.is_null() {
        if (*sign).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
            z = (*sign).ceilingz - pviewheight - camheight;
        } else {
            z = (*sign).floorz + pviewheight + camheight;
        }
    } else if (*mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        z = (*mo).z + (*mo).height - pviewheight - camheight + distz;
    } else {
        z = (*mo).z + pviewheight + camheight + distz;
    }
    newsubsec = R_PointInSubsectorOrNull(
        ((*mo).x >> 16 as libc::c_int) + ((*thiscam).x >> 16 as libc::c_int)
            << 16 as libc::c_int - 1 as libc::c_int,
        ((*mo).y >> 16 as libc::c_int) + ((*thiscam).y >> 16 as libc::c_int)
            << 16 as libc::c_int - 1 as libc::c_int,
    );
    if newsubsec.is_null() {
        newsubsec = (*thiscam).subsector;
    }
    if !newsubsec.is_null() {
        let mut myfloorz: fixed_t = 0;
        let mut myceilingz: fixed_t = 0;
        let mut midz: fixed_t = (*thiscam).z
            + ((*thiscam).z - (*mo).z) / 2 as libc::c_int;
        let mut midx: fixed_t = ((*mo).x >> 16 as libc::c_int)
            + ((*thiscam).x >> 16 as libc::c_int)
            << 16 as libc::c_int - 1 as libc::c_int;
        let mut midy: fixed_t = ((*mo).y >> 16 as libc::c_int)
            + ((*thiscam).y >> 16 as libc::c_int)
            << 16 as libc::c_int - 1 as libc::c_int;
        if (*(*newsubsec).sector).camsec >= 0 as libc::c_int {
            myfloorz = (*sectors.offset((*(*newsubsec).sector).camsec as isize))
                .floorheight;
            myceilingz = (*sectors.offset((*(*newsubsec).sector).camsec as isize))
                .ceilingheight;
        } else if (*(*newsubsec).sector).heightsec >= 0 as libc::c_int {
            myfloorz = (*sectors.offset((*(*newsubsec).sector).heightsec as isize))
                .floorheight;
            myceilingz = (*sectors.offset((*(*newsubsec).sector).heightsec as isize))
                .ceilingheight;
        } else {
            myfloorz = P_CameraFloorZ(
                thiscam,
                (*newsubsec).sector,
                0 as *mut sector_t,
                midx,
                midy,
                0 as *mut line_t,
                false_0 as libc::c_int,
                false_0 as libc::c_int,
            );
            myceilingz = P_CameraCeilingZ(
                thiscam,
                (*newsubsec).sector,
                0 as *mut sector_t,
                midx,
                midy,
                0 as *mut line_t,
                true_0 as libc::c_int,
                false_0 as libc::c_int,
            );
        }
        if !((*(*newsubsec).sector).ffloors).is_null() {
            let mut rover: *mut ffloor_t = 0 as *mut ffloor_t;
            let mut delta1: fixed_t = 0;
            let mut delta2: fixed_t = 0;
            let mut thingtop: int32_t = midz + (*thiscam).height;
            rover = (*(*newsubsec).sector).ffloors;
            while !rover.is_null() {
                let mut topheight: fixed_t = 0;
                let mut bottomheight: fixed_t = 0;
                if !((*rover).fofflags as libc::c_uint
                    & FOF_BLOCKOTHERS as libc::c_int as libc::c_uint == 0
                    || (*rover).fofflags as libc::c_uint
                        & FOF_EXISTS as libc::c_int as libc::c_uint == 0
                    || (*rover).fofflags as libc::c_uint
                        & FOF_RENDERALL as libc::c_int as libc::c_uint == 0
                    || (*(*(*rover).master).frontsector).flags as libc::c_uint
                        & MSF_NOCLIPCAMERA as libc::c_int as libc::c_uint != 0)
                {
                    topheight = P_CameraCeilingZ(
                        thiscam,
                        sectors.offset((*rover).secnum as isize),
                        (*newsubsec).sector,
                        midx,
                        midy,
                        0 as *mut line_t,
                        false_0 as libc::c_int,
                        false_0 as libc::c_int,
                    );
                    bottomheight = P_CameraFloorZ(
                        thiscam,
                        sectors.offset((*rover).secnum as isize),
                        (*newsubsec).sector,
                        midx,
                        midy,
                        0 as *mut line_t,
                        true_0 as libc::c_int,
                        false_0 as libc::c_int,
                    );
                    delta1 = midz
                        - (bottomheight + (topheight - bottomheight) / 2 as libc::c_int);
                    delta2 = thingtop
                        - (bottomheight + (topheight - bottomheight) / 2 as libc::c_int);
                    if topheight > myfloorz && abs(delta1) < abs(delta2) {
                        myfloorz = topheight;
                    }
                    if bottomheight < myceilingz && abs(delta1) >= abs(delta2) {
                        myceilingz = bottomheight;
                    }
                }
                rover = (*rover).next;
            }
        }
        let mut xl: int32_t = 0;
        let mut xh: int32_t = 0;
        let mut yl: int32_t = 0;
        let mut yh: int32_t = 0;
        let mut bx: int32_t = 0;
        let mut by: int32_t = 0;
        validcount = validcount.wrapping_add(1);
        validcount;
        xl = ((tmbbox[BOXLEFT as libc::c_int as usize] - bmaporgx) as libc::c_uint
            >> 16 as libc::c_int + 7 as libc::c_int) as int32_t;
        xh = ((tmbbox[BOXRIGHT as libc::c_int as usize] - bmaporgx) as libc::c_uint
            >> 16 as libc::c_int + 7 as libc::c_int) as int32_t;
        yl = ((tmbbox[BOXBOTTOM as libc::c_int as usize] - bmaporgy) as libc::c_uint
            >> 16 as libc::c_int + 7 as libc::c_int) as int32_t;
        yh = ((tmbbox[BOXTOP as libc::c_int as usize] - bmaporgy) as libc::c_uint
            >> 16 as libc::c_int + 7 as libc::c_int) as int32_t;
        if xl > xh {
            xl = 0 as libc::c_int;
        }
        if yl > yh {
            yl = 0 as libc::c_int;
        }
        by = yl;
        while by <= yh {
            bx = xl;
            while bx <= xh {
                let mut offset: int32_t = 0;
                let mut plink: *mut polymaplink_t = 0 as *mut polymaplink_t;
                if !(bx < 0 as libc::c_int || by < 0 as libc::c_int || bx >= bmapwidth
                    || by >= bmapheight)
                {
                    offset = by * bmapwidth + bx;
                    plink = *polyblocklinks.offset(offset as isize);
                    while !plink.is_null() {
                        let mut po: *mut polyobj_t = (*plink).po;
                        if (*po).validcount != validcount {
                            let mut polysec: *mut sector_t = 0 as *mut sector_t;
                            let mut delta1_0: fixed_t = 0;
                            let mut delta2_0: fixed_t = 0;
                            let mut thingtop_0: fixed_t = 0;
                            let mut polytop: fixed_t = 0;
                            let mut polybottom: fixed_t = 0;
                            (*po).validcount = validcount;
                            if P_PointInsidePolyobj(po, x, y) == 0
                                || (*po).flags & POF_SOLID as libc::c_int == 0
                            {
                                plink = (*plink).link.next as *mut polymaplink_t;
                                continue;
                            } else {
                                polysec = (**((*po).lines)
                                    .offset(0 as libc::c_int as isize))
                                    .backsector;
                                if (*polysec).flags as libc::c_uint
                                    & MSF_NOCLIPCAMERA as libc::c_int as libc::c_uint != 0
                                {
                                    plink = (*plink).link.next as *mut polymaplink_t;
                                    continue;
                                } else {
                                    if (*po).flags & POF_CLIPPLANES as libc::c_int != 0 {
                                        polytop = (*polysec).ceilingheight;
                                        polybottom = (*polysec).floorheight;
                                    } else {
                                        polytop = 2147483647 as libc::c_int;
                                        polybottom = -(2147483647 as libc::c_int)
                                            - 1 as libc::c_int;
                                    }
                                    thingtop_0 = midz + (*thiscam).height;
                                    delta1_0 = midz
                                        - (polybottom + (polytop - polybottom) / 2 as libc::c_int);
                                    delta2_0 = thingtop_0
                                        - (polybottom + (polytop - polybottom) / 2 as libc::c_int);
                                    if polytop > myfloorz && abs(delta1_0) < abs(delta2_0) {
                                        myfloorz = polytop;
                                    }
                                    if polybottom < myceilingz && abs(delta1_0) >= abs(delta2_0)
                                    {
                                        myceilingz = polybottom;
                                    }
                                }
                            }
                        }
                        plink = (*plink).link.next as *mut polymaplink_t;
                    }
                }
                bx += 1;
                bx;
            }
            by += 1;
            by;
        }
        if myceilingz <= myfloorz + (*thiscam).height && resetcalled == 0
            && cameranoclip == 0
        {
            P_ResetCamera(player, thiscam);
            return true_0 as libc::c_int;
        }
        if myceilingz != myfloorz && myceilingz - (*thiscam).height < z {
            z = myceilingz - (*thiscam).height
                - FixedMul(
                    11 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    (*mo).scale,
                );
        }
        if !((*(*newsubsec).sector).ffloors).is_null() && cameranoclip == 0 {
            let mut rover_0: *mut ffloor_t = 0 as *mut ffloor_t;
            rover_0 = (*(*newsubsec).sector).ffloors;
            while !rover_0.is_null() {
                let mut topheight_0: fixed_t = 0;
                let mut bottomheight_0: fixed_t = 0;
                if (*rover_0).fofflags as libc::c_uint
                    & FOF_BLOCKOTHERS as libc::c_int as libc::c_uint != 0
                    && (*rover_0).fofflags as libc::c_uint
                        & FOF_RENDERALL as libc::c_int as libc::c_uint != 0
                    && (*rover_0).fofflags as libc::c_uint
                        & FOF_EXISTS as libc::c_int as libc::c_uint != 0
                    && (*(*(*rover_0).master).frontsector).flags as libc::c_uint
                        & MSF_NOCLIPCAMERA as libc::c_int as libc::c_uint == 0
                {
                    topheight_0 = P_CameraCeilingZ(
                        thiscam,
                        sectors.offset((*rover_0).secnum as isize),
                        (*newsubsec).sector,
                        midx,
                        midy,
                        0 as *mut line_t,
                        false_0 as libc::c_int,
                        false_0 as libc::c_int,
                    );
                    bottomheight_0 = P_CameraFloorZ(
                        thiscam,
                        sectors.offset((*rover_0).secnum as isize),
                        (*newsubsec).sector,
                        midx,
                        midy,
                        0 as *mut line_t,
                        true_0 as libc::c_int,
                        false_0 as libc::c_int,
                    );
                    if bottomheight_0 - (*thiscam).height < z && midz < bottomheight_0 {
                        z = bottomheight_0 - (*thiscam).height
                            - FixedMul(
                                11 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                (*mo).scale,
                            );
                    } else if topheight_0 + (*thiscam).height > z && midz > topheight_0 {
                        z = topheight_0;
                    }
                    if (*mo).z >= topheight_0 && midz < bottomheight_0
                        || (*mo).z < bottomheight_0
                            && (*mo).z + (*mo).height < topheight_0
                            && midz >= topheight_0
                    {
                        if resetcalled == 0 {
                            P_ResetCamera(player, thiscam);
                        }
                        return true_0 as libc::c_int;
                    }
                }
                rover_0 = (*rover_0).next;
            }
        }
    }
    if (*mo).type_0 as libc::c_uint == MT_EGGTRAP as libc::c_int as libc::c_uint {
        z = (*mo).z + 128 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
            + pviewheight + camheight;
    }
    if (*thiscam).z < (*thiscam).floorz && cameranoclip == 0 {
        (*thiscam).z = (*thiscam).floorz;
    }
    dist = FixedMul((64 as libc::c_int) << 16 as libc::c_int, (*mo).scale);
    if !sign.is_null() {
        viewpointx = (*sign).x
            + FixedMul(
                *finecosine
                    .offset(
                        (angle >> 19 as libc::c_int
                            & (8192 as libc::c_int - 1 as libc::c_int) as angle_t)
                            as isize,
                    ) >> 16 as libc::c_int - 16 as libc::c_int,
                dist,
            );
        viewpointy = (*sign).y
            + FixedMul(
                finesine[(angle >> 19 as libc::c_int
                    & (8192 as libc::c_int - 1 as libc::c_int) as angle_t) as usize]
                    >> 16 as libc::c_int - 16 as libc::c_int,
                dist,
            );
    } else {
        viewpointx = (*mo).x + shiftx
            + FixedMul(
                *finecosine
                    .offset(
                        (angle >> 19 as libc::c_int
                            & (8192 as libc::c_int - 1 as libc::c_int) as angle_t)
                            as isize,
                    ) >> 16 as libc::c_int - 16 as libc::c_int,
                dist,
            );
        viewpointy = (*mo).y + shifty
            + FixedMul(
                finesine[(angle >> 19 as libc::c_int
                    & (8192 as libc::c_int - 1 as libc::c_int) as angle_t) as usize]
                    >> 16 as libc::c_int - 16 as libc::c_int,
                dist,
            );
    }
    if camstill == 0 && resetcalled == 0 && paused == 0 {
        (*thiscam)
            .angle = R_PointToAngle2((*thiscam).x, (*thiscam).y, viewpointx, viewpointy);
    }
    if maptol & TOL_2D as libc::c_int as uint32_t != 0
        || (*mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0
    {
        (*thiscam).momx = x - (*thiscam).x;
        (*thiscam).momy = y - (*thiscam).y;
        (*thiscam).momz = z - (*thiscam).z;
    } else {
        (*thiscam).momx = FixedMul(x - (*thiscam).x, camspeed);
        (*thiscam).momy = FixedMul(y - (*thiscam).y, camspeed);
        if (*(*(*thiscam).subsector).sector).damagetype as libc::c_int
            == SD_DEATHPITTILT as libc::c_int
            && (*thiscam).z
                < (*(*(*thiscam).subsector).sector).floorheight
                    + 256 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
            && FixedMul(z - (*thiscam).z, camspeed) < 0 as libc::c_int
        {
            (*thiscam).momz = 0 as libc::c_int;
        } else {
            (*thiscam).momz = FixedMul(z - (*thiscam).z, camspeed);
        }
        (*thiscam).momx += FixedMul(shiftx, camspeed);
        (*thiscam).momy += FixedMul(shifty, camspeed);
    }
    f1 = viewpointx - (*thiscam).x;
    f2 = viewpointy - (*thiscam).y;
    dist = FixedHypot(f1, f2);
    if (*mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        angle = R_PointToAngle2(
            0 as libc::c_int,
            (*thiscam).z + (*thiscam).height,
            dist,
            (if !sign.is_null() { (*sign).ceilingz } else { (*mo).z + (*mo).height })
                - FixedMul((*player).height, (*(*player).mo).scale),
        );
    } else {
        angle = R_PointToAngle2(
            0 as libc::c_int,
            (*thiscam).z,
            dist,
            (if !sign.is_null() { (*sign).floorz } else { (*mo).z })
                + FixedMul((*player).height, (*(*player).mo).scale),
        );
    }
    if (*player).playerstate as libc::c_uint != PST_DEAD as libc::c_int as libc::c_uint {
        angle = angle
            .wrapping_add(
                if focusaiming < 0x80000000 as libc::c_uint {
                    focusaiming / 2 as libc::c_int as angle_t
                } else {
                    InvAngle(InvAngle(focusaiming) / 2 as libc::c_int as angle_t)
                },
            );
    }
    if maptol & TOL_2D as libc::c_int as uint32_t != 0
        || (*mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0 || camstill == 0
    {
        G_ClipAimingPitch(&mut angle as *mut angle_t as *mut int32_t);
        dist = ((*thiscam).aiming).wrapping_sub(angle) as fixed_t;
        (*thiscam)
            .aiming = ((*thiscam).aiming)
            .wrapping_sub((dist >> 3 as libc::c_int) as angle_t);
    }
    if !(multiplayer != 0 || netgame != 0) && splitscreen == 0 {
        let mut vx: fixed_t = (*thiscam).x;
        let mut vy: fixed_t = (*thiscam).y;
        let mut vz: fixed_t = (*thiscam).z + (*thiscam).height / 2 as libc::c_int;
        if (*player).awayviewtics != 0 && !((*player).awayviewmobj).is_null()
            && P_MobjWasRemoved((*player).awayviewmobj) == 0
        {
            vx = (*(*player).awayviewmobj).x;
            vy = (*(*player).awayviewmobj).y;
            vz = (*(*player).awayviewmobj).z
                + (*(*player).awayviewmobj).height / 2 as libc::c_int;
        }
        if P_AproxDistance(
            P_AproxDistance(vx - (*mo).x, vy - (*mo).y),
            vz - ((*mo).z + (*mo).height / 2 as libc::c_int),
        )
            < FixedMul(
                48 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*mo).scale,
            )
        {
            (*mo).flags2 |= MF2_SHADOW as libc::c_int as uint32_t;
        } else {
            (*mo).flags2 &= !(MF2_SHADOW as libc::c_int) as uint32_t;
        }
    } else {
        (*mo).flags2 &= !(MF2_SHADOW as libc::c_int) as uint32_t;
    }
    if resetcalled == 0
        && ((*player).playerstate as libc::c_uint
            == PST_DEAD as libc::c_int as libc::c_uint
            || (*player).playerstate as libc::c_uint
                == PST_REBORN as libc::c_int as libc::c_uint)
    {
        (*thiscam).momz = 0 as libc::c_int;
        if (*mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int == 0
            && (*thiscam).aiming < 0xf0000000 as libc::c_uint
            && (*thiscam).aiming > 0x80000000 as libc::c_uint
        {
            (*thiscam).aiming = 0xf0000000 as libc::c_uint;
        } else if (*mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0
            && (*thiscam).aiming > 0x10000000 as libc::c_int as angle_t
            && (*thiscam).aiming < 0x80000000 as libc::c_uint
        {
            (*thiscam).aiming = 0x10000000 as libc::c_int as angle_t;
        }
    }
    return (x == (*thiscam).x && y == (*thiscam).y && z == (*thiscam).z
        && angle == (*thiscam).aiming) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_SpectatorJoinGame(mut player: *mut player_t) -> boolean {
    if G_CoopGametype() == 0 && cv_allowteamchange.value == 0 {
        if P_IsLocalPlayer(player) != 0 {
            CONS_Printf(
                b"Server does not allow team change.\n\0" as *const u8
                    as *const libc::c_char,
            );
        }
        (*player)
            .powers[pw_flashing as libc::c_int
            as usize] = ((*player).powers[pw_flashing as libc::c_int as usize]
            as libc::c_int + 2 as libc::c_int * 35 as libc::c_int) as uint16_t;
    } else if G_GametypeHasTeams() != 0 {
        let mut changeto: int32_t = 0 as libc::c_int;
        let mut z: int32_t = 0;
        let mut numplayersred: int32_t = 0 as libc::c_int;
        let mut numplayersblue: int32_t = 0 as libc::c_int;
        z = 0 as libc::c_int;
        while z < 32 as libc::c_int {
            if playeringame[z as usize] != 0 {
                if players[z as usize].ctfteam == 1 as libc::c_int {
                    numplayersred += 1;
                    numplayersred;
                } else if players[z as usize].ctfteam == 2 as libc::c_int {
                    numplayersblue += 1;
                    numplayersblue;
                }
            }
            z += 1;
            z;
        }
        if numplayersblue > numplayersred {
            changeto = 1 as libc::c_int;
        } else if numplayersred > numplayersblue {
            changeto = 2 as libc::c_int;
        } else if bluescore > redscore {
            changeto = 1 as libc::c_int;
        } else if redscore > bluescore {
            changeto = 2 as libc::c_int;
        } else {
            changeto = (P_RandomFixed() & 1 as libc::c_int) + 1 as libc::c_int;
        }
        if LUA_HookTeamSwitch(
            player,
            changeto,
            true_0 as libc::c_int,
            false_0 as libc::c_int,
            false_0 as libc::c_int,
        ) == 0
        {
            return false_0 as libc::c_int;
        }
        if !((*player).mo).is_null() {
            P_RemoveMobj((*player).mo);
            (*player).mo = 0 as *mut mobj_t;
        }
        (*player).spectator = false_0 as libc::c_int;
        (*player).ctfteam = changeto;
        (*player).playerstate = PST_REBORN;
        if P_IsLocalPlayer(player) != 0 && displayplayer != consoleplayer {
            LUA_HookViewpointSwitch(
                player,
                &mut *players.as_mut_ptr().offset(consoleplayer as isize),
                true_0 as libc::c_int,
            );
            displayplayer = consoleplayer;
        }
        if changeto == 1 as libc::c_int {
            CONS_Printf(
                b"%s switched to the %c%s%c.\n\0" as *const u8 as *const libc::c_char,
                (player_names[player.offset_from(players.as_mut_ptr()) as libc::c_long
                    as usize])
                    .as_mut_ptr(),
                -123i32,
                b"Red team\0" as *const u8 as *const libc::c_char,
                -128i32,
            );
        } else if changeto == 2 as libc::c_int {
            CONS_Printf(
                b"%s switched to the %c%s%c.\n\0" as *const u8 as *const libc::c_char,
                (player_names[player.offset_from(players.as_mut_ptr()) as libc::c_long
                    as usize])
                    .as_mut_ptr(),
                -124i32,
                b"Blue team\0" as *const u8 as *const libc::c_char,
                -128i32,
            );
        }
        return true_0 as libc::c_int;
    } else if !(gametyperules & GTR_HIDEFROZEN as libc::c_int as uint32_t != 0
        && leveltime > hidetime * 35 as libc::c_int as tic_t)
    {
        if LUA_HookTeamSwitch(
            player,
            3 as libc::c_int,
            true_0 as libc::c_int,
            false_0 as libc::c_int,
            false_0 as libc::c_int,
        ) == 0
        {
            return false_0 as libc::c_int;
        }
        if !((*player).mo).is_null() {
            P_RemoveMobj((*player).mo);
            (*player).mo = 0 as *mut mobj_t;
        }
        (*player).outofcoop = false_0 as libc::c_int;
        (*player).spectator = (*player).outofcoop;
        (*player).playerstate = PST_REBORN;
        if gametyperules
            & (GTR_TAG as libc::c_int | GTR_HIDEFROZEN as libc::c_int) as uint32_t
            == GTR_TAG as libc::c_int as uint32_t
        {
            if leveltime > hidetime * 35 as libc::c_int as tic_t {
                CONS_Printf(
                    b"%s is now IT!\n\0" as *const u8 as *const libc::c_char,
                    (player_names[player.offset_from(players.as_mut_ptr())
                        as libc::c_long as usize])
                        .as_mut_ptr(),
                );
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        | PF_TAGIT as libc::c_int as libc::c_uint,
                );
            }
            P_CheckSurvivors();
        }
        if P_IsLocalPlayer(player) != 0 && displayplayer != consoleplayer {
            LUA_HookViewpointSwitch(
                player,
                &mut *players.as_mut_ptr().offset(consoleplayer as isize),
                true_0 as libc::c_int,
            );
            displayplayer = consoleplayer;
        }
        if G_CoopGametype() == 0 {
            CONS_Printf(
                b"%s entered the game.\n\0" as *const u8 as *const libc::c_char,
                (player_names[player.offset_from(players.as_mut_ptr()) as libc::c_long
                    as usize])
                    .as_mut_ptr(),
            );
        }
        return true_0 as libc::c_int;
    } else {
        if P_IsLocalPlayer(player) != 0 {
            CONS_Printf(
                b"You must wait until next round to enter the game.\n\0" as *const u8
                    as *const libc::c_char,
            );
        }
        (*player)
            .powers[pw_flashing as libc::c_int
            as usize] = ((*player).powers[pw_flashing as libc::c_int as usize]
            as libc::c_int + 2 as libc::c_int * 35 as libc::c_int) as uint16_t;
    }
    return false_0 as libc::c_int;
}
unsafe extern "C" fn P_CalcPostImg(mut player: *mut player_t) {
    let mut sector: *mut sector_t = (*(*(*player).mo).subsector).sector;
    let mut type_0: *mut postimg_t = 0 as *mut postimg_t;
    let mut param: *mut int32_t = 0 as *mut int32_t;
    let mut pviewheight: fixed_t = 0;
    if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        pviewheight = (*(*player).mo).z + (*(*player).mo).height - (*player).viewheight;
    } else {
        pviewheight = (*(*player).mo).z + (*player).viewheight;
    }
    if (*player).awayviewtics != 0 && !((*player).awayviewmobj).is_null()
        && P_MobjWasRemoved((*player).awayviewmobj) == 0
    {
        sector = (*(*(*player).awayviewmobj).subsector).sector;
        pviewheight = (*(*player).awayviewmobj).z
            + 20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
    }
    if splitscreen != 0
        && player
            == &mut *players.as_mut_ptr().offset(secondarydisplayplayer as isize)
                as *mut player_t
    {
        type_0 = &mut postimgtype2;
        param = &mut postimgparam2;
    } else {
        type_0 = &mut postimgtype;
        param = &mut postimgparam;
    }
    if (*sector).flags as libc::c_uint & MSF_HEATWAVE as libc::c_int as libc::c_uint != 0
    {
        *type_0 = postimg_heat;
    } else if !((*sector).ffloors).is_null() {
        let mut rover: *mut ffloor_t = 0 as *mut ffloor_t;
        let mut topheight: fixed_t = 0;
        let mut bottomheight: fixed_t = 0;
        rover = (*sector).ffloors;
        while !rover.is_null() {
            if !((*rover).fofflags as libc::c_uint
                & FOF_EXISTS as libc::c_int as libc::c_uint == 0)
            {
                topheight = P_GetFFloorTopZAt(
                    rover,
                    (*(*player).mo).x,
                    (*(*player).mo).y,
                );
                bottomheight = P_GetFFloorBottomZAt(
                    rover,
                    (*(*player).mo).x,
                    (*(*player).mo).y,
                );
                if !(pviewheight >= topheight || pviewheight <= bottomheight) {
                    if (*(*(*rover).master).frontsector).flags as libc::c_uint
                        & MSF_HEATWAVE as libc::c_int as libc::c_uint != 0
                    {
                        *type_0 = postimg_heat;
                        break;
                    }
                }
            }
            rover = (*rover).next;
        }
    }
    if !((*sector).ffloors).is_null() {
        let mut rover_0: *mut ffloor_t = 0 as *mut ffloor_t;
        let mut topheight_0: fixed_t = 0;
        let mut bottomheight_0: fixed_t = 0;
        rover_0 = (*sector).ffloors;
        while !rover_0.is_null() {
            if !((*rover_0).fofflags as libc::c_uint
                & FOF_EXISTS as libc::c_int as libc::c_uint == 0
                || (*rover_0).fofflags as libc::c_uint
                    & FOF_SWIMMABLE as libc::c_int as libc::c_uint == 0
                || (*rover_0).fofflags as libc::c_uint
                    & FOF_BLOCKPLAYER as libc::c_int as libc::c_uint != 0)
            {
                topheight_0 = P_GetFFloorTopZAt(
                    rover_0,
                    (*(*player).mo).x,
                    (*(*player).mo).y,
                );
                bottomheight_0 = P_GetFFloorBottomZAt(
                    rover_0,
                    (*(*player).mo).x,
                    (*(*player).mo).y,
                );
                if !(pviewheight >= topheight_0 || pviewheight <= bottomheight_0) {
                    *type_0 = postimg_water;
                }
            }
            rover_0 = (*rover_0).next;
        }
    }
    if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        *type_0 = postimg_flip;
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_DoPityCheck(mut player: *mut player_t) {
    if (*player).spectator != 0
        || gametyperules & GTR_PITYSHIELD as libc::c_int as uint32_t == 0
    {
        return;
    }
    if ((*player).pity as libc::c_int >= 3 as libc::c_int
        || ((*player).pity as libc::c_int) < 0 as libc::c_int)
        && (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
            == SH_NONE as libc::c_int
    {
        P_SwitchShield(player, SH_PITY as libc::c_int as uint16_t);
        if (*player).pity as libc::c_int > 0 as libc::c_int {
            S_StartSound(
                (*player).mo as *const libc::c_void,
                mobjinfo[MT_PITY_ICON as libc::c_int as usize].seesound,
            );
        }
        (*player).pity = 0 as libc::c_int as int8_t;
    }
}
unsafe extern "C" fn P_GetMinecartSector(
    mut x: fixed_t,
    mut y: fixed_t,
    mut z: fixed_t,
    mut nz: *mut fixed_t,
) -> *mut sector_t {
    let mut sec: *mut sector_t = (*R_PointInSubsector(x, y)).sector;
    if (*sec).ceilingheight - (*sec).floorheight
        < 64 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
    {
        return 0 as *mut sector_t;
    }
    if !((*sec).ffloors).is_null() {
        let mut rover: *mut ffloor_t = 0 as *mut ffloor_t;
        rover = (*sec).ffloors;
        while !rover.is_null() {
            if !((*rover).fofflags as libc::c_uint
                & (FOF_EXISTS as libc::c_int | FOF_BLOCKOTHERS as libc::c_int)
                    as libc::c_uint == 0)
            {
                *nz = P_GetFFloorTopZAt(rover, x, y);
                if abs(z - *nz)
                    <= 56 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                {
                    sec = &mut *sectors.offset((*rover).secnum as isize)
                        as *mut sector_t;
                    return sec;
                }
            }
            rover = (*rover).next;
        }
    }
    *nz = P_GetSectorFloorZAt(sec, x, y);
    if abs(z - *nz) > 56 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int) {
        return 0 as *mut sector_t;
    }
    return sec;
}
unsafe extern "C" fn P_GetMinecartSpecialLine(mut sec: *mut sector_t) -> int32_t {
    let mut line: int32_t = -(1 as libc::c_int);
    let mut i: size_t = 0;
    if sec.is_null() {
        return line;
    }
    i = 0 as libc::c_int as size_t;
    while i < (*sec).tags.count as size_t {
        if *((*sec).tags.tags).offset(i as isize) as libc::c_int != 0 as libc::c_int {
            line = Tag_FindLineSpecial(
                16 as libc::c_int as int16_t,
                *((*sec).tags.tags).offset(i as isize),
            );
        }
        i = i.wrapping_add(1);
        i;
    }
    i = 0 as libc::c_int as size_t;
    while i < (*sec).linecount {
        let mut li: *mut line_t = *((*sec).lines).offset(i as isize);
        if Tag_Find(&mut (*li).tags, 0 as libc::c_int as mtag_t) != 0
            && (*li).special as libc::c_int == 16 as libc::c_int
            && (*li).frontsector == sec
        {
            line = li.offset_from(lines) as libc::c_long as int32_t;
        }
        i = i.wrapping_add(1);
        i;
    }
    return line;
}
unsafe extern "C" fn P_GetAxis(mut num: int32_t) -> *mut mobj_t {
    let mut th: *mut thinker_t = 0 as *mut thinker_t;
    let mut mobj: *mut mobj_t = 0 as *mut mobj_t;
    th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
    while th
        != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
            as *mut thinker_t
    {
        if !((*th).function.acp1
            == ::core::mem::transmute::<
                Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                actionf_p1,
            >(
                Some(
                    P_RemoveThinkerDelayed as unsafe extern "C" fn(*mut thinker_t) -> (),
                ),
            ))
        {
            mobj = th as *mut mobj_t;
            if (*mobj).flags2 & MF2_AXIS as libc::c_int as uint32_t == 0 {
                break;
            }
            if !((*mobj).health != num) {
                return mobj;
            }
        }
        th = (*th).next;
    }
    CONS_Alert(
        CONS_WARNING,
        b"P_GetAxis: Track segment %d is missing!\n\0" as *const u8
            as *const libc::c_char,
        num,
    );
    return 0 as *mut mobj_t;
}
unsafe extern "C" fn P_GetAxisPosition(
    mut x: fixed_t,
    mut y: fixed_t,
    mut amo: *mut mobj_t,
    mut newx: *mut fixed_t,
    mut newy: *mut fixed_t,
    mut targetangle: *mut angle_t,
    mut grind: *mut angle_t,
) {
    let mut ax: fixed_t = (*amo).x;
    let mut ay: fixed_t = (*amo).y;
    let mut ang: angle_t = 0;
    let mut gr: angle_t = 0 as libc::c_int as angle_t;
    if (*amo).type_0 as libc::c_uint
        == MT_AXISTRANSFERLINE as libc::c_int as libc::c_uint
    {
        ang = (*amo).angle;
        if ang == 0x40000000 as libc::c_int as angle_t
            || ang == 0xc0000000 as libc::c_uint
        {
            x = ax;
        } else if ang == 0 as libc::c_int as angle_t || ang == 0x80000000 as libc::c_uint
        {
            y = ay;
        } else {
            let mut distance: fixed_t = R_PointToDist2(ax, ay, x, y);
            let mut fad: angle_t = (R_PointToAngle2(ax, ay, x, y)).wrapping_sub(ang)
                >> 19 as libc::c_int
                & (8192 as libc::c_int - 1 as libc::c_int) as angle_t;
            let mut cosine: fixed_t = *finecosine.offset(fad as isize)
                >> 16 as libc::c_int - 16 as libc::c_int;
            let mut fa: angle_t = ang >> 19 as libc::c_int
                & (8192 as libc::c_int - 1 as libc::c_int) as angle_t;
            distance = FixedMul(distance, cosine);
            x = ax
                + FixedMul(
                    distance,
                    *finecosine.offset(fa as isize)
                        >> 16 as libc::c_int - 16 as libc::c_int,
                );
            y = ay
                + FixedMul(
                    distance,
                    finesine[fa as usize] >> 16 as libc::c_int - 16 as libc::c_int,
                );
        }
    } else {
        let mut rad: fixed_t = (*amo).radius;
        let mut distfactor: fixed_t = FixedDiv(rad, R_PointToDist2(ax, ay, x, y));
        gr = R_PointToAngle2(ax, ay, x, y);
        ang = gr.wrapping_add(0x40000000 as libc::c_int as angle_t);
        x = ax + FixedMul(x - ax, distfactor);
        y = ay + FixedMul(y - ay, distfactor);
    }
    *newx = x;
    *newy = y;
    *targetangle = ang;
    *grind = gr;
}
unsafe extern "C" fn P_SpawnSparks(mut mo: *mut mobj_t, mut maindir: angle_t) {
    let mut fa: angle_t = (*mo).angle >> 19 as libc::c_int
        & (8192 as libc::c_int - 1 as libc::c_int) as angle_t;
    let mut c: fixed_t = FixedMul(
        *finecosine.offset(fa as isize) >> 16 as libc::c_int - 16 as libc::c_int,
        (*mo).radius,
    );
    let mut s: fixed_t = FixedMul(
        finesine[fa as usize] >> 16 as libc::c_int - 16 as libc::c_int,
        (*mo).radius,
    );
    let mut spark: *mut mobj_t = 0 as *mut mobj_t;
    let mut b1: int8_t = (if leveltime & 1 as libc::c_int as tic_t != 0 {
        1 as libc::c_int
    } else {
        -(1 as libc::c_int)
    }) as int8_t;
    let mut b2: int8_t = (if leveltime & 2 as libc::c_int as tic_t != 0 {
        1 as libc::c_int
    } else {
        -(1 as libc::c_int)
    }) as int8_t;
    let mut r1: fixed_t = ((1 as libc::c_int) << 16 as libc::c_int)
        * P_RandomRange(-(1 as libc::c_int), 1 as libc::c_int);
    let mut r2: fixed_t = ((1 as libc::c_int) << 16 as libc::c_int)
        * P_RandomRange(-(1 as libc::c_int), 1 as libc::c_int);
    let mut r3: fixed_t = ((1 as libc::c_int) << 16 as libc::c_int)
        * P_RandomRange(-(1 as libc::c_int), 1 as libc::c_int);
    let mut fm: fixed_t = (maindir >> 19 as libc::c_int
        & (8192 as libc::c_int - 1 as libc::c_int) as angle_t) as fixed_t;
    spark = P_SpawnMobj(
        (*mo).x - b2 as libc::c_int * s + b1 as libc::c_int * c,
        (*mo).y + b2 as libc::c_int * c + b1 as libc::c_int * s,
        (*mo).z,
        MT_MINECARTSPARK,
    );
    (*spark)
        .momx = (*mo).momx + r1
        + 8 as libc::c_int
            * (*finecosine.offset(fm as isize) >> 16 as libc::c_int - 16 as libc::c_int);
    (*spark)
        .momy = (*mo).momy + r2
        + 8 as libc::c_int
            * (finesine[fm as usize] >> 16 as libc::c_int - 16 as libc::c_int);
    (*spark).momz = (*mo).momz + r3;
    P_Thrust(
        spark,
        R_PointToAngle2((*mo).x, (*mo).y, (*spark).x, (*spark).y),
        8 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
    );
    P_SetScale(spark, ((1 as libc::c_int) << 16 as libc::c_int) / 4 as libc::c_int);
    (*spark).destscale = (*spark).scale;
    (*spark).fuse = 35 as libc::c_int / 3 as libc::c_int;
}
unsafe extern "C" fn P_LookForRails(
    mut mobj: *mut mobj_t,
    mut c: fixed_t,
    mut s: fixed_t,
    mut targetangle: angle_t,
    mut xcom: fixed_t,
    mut ycom: fixed_t,
) -> *mut mobj_t {
    let mut interval: int16_t = 16 as libc::c_int as int16_t;
    let mut fwooffset: int16_t = (FixedHypot((*mobj).momx, (*mobj).momy)
        >> 16 as libc::c_int) as int16_t;
    let mut x: fixed_t = (*mobj).x;
    let mut y: fixed_t = (*mobj).y;
    let mut z: fixed_t = (*mobj).z;
    let mut i: uint8_t = 0;
    i = 4 as libc::c_int as uint8_t;
    while i as libc::c_int <= 10 as libc::c_int {
        let mut nz: fixed_t = 0;
        let mut lline: int32_t = 0;
        x
            += interval as libc::c_int * xcom * i as libc::c_int
                + fwooffset as libc::c_int * c * i as libc::c_int;
        y
            += interval as libc::c_int * ycom * i as libc::c_int
                + fwooffset as libc::c_int * s * i as libc::c_int;
        lline = P_GetMinecartSpecialLine(P_GetMinecartSector(x, y, z, &mut nz));
        if lline != -(1 as libc::c_int) {
            let mut nx: fixed_t = 0;
            let mut ny: fixed_t = 0;
            let mut nang: angle_t = 0;
            let mut dummy: angle_t = 0;
            let mut angdiff: angle_t = 0;
            let mut mark: *mut mobj_t = 0 as *mut mobj_t;
            let mut snax: *mut mobj_t = P_GetAxis(
                (*lines.offset(lline as isize)).args[0 as libc::c_int as usize],
            );
            if snax.is_null() {
                return 0 as *mut mobj_t;
            }
            P_GetAxisPosition(x, y, snax, &mut nx, &mut ny, &mut nang, &mut dummy);
            angdiff = nang
                .wrapping_sub(targetangle)
                .wrapping_add((0x71c71c7 as libc::c_int / 2 as libc::c_int) as angle_t)
                & !(0x80000000 as libc::c_uint);
            if angdiff < 0x71c71c7 as libc::c_int as angle_t {
                mark = P_SpawnMobj(nx, ny, nz, (*(*mobj).info).raisestate as mobjtype_t);
                return mark;
            }
        }
        i = i.wrapping_add(1);
        i;
    }
    return 0 as *mut mobj_t;
}
unsafe extern "C" fn P_ParabolicMove(
    mut mo: *mut mobj_t,
    mut x: fixed_t,
    mut y: fixed_t,
    mut z: fixed_t,
    mut g: fixed_t,
    mut speed: fixed_t,
) {
    let mut dx: fixed_t = x - (*mo).x;
    let mut dy: fixed_t = y - (*mo).y;
    let mut dz: fixed_t = z - (*mo).z;
    let mut dh: fixed_t = P_AproxDistance(dx, dy);
    let mut c: fixed_t = FixedDiv(dx, dh);
    let mut s: fixed_t = FixedDiv(dy, dh);
    let mut fixConst: fixed_t = FixedDiv(speed, g);
    (*mo).momx = FixedMul(c, speed);
    (*mo).momy = FixedMul(s, speed);
    (*mo)
        .momz = FixedDiv(dh, 2 as libc::c_int * fixConst)
        + FixedDiv(dz, FixedDiv(dh, fixConst / 2 as libc::c_int));
}
unsafe extern "C" fn P_MinecartThink(mut player: *mut player_t) {
    let mut minecart: *mut mobj_t = (*(*player).mo).tracer;
    let mut fa: angle_t = 0;
    if minecart.is_null() || P_MobjWasRemoved(minecart) != 0 || (*minecart).health == 0 {
        P_KillMobj(
            (*player).mo,
            0 as *mut mobj_t,
            0 as *mut mobj_t,
            0 as libc::c_int as uint8_t,
        );
        return;
    }
    let mut angdiff: angle_t = ((*(*player).mo).angle).wrapping_sub((*minecart).angle);
    if angdiff < 0x80000000 as libc::c_uint
        && angdiff
            > FixedAngle(20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int))
    {
        (*(*player).mo)
            .angle = ((*minecart).angle)
            .wrapping_add(
                FixedAngle(20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)),
            );
    } else if angdiff > 0x80000000 as libc::c_uint
        && angdiff
            < InvAngle(
                FixedAngle(20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)),
            )
    {
        (*(*player).mo)
            .angle = ((*minecart).angle)
            .wrapping_sub(
                FixedAngle(20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)),
            );
    }
    if angdiff.wrapping_add((*minecart).angle) != (*(*player).mo).angle
        && (demoplayback == 0
            || (if (*player).pflags as libc::c_uint
                & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
            {
                CS_LMAOGALOG as libc::c_int
            } else {
                0 as libc::c_int
            })
                | (if (*player).pflags as libc::c_uint
                    & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                {
                    CS_STANDARD as libc::c_int
                } else {
                    0 as libc::c_int
                }) == CS_LMAOGALOG as libc::c_int)
    {
        angdiff = (P_GetLocalAngle(player)).wrapping_sub((*minecart).angle);
        if angdiff < 0x80000000 as libc::c_uint
            && angdiff
                > FixedAngle(
                    20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                )
        {
            P_SetLocalAngle(
                player,
                ((*minecart).angle)
                    .wrapping_add(
                        FixedAngle(
                            20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                        ),
                    ),
            );
        } else if angdiff > 0x80000000 as libc::c_uint
            && angdiff
                < InvAngle(
                    FixedAngle(
                        20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                    ),
                )
        {
            P_SetLocalAngle(
                player,
                ((*minecart).angle)
                    .wrapping_sub(
                        FixedAngle(
                            20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                        ),
                    ),
            );
        }
    }
    if (*player).cmd.buttons as libc::c_int & BT_JUMP as libc::c_int == 0 {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_JUMPDOWN as libc::c_int) as libc::c_uint,
        );
    }
    P_HandleMinecartSegments(minecart);
    (*minecart).friction = (1 as libc::c_int) << 16 as libc::c_int;
    fa = (*minecart).angle >> 19 as libc::c_int
        & (8192 as libc::c_int - 1 as libc::c_int) as angle_t;
    if P_TryMove(
        minecart,
        (*minecart).x
            + (*finecosine.offset(fa as isize) >> 16 as libc::c_int - 16 as libc::c_int),
        (*minecart).y + (finesine[fa as usize] >> 16 as libc::c_int - 16 as libc::c_int),
        true_0 as libc::c_int,
    ) == 0
    {
        P_KillMobj(
            minecart,
            0 as *mut mobj_t,
            0 as *mut mobj_t,
            0 as libc::c_int as uint8_t,
        );
        return;
    }
    if P_IsObjectOnGround(minecart) != 0 {
        let mut sec: *mut sector_t = 0 as *mut sector_t;
        let mut lnum: int32_t = -(1 as libc::c_int);
        let mut dummy: fixed_t = 0;
        if (*minecart).eflags as libc::c_int & MFE_JUSTHITFLOOR as libc::c_int != 0 {
            S_StopSound(minecart as *mut libc::c_void);
            S_StartSound(minecart as *const libc::c_void, sfx_s3k96);
        }
        sec = P_GetMinecartSector(
            (*minecart).x,
            (*minecart).y,
            (*minecart).z,
            &mut dummy,
        );
        if !sec.is_null() {
            lnum = P_GetMinecartSpecialLine(sec);
        }
        if !sec.is_null() && lnum != -(1 as libc::c_int) {
            let mut axis: *mut mobj_t = P_GetAxis(
                (*lines.offset(lnum as isize)).args[0 as libc::c_int as usize],
            );
            let mut newx: fixed_t = 0;
            let mut newy: fixed_t = 0;
            let mut targetangle: angle_t = 0;
            let mut grind: angle_t = 0;
            let mut prevangle: angle_t = 0;
            let mut angdiff_0: angle_t = 0;
            let mut detleft: *mut mobj_t = 0 as *mut mobj_t;
            let mut detright: *mut mobj_t = 0 as *mut mobj_t;
            let mut sidelock: *mut mobj_t = 0 as *mut mobj_t;
            let mut jumped: boolean = false_0 as libc::c_int;
            let mut currentSpeed: fixed_t = 0;
            if axis.is_null() {
                P_KillMobj(
                    minecart,
                    0 as *mut mobj_t,
                    0 as *mut mobj_t,
                    0 as libc::c_int as uint8_t,
                );
                return;
            }
            (*minecart).movefactor = 0 as libc::c_int;
            (*player).scoreadd = 0 as libc::c_int as uint8_t;
            P_GetAxisPosition(
                (*minecart).x,
                (*minecart).y,
                axis,
                &mut newx,
                &mut newy,
                &mut targetangle,
                &mut grind,
            );
            if (*axis).type_0 as libc::c_uint
                != MT_AXISTRANSFERLINE as libc::c_int as libc::c_uint
            {
                P_SpawnSparks(minecart, grind);
            }
            P_TryMove(minecart, newx, newy, true_0 as libc::c_int);
            prevangle = (*minecart).angle;
            angdiff_0 = targetangle.wrapping_sub((*minecart).angle);
            if angdiff_0
                < (0x40000000 as libc::c_int + 0x16c16c1 as libc::c_int) as angle_t
                || angdiff_0
                    > (0xc0000000 as libc::c_uint)
                        .wrapping_sub(0x16c16c1 as libc::c_int as libc::c_uint)
            {
                (*minecart).angle = targetangle;
            } else {
                (*minecart).angle = targetangle.wrapping_add(0x80000000 as libc::c_uint);
            }
            angdiff_0 = ((*minecart).angle).wrapping_sub(prevangle);
            if angdiff_0 != 0
                && (demoplayback == 0
                    || (if (*player).pflags as libc::c_uint
                        & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                    {
                        CS_LMAOGALOG as libc::c_int
                    } else {
                        0 as libc::c_int
                    })
                        | (if (*player).pflags as libc::c_uint
                            & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                        {
                            CS_STANDARD as libc::c_int
                        } else {
                            0 as libc::c_int
                        }) == CS_LMAOGALOG as libc::c_int)
            {
                (*(*player).mo).angle = ((*(*player).mo).angle).wrapping_add(angdiff_0);
                P_SetPlayerAngle(
                    player,
                    ((((*player).angleturn as libc::c_int) << 16 as libc::c_int)
                        as angle_t)
                        .wrapping_add(angdiff_0),
                );
            }
            if (*minecart).flags2 & MF2_AMBUSH as libc::c_int as uint32_t != 0 {
                let mut fa2: angle_t = (*minecart).angle >> 19 as libc::c_int
                    & (8192 as libc::c_int - 1 as libc::c_int) as angle_t;
                let mut c: fixed_t = *finecosine.offset(fa2 as isize)
                    >> 16 as libc::c_int - 16 as libc::c_int;
                let mut s: fixed_t = finesine[fa2 as usize]
                    >> 16 as libc::c_int - 16 as libc::c_int;
                detleft = P_LookForRails(minecart, c, s, targetangle, -s, c);
                detright = P_LookForRails(minecart, c, s, targetangle, s, -c);
            }
            currentSpeed = FixedHypot((*minecart).momx, (*minecart).momy);
            angdiff_0 = (R_PointToAngle2(
                0 as libc::c_int,
                0 as libc::c_int,
                (*minecart).momx,
                (*minecart).momy,
            ))
                .wrapping_sub((*minecart).angle);
            if angdiff_0 > 0x40000000 as libc::c_int as angle_t
                && angdiff_0 < 0xc0000000 as libc::c_uint
            {
                currentSpeed *= -(1 as libc::c_int);
            }
            if !detleft.is_null()
                && ((*player).cmd.sidemove as libc::c_int) < 0 as libc::c_int
            {
                sidelock = detleft;
            } else if !detright.is_null()
                && (*player).cmd.sidemove as libc::c_int > 0 as libc::c_int
            {
                sidelock = detright;
            }
            if !sidelock.is_null()
                || (*player).cmd.buttons as libc::c_int & BT_JUMP as libc::c_int != 0
                    && (*player).pflags as libc::c_uint
                        & PF_JUMPDOWN as libc::c_int as libc::c_uint == 0
            {
                (*player)
                    .pflags = ::core::mem::transmute::<
                    libc::c_uint,
                    pflags_t,
                >(
                    (*player).pflags as libc::c_uint
                        | PF_JUMPDOWN as libc::c_int as libc::c_uint,
                );
                if (*minecart).eflags as libc::c_int & MFE_ONGROUND as libc::c_int != 0 {
                    (*minecart)
                        .eflags = ((*minecart).eflags as libc::c_int
                        & !(MFE_ONGROUND as libc::c_int)) as uint16_t;
                }
                (*minecart).z += P_MobjFlip(minecart) as libc::c_int;
                if !sidelock.is_null() {
                    P_ParabolicMove(
                        minecart,
                        (*sidelock).x,
                        (*sidelock).y,
                        (*sidelock).z,
                        gravity,
                        if currentSpeed
                            > 10 as libc::c_int
                                * ((1 as libc::c_int) << 16 as libc::c_int)
                        {
                            currentSpeed
                        } else {
                            10 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                        },
                    );
                } else {
                    (*minecart)
                        .momz = 10 as libc::c_int
                        * ((1 as libc::c_int) << 16 as libc::c_int);
                }
                S_StartSound(minecart as *const libc::c_void, sfx_s3k51);
                jumped = true_0 as libc::c_int;
            }
            if jumped == 0 {
                if currentSpeed < (*(*minecart).info).speed {
                    currentSpeed
                        += ((1 as libc::c_int) << 16 as libc::c_int) / 4 as libc::c_int;
                }
                if !((*minecart).standingslope).is_null() {
                    let mut fa2_0: fixed_t = ((*minecart).angle >> 19 as libc::c_int
                        & (8192 as libc::c_int - 1 as libc::c_int) as angle_t)
                        as fixed_t;
                    let mut front: fixed_t = P_GetSlopeZAt(
                        (*minecart).standingslope,
                        (*minecart).x,
                        (*minecart).y,
                    );
                    let mut back: fixed_t = P_GetSlopeZAt(
                        (*minecart).standingslope,
                        (*minecart).x
                            - (*finecosine.offset(fa2_0 as isize)
                                >> 16 as libc::c_int - 16 as libc::c_int),
                        (*minecart).y
                            - (finesine[fa2_0 as usize]
                                >> 16 as libc::c_int - 16 as libc::c_int),
                    );
                    if abs(front - back)
                        < 3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                    {
                        currentSpeed += (back - front) / 3 as libc::c_int;
                    }
                }
                P_InstaThrust(minecart, (*minecart).angle, currentSpeed);
                (*minecart).movecount += abs(currentSpeed);
                if (*minecart).movecount
                    > 128 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                {
                    (*minecart).movecount
                        %= 128 as libc::c_int
                            * ((1 as libc::c_int) << 16 as libc::c_int);
                    S_StartSound(
                        minecart as *const libc::c_void,
                        (*(*minecart).info).activesound,
                    );
                }
            }
            if !detleft.is_null() {
                if P_IsLocalPlayer(player) != 0 {
                    (*detleft)
                        .old_x = (*detleft).x - ((*minecart).old_x - (*minecart).old_x2);
                    (*detleft)
                        .old_y = (*detleft).y - ((*minecart).old_y - (*minecart).old_y2);
                    (*detleft)
                        .old_z = (*detleft).z - ((*minecart).old_z - (*minecart).old_z2);
                    (*detleft).drawonlyforplayer = player;
                } else {
                    P_RemoveMobj(detleft);
                }
            }
            if !detright.is_null() {
                if P_IsLocalPlayer(player) != 0 {
                    (*detright)
                        .old_x = (*detright).x
                        - ((*minecart).old_x - (*minecart).old_x2);
                    (*detright)
                        .old_y = (*detright).y
                        - ((*minecart).old_y - (*minecart).old_y2);
                    (*detright)
                        .old_z = (*detright).z
                        - ((*minecart).old_z - (*minecart).old_z2);
                    (*detright).drawonlyforplayer = player;
                } else {
                    P_RemoveMobj(detleft);
                }
            }
        } else {
            (*minecart).movefactor += 1;
            (*minecart).movefactor;
            if P_IsObjectOnGround(minecart) != 0
                && (*minecart).movefactor >= 5 as libc::c_int
                || abs((*minecart).momx) < (*minecart).scale / 2 as libc::c_int
                    && abs((*minecart).momy) < (*minecart).scale / 2 as libc::c_int
            {
                P_KillMobj(
                    minecart,
                    0 as *mut mobj_t,
                    0 as *mut mobj_t,
                    0 as libc::c_int as uint8_t,
                );
                return;
            }
        }
    }
    if ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
        != S_PLAY_STND as libc::c_int as libc::c_long
    {
        P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
        (*(*player).mo).tics = -(1 as libc::c_int);
    }
    P_MoveOrigin(
        (*player).mo,
        (*minecart).x - (*minecart).momx,
        (*minecart).y - (*minecart).momy,
        (*minecart).z
            + (if (*minecart).momz > 0 as libc::c_int {
                (*minecart).momz
            } else {
                0 as libc::c_int
            }) + 8 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
    );
    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        != CR_MINECART as libc::c_int
    {
        return;
    }
    (*(*player).mo).momz = 0 as libc::c_int;
    (*(*player).mo).momy = (*(*player).mo).momz;
    (*(*player).mo).momx = (*(*player).mo).momy;
    P_TryMove(
        (*player).mo,
        (*(*player).mo).x + (*minecart).momx,
        (*(*player).mo).y + (*minecart).momy,
        true_0 as libc::c_int,
    );
    if (*player).powers[pw_flashing as libc::c_int as usize] as libc::c_int
        == flashingtics as libc::c_int
    {
        (*player)
            .powers[pw_flashing as libc::c_int
            as usize] = ((*player).powers[pw_flashing as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_flashing as libc::c_int as usize];
    }
}
unsafe extern "C" fn P_DoTailsOverlay(
    mut player: *mut player_t,
    mut tails: *mut mobj_t,
) {
    let mut smilesonground: boolean = P_IsObjectOnGround((*player).mo);
    let mut horizangle: angle_t = (*player).drawangle;
    let mut zoffs: fixed_t = 0 as libc::c_int;
    let mut backwards: fixed_t = -(1 as libc::c_int)
        * ((1 as libc::c_int) << 16 as libc::c_int);
    let mut doswim: boolean = ((*player).panim as libc::c_uint
        == PA_ABILITY as libc::c_int as libc::c_uint
        && (*(*player).mo).eflags as libc::c_int & MFE_UNDERWATER as libc::c_int != 0)
        as libc::c_int;
    let mut doroll: boolean = ((*player).panim as libc::c_uint
        == PA_ROLL as libc::c_int as libc::c_uint
        || (*player).panim as libc::c_uint == PA_JUMP as libc::c_int as libc::c_uint
            && (*player).charflags & SF_NOJUMPSPIN as libc::c_int as uint32_t == 0
        || doswim != 0) as libc::c_int;
    let mut rollangle: angle_t = 0;
    let mut panimchange: boolean = 0;
    let mut ticnum: int32_t = 0 as libc::c_int;
    let mut chosenstate: statenum_t = S_NULL;
    if ((*tails).skin).is_null() {
        (*tails).skin = (*(*player).mo).skin;
        P_SetMobjState(tails, S_TAILSOVERLAY_STAND);
        (*tails).movecount = -(1 as libc::c_int);
    }
    panimchange = ((*tails).movecount != (*player).panim as int32_t) as libc::c_int;
    if doroll != 0 {
        let mut testval: fixed_t = 0;
        let mut zdist: fixed_t = 0;
        if (*player).speed < (1 as libc::c_int) << 16 as libc::c_int {
            testval = (1 as libc::c_int) << 16 as libc::c_int;
        } else {
            testval = FixedMul(
                (*player).speed,
                *finecosine
                    .offset(
                        (horizangle
                            .wrapping_sub(
                                R_PointToAngle2(
                                    0 as libc::c_int,
                                    0 as libc::c_int,
                                    (*player).rmomx,
                                    (*player).rmomy,
                                ),
                            ) >> 19 as libc::c_int) as isize,
                    ) >> 16 as libc::c_int - 16 as libc::c_int,
            );
            if testval < (1 as libc::c_int) << 16 as libc::c_int {
                testval = (1 as libc::c_int) << 16 as libc::c_int;
            }
        }
        if doswim != 0 {
            zdist = (*(*player).mo).momz << 1 as libc::c_int;
        } else if smilesonground != 0 && (*(*player).mo).reactiontime == 0 {
            zdist = (*(*player).mo).z - (*tails).threshold;
        } else {
            zdist = (*(*player).mo).momz;
        }
        rollangle = R_PointToAngle2(
            0 as libc::c_int,
            0 as libc::c_int,
            testval,
            -(P_MobjFlip((*player).mo) as libc::c_int) * zdist,
        );
        if doswim == 0 {
            zoffs = 3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                + 12 as libc::c_int
                    * (finesine[(rollangle >> 19 as libc::c_int) as usize]
                        >> 16 as libc::c_int - 16 as libc::c_int);
            backwards = -(12 as libc::c_int)
                * (*finecosine.offset((rollangle >> 19 as libc::c_int) as isize)
                    >> 16 as libc::c_int - 16 as libc::c_int);
        }
    } else if (*player).panim as libc::c_uint == PA_RUN as libc::c_int as libc::c_uint {
        backwards = -(5 as libc::c_int) * ((1 as libc::c_int) << 16 as libc::c_int);
    } else if (*player).panim as libc::c_uint == PA_SPRING as libc::c_int as libc::c_uint
        || (*player).panim as libc::c_uint == PA_JUMP as libc::c_int as libc::c_uint
    {
        zoffs += 4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
        backwards /= 2 as libc::c_int;
    } else if (*player).panim as libc::c_uint == PA_PAIN as libc::c_int as libc::c_uint {
        backwards /= 16 as libc::c_int;
    } else if ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
        == S_PLAY_GASP as libc::c_int as libc::c_long
    {
        backwards /= 16 as libc::c_int;
        zoffs += 12 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
    } else if ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
        == S_PLAY_EDGE as libc::c_int as libc::c_long
    {
        backwards /= 16 as libc::c_int;
        zoffs = 3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int);
    } else if (*player).panim as libc::c_uint
        == PA_ABILITY2 as libc::c_int as libc::c_uint
    {
        zoffs = -(7 as libc::c_int) * ((1 as libc::c_int) << 16 as libc::c_int);
        backwards = -(9 as libc::c_int) * ((1 as libc::c_int) << 16 as libc::c_int);
    } else if (*player).panim as libc::c_uint
        == PA_ABILITY as libc::c_int as libc::c_uint
    {
        backwards = -(5 as libc::c_int) * ((1 as libc::c_int) << 16 as libc::c_int);
    }
    if doroll != 0 {
        let mut add: statenum_t = (if rollangle > 0x80000000 as libc::c_uint {
            2 as libc::c_int
        } else {
            0 as libc::c_int
        }) as statenum_t;
        if add as u64 != 0 {
            rollangle = InvAngle(rollangle);
        }
        rollangle = rollangle.wrapping_add(0xaaaaaab as libc::c_int as angle_t);
        if rollangle > 0x2aaaaaab as libc::c_int as angle_t {
            chosenstate = (S_TAILSOVERLAY_PLUS60DEGREES as libc::c_int as libc::c_uint)
                .wrapping_add(add as libc::c_uint) as statenum_t;
        } else if rollangle > 0x15555555 as libc::c_int as angle_t {
            chosenstate = (S_TAILSOVERLAY_PLUS30DEGREES as libc::c_int as libc::c_uint)
                .wrapping_add(add as libc::c_uint) as statenum_t;
        } else {
            chosenstate = S_TAILSOVERLAY_0DEGREES;
        }
    } else if (*player).panim as libc::c_uint == PA_SPRING as libc::c_int as libc::c_uint
        || (*player).panim as libc::c_uint == PA_JUMP as libc::c_int as libc::c_uint
    {
        chosenstate = S_TAILSOVERLAY_MINUS60DEGREES;
    } else if (*player).panim as libc::c_uint == PA_FALL as libc::c_int as libc::c_uint
        || ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
            == S_PLAY_RIDE as libc::c_int as libc::c_long
    {
        chosenstate = S_TAILSOVERLAY_PLUS60DEGREES;
    } else if (*player).panim as libc::c_uint == PA_PAIN as libc::c_int as libc::c_uint {
        chosenstate = S_TAILSOVERLAY_PAIN;
    } else if ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
        == S_PLAY_GASP as libc::c_int as libc::c_long
    {
        chosenstate = S_TAILSOVERLAY_GASP;
    } else if ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
        == S_PLAY_EDGE as libc::c_int as libc::c_long
    {
        chosenstate = S_TAILSOVERLAY_EDGE;
    } else if (*player).panim as libc::c_uint == PA_DASH as libc::c_int as libc::c_uint {
        chosenstate = S_TAILSOVERLAY_DASH;
    } else if (*player).panim as libc::c_uint == PA_RUN as libc::c_int as libc::c_uint {
        chosenstate = S_TAILSOVERLAY_RUN;
    } else if (*player).panim as libc::c_uint == PA_WALK as libc::c_int as libc::c_uint {
        if smilesonground == 0
            || ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
                == S_PLAY_SKID as libc::c_int as libc::c_long
        {
            chosenstate = S_TAILSOVERLAY_PLUS30DEGREES;
        } else if (*player).speed
            >= FixedMul((*player).runspeed / 2 as libc::c_int, (*(*player).mo).scale)
        {
            chosenstate = S_TAILSOVERLAY_0DEGREES;
        } else {
            chosenstate = S_TAILSOVERLAY_MINUS30DEGREES;
        }
    } else if (*(*player).mo).sprite2 as libc::c_int == SPR2_FLY as libc::c_int {
        chosenstate = S_TAILSOVERLAY_FLY;
    } else if (*(*player).mo).sprite2 as libc::c_int == SPR2_SWIM as libc::c_int {
        chosenstate = S_TAILSOVERLAY_FLY;
    } else if (*(*player).mo).sprite2 as libc::c_int == SPR2_TIRE as libc::c_int {
        chosenstate = S_TAILSOVERLAY_TIRE;
    } else if (*player).panim as libc::c_uint
        == PA_ABILITY2 as libc::c_int as libc::c_uint
    {
        chosenstate = S_TAILSOVERLAY_PLUS30DEGREES;
    } else if (*player).panim as libc::c_uint == PA_IDLE as libc::c_int as libc::c_uint {
        chosenstate = S_TAILSOVERLAY_STAND;
    } else {
        chosenstate = S_INVISIBLE;
    }
    if panimchange != 0 {
        (*tails).sprite2 = -(1 as libc::c_int) as uint8_t;
        P_SetMobjState(tails, chosenstate);
    } else if (*tails).state
        != states.as_mut_ptr().offset(chosenstate as libc::c_uint as isize)
    {
        if states[chosenstate as usize].sprite as libc::c_uint
            == SPR_PLAY as libc::c_int as libc::c_uint
        {
            (*tails)
                .sprite2 = P_GetSkinSprite2(
                (*tails).skin as *mut skin_t,
                (states[chosenstate as usize].frame & 0xff as libc::c_int as uint32_t)
                    as uint8_t,
                player,
            );
        }
        P_SetMobjState(tails, chosenstate);
    }
    if (*player).panim as libc::c_uint == PA_SPRING as libc::c_int as libc::c_uint
        || (*player).panim as libc::c_uint == PA_FALL as libc::c_int as libc::c_uint
        || ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
            == S_PLAY_RIDE as libc::c_int as libc::c_long
    {
        if FixedDiv(abs((*(*player).mo).momz), (*(*player).mo).scale)
            < (20 as libc::c_int) << 16 as libc::c_int
        {
            ticnum = 2 as libc::c_int;
        } else {
            ticnum = 1 as libc::c_int;
        }
    } else if (*player).panim as libc::c_uint == PA_PAIN as libc::c_int as libc::c_uint {
        ticnum = 2 as libc::c_int;
    } else if ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
        == S_PLAY_GASP as libc::c_int as libc::c_long
    {
        (*tails).tics = -(1 as libc::c_int);
    } else if (*(*player).mo).sprite2 as libc::c_int == SPR2_TIRE as libc::c_int {
        ticnum = if doswim != 0 { 2 as libc::c_int } else { 4 as libc::c_int };
    } else if (*player).panim as libc::c_uint != PA_IDLE as libc::c_int as libc::c_uint {
        ticnum = (*(*player).mo).tics;
    }
    if ticnum != 0 && (*tails).tics > ticnum {
        (*tails).tics = ticnum;
    }
    (*tails).color = (*(*player).mo).color;
    (*tails).threshold = (*(*player).mo).z;
    (*tails).movecount = (*player).panim as int32_t;
    (*tails).angle = horizangle;
    P_SetScale(tails, (*(*player).mo).scale);
    (*tails).destscale = (*(*player).mo).destscale;
    (*tails).radius = (*(*player).mo).radius;
    (*tails).height = (*(*player).mo).height;
    zoffs = FixedMul(zoffs, (*tails).scale);
    if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int != 0 {
        (*tails)
            .eflags = ((*tails).eflags as libc::c_int | MFE_VERTICALFLIP as libc::c_int)
            as uint16_t;
        (*tails).flags2 |= MF2_OBJECTFLIP as libc::c_int as uint32_t;
        zoffs = (*(*player).mo).height - (*tails).height - zoffs;
    } else {
        (*tails)
            .eflags = ((*tails).eflags as libc::c_int
            & !(MFE_VERTICALFLIP as libc::c_int)) as uint16_t;
        (*tails).flags2 &= !(MF2_OBJECTFLIP as libc::c_int) as uint32_t;
    }
    P_UnsetThingPosition(tails);
    (*tails)
        .x = (*(*player).mo).x
        + P_ReturnThrustX(tails, (*tails).angle, FixedMul(backwards, (*tails).scale));
    (*tails)
        .y = (*(*player).mo).y
        + P_ReturnThrustY(tails, (*tails).angle, FixedMul(backwards, (*tails).scale));
    (*tails).z = (*(*player).mo).z + zoffs;
    P_SetThingPosition(tails);
    if (*(*player).mo).flags2 & MF2_SHADOW as libc::c_int as uint32_t != 0 {
        (*tails).flags2 |= MF2_SHADOW as libc::c_int as uint32_t;
    } else {
        (*tails).flags2 &= !(MF2_SHADOW as libc::c_int) as uint32_t;
    };
}
unsafe extern "C" fn P_DoMetalJetFume(mut player: *mut player_t, mut fume: *mut mobj_t) {
    static mut FUME_SKINCOLORS: [uint8_t; 15] = [
        SKINCOLOR_ICY as libc::c_int as uint8_t,
        SKINCOLOR_SKY as libc::c_int as uint8_t,
        SKINCOLOR_CYAN as libc::c_int as uint8_t,
        SKINCOLOR_WAVE as libc::c_int as uint8_t,
        SKINCOLOR_TEAL as libc::c_int as uint8_t,
        SKINCOLOR_AQUA as libc::c_int as uint8_t,
        SKINCOLOR_SEAFOAM as libc::c_int as uint8_t,
        SKINCOLOR_MINT as libc::c_int as uint8_t,
        SKINCOLOR_PERIDOT as libc::c_int as uint8_t,
        SKINCOLOR_LIME as libc::c_int as uint8_t,
        SKINCOLOR_YELLOW as libc::c_int as uint8_t,
        SKINCOLOR_SANDY as libc::c_int as uint8_t,
        SKINCOLOR_GOLD as libc::c_int as uint8_t,
        SKINCOLOR_APRICOT as libc::c_int as uint8_t,
        SKINCOLOR_SUNSET as libc::c_int as uint8_t,
    ];
    let mut mo: *mut mobj_t = (*player).mo;
    let mut angle: angle_t = (*player).drawangle;
    let mut dist: fixed_t = 0;
    let mut heightoffset: fixed_t = if (*mo).eflags as libc::c_int
        & MFE_VERTICALFLIP as libc::c_int != 0
    {
        (*mo).height
            - (FixedMul((*player).height, (*(*player).mo).scale) >> 1 as libc::c_int)
    } else {
        FixedMul((*player).height, (*(*player).mo).scale) >> 1 as libc::c_int
    };
    let mut panim: panim_t = (*player).panim;
    let mut dashmode_0: tic_t = if (*player).dashmode
        < (3 as libc::c_int * 35 as libc::c_int + 3 as libc::c_int) as tic_t
    {
        (*player).dashmode
    } else {
        (3 as libc::c_int * 35 as libc::c_int + 3 as libc::c_int) as tic_t
    };
    let mut underwater: boolean = (*mo).eflags as libc::c_int
        & MFE_UNDERWATER as libc::c_int;
    let mut stat: statenum_t = ((*fume).state).offset_from(states.as_mut_ptr())
        as libc::c_long as statenum_t;
    let mut resetinterp: boolean = false_0 as libc::c_int;
    if panim as libc::c_uint != PA_WALK as libc::c_int as libc::c_uint
        && panim as libc::c_uint != PA_RUN as libc::c_int as libc::c_uint
        && panim as libc::c_uint != PA_DASH as libc::c_int as libc::c_uint
    {
        if stat as libc::c_uint != (*(*fume).info).spawnstate as libc::c_uint {
            P_SetMobjState(fume, (*(*fume).info).spawnstate);
        }
        return;
    }
    if underwater != 0 {
        (*fume)
            .movedir = ((*fume).movedir)
            .wrapping_add(
                FixedAngle(
                    FixedDiv(
                        2 as libc::c_int * (*player).speed,
                        3 as libc::c_int * (*mo).scale,
                    ),
                ),
            );
        (*fume).movefactor += (*player).speed;
        if (*fume).movefactor
            > FixedDiv(
                2 as libc::c_int * (*player).normalspeed,
                3 as libc::c_int * (*mo).scale,
            )
        {
            let mut i: int16_t = 0;
            let mut radiusV: fixed_t = 4 as libc::c_int
                * ((1 as libc::c_int) << 16 as libc::c_int);
            let mut radiusX: fixed_t = P_ReturnThrustX(
                mo,
                angle,
                -(*mo).radius
                    >> (if panim as libc::c_uint
                        == PA_WALK as libc::c_int as libc::c_uint
                    {
                        1 as libc::c_int
                    } else {
                        0 as libc::c_int
                    }),
            );
            let mut radiusY: fixed_t = P_ReturnThrustY(
                mo,
                angle,
                -(*mo).radius
                    >> (if panim as libc::c_uint
                        == PA_WALK as libc::c_int as libc::c_uint
                    {
                        1 as libc::c_int
                    } else {
                        0 as libc::c_int
                    }),
            );
            let mut factorX: fixed_t = P_ReturnThrustX(
                mo,
                angle.wrapping_add(0x40000000 as libc::c_int as angle_t),
                (*mo).scale,
            );
            let mut factorY: fixed_t = P_ReturnThrustY(
                mo,
                angle.wrapping_add(0x40000000 as libc::c_int as angle_t),
                (*mo).scale,
            );
            let mut offsetH: fixed_t = 0;
            let mut offsetV: fixed_t = 0;
            let mut x: fixed_t = 0;
            let mut y: fixed_t = 0;
            let mut z: fixed_t = 0;
            i = -(1 as libc::c_int) as int16_t;
            while (i as libc::c_int) < 2 as libc::c_int {
                let mut bubble: *mut mobj_t = 0 as *mut mobj_t;
                offsetH = i as libc::c_int
                    * P_ReturnThrustX(fume, (*fume).movedir, radiusV);
                offsetV = i as libc::c_int
                    * P_ReturnThrustY(fume, (*fume).movedir, radiusV);
                x = (*mo).x + radiusX + FixedMul(offsetH, factorX);
                y = (*mo).y + radiusY + FixedMul(offsetH, factorY);
                z = (*mo).z + heightoffset + offsetV;
                bubble = P_SpawnMobj(x, y, z, MT_SMALLBUBBLE);
                (*bubble).scale = (*mo).scale >> 1 as libc::c_int;
                P_SetTarget2(&mut (*bubble).dontdrawforviewmobj, mo);
                i = (i as libc::c_int + 2 as libc::c_int) as int16_t;
            }
            (*fume).movefactor = 0 as libc::c_int;
        }
        if panim as libc::c_uint == PA_WALK as libc::c_int as libc::c_uint {
            if stat as libc::c_uint != (*(*fume).info).spawnstate as libc::c_uint {
                (*fume).threshold = 0 as libc::c_int;
                P_SetMobjState(fume, (*(*fume).info).spawnstate);
            }
            return;
        }
    }
    if stat as libc::c_uint == (*(*fume).info).spawnstate as libc::c_uint {
        stat = (*(*fume).info).seestate;
        P_SetMobjState(fume, stat);
        P_SetScale(fume, (*mo).scale);
        resetinterp = true_0 as libc::c_int;
    }
    if dashmode_0 > (3 as libc::c_int * 35 as libc::c_int) as tic_t
        && stat as libc::c_uint != (*(*fume).info).seestate as libc::c_uint
    {
        (*fume).destscale = (*mo).scale;
        (*fume).flags2 ^= MF2_DONTDRAW as libc::c_int as uint32_t;
        (*fume).flags2 |= (*mo).flags2 & MF2_DONTDRAW as libc::c_int as uint32_t;
    } else {
        if dashmode_0 == (3 as libc::c_int * 35 as libc::c_int) as tic_t
            && dashmode_0 > (*fume).movecount as tic_t
        {
            stat = (*(*fume).info).seestate;
            P_SetMobjState(fume, stat);
            P_SetScale(fume, (*mo).scale << 1 as libc::c_int);
        }
        (*fume)
            .flags2 = (*fume).flags2 & !(MF2_DONTDRAW as libc::c_int) as uint32_t
            | (*mo).flags2 & MF2_DONTDRAW as libc::c_int as uint32_t;
        (*fume)
            .destscale = ((*mo).scale + FixedDiv((*player).speed, (*player).normalspeed))
            / (if underwater != 0 { 6 as libc::c_int } else { 3 as libc::c_int });
        (*fume)
            .color = FUME_SKINCOLORS[(dashmode_0 as libc::c_ulong)
            .wrapping_mul(::core::mem::size_of::<[uint8_t; 15]>() as libc::c_ulong)
            .wrapping_div(
                (3 as libc::c_int * 35 as libc::c_int + 3 as libc::c_int
                    + 1 as libc::c_int) as libc::c_ulong,
            ) as usize] as uint16_t;
        if underwater != 0 {
            (*fume)
                .frame = (*fume).frame & 0xff as libc::c_int as uint32_t
                | 0x10000000 as libc::c_int as uint32_t
                | (P_RandomRange(0 as libc::c_int, 9 as libc::c_int)
                    * ((tr_trans10 as libc::c_int) << 16 as libc::c_int)) as uint32_t;
            (*fume).threshold = 1 as libc::c_int;
        } else if (*fume).threshold != 0 {
            (*fume)
                .frame = (*fume).frame & 0xff as libc::c_int as uint32_t
                | (*(*fume).state).frame;
            (*fume).threshold = 0 as libc::c_int;
        }
    }
    (*fume).movecount = dashmode_0 as int32_t;
    (*fume)
        .flags2 = (*fume).flags2 & !(MF2_OBJECTFLIP as libc::c_int) as uint32_t
        | (*mo).flags2 & MF2_OBJECTFLIP as libc::c_int as uint32_t;
    (*fume)
        .eflags = ((*fume).eflags as libc::c_int & !(MFE_VERTICALFLIP as libc::c_int)
        | (*mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int) as uint16_t;
    dist = -(*mo).radius
        - FixedMul(
            (*(*fume).info).radius,
            (*fume).destscale - (*mo).scale / 3 as libc::c_int,
        );
    P_UnsetThingPosition(fume);
    (*fume).x = (*mo).x + P_ReturnThrustX(fume, angle, dist);
    (*fume).y = (*mo).y + P_ReturnThrustY(fume, angle, dist);
    (*fume).z = (*mo).z + heightoffset - ((*fume).height >> 1 as libc::c_int);
    P_SetThingPosition(fume);
    if resetinterp != 0 {
        R_ResetMobjInterpolationState(fume);
    }
    if (*player).normalspeed
        >= skins[(*player).skin as usize].normalspeed * 2 as libc::c_int
    {
        let mut ghost: *mut mobj_t = P_SpawnGhostMobj(fume);
        if P_MobjWasRemoved(ghost) == 0 {
            P_SetTarget2(&mut (*ghost).dontdrawforviewmobj, mo);
        }
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_PlayerThink(mut player: *mut player_t) {
    let mut cmd: *mut ticcmd_t = 0 as *mut ticcmd_t;
    let playeri: size_t = player.offset_from(players.as_mut_ptr()) as libc::c_long
        as size_t;
    (*player).blocked = false_0 as libc::c_int;
    if (*(*player).mo).health <= 0 as libc::c_int
        && (*player).playerstate as libc::c_uint
            == PST_LIVE as libc::c_int as libc::c_uint
    {
        CONS_Debug(
            0x80 as libc::c_int,
            b"P_PlayerThink: Player %s in PST_LIVE with 0 health. (\"Zombie bug\")\n\0"
                as *const u8 as *const libc::c_char,
            sizeu1(playeri),
        );
        (*player).playerstate = PST_DEAD;
    }
    if (*player).bot as libc::c_int == BOT_2PAI as libc::c_int
        || (*player).bot as libc::c_int == BOT_2PHUMAN as libc::c_int
    {
        if (*player).playerstate as libc::c_uint
            == PST_LIVE as libc::c_int as libc::c_uint
            || (*player).playerstate as libc::c_uint
                == PST_DEAD as libc::c_int as libc::c_uint
        {
            if B_CheckRespawn(player) != 0 {
                (*player).playerstate = PST_REBORN;
            } else {
                B_HandleFlightIndicator(player);
            }
        }
        if (*player).playerstate as libc::c_uint
            == PST_REBORN as libc::c_int as libc::c_uint
        {
            LUA_HookPlayer(player, hook_PlayerThink as libc::c_int);
            return;
        }
    }
    if netgame != 0
        && player
            == &mut *players.as_mut_ptr().offset(displayplayer as isize) as *mut player_t
        && leveltime % (35 as libc::c_int / 5 as libc::c_int) as tic_t == 0
    {
        seenplayer = 0 as *mut player_t;
        if cv_seenames.value != 0 && cv_allowseenames.value != 0
            && !(G_TagGametype() != 0
                && (*player).pflags as libc::c_uint
                    & PF_TAGIT as libc::c_int as libc::c_uint != 0)
        {
            let mut mo: *mut mobj_t = P_SPMAngle(
                (*player).mo,
                MT_NAMECHECK,
                (*(*player).mo).angle,
                true_0 as libc::c_int as uint8_t,
                0 as libc::c_int as uint32_t,
            );
            if !mo.is_null() {
                let mut i: libc::c_short = 0;
                (*mo).flags |= MF_NOCLIPHEIGHT as libc::c_int as uint32_t;
                i = 0 as libc::c_int as libc::c_short;
                while (i as libc::c_int) < 32 as libc::c_int {
                    if P_RailThinker(mo) != 0 {
                        break;
                    }
                    i += 1;
                    i;
                }
            }
        }
    }
    if !((*player).awayviewmobj).is_null()
        && P_MobjWasRemoved((*player).awayviewmobj) != 0
    {
        P_SetTarget2(&mut (*player).awayviewmobj, 0 as *mut mobj_t);
        (*player).awayviewtics = 1 as libc::c_int;
    }
    if (*player).awayviewtics != 0 && (*player).awayviewtics != -(1 as libc::c_int) {
        (*player).awayviewtics -= 1;
        (*player).awayviewtics;
        if (*player).awayviewtics == 0 {
            if player
                == &mut *players.as_mut_ptr().offset(displayplayer as isize)
                    as *mut player_t
            {
                P_ResetCamera(player, &mut camera);
            } else if splitscreen != 0
                && player
                    == &mut *players.as_mut_ptr().offset(secondarydisplayplayer as isize)
                        as *mut player_t
            {
                P_ResetCamera(player, &mut camera2);
            }
        }
    }
    if (*player).flashcount != 0 {
        (*player).flashcount = ((*player).flashcount).wrapping_sub(1);
        (*player).flashcount;
    }
    if (*player).pflags as libc::c_uint & PF_NOCLIP as libc::c_int as libc::c_uint != 0 {
        (*(*player).mo).flags |= MF_NOCLIP as libc::c_int as uint32_t;
    } else {
        (*(*player).mo).flags &= !(MF_NOCLIP as libc::c_int) as uint32_t;
    }
    cmd = &mut (*player).cmd;
    if demoplayback != 0 && demo_forwardmove_rng != 0 {
        if (*cmd).forwardmove != 0 {
            P_RandomFixed();
        }
    }
    if gametyperules & GTR_RACE as libc::c_int as uint32_t != 0 {
        let mut i_0: int32_t = 0;
        i_0 = 0 as libc::c_int;
        while i_0 < 32 as libc::c_int {
            if playeringame[i_0 as usize] != 0 {
                if players[i_0 as usize].exiting == 0
                    && players[i_0 as usize].lives as libc::c_int > 0 as libc::c_int
                {
                    break;
                }
            }
            i_0 += 1;
            i_0;
        }
        if i_0 == 32 as libc::c_int
            && (*player).exiting == (3 as libc::c_int * 35 as libc::c_int) as tic_t
        {
            (*player)
                .exiting = (14 as libc::c_int * 35 as libc::c_int / 5 as libc::c_int
                + 1 as libc::c_int) as tic_t;
        }
        if countdown
            == (11 as libc::c_int * 35 as libc::c_int - 1 as libc::c_int) as uint32_t
            && P_IsLocalPlayer(player) != 0
        {
            P_PlayJingle(player, JT_DROWN);
        } else if countdown == 1 as libc::c_int as uint32_t && (*player).exiting == 0
            && (*player).lives as libc::c_int > 0 as libc::c_int
        {
            if netgame != 0 && (*(*player).mo).health > 0 as libc::c_int {
                CONS_Printf(
                    b"%s ran out of time.\n\0" as *const u8 as *const libc::c_char,
                    (player_names[player.offset_from(players.as_mut_ptr())
                        as libc::c_long as usize])
                        .as_mut_ptr(),
                );
            }
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    | PF_GAMETYPEOVER as libc::c_int as libc::c_uint,
            );
            if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
                == CR_NIGHTSMODE as libc::c_int
            {
                P_DeNightserizePlayer(player);
                S_StartSound((*player).mo as *const libc::c_void, sfx_s3k66);
            }
            (*player).lives = 2 as libc::c_int as int8_t;
            P_DamageMobj(
                (*player).mo,
                0 as *mut mobj_t,
                0 as *mut mobj_t,
                1 as libc::c_int,
                0x80 as libc::c_int as uint8_t,
            );
            (*player).lives = 0 as libc::c_int as int8_t;
            if (*player).playerstate as libc::c_uint
                == PST_DEAD as libc::c_int as libc::c_uint
            {
                LUA_HookPlayer(player, hook_PlayerThink as libc::c_int);
                return;
            }
        }
    }
    if (*player).exiting > 1 as libc::c_int as tic_t
        && (*player).exiting < (3 as libc::c_int * 35 as libc::c_int) as tic_t
    {
        (*player).exiting = ((*player).exiting).wrapping_sub(1);
        (*player).exiting;
    }
    if (*player).exiting != 0 && countdown2 != 0 {
        (*player).exiting = 5 as libc::c_int as tic_t;
    }
    if (*player).exiting == 2 as libc::c_int as tic_t
        || countdown2 == 2 as libc::c_int as uint32_t
    {
        let mut numneeded: uint8_t = (if G_IsSpecialStage(gamemap as int32_t) != 0 {
            4 as libc::c_int
        } else {
            cv_playersforexit.value
        }) as uint8_t;
        if numneeded != 0 {
            let mut i_1: int32_t = 0;
            let mut total: int32_t = 0 as libc::c_int;
            let mut exiting: int32_t = 0 as libc::c_int;
            i_1 = 0 as libc::c_int;
            while i_1 < 32 as libc::c_int {
                if !(playeringame[i_1 as usize] == 0
                    || players[i_1 as usize].spectator != 0
                    || players[i_1 as usize].bot as libc::c_int != 0)
                {
                    if !(players[i_1 as usize].quittime
                        > (30 as libc::c_int * 35 as libc::c_int) as tic_t)
                    {
                        if !(players[i_1 as usize].lives as libc::c_int
                            <= 0 as libc::c_int)
                        {
                            total += 1;
                            total;
                            if players[i_1 as usize].exiting != 0
                                && players[i_1 as usize].exiting < 4 as libc::c_int as tic_t
                            {
                                exiting += 1;
                                exiting;
                            }
                        }
                    }
                }
                i_1 += 1;
                i_1;
            }
            if total == 0
                || 4 as libc::c_int * exiting / total >= numneeded as libc::c_int
            {
                if server != 0 {
                    D_SendExitLevel(false_0 as libc::c_int);
                }
            } else {
                (*player).exiting = 3 as libc::c_int as tic_t;
            }
        } else if server != 0 {
            D_SendExitLevel(false_0 as libc::c_int);
        }
    }
    if (*player).pflags as libc::c_uint & PF_FINISHED as libc::c_int as libc::c_uint != 0
    {
        if gametyperules & GTR_FRIENDLY as libc::c_int as uint32_t != 0
            && cv_exitmove.value != 0 && G_EnoughPlayersFinished() == 0
        {
            (*player).exiting = 0 as libc::c_int as tic_t;
        } else {
            P_DoPlayerExit(player);
        }
    }
    P_MobjCheckWater((*player).mo);
    if (*player).spectator != 0 && G_GametypeUsesCoopStarposts() != 0
        && (netgame != 0 || multiplayer != 0)
        && cv_coopstarposts.value == 2 as libc::c_int
    {
        P_ConsiderAllGone();
    }
    if (*player).playerstate as libc::c_uint == PST_DEAD as libc::c_int as libc::c_uint {
        (*(*player).mo).flags2 &= !(MF2_SHADOW as libc::c_int) as uint32_t;
        P_DeathThink(player);
        LUA_HookPlayer(player, hook_PlayerThink as libc::c_int);
        return;
    }
    if (*player).spectator != 0 {
        if gametyperules & GTR_CAMPAIGN as libc::c_int as uint32_t == 0 {
            (*player).recordscore = 0 as libc::c_int as uint32_t;
            (*player).score = (*player).recordscore;
        }
    } else if (netgame != 0 || multiplayer != 0)
        && (*player).lives as libc::c_int <= 0 as libc::c_int && G_CoopGametype() == 0
    {
        (*player).lives = cv_startinglives.value as int8_t;
    }
    if gametyperules & GTR_RACE as libc::c_int as uint32_t != 0
        && leveltime < (4 as libc::c_int * 35 as libc::c_int) as tic_t
    {
        (*cmd)
            .buttons = ((*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int)
            as uint16_t;
        (*cmd).forwardmove = 0 as libc::c_int as int8_t;
        (*cmd).sidemove = 0 as libc::c_int as int8_t;
    }
    if (*player).exiting == 0 && stoppedclock == 0 {
        if gametyperules & GTR_RACE as libc::c_int as uint32_t != 0 {
            if leveltime >= (4 as libc::c_int * 35 as libc::c_int) as tic_t {
                (*player)
                    .realtime = leveltime
                    .wrapping_sub((4 as libc::c_int * 35 as libc::c_int) as tic_t);
            } else {
                (*player).realtime = 0 as libc::c_int as tic_t;
            }
        } else {
            (*player).realtime = leveltime;
        }
    }
    if (*player).spectator != 0
        && (*cmd).buttons as libc::c_int & BT_ATTACK as libc::c_int != 0
        && (*player).powers[pw_flashing as libc::c_int as usize] == 0
        && G_GametypeHasSpectators() != 0
    {
        if P_SpectatorJoinGame(player) != 0 {
            LUA_HookPlayer(player, hook_PlayerThink as libc::c_int);
            return;
        }
    }
    if objectplacing == 0
        && !((netgame != 0 || multiplayer != 0) && (*player).spectator != 0)
        && maptol & TOL_NIGHTS as libc::c_int as uint32_t != 0
        && ((*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            != CR_NIGHTSMODE as libc::c_int
            || (*player).powers[pw_nights_helper as libc::c_int as usize] as libc::c_int
                != 0)
    {
        let mut th: *mut thinker_t = 0 as *mut thinker_t;
        let mut mo2: *mut mobj_t = 0 as *mut mobj_t;
        let mut x: fixed_t = (*(*player).mo).x;
        let mut y: fixed_t = (*(*player).mo).y;
        let mut z: fixed_t = (*(*player).mo).z;
        th = (*thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)).next;
        while th
            != &mut *thlist.as_mut_ptr().offset(THINK_MOBJ as libc::c_int as isize)
                as *mut thinker_t
        {
            if !((*th).function.acp1
                == ::core::mem::transmute::<
                    Option::<unsafe extern "C" fn(*mut thinker_t) -> ()>,
                    actionf_p1,
                >(
                    Some(
                        P_RemoveThinkerDelayed
                            as unsafe extern "C" fn(*mut thinker_t) -> (),
                    ),
                ))
            {
                mo2 = th as *mut mobj_t;
                if (*mo2).type_0 as libc::c_uint
                    == MT_RING as libc::c_int as libc::c_uint
                    || (*mo2).type_0 as libc::c_uint
                        == MT_COIN as libc::c_int as libc::c_uint
                    || (*mo2).type_0 as libc::c_uint
                        == MT_BLUESPHERE as libc::c_int as libc::c_uint
                    || (*mo2).type_0 as libc::c_uint
                        == MT_NIGHTSCHIP as libc::c_int as libc::c_uint
                    || (*mo2).type_0 as libc::c_uint
                        == MT_NIGHTSSTAR as libc::c_int as libc::c_uint
                {
                    if !((*mo2).flags2 & MF2_NIGHTSPULL as libc::c_int as uint32_t != 0)
                    {
                        if !(P_AproxDistance(
                            P_AproxDistance((*mo2).x - x, (*mo2).y - y),
                            (*mo2).z - z,
                        )
                            > FixedMul(
                                128 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                (*(*player).mo).scale,
                            ))
                        {
                            (*mo2).flags
                                |= (MF_NOCLIP as libc::c_int
                                    | MF_NOCLIPHEIGHT as libc::c_int) as uint32_t;
                            (*mo2).flags2 |= MF2_NIGHTSPULL as libc::c_int as uint32_t;
                            (*mo2).movefactor = 0 as libc::c_int;
                            P_SetTarget2(&mut (*mo2).tracer, (*player).mo);
                        }
                    }
                }
            }
            th = (*th).next;
        }
    }
    if (*player).linktimer != 0
        && (*player).powers[pw_nights_linkfreeze as libc::c_int as usize] == 0
    {
        (*player).linktimer = ((*player).linktimer).wrapping_sub(1);
        if (*player).linktimer <= 0 as libc::c_int as tic_t {
            (*player).linkcount = 0 as libc::c_int;
        }
    }
    if (*(*player).mo).reactiontime != 0 {
        (*(*player).mo).reactiontime -= 1;
        (*(*player).mo).reactiontime;
    } else if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_MINECART as libc::c_int
    {
        if (if (*player).pflags as libc::c_uint
            & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
        {
            CS_LMAOGALOG as libc::c_int
        } else {
            0 as libc::c_int
        })
            | (if (*player).pflags as libc::c_uint
                & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
            {
                CS_STANDARD as libc::c_int
            } else {
                0 as libc::c_int
            }) != CS_LMAOGALOG as libc::c_int
        {
            (*(*player).mo)
                .angle = (((*cmd).angleturn as libc::c_int) << 16 as libc::c_int)
                as angle_t;
        }
        ticruned += 1;
        ticruned;
        if (*cmd).angleturn as libc::c_int & 1 as libc::c_int == 0 as libc::c_int {
            ticmiss += 1;
            ticmiss;
        }
        P_MinecartThink(player);
    } else if !((*(*player).mo).tracer).is_null()
        && (*(*(*player).mo).tracer).type_0 as libc::c_uint
            == MT_TUBEWAYPOINT as libc::c_int as libc::c_uint
        && ((*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_ROPEHANG as libc::c_int
            || (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
                == CR_ZOOMTUBE as libc::c_int)
    {
        if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_ROPEHANG as libc::c_int
        {
            if (if (*player).pflags as libc::c_uint
                & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
            {
                CS_LMAOGALOG as libc::c_int
            } else {
                0 as libc::c_int
            })
                | (if (*player).pflags as libc::c_uint
                    & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                {
                    CS_STANDARD as libc::c_int
                } else {
                    0 as libc::c_int
                }) != CS_LMAOGALOG as libc::c_int
            {
                (*(*player).mo)
                    .angle = (((*cmd).angleturn as libc::c_int) << 16 as libc::c_int)
                    as angle_t;
            }
            ticruned += 1;
            ticruned;
            if (*cmd).angleturn as libc::c_int & 1 as libc::c_int == 0 as libc::c_int {
                ticmiss += 1;
                ticmiss;
            }
            P_DoRopeHang(player);
            P_DoJumpStuff(player, &mut (*player).cmd);
        } else {
            P_DoZoomTube(player);
            if !((*player).panim as libc::c_uint
                == PA_ROLL as libc::c_int as libc::c_uint)
            {
                P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
            }
        }
        (*player).rmomy = 0 as libc::c_int;
        (*player).rmomx = (*player).rmomy;
        (*player).scoreadd = 0 as libc::c_int as uint8_t;
    } else {
        if (*player).bumpertime == (35 as libc::c_int / 2 as libc::c_int) as tic_t
            && !((*(*player).mo).hnext).is_null()
        {
            P_MoveOrigin(
                (*player).mo,
                (*(*(*player).mo).hnext).x,
                (*(*(*player).mo).hnext).y,
                (*(*(*player).mo).hnext).z
                    + FixedMul(
                        (*(*(*player).mo).hnext).height / 4 as libc::c_int,
                        (*(*(*player).mo).hnext).scale,
                    ),
            );
            P_SetTarget2(&mut (*(*player).mo).hnext, 0 as *mut mobj_t);
        }
        P_MovePlayer(player);
    }
    if ((*player).mo).is_null() {
        LUA_HookPlayer(player, hook_PlayerThink as libc::c_int);
        return;
    }
    let mut oldang: angle_t = (*player).drawangle;
    let mut diff: angle_t = 0 as libc::c_int as angle_t;
    let mut factor: uint8_t = 0;
    if !((*player).exiting != 0
        || (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_NIGHTSMODE as libc::c_int)
    {
        if (*player).pflags as libc::c_uint
            & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint == 0
            || (*player).climbing as libc::c_int != 0
            || (maptol & TOL_2D as libc::c_int as uint32_t != 0
                || (*(*player).mo).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0)
            || G_RingSlingerGametype() != 0
        {
            (*player).drawangle = (*(*player).mo).angle;
        } else if !(P_PlayerInPain(player) != 0) {
            if !((*player).powers[pw_justsprung as libc::c_int as usize] != 0) {
                if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int != 0
                    && !((*(*player).mo).tracer).is_null()
                {
                    let mut current_block_196: u64;
                    match (*player).powers[pw_carry as libc::c_int as usize]
                        as libc::c_int
                    {
                        2 => {
                            if !((*(*(*player).mo).tracer).player).is_null() {
                                (*player)
                                    .drawangle = (*(*(*(*player).mo).tracer).player).drawangle;
                                current_block_196 = 11322929247169729670;
                            } else {
                                current_block_196 = 9144587616335449844;
                            }
                        }
                        9 | 1 | 11 => {
                            current_block_196 = 9144587616335449844;
                        }
                        10 => {
                            if (*cmd).forwardmove as libc::c_int != 0
                                || (*cmd).sidemove as libc::c_int != 0
                            {
                                diff = ((((*player).cmd.angleturn as libc::c_int)
                                    << 16 as libc::c_int) as angle_t)
                                    .wrapping_add(
                                        R_PointToAngle2(
                                            0 as libc::c_int,
                                            0 as libc::c_int,
                                            -((*cmd).forwardmove as libc::c_int) << 16 as libc::c_int,
                                            ((*cmd).sidemove as libc::c_int) << 16 as libc::c_int,
                                        ),
                                    )
                                    .wrapping_sub((*player).drawangle);
                                factor = 4 as libc::c_int as uint8_t;
                            }
                            current_block_196 = 11322929247169729670;
                        }
                        12 => {
                            (*player)
                                .drawangle = ((*player).drawangle)
                                .wrapping_add(0xe38e38e as libc::c_int as angle_t);
                            current_block_196 = 11322929247169729670;
                        }
                        7 => {
                            if (*(*player).mo).momx != 0 || (*(*player).mo).momy != 0 {
                                (*player)
                                    .drawangle = R_PointToAngle2(
                                    0 as libc::c_int,
                                    0 as libc::c_int,
                                    (*(*player).mo).momx,
                                    (*(*player).mo).momy,
                                );
                                current_block_196 = 11322929247169729670;
                            } else {
                                current_block_196 = 17440654127316962351;
                            }
                        }
                        _ => {
                            current_block_196 = 17440654127316962351;
                        }
                    }
                    match current_block_196 {
                        9144587616335449844 => {
                            (*player).drawangle = (*(*(*player).mo).tracer).angle;
                        }
                        17440654127316962351 => {
                            (*player).drawangle = (*(*player).mo).angle;
                        }
                        _ => {}
                    }
                } else if ((*player).skidtime
                    > (35 as libc::c_int / 2 as libc::c_int - 2 as libc::c_int) as tic_t
                    || (*player).pflags as libc::c_uint
                        & (PF_SPINNING as libc::c_int | PF_STARTDASH as libc::c_int)
                            as libc::c_uint
                        == PF_SPINNING as libc::c_int as libc::c_uint)
                    && (abs((*player).rmomx) > 5 as libc::c_int * (*(*player).mo).scale
                        || abs((*player).rmomy)
                            > 5 as libc::c_int * (*(*player).mo).scale)
                {
                    (*player)
                        .drawangle = R_PointToAngle2(
                        0 as libc::c_int,
                        0 as libc::c_int,
                        (*player).rmomx,
                        (*player).rmomy,
                    );
                } else if !(((*player).charability2 as libc::c_int
                    == CA2_GUNSLINGER as libc::c_int
                    || (*player).charability2 as libc::c_int == CA2_MELEE as libc::c_int)
                    && (*player).panim as libc::c_uint
                        == PA_ABILITY2 as libc::c_int as libc::c_uint
                    || (*player).pflags as libc::c_uint
                        & PF_STASIS as libc::c_int as libc::c_uint != 0
                    || (*player).skidtime != 0)
                {
                    if (*player).pflags as libc::c_uint
                        & PF_GLIDING as libc::c_int as libc::c_uint != 0
                    {
                        if (*player).speed < (*(*player).mo).scale {
                            diff = ((*(*player).mo).angle)
                                .wrapping_sub((*player).drawangle);
                        } else {
                            diff = (R_PointToAngle2(
                                0 as libc::c_int,
                                0 as libc::c_int,
                                (*player).rmomx,
                                (*player).rmomy,
                            ))
                                .wrapping_sub((*player).drawangle);
                        }
                        factor = 4 as libc::c_int as uint8_t;
                    } else if (*player).pflags as libc::c_uint
                        & PF_SLIDING as libc::c_int as libc::c_uint != 0
                    {
                        diff = ((*(*player).mo).angle).wrapping_sub((*player).drawangle);
                        factor = 16 as libc::c_int as uint8_t;
                    } else if (*player).pflags as libc::c_uint
                        & PF_STARTDASH as libc::c_int as libc::c_uint != 0
                    {
                        diff = ((*(*player).mo).angle).wrapping_sub((*player).drawangle);
                        factor = 4 as libc::c_int as uint8_t;
                    } else if (*cmd).forwardmove as libc::c_int != 0
                        || (*cmd).sidemove as libc::c_int != 0
                    {
                        diff = ((*(*player).mo).angle)
                            .wrapping_add(
                                (if (*player).pflags as libc::c_uint
                                    & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                {
                                    0 as libc::c_int as angle_t
                                } else {
                                    R_PointToAngle2(
                                        0 as libc::c_int,
                                        0 as libc::c_int,
                                        ((*cmd).forwardmove as libc::c_int) << 16 as libc::c_int,
                                        -((*cmd).sidemove as libc::c_int) << 16 as libc::c_int,
                                    )
                                }),
                            )
                            .wrapping_sub((*player).drawangle);
                        factor = 4 as libc::c_int as uint8_t;
                    } else if (*player).rmomx != 0 || (*player).rmomy != 0 {
                        factor = 0 as libc::c_int as uint8_t;
                        diff = factor as angle_t;
                    } else {
                        diff = ((*(*player).mo).angle).wrapping_sub((*player).drawangle);
                        factor = 8 as libc::c_int as uint8_t;
                    }
                }
            }
        }
    }
    if diff != 0 {
        if diff > 0x80000000 as libc::c_uint {
            diff = InvAngle(InvAngle(diff) / factor as angle_t);
        } else {
            diff = diff / factor as angle_t;
        }
        (*player).drawangle = ((*player).drawangle).wrapping_add(diff);
    }
    if (*player).panim as libc::c_uint == PA_IDLE as libc::c_int as libc::c_uint {
        diff = ((*player).drawangle).wrapping_sub(oldang);
        if diff > 0x80000000 as libc::c_uint {
            diff = InvAngle(diff);
        }
        if diff > (0x71c71c7 as libc::c_int / 2 as libc::c_int) as angle_t {
            let mut stat: statenum_t = ((*(*player).mo).state)
                .offset_from(states.as_mut_ptr()) as libc::c_long as statenum_t;
            if stat as libc::c_uint == S_PLAY_WAIT as libc::c_int as libc::c_uint {
                P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
            } else if stat as libc::c_uint == S_PLAY_STND as libc::c_int as libc::c_uint
                && (*(*player).mo).tics != -(1 as libc::c_int)
            {
                (*(*player).mo).tics += 1;
                (*(*player).mo).tics;
            }
        }
    }
    let mut currentlyonground: boolean = P_IsObjectOnGround((*player).mo);
    if !((*player).powers[pw_noautobrake as libc::c_int as usize] != 0) {
        if (*player).powers[pw_carry as libc::c_int as usize] == 0
            && (*player).powers[pw_nocontrol as libc::c_int as usize] == 0
            && (*player).pflags as libc::c_uint
                & (PF_AUTOBRAKE as libc::c_int | PF_APPLYAUTOBRAKE as libc::c_int
                    | PF_STASIS as libc::c_int) as libc::c_uint
                == (PF_AUTOBRAKE as libc::c_int | PF_APPLYAUTOBRAKE as libc::c_int)
                    as libc::c_uint
            && !((*cmd).forwardmove as libc::c_int != 0
                || (*cmd).sidemove as libc::c_int != 0)
            && ((*player).rmomx != 0 || (*player).rmomy != 0)
            && (((*player).capsule).is_null()
                || (*(*player).capsule).reactiontime as libc::c_long
                    != player.offset_from(players.as_mut_ptr()) as libc::c_long
                        + 1 as libc::c_int as libc::c_long)
        {
            let mut acceleration: fixed_t = ((*player).accelstart as libc::c_int
                + (FixedDiv((*player).speed, (*(*player).mo).scale) >> 16 as libc::c_int)
                    * (*player).acceleration as libc::c_int)
                * (*player).thrustfactor as libc::c_int * 20 as libc::c_int;
            let mut moveAngle: angle_t = R_PointToAngle2(
                0 as libc::c_int,
                0 as libc::c_int,
                (*player).rmomx,
                (*player).rmomy,
            );
            if currentlyonground == 0 {
                acceleration /= 2 as libc::c_int;
            } else if (*player).skidtime == 0
                && (*(*player).mo).eflags as libc::c_int & MFE_GOOWATER as libc::c_int
                    == 0
                && (*player).pflags as libc::c_uint
                    & (PF_JUMPED as libc::c_int | PF_SPINNING as libc::c_int
                        | PF_SLIDING as libc::c_int) as libc::c_uint == 0
                && (*player).charflags & SF_NOSKID as libc::c_int as uint32_t == 0
                && P_AproxDistance((*(*player).mo).momx, (*(*player).mo).momy)
                    >= FixedMul((*player).runspeed, (*(*player).mo).scale)
            {
                if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                    as libc::c_long != S_PLAY_SKID as libc::c_int as libc::c_long
                {
                    P_SetPlayerMobjState((*player).mo, S_PLAY_SKID);
                }
                (*player)
                    .skidtime = (if (*(*player).mo).movefactor
                    == (1 as libc::c_int) << 16 as libc::c_int
                {
                    35 as libc::c_int / 2 as libc::c_int
                } else {
                    FixedDiv(
                        (35 as libc::c_int) << 16 as libc::c_int - 1 as libc::c_int,
                        FixedSqrt((*(*player).mo).movefactor),
                    ) >> 16 as libc::c_int
                }) as tic_t;
                (*(*player).mo).tics = (*player).skidtime as int32_t;
                if P_IsLocalPlayer(player) != 0 {
                    S_StartSound((*player).mo as *const libc::c_void, sfx_skid);
                }
            }
            if (*(*player).mo).movefactor != (1 as libc::c_int) << 16 as libc::c_int {
                acceleration = FixedMul(
                    acceleration << 16 as libc::c_int,
                    (*(*player).mo).movefactor,
                ) >> 16 as libc::c_int;
            }
            P_Thrust(
                (*player).mo,
                moveAngle,
                FixedMul(-acceleration, (*(*player).mo).scale),
            );
        }
    }
    if (*player).pflags as libc::c_uint & PF_AUTOBRAKE as libc::c_int as libc::c_uint
        == 0 || (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int != 0
        || (*player).panim as libc::c_uint == PA_SPRING as libc::c_int as libc::c_uint
        || (*player).panim as libc::c_uint == PA_PAIN as libc::c_int as libc::c_uint
        || (*(*player).mo).health == 0 || (*player).climbing as libc::c_int != 0
        || (*player).pflags as libc::c_uint
            & (PF_SPINNING as libc::c_int | PF_SLIDING as libc::c_int) as libc::c_uint
            != 0 || (*player).bumpertime != 0
    {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_APPLYAUTOBRAKE as libc::c_int) as libc::c_uint,
        );
    } else if currentlyonground != 0
        || (*player).powers[pw_tailsfly as libc::c_int as usize] as libc::c_int != 0
    {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                | PF_APPLYAUTOBRAKE as libc::c_int as libc::c_uint,
        );
    }
    (*(*player).mo).movefactor = (1 as libc::c_int) << 16 as libc::c_int;
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >(
        (*player).pflags as libc::c_uint
            & !(PF_FULLSTASIS as libc::c_int) as libc::c_uint,
    );
    if (*player).onconveyor == 1 as libc::c_int {
        (*player).onconveyor = 3 as libc::c_int;
    } else if (*player).onconveyor == 3 as libc::c_int {
        (*player).cmomx = 0 as libc::c_int;
        (*player).cmomy = (*player).cmomx;
    }
    P_DoSuperStuff(player);
    P_CheckSneakerAndLivesTimer(player);
    P_DoBubbleBreath(player);
    P_CheckUnderwaterAndSpaceTimer(player);
    P_CheckInvincibilityTimer(player);
    if ((*player).powers[pw_super as libc::c_int as usize] as libc::c_int != 0
        || (*player).powers[pw_sneakers as libc::c_int as usize] as libc::c_int != 0)
        && (*player).speed + abs((*(*player).mo).momz)
            > FixedMul(
                20 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                (*(*player).mo).scale,
            )
    {
        let mut gmobj: *mut mobj_t = P_SpawnGhostMobj((*player).mo);
        (*gmobj).fuse = 2 as libc::c_int;
        if !((*gmobj).tracer).is_null() {
            (*(*gmobj).tracer).fuse = 2 as libc::c_int;
        }
        if leveltime & 1 as libc::c_int as tic_t != 0 {
            (*gmobj).frame &= !(0xf0000 as libc::c_int) as uint32_t;
            (*gmobj).frame
                |= ((tr_trans70 as libc::c_int) << 16 as libc::c_int) as uint32_t;
            if !((*gmobj).tracer).is_null() {
                (*(*gmobj).tracer).frame &= !(0xf0000 as libc::c_int) as uint32_t;
                (*(*gmobj).tracer).frame
                    |= ((tr_trans70 as libc::c_int) << 16 as libc::c_int) as uint32_t;
            }
        }
    }
    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        != CR_NIGHTSMODE as libc::c_int
    {
        if (*cmd).buttons as libc::c_int & BT_SPIN as libc::c_int != 0 {
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    | PF_SPINDOWN as libc::c_int as libc::c_uint,
            );
        } else {
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    & !(PF_SPINDOWN as libc::c_int) as libc::c_uint,
            );
        }
    }
    if (*player).quittime != 0
        && ((*player).powers[pw_flashing as libc::c_int as usize] as libc::c_int)
            < flashingtics as libc::c_int - 1 as libc::c_int
        && !(G_TagGametype() != 0
            && (*player).pflags as libc::c_uint & PF_TAGIT as libc::c_int as libc::c_uint
                == 0) && (*player).gotflag == 0
    {
        (*player)
            .powers[pw_flashing as libc::c_int
            as usize] = (flashingtics as libc::c_int - 1 as libc::c_int) as uint16_t;
    }
    if (*player).ammoremovaltimer != 0 {
        (*player).ammoremovaltimer = ((*player).ammoremovaltimer).wrapping_sub(1);
        if (*player).ammoremovaltimer == 0 as libc::c_int as tic_t {
            (*player).ammoremoval = 0 as libc::c_int as uint16_t;
        }
    }
    if (*player).powers[pw_sneakers as libc::c_int as usize] as libc::c_int != 0
        && ((*player).powers[pw_sneakers as libc::c_int as usize] as libc::c_int)
            < 65535 as libc::c_int
    {
        (*player)
            .powers[pw_sneakers as libc::c_int
            as usize] = ((*player).powers[pw_sneakers as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_sneakers as libc::c_int as usize];
    }
    if (*player).powers[pw_invulnerability as libc::c_int as usize] as libc::c_int != 0
        && ((*player).powers[pw_invulnerability as libc::c_int as usize] as libc::c_int)
            < 65535 as libc::c_int
    {
        (*player)
            .powers[pw_invulnerability as libc::c_int
            as usize] = ((*player).powers[pw_invulnerability as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_invulnerability as libc::c_int as usize];
    }
    if (*player).powers[pw_flashing as libc::c_int as usize] as libc::c_int != 0
        && ((*player).powers[pw_flashing as libc::c_int as usize] as libc::c_int)
            < 65535 as libc::c_int
        && ((*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_NIGHTSMODE as libc::c_int
            || ((*player).powers[pw_flashing as libc::c_int as usize] as libc::c_int)
                < flashingtics as libc::c_int)
    {
        (*player)
            .powers[pw_flashing as libc::c_int
            as usize] = ((*player).powers[pw_flashing as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_flashing as libc::c_int as usize];
    }
    if (*player).powers[pw_tailsfly as libc::c_int as usize] as libc::c_int != 0
        && ((*player).powers[pw_tailsfly as libc::c_int as usize] as libc::c_int)
            < 65535 as libc::c_int
        && (*player).charability as libc::c_int != CA_SWIM as libc::c_int
    {
        (*player)
            .powers[pw_tailsfly as libc::c_int
            as usize] = ((*player).powers[pw_tailsfly as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_tailsfly as libc::c_int as usize];
    }
    if (*player).powers[pw_pushing as libc::c_int as usize] as libc::c_int != 0
        && ((*player).powers[pw_pushing as libc::c_int as usize] as libc::c_int)
            < 65535 as libc::c_int
    {
        (*player)
            .powers[pw_pushing as libc::c_int
            as usize] = ((*player).powers[pw_pushing as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_pushing as libc::c_int as usize];
    }
    if (*player).powers[pw_justsprung as libc::c_int as usize] as libc::c_int
        & ((1 as libc::c_int) << 15 as libc::c_int) - 1 as libc::c_int != 0
        && ((*player).powers[pw_justsprung as libc::c_int as usize] as libc::c_int)
            < 65535 as libc::c_int
    {
        (*player)
            .powers[pw_justsprung as libc::c_int
            as usize] = ((*player).powers[pw_justsprung as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_justsprung as libc::c_int as usize];
    } else {
        (*player)
            .powers[pw_justsprung as libc::c_int
            as usize] = 0 as libc::c_int as uint16_t;
    }
    if (*player).powers[pw_noautobrake as libc::c_int as usize] as libc::c_int != 0
        && ((*player).powers[pw_noautobrake as libc::c_int as usize] as libc::c_int)
            < 65535 as libc::c_int
    {
        (*player)
            .powers[pw_noautobrake as libc::c_int
            as usize] = ((*player).powers[pw_noautobrake as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_noautobrake as libc::c_int as usize];
    }
    if (*player).powers[pw_underwater as libc::c_int as usize] as libc::c_int != 0
        && ((*player).pflags as libc::c_uint & PF_GODMODE as libc::c_int as libc::c_uint
            != 0
            || (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
                & SH_PROTECTWATER as libc::c_int != 0)
    {
        if (*player).powers[pw_underwater as libc::c_int as usize] as libc::c_int
            <= 12 as libc::c_int * 35 as libc::c_int + 1 as libc::c_int
        {
            (*player)
                .powers[pw_underwater as libc::c_int
                as usize] = 0 as libc::c_int as uint16_t;
            P_RestoreMusic(player);
        } else {
            (*player)
                .powers[pw_underwater as libc::c_int
                as usize] = 0 as libc::c_int as uint16_t;
        }
    } else if (*player).powers[pw_underwater as libc::c_int as usize] as libc::c_int != 0
        && maptol & TOL_NIGHTS as libc::c_int as uint32_t == 0
        && !((netgame != 0 || multiplayer != 0)
            && ((*player).spectator != 0 || (*player).quittime != 0))
    {
        (*player)
            .powers[pw_underwater as libc::c_int
            as usize] = ((*player).powers[pw_underwater as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_underwater as libc::c_int as usize];
    }
    if (*player).powers[pw_spacetime as libc::c_int as usize] as libc::c_int != 0
        && ((*player).pflags as libc::c_uint & PF_GODMODE as libc::c_int as libc::c_uint
            != 0
            || (*player).powers[pw_shield as libc::c_int as usize] as libc::c_int
                & SH_PROTECTWATER as libc::c_int != 0)
    {
        (*player)
            .powers[pw_spacetime as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
    } else if (*player).powers[pw_spacetime as libc::c_int as usize] as libc::c_int != 0
        && maptol & TOL_NIGHTS as libc::c_int as uint32_t == 0
        && !((netgame != 0 || multiplayer != 0)
            && ((*player).spectator != 0 || (*player).quittime != 0))
    {
        (*player)
            .powers[pw_spacetime as libc::c_int
            as usize] = ((*player).powers[pw_spacetime as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_spacetime as libc::c_int as usize];
    }
    if (*player).powers[pw_gravityboots as libc::c_int as usize] as libc::c_int != 0
        && ((*player).powers[pw_gravityboots as libc::c_int as usize] as libc::c_int)
            < 65535 as libc::c_int
    {
        (*player)
            .powers[pw_gravityboots as libc::c_int
            as usize] = ((*player).powers[pw_gravityboots as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_gravityboots as libc::c_int as usize];
    }
    if (*player).powers[pw_extralife as libc::c_int as usize] as libc::c_int != 0
        && ((*player).powers[pw_extralife as libc::c_int as usize] as libc::c_int)
            < 65535 as libc::c_int
    {
        (*player)
            .powers[pw_extralife as libc::c_int
            as usize] = ((*player).powers[pw_extralife as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_extralife as libc::c_int as usize];
    }
    if (*player).powers[pw_nights_linkfreeze as libc::c_int as usize] as libc::c_int != 0
        && ((*player).powers[pw_nights_linkfreeze as libc::c_int as usize]
            as libc::c_int) < 65535 as libc::c_int
    {
        (*player)
            .powers[pw_nights_linkfreeze as libc::c_int
            as usize] = ((*player).powers[pw_nights_linkfreeze as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_nights_linkfreeze as libc::c_int as usize];
    }
    if (*player).powers[pw_nights_superloop as libc::c_int as usize] as libc::c_int != 0
        && ((*player).powers[pw_nights_superloop as libc::c_int as usize] as libc::c_int)
            < 65535 as libc::c_int
    {
        (*player)
            .powers[pw_nights_superloop as libc::c_int
            as usize] = ((*player).powers[pw_nights_superloop as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_nights_superloop as libc::c_int as usize];
    }
    if (*player).powers[pw_nights_helper as libc::c_int as usize] as libc::c_int != 0
        && ((*player).powers[pw_nights_helper as libc::c_int as usize] as libc::c_int)
            < 65535 as libc::c_int
    {
        (*player)
            .powers[pw_nights_helper as libc::c_int
            as usize] = ((*player).powers[pw_nights_helper as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_nights_helper as libc::c_int as usize];
    }
    if (*player).powers[pw_nocontrol as libc::c_int as usize] as libc::c_int
        & ((1 as libc::c_int) << 15 as libc::c_int) - 1 as libc::c_int != 0
        && ((*player).powers[pw_nocontrol as libc::c_int as usize] as libc::c_int)
            < 65535 as libc::c_int
    {
        (*player)
            .powers[pw_nocontrol as libc::c_int
            as usize] = ((*player).powers[pw_nocontrol as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_nocontrol as libc::c_int as usize];
    } else {
        (*player)
            .powers[pw_nocontrol as libc::c_int as usize] = 0 as libc::c_int as uint16_t;
    }
    if (*player).powers[pw_ignorelatch as libc::c_int as usize] as libc::c_int
        & ((1 as libc::c_int) << 15 as libc::c_int) - 1 as libc::c_int != 0
        && ((*player).powers[pw_ignorelatch as libc::c_int as usize] as libc::c_int)
            < 65535 as libc::c_int
    {
        (*player)
            .powers[pw_ignorelatch as libc::c_int
            as usize] = ((*player).powers[pw_ignorelatch as libc::c_int as usize])
            .wrapping_sub(1);
        (*player).powers[pw_ignorelatch as libc::c_int as usize];
    } else {
        (*player)
            .powers[pw_ignorelatch as libc::c_int
            as usize] = 0 as libc::c_int as uint16_t;
    }
    if (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
        & STR_ANIM as libc::c_int != 0
    {
        if (*player).stronganim == 0 {
            (*player).stronganim = (*player).panim as uint8_t;
        } else if (*player).panim as libc::c_uint != (*player).stronganim as libc::c_uint
        {
            (*player)
                .powers[pw_strong as libc::c_int
                as usize] = STR_NONE as libc::c_int as uint16_t;
        }
    } else if (*player).stronganim != 0 {
        (*player).stronganim = 0 as libc::c_int as uint8_t;
    }
    if (*player).powers[pw_super as libc::c_int as usize] as libc::c_int != 0
        && ((*(*player).mo).state
            < &mut *states
                .as_mut_ptr()
                .offset(S_PLAY_SUPER_TRANS1 as libc::c_int as isize) as *mut state_t
            || (*(*player).mo).state
                > &mut *states
                    .as_mut_ptr()
                    .offset(S_PLAY_SUPER_TRANS6 as libc::c_int as isize) as *mut state_t)
    {
        (*player)
            .powers[pw_super as libc::c_int
            as usize] = ((*player).powers[pw_super as libc::c_int as usize])
            .wrapping_add(1);
        (*player).powers[pw_super as libc::c_int as usize];
    }
    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_BRAKGOOP as libc::c_int
    {
        if (*player).powers[pw_flashing as libc::c_int as usize] == 0 {
            if (*(*player).mo).state
                != &mut *states.as_mut_ptr().offset(S_PLAY_STND as libc::c_int as isize)
                    as *mut state_t
            {
                P_SetPlayerMobjState((*player).mo, S_PLAY_STND);
            } else {
                (*(*player).mo).tics = 2 as libc::c_int;
            }
        } else {
            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
        }
        if ((*(*player).mo).tracer).is_null() {
            (*player)
                .powers[pw_carry as libc::c_int
                as usize] = CR_NONE as libc::c_int as uint16_t;
        }
    }
    if (*player).bumpertime != 0 {
        (*player).bumpertime = ((*player).bumpertime).wrapping_sub(1);
        (*player).bumpertime;
    }
    if (*player).skidtime != 0 {
        (*player).skidtime = ((*player).skidtime).wrapping_sub(1);
        (*player).skidtime;
    }
    if (*player).weapondelay != 0 {
        (*player).weapondelay -= 1;
        (*player).weapondelay;
    }
    if (*player).tossdelay != 0 {
        (*player).tossdelay -= 1;
        (*player).tossdelay;
    }
    if (*player).homing != 0 {
        (*player).homing = ((*player).homing).wrapping_sub(1);
        (*player).homing;
    }
    if (*player).texttimer != 0 {
        (*player).texttimer = ((*player).texttimer).wrapping_sub(1);
        (*player).texttimer;
        if (*player).texttimer == 0 && (*player).exiting == 0
            && (*player).textvar as libc::c_int >= 4 as libc::c_int
        {
            (*player).texttimer = (4 as libc::c_int * 35 as libc::c_int) as uint8_t;
            (*player).textvar = 2 as libc::c_int as uint8_t;
            if !((*player).capsule).is_null()
                && (*(*player).capsule).health
                    != (*(*(*player).capsule).spawnpoint).angle as libc::c_int
            {
                (*player).textvar = ((*player).textvar).wrapping_add(1);
                (*player).textvar;
            }
        }
    }
    if (*player).losstime != 0
        && (*player).powers[pw_flashing as libc::c_int as usize] == 0
    {
        (*player).losstime = ((*player).losstime).wrapping_sub(1);
        (*player).losstime;
    }
    if (*player).powers[pw_flashing as libc::c_int as usize] as libc::c_int
        > 0 as libc::c_int
        && ((*player).powers[pw_flashing as libc::c_int as usize] as libc::c_int)
            < flashingtics as libc::c_int && leveltime & 1 as libc::c_int as tic_t != 0
        && (*player).playerstate as libc::c_uint
            == PST_LIVE as libc::c_int as libc::c_uint
    {
        (*(*player).mo).flags2 |= MF2_DONTDRAW as libc::c_int as uint32_t;
    } else {
        (*(*player).mo).flags2 &= !(MF2_DONTDRAW as libc::c_int) as uint32_t;
    }
    (*player)
        .pflags = ::core::mem::transmute::<
        libc::c_uint,
        pflags_t,
    >((*player).pflags as libc::c_uint & !(PF_SLIDING as libc::c_int) as libc::c_uint);
    if (*player).charflags & SF_DASHMODE as libc::c_int as uint32_t != 0
        && (*player).gotflag == 0
        && (*player).powers[pw_carry as libc::c_int as usize] == 0
        && (*player).exiting == 0 && maptol & TOL_NIGHTS as libc::c_int as uint32_t == 0
        && metalrecording == 0
    {
        let mut prevdashmode: tic_t = (*player).dashmode;
        let mut totallyradical: boolean = ((*player).speed
            >= FixedMul((*player).runspeed, (*(*player).mo).scale)) as libc::c_int;
        let mut floating: boolean = ((*player).secondjump as libc::c_int
            == 1 as libc::c_int) as libc::c_int;
        if totallyradical != 0 && floating == 0
            || (*player).pflags as libc::c_uint
                & PF_STARTDASH as libc::c_int as libc::c_uint != 0
        {
            if (*player).dashmode
                < (3 as libc::c_int * 35 as libc::c_int + 3 as libc::c_int) as tic_t
            {
                (*player).dashmode = ((*player).dashmode).wrapping_add(1);
                (*player).dashmode;
            }
            if (*player).dashmode == (3 as libc::c_int * 35 as libc::c_int) as tic_t {
                S_StartSound(
                    (*player).mo as *const libc::c_void,
                    (if (*player).charflags & SF_MACHINE as libc::c_int as uint32_t != 0
                    {
                        sfx_kc4d as libc::c_int
                    } else {
                        sfx_cdfm40 as libc::c_int
                    }) as sfxenum_t,
                );
            }
        } else if (totallyradical == 0 || floating == 0)
            && (*player).pflags as libc::c_uint
                & PF_SPINNING as libc::c_int as libc::c_uint == 0
        {
            if (*player).dashmode > 3 as libc::c_int as tic_t {
                (*player)
                    .dashmode = ((*player).dashmode)
                    .wrapping_sub(3 as libc::c_int as tic_t);
                if ((*player).dashmode).wrapping_add(3 as libc::c_int as tic_t)
                    >= (3 as libc::c_int * 35 as libc::c_int) as tic_t
                    && (*player).dashmode
                        < (3 as libc::c_int * 35 as libc::c_int) as tic_t
                {
                    S_StartSound((*player).mo as *const libc::c_void, sfx_kc65);
                }
            } else {
                (*player).dashmode = 0 as libc::c_int as tic_t;
            }
        }
        if (*player).dashmode < (3 as libc::c_int * 35 as libc::c_int) as tic_t {
            if prevdashmode >= (3 as libc::c_int * 35 as libc::c_int) as tic_t {
                (*player).normalspeed = skins[(*player).skin as usize].normalspeed;
                (*player).jumpfactor = skins[(*player).skin as usize].jumpfactor;
                if (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
                    & STR_DASH as libc::c_int != 0
                {
                    (*player)
                        .powers[pw_strong as libc::c_int
                        as usize] = STR_NONE as libc::c_int as uint16_t;
                }
            }
        } else if P_IsObjectOnGround((*player).mo) != 0 {
            if (*player).normalspeed
                < skins[(*player).skin as usize].normalspeed * 2 as libc::c_int
            {
                (*player).normalspeed
                    += ((1 as libc::c_int) << 16 as libc::c_int) / 5 as libc::c_int;
            }
            if (*player).jumpfactor
                < FixedMul(
                    skins[(*player).skin as usize].jumpfactor,
                    5 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                        / 4 as libc::c_int,
                )
            {
                (*player).jumpfactor
                    += ((1 as libc::c_int) << 16 as libc::c_int) / 300 as libc::c_int;
            }
            if (*player).charflags & SF_MACHINE as libc::c_int as uint32_t != 0
                && !((*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
                    == STR_METAL as libc::c_int)
            {
                (*player)
                    .powers[pw_strong as libc::c_int
                    as usize] = STR_METAL as libc::c_int as uint16_t;
            }
        }
        if (*player).normalspeed
            >= skins[(*player).skin as usize].normalspeed * 2 as libc::c_int
        {
            let mut ghost: *mut mobj_t = P_SpawnGhostMobj((*player).mo);
            (*ghost).fuse = 2 as libc::c_int;
            if !((*ghost).tracer).is_null() && P_MobjWasRemoved((*ghost).tracer) == 0 {
                (*(*ghost).tracer).fuse = (*ghost).fuse;
            }
        }
    } else if (*player).dashmode != 0 {
        if (*player).dashmode >= (3 as libc::c_int * 35 as libc::c_int) as tic_t {
            (*player).normalspeed = skins[(*player).skin as usize].normalspeed;
            (*player).jumpfactor = skins[(*player).skin as usize].jumpfactor;
            S_StartSound((*player).mo as *const libc::c_void, sfx_kc65);
            if (*player).powers[pw_strong as libc::c_int as usize] as libc::c_int
                & STR_DASH as libc::c_int != 0
            {
                (*player)
                    .powers[pw_strong as libc::c_int
                    as usize] = STR_NONE as libc::c_int as uint16_t;
            }
        }
        (*player).dashmode = 0 as libc::c_int as tic_t;
    }
    LUA_HookPlayer(player, hook_PlayerThink as libc::c_int);
}
unsafe extern "C" fn P_MobjAboveLava(mut mobj: *mut mobj_t) -> boolean {
    let mut sector: *mut sector_t = (*(*mobj).subsector).sector;
    if !((*sector).ffloors).is_null() {
        let mut rover: *mut ffloor_t = 0 as *mut ffloor_t;
        rover = (*sector).ffloors;
        while !rover.is_null() {
            if !((*rover).fofflags as libc::c_uint
                & FOF_EXISTS as libc::c_int as libc::c_uint == 0
                || (*rover).fofflags as libc::c_uint
                    & FOF_SWIMMABLE as libc::c_int as libc::c_uint == 0)
            {
                if !((*(*(*rover).master).frontsector).damagetype as libc::c_int
                    != SD_FIRE as libc::c_int
                    && (*(*(*rover).master).frontsector).damagetype as libc::c_int
                        != SD_LAVA as libc::c_int)
                {
                    if (*mobj).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                        != 0
                    {
                        if *(*rover).bottomheight <= (*mobj).ceilingz
                            && *(*rover).bottomheight >= (*mobj).z
                        {
                            return true_0 as libc::c_int;
                        }
                    } else if *(*rover).topheight >= (*mobj).floorz
                        && *(*rover).topheight <= (*mobj).z
                    {
                        return true_0 as libc::c_int
                    }
                }
            }
            rover = (*rover).next;
        }
    }
    return false_0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_PlayerAfterThink(mut player: *mut player_t) {
    let mut current_block: u64;
    let mut cmd: *mut ticcmd_t = 0 as *mut ticcmd_t;
    let mut oldweapon: int32_t = (*player).currentweapon;
    let mut thiscam: *mut camera_t = 0 as *mut camera_t;
    cmd = &mut (*player).cmd;
    if (*player).onconveyor != 1 as libc::c_int || P_IsObjectOnGround((*player).mo) == 0
    {
        (*player).onconveyor = 0 as libc::c_int;
    }
    if (*player).spectator == 0 {
        P_PlayerInSpecialSector(player);
    }
    if splitscreen != 0
        && player
            == &mut *players.as_mut_ptr().offset(secondarydisplayplayer as isize)
                as *mut player_t
    {
        thiscam = &mut camera2;
    } else if player
        == &mut *players.as_mut_ptr().offset(displayplayer as isize) as *mut player_t
    {
        thiscam = &mut camera;
    }
    if (*player).playerstate as libc::c_uint == PST_DEAD as libc::c_int as libc::c_uint {
        if !thiscam.is_null() && (*thiscam).chase != 0 {
            P_MoveChaseCamera(player, thiscam, false_0 as libc::c_int);
        }
        if !((*player).followmobj).is_null() {
            P_RemoveMobj((*player).followmobj);
            P_SetTarget2(&mut (*player).followmobj, 0 as *mut mobj_t);
        }
        return;
    }
    if (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
        == CR_NIGHTSMODE as libc::c_int
    {
        (*player)
            .powers[pw_gravityboots as libc::c_int
            as usize] = 0 as libc::c_int as uint16_t;
    }
    if (*player).pflags as libc::c_uint & PF_WPNDOWN as libc::c_int as libc::c_uint == 0
    {
        if (*cmd).buttons as libc::c_int & BT_WEAPONNEXT as libc::c_int != 0 {
            (*player).currentweapon += 1;
            (*player).currentweapon;
            (*player).currentweapon %= 7 as libc::c_int;
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    | PF_WPNDOWN as libc::c_int as libc::c_uint,
            );
        }
        if (*cmd).buttons as libc::c_int & BT_WEAPONPREV as libc::c_int != 0 {
            (*player).currentweapon -= 1;
            (*player).currentweapon;
            if (*player).currentweapon < 0 as libc::c_int {
                (*player).currentweapon = 7 as libc::c_int - 1 as libc::c_int;
            }
            (*player)
                .pflags = ::core::mem::transmute::<
                libc::c_uint,
                pflags_t,
            >(
                (*player).pflags as libc::c_uint
                    | PF_WPNDOWN as libc::c_int as libc::c_uint,
            );
            if (*player).currentweapon == 6 as libc::c_int
                && ((*player).ringweapons & RW_RAIL as libc::c_int == 0
                    || (*player).powers[pw_railring as libc::c_int as usize] == 0)
            {
                (*player).currentweapon -= 1;
                (*player).currentweapon;
            }
            if (*player).currentweapon == 5 as libc::c_int
                && ((*player).ringweapons & RW_EXPLODE as libc::c_int == 0
                    || (*player).powers[pw_explosionring as libc::c_int as usize] == 0)
            {
                (*player).currentweapon -= 1;
                (*player).currentweapon;
            }
            if (*player).currentweapon == 4 as libc::c_int
                && ((*player).ringweapons & RW_GRENADE as libc::c_int == 0
                    || (*player).powers[pw_grenadering as libc::c_int as usize] == 0)
            {
                (*player).currentweapon -= 1;
                (*player).currentweapon;
            }
            if (*player).currentweapon == 3 as libc::c_int
                && ((*player).ringweapons & RW_SCATTER as libc::c_int == 0
                    || (*player).powers[pw_scatterring as libc::c_int as usize] == 0)
            {
                (*player).currentweapon -= 1;
                (*player).currentweapon;
            }
            if (*player).currentweapon == 2 as libc::c_int
                && ((*player).ringweapons & RW_BOUNCE as libc::c_int == 0
                    || (*player).powers[pw_bouncering as libc::c_int as usize] == 0)
            {
                (*player).currentweapon -= 1;
                (*player).currentweapon;
            }
            if (*player).currentweapon == 1 as libc::c_int
                && ((*player).ringweapons & RW_AUTO as libc::c_int == 0
                    || (*player).powers[pw_automaticring as libc::c_int as usize] == 0)
            {
                (*player).currentweapon = 0 as libc::c_int;
            }
        }
        if (*cmd).buttons as libc::c_int & BT_WEAPONMASK as libc::c_int != 0 {
            let mut weapon: int32_t = (*cmd).buttons as libc::c_int
                & BT_WEAPONMASK as libc::c_int;
            match weapon {
                1 => {
                    (*player).currentweapon = 0 as libc::c_int;
                    (*player)
                        .pflags = ::core::mem::transmute::<
                        libc::c_uint,
                        pflags_t,
                    >(
                        (*player).pflags as libc::c_uint
                            | PF_WPNDOWN as libc::c_int as libc::c_uint,
                    );
                }
                2 => {
                    if (*player).ringweapons & RW_AUTO as libc::c_int != 0
                        && (*player).powers[pw_automaticring as libc::c_int as usize]
                            as libc::c_int != 0
                    {
                        (*player).currentweapon = 1 as libc::c_int;
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                | PF_WPNDOWN as libc::c_int as libc::c_uint,
                        );
                    }
                }
                3 => {
                    if (*player).ringweapons & RW_BOUNCE as libc::c_int != 0
                        && (*player).powers[pw_bouncering as libc::c_int as usize]
                            as libc::c_int != 0
                    {
                        (*player).currentweapon = 2 as libc::c_int;
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                | PF_WPNDOWN as libc::c_int as libc::c_uint,
                        );
                    }
                }
                4 => {
                    if (*player).ringweapons & RW_SCATTER as libc::c_int != 0
                        && (*player).powers[pw_scatterring as libc::c_int as usize]
                            as libc::c_int != 0
                    {
                        (*player).currentweapon = 3 as libc::c_int;
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                | PF_WPNDOWN as libc::c_int as libc::c_uint,
                        );
                    }
                }
                5 => {
                    if (*player).ringweapons & RW_GRENADE as libc::c_int != 0
                        && (*player).powers[pw_grenadering as libc::c_int as usize]
                            as libc::c_int != 0
                    {
                        (*player).currentweapon = 4 as libc::c_int;
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                | PF_WPNDOWN as libc::c_int as libc::c_uint,
                        );
                    }
                }
                6 => {
                    if (*player).ringweapons & RW_EXPLODE as libc::c_int != 0
                        && (*player).powers[pw_explosionring as libc::c_int as usize]
                            as libc::c_int != 0
                    {
                        (*player).currentweapon = 5 as libc::c_int;
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                | PF_WPNDOWN as libc::c_int as libc::c_uint,
                        );
                    }
                }
                7 => {
                    if (*player).ringweapons & RW_RAIL as libc::c_int != 0
                        && (*player).powers[pw_railring as libc::c_int as usize]
                            as libc::c_int != 0
                    {
                        (*player).currentweapon = 6 as libc::c_int;
                        (*player)
                            .pflags = ::core::mem::transmute::<
                            libc::c_uint,
                            pflags_t,
                        >(
                            (*player).pflags as libc::c_uint
                                | PF_WPNDOWN as libc::c_int as libc::c_uint,
                        );
                    }
                }
                _ => {}
            }
        }
    }
    if (*cmd).buttons as libc::c_int
        & (BT_WEAPONNEXT as libc::c_int | BT_WEAPONPREV as libc::c_int
            | BT_WEAPONMASK as libc::c_int) == 0
    {
        (*player)
            .pflags = ::core::mem::transmute::<
            libc::c_uint,
            pflags_t,
        >(
            (*player).pflags as libc::c_uint
                & !(PF_WPNDOWN as libc::c_int) as libc::c_uint,
        );
    }
    if (*player).currentweapon == 1 as libc::c_int
        && ((*player).ringweapons & RW_AUTO as libc::c_int == 0
            || (*player).powers[pw_automaticring as libc::c_int as usize] == 0)
    {
        (*player).currentweapon += 1;
        (*player).currentweapon;
    }
    if (*player).currentweapon == 2 as libc::c_int
        && ((*player).ringweapons & RW_BOUNCE as libc::c_int == 0
            || (*player).powers[pw_bouncering as libc::c_int as usize] == 0)
    {
        (*player).currentweapon += 1;
        (*player).currentweapon;
    }
    if (*player).currentweapon == 3 as libc::c_int
        && ((*player).ringweapons & RW_SCATTER as libc::c_int == 0
            || (*player).powers[pw_scatterring as libc::c_int as usize] == 0)
    {
        (*player).currentweapon += 1;
        (*player).currentweapon;
    }
    if (*player).currentweapon == 4 as libc::c_int
        && ((*player).ringweapons & RW_GRENADE as libc::c_int == 0
            || (*player).powers[pw_grenadering as libc::c_int as usize] == 0)
    {
        (*player).currentweapon += 1;
        (*player).currentweapon;
    }
    if (*player).currentweapon == 5 as libc::c_int
        && ((*player).ringweapons & RW_EXPLODE as libc::c_int == 0
            || (*player).powers[pw_explosionring as libc::c_int as usize] == 0)
    {
        (*player).currentweapon += 1;
        (*player).currentweapon;
    }
    if (*player).currentweapon == 6 as libc::c_int
        && ((*player).ringweapons & RW_RAIL as libc::c_int == 0
            || (*player).powers[pw_railring as libc::c_int as usize] == 0)
    {
        (*player).currentweapon = 0 as libc::c_int;
    }
    if P_IsLocalPlayer(player) != 0
        && (*player).pflags as libc::c_uint & PF_WPNDOWN as libc::c_int as libc::c_uint
            != 0 && (*player).currentweapon != oldweapon
    {
        S_StartSound(0 as *const libc::c_void, sfx_wepchg);
    }
    if (*player).pflags as libc::c_uint & PF_SLIDING as libc::c_int as libc::c_uint != 0
        && (*player).pflags as libc::c_uint
            & (PF_JUMPED as libc::c_int | PF_NOJUMPDAMAGE as libc::c_int) as libc::c_uint
            != PF_JUMPED as libc::c_int as libc::c_uint
    {
        P_SetPlayerMobjState((*player).mo, (*(*(*player).mo).info).painstate);
    }
    if !((*(*player).mo).tracer).is_null() {
        match (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int {
            2 => {
                current_block = 576355610076403033;
                match current_block {
                    576355610076403033 => {
                        let mut tails: *mut mobj_t = (*(*player).mo).tracer;
                        (*(*player).mo)
                            .height = FixedDiv(
                            FixedMul((*player).height, (*(*player).mo).scale),
                            FixedDiv(
                                14 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                10 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                            ),
                        );
                        if !((*tails).player).is_null()
                            && (*(*tails).player).pflags as libc::c_uint
                                & PF_CANCARRY as libc::c_int as libc::c_uint == 0
                        {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int != 0
                        {
                            if (*tails).z + (*tails).height + (*(*player).mo).height
                                + FixedMul(
                                    (1 as libc::c_int) << 16 as libc::c_int,
                                    (*(*player).mo).scale,
                                ) <= (*tails).ceilingz
                                && (*tails).eflags as libc::c_int
                                    & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                (*(*player).mo)
                                    .z = (*tails).z + (*tails).height
                                    + 12 as libc::c_int * (*(*player).mo).scale;
                            } else {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                            }
                        } else if (*tails).z - (*(*player).mo).height
                            - FixedMul(
                                (1 as libc::c_int) << 16 as libc::c_int,
                                (*(*player).mo).scale,
                            ) >= (*tails).floorz
                            && (*tails).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int == 0
                        {
                            (*(*player).mo)
                                .z = (*tails).z - (*(*player).mo).height
                                - 12 as libc::c_int * (*(*player).mo).scale;
                        } else {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*tails).health <= 0 as libc::c_int {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        } else {
                            if !((*tails).player).is_null() {
                                P_TryMove(
                                    (*player).mo,
                                    (*tails).x
                                        + P_ReturnThrustX(
                                            tails,
                                            (*(*tails).player).drawangle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    (*tails).y
                                        + P_ReturnThrustY(
                                            tails,
                                            (*(*tails).player).drawangle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    true_0 as libc::c_int,
                                );
                            } else {
                                P_TryMove(
                                    (*player).mo,
                                    (*tails).x
                                        + P_ReturnThrustX(
                                            tails,
                                            (*tails).angle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    (*tails).y
                                        + P_ReturnThrustY(
                                            tails,
                                            (*tails).angle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    true_0 as libc::c_int,
                                );
                            }
                            (*(*player).mo).momx = (*tails).momx;
                            (*(*player).mo).momy = (*tails).momy;
                            (*(*player).mo).momz = (*tails).momz;
                        }
                        if G_CoopGametype() != 0 && !((*tails).player).is_null()
                            && (*(*tails).player).bot as libc::c_int
                                != BOT_2PAI as libc::c_int
                        {
                            (*(*player).mo).angle = (*tails).angle;
                            if demoplayback == 0
                                || (if (*player).pflags as libc::c_uint
                                    & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                {
                                    CS_LMAOGALOG as libc::c_int
                                } else {
                                    0 as libc::c_int
                                })
                                    | (if (*player).pflags as libc::c_uint
                                        & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                    {
                                        CS_STANDARD as libc::c_int
                                    } else {
                                        0 as libc::c_int
                                    }) == CS_LMAOGALOG as libc::c_int
                            {
                                P_SetPlayerAngle(player, (*(*player).mo).angle);
                            }
                        }
                        if P_AproxDistance(
                            (*(*player).mo).x - (*tails).x,
                            (*(*player).mo).y - (*tails).y,
                        ) > (*(*player).mo).radius
                        {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*player).powers[pw_carry as libc::c_int as usize]
                            as libc::c_int == CR_PLAYER as libc::c_int
                        {
                            if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                as libc::c_long
                                != S_PLAY_RIDE as libc::c_int as libc::c_long
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
                            }
                            if !((*tails).player).is_null()
                                && (!((*tails).skin).is_null()
                                    && (*((*tails).skin as *mut skin_t))
                                        .sprites[SPR2_SWIM as libc::c_int as usize]
                                        .numframes != 0)
                                && (*tails).eflags as libc::c_int
                                    & MFE_UNDERWATER as libc::c_int != 0
                            {
                                (*(*tails).player)
                                    .powers[pw_tailsfly as libc::c_int
                                    as usize] = 0 as libc::c_int as uint16_t;
                            }
                        } else if (*player).powers[pw_carry as libc::c_int as usize]
                            as libc::c_int == CR_NONE as libc::c_int
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                        }
                        if player.offset_from(players.as_mut_ptr()) as libc::c_long
                            == consoleplayer as libc::c_long && botingame != 0
                        {
                            CV_SetValue(
                                &mut *cv_analog
                                    .as_mut_ptr()
                                    .offset(1 as libc::c_int as isize),
                                ((*player).powers[pw_carry as libc::c_int as usize]
                                    as libc::c_int != CR_PLAYER as libc::c_int) as libc::c_int,
                            );
                        }
                    }
                    12265727859147633668 => {
                        let mut mo_1: *mut mobj_t = (*player).mo;
                        let mut rock: *mut mobj_t = (*(*player).mo).tracer;
                        let mut walktics: uint8_t = ((*(*mo_1).state).tics
                            - P_GetPlayerControlDirection(player)) as uint8_t;
                        if rock.is_null() || P_MobjWasRemoved(rock) != 0 {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        } else {
                            if (*player).cmd.forwardmove as libc::c_int != 0
                                || (*player).cmd.sidemove as libc::c_int != 0
                            {
                                (*rock).flags2 |= MF2_STRONGBOX as libc::c_int as uint32_t;
                                if maptol & TOL_2D as libc::c_int as uint32_t != 0
                                    || (*mo_1).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0
                                {
                                    (*rock).movedir = (*mo_1).angle;
                                } else {
                                    (*rock)
                                        .movedir = ((((*player).cmd.angleturn as libc::c_int)
                                        << 16 as libc::c_int) as angle_t)
                                        .wrapping_add(
                                            R_PointToAngle2(
                                                0 as libc::c_int,
                                                0 as libc::c_int,
                                                ((*player).cmd.forwardmove as libc::c_int)
                                                    << 16 as libc::c_int,
                                                -((*player).cmd.sidemove as libc::c_int)
                                                    << 16 as libc::c_int,
                                            ),
                                        );
                                }
                                P_Thrust(
                                    rock,
                                    (*rock).movedir,
                                    (*rock).scale >> 1 as libc::c_int,
                                );
                            } else {
                                (*rock).flags2
                                    &= !(MF2_STRONGBOX as libc::c_int) as uint32_t;
                            }
                            (*mo_1).momx = (*rock).momx;
                            (*mo_1).momy = (*rock).momy;
                            (*mo_1).momz = 0 as libc::c_int;
                            if (*player).panim as libc::c_uint
                                == PA_IDLE as libc::c_int as libc::c_uint
                                && ((*mo_1).momx != 0 || (*mo_1).momy != 0)
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
                            }
                            if (*player).panim as libc::c_uint
                                == PA_WALK as libc::c_int as libc::c_uint
                                && (*mo_1).tics > walktics as libc::c_int
                            {
                                (*mo_1).tics = walktics as int32_t;
                            }
                            P_MoveOrigin(
                                (*player).mo,
                                (*rock).x,
                                (*rock).y,
                                (*rock).z
                                    + (if (*mo_1).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int != 0
                                    {
                                        -(*mo_1).height
                                    } else {
                                        (*rock).height
                                    }),
                            );
                        }
                    }
                    4367251730605750521 => {
                        let mut zdist: fixed_t = 0;
                        let mut mo_0: *mut mobj_t = (*player).mo;
                        let mut fan: *mut mobj_t = (*(*player).mo).tracer;
                        if (*player).pflags as libc::c_uint
                            & PF_JUMPSTASIS as libc::c_int as libc::c_uint == 0
                        {
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    | PF_JUMPSTASIS as libc::c_int as libc::c_uint,
                            );
                        }
                        if (*fan).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                            != 0
                        {
                            zdist = (*mo_0).z + (*mo_0).height
                                - ((*fan).z + (*fan).height);
                        } else {
                            zdist = (*mo_0).z - (*fan).z;
                        }
                        if (*fan).type_0 as libc::c_uint
                            != MT_FAN as libc::c_int as libc::c_uint
                            && (P_PlayerTouchingSectorSpecialFlag(player, SSF_FAN))
                                .is_null()
                            || (*fan).type_0 as libc::c_uint
                                == MT_FAN as libc::c_int as libc::c_uint
                                && (abs((*mo_0).x - (*fan).x) > (*fan).radius
                                    || abs((*mo_0).y - (*fan).y) > (*fan).radius
                                    || zdist > (*fan).health << 16 as libc::c_int)
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    & !(PF_JUMPSTASIS as libc::c_int) as libc::c_uint,
                            );
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                    }
                    10601179871800211547 => {
                        let mut mo: *mut mobj_t = (*player).mo;
                        let mut dustdevil: *mut mobj_t = (*(*player).mo).tracer;
                        if abs((*mo).x - (*dustdevil).x) > (*dustdevil).radius
                            || abs((*mo).y - (*dustdevil).y) > (*dustdevil).radius
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                    }
                    17392506108461345148 => {
                        let mut chain: *mut mobj_t = 0 as *mut mobj_t;
                        let mut macecenter: *mut mobj_t = 0 as *mut mobj_t;
                        if !((*(*(*player).mo).tracer).tracer).is_null() {
                            chain = (*(*player).mo).tracer;
                            macecenter = (*(*(*player).mo).tracer).tracer;
                            (*(*player).mo)
                                .height = FixedMul(
                                (*player).spinheight,
                                (*(*player).mo).scale,
                            );
                            (*(*player).mo)
                                .momx = ((*chain).x - (*(*player).mo).x) * 2 as libc::c_int;
                            (*(*player).mo)
                                .momy = ((*chain).y - (*(*player).mo).y) * 2 as libc::c_int;
                            (*(*player).mo)
                                .momz = ((*chain).z
                                - ((*(*player).mo).height
                                    - (*chain).height / 2 as libc::c_int) - (*(*player).mo).z)
                                * 2 as libc::c_int;
                            P_MoveOrigin(
                                (*player).mo,
                                (*chain).x,
                                (*chain).y,
                                (*chain).z
                                    - ((*(*player).mo).height
                                        - (*chain).height / 2 as libc::c_int),
                            );
                            if (*player).powers[pw_flashing as libc::c_int as usize] == 0
                            {
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        | PF_JUMPED as libc::c_int as libc::c_uint,
                                );
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        & !(PF_NOJUMPDAMAGE as libc::c_int) as libc::c_uint,
                                );
                                (*player).secondjump = 0 as libc::c_int as uint8_t;
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        & !(PF_THOKKED as libc::c_int) as libc::c_uint,
                                );
                                if (*macecenter).flags
                                    & MF_SLIDEME as libc::c_int as uint32_t != 0
                                    && !(maptol & TOL_2D as libc::c_int as uint32_t != 0
                                        || (*(*player).mo).flags2
                                            & MF2_TWOD as libc::c_int as uint32_t != 0)
                                {
                                    (*macecenter)
                                        .angle = ((*macecenter).angle)
                                        .wrapping_add(
                                            (((*cmd).sidemove as libc::c_int) << 19 as libc::c_int)
                                                as angle_t,
                                        );
                                    (*(*player).mo)
                                        .angle = ((*(*player).mo).angle)
                                        .wrapping_add(
                                            (((*cmd).sidemove as libc::c_int) << 19 as libc::c_int)
                                                as angle_t,
                                        );
                                    if demoplayback == 0
                                        || (if (*player).pflags as libc::c_uint
                                            & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                        {
                                            CS_LMAOGALOG as libc::c_int
                                        } else {
                                            0 as libc::c_int
                                        })
                                            | (if (*player).pflags as libc::c_uint
                                                & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                            {
                                                CS_STANDARD as libc::c_int
                                            } else {
                                                0 as libc::c_int
                                            }) == CS_LMAOGALOG as libc::c_int
                                    {
                                        P_SetPlayerAngle(player, (*(*player).mo).angle);
                                    }
                                }
                            }
                        }
                    }
                    17702298541784679949 => {
                        let mut item: *mut mobj_t = (*(*player).mo).tracer;
                        P_UnsetThingPosition((*player).mo);
                        (*(*player).mo).x = (*item).x;
                        (*(*player).mo).y = (*item).y;
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int != 0
                        {
                            (*(*player).mo)
                                .z = (*item).z + (*item).height
                                - FixedDiv(
                                    (*(*player).mo).height,
                                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                );
                        } else {
                            (*(*player).mo)
                                .z = (*item).z
                                - FixedDiv(
                                    (*(*player).mo).height,
                                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                                        / 2 as libc::c_int,
                                );
                        }
                        (*(*player).mo).momz = 0 as libc::c_int;
                        (*(*player).mo).momy = (*(*player).mo).momz;
                        (*(*player).mo).momx = (*(*player).mo).momy;
                        P_SetThingPosition((*player).mo);
                        if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                            as libc::c_long != S_PLAY_RIDE as libc::c_int as libc::c_long
                        {
                            P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
                        }
                        if (*item).type_0 as libc::c_uint
                            == MT_BLACKEGGMAN_MISSILE as libc::c_int as libc::c_uint
                        {
                            if (*cmd).forwardmove as libc::c_int > 0 as libc::c_int {
                                (*item).momz
                                    += FixedMul(
                                        ((1 as libc::c_int) << 16 as libc::c_int)
                                            / 4 as libc::c_int,
                                        (*item).scale,
                                    );
                            } else if ((*cmd).forwardmove as libc::c_int)
                                < 0 as libc::c_int
                            {
                                (*item).momz
                                    -= FixedMul(
                                        ((1 as libc::c_int) << 16 as libc::c_int)
                                            / 4 as libc::c_int,
                                        (*item).scale,
                                    );
                            }
                            (*item).angle = (*(*player).mo).angle;
                            P_InstaThrust(
                                item,
                                (*item).angle,
                                FixedMul((*(*item).info).speed, (*item).scale),
                            );
                            if (*(*player).mo).z <= (*(*player).mo).floorz
                                || (*item).health <= 0 as libc::c_int
                            {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                                P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            }
                        }
                    }
                    _ => {
                        let mut ptera: *mut mobj_t = (*(*player).mo).tracer;
                        let mut spawnpoint: *mut mobj_t = (*(*ptera).tracer).tracer;
                        (*(*player).mo)
                            .height = FixedDiv(
                            FixedMul((*player).height, (*(*player).mo).scale),
                            FixedDiv(
                                14 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                10 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                            ),
                        );
                        if (*ptera).health <= 0 as libc::c_int {
                            current_block = 5258314151820362308;
                        } else if P_MobjAboveLava(ptera) != 0
                            && (*ptera).movefactor < 35 as libc::c_int
                        {
                            current_block = 5258314151820362308;
                        } else {
                            if (*(*player).mo).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                if (*ptera).z + (*ptera).height + (*(*player).mo).height
                                    + FixedMul(
                                        (1 as libc::c_int) << 16 as libc::c_int,
                                        (*(*player).mo).scale,
                                    ) <= (*ptera).ceilingz
                                    && (*ptera).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int != 0
                                {
                                    (*(*player).mo)
                                        .z = (*ptera).z + (*ptera).height
                                        + FixedMul(
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                            (*(*player).mo).scale,
                                        );
                                }
                                if (*ptera).ceilingz - (*ptera).z
                                    > (*spawnpoint).ceilingz - (*spawnpoint).z
                                        + 512 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int)
                                    && (*ptera).movefactor < 35 as libc::c_int
                                {
                                    current_block = 5258314151820362308;
                                } else {
                                    current_block = 13391418783698890455;
                                }
                            } else {
                                if (*ptera).z - (*(*player).mo).height
                                    - FixedMul(
                                        (1 as libc::c_int) << 16 as libc::c_int,
                                        (*(*player).mo).scale,
                                    ) >= (*ptera).floorz
                                    && (*ptera).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int == 0
                                {
                                    (*(*player).mo)
                                        .z = (*ptera).z - (*(*player).mo).height
                                        - FixedMul(
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                            (*(*player).mo).scale,
                                        );
                                }
                                if (*ptera).z - (*ptera).floorz
                                    > (*spawnpoint).z - (*spawnpoint).floorz
                                        + 512 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int)
                                    && (*ptera).movefactor < 35 as libc::c_int
                                {
                                    current_block = 5258314151820362308;
                                } else {
                                    current_block = 13391418783698890455;
                                }
                            }
                            match current_block {
                                5258314151820362308 => {}
                                _ => {
                                    (*ptera).movefactor -= 1;
                                    (*ptera).movefactor;
                                    if (*ptera).movefactor == 0 {
                                        current_block = 5258314151820362308;
                                    } else if (*ptera).cusval >= 50 as libc::c_int {
                                        (*player)
                                            .powers[pw_carry as libc::c_int
                                            as usize] = CR_NONE as libc::c_int as uint16_t;
                                        P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                                        P_KillMobj(
                                            ptera,
                                            (*player).mo,
                                            (*player).mo,
                                            0 as libc::c_int as uint8_t,
                                        );
                                        P_SetObjectMomZ(
                                            (*player).mo,
                                            12 as libc::c_int
                                                * ((1 as libc::c_int) << 16 as libc::c_int),
                                            false_0 as libc::c_int,
                                        );
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | (PF_APPLYAUTOBRAKE as libc::c_int
                                                    | PF_JUMPED as libc::c_int | PF_THOKKED as libc::c_int)
                                                    as libc::c_uint,
                                        );
                                        P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                                        current_block = 14303212209785889906;
                                    } else {
                                        if (*ptera).cusval != 0 {
                                            (*ptera).cusval -= 1;
                                            (*ptera).cusval;
                                        }
                                        P_TryMove(
                                            (*player).mo,
                                            (*ptera).x + (*ptera).watertop,
                                            (*ptera).y + (*ptera).waterbottom,
                                            true_0 as libc::c_int,
                                        );
                                        (*(*player).mo).z += (*ptera).cvmem;
                                        (*(*player).mo).momx = (*ptera).momx;
                                        (*(*player).mo).momy = (*ptera).momy;
                                        (*(*player).mo).momz = (*ptera).momz;
                                        if P_AproxDistance(
                                            (*(*player).mo).x - (*ptera).x - (*ptera).watertop,
                                            (*(*player).mo).y - (*ptera).y - (*ptera).waterbottom,
                                        ) > (*(*player).mo).radius
                                        {
                                            current_block = 5258314151820362308;
                                        } else {
                                            (*ptera).watertop >>= 1 as libc::c_int;
                                            (*ptera).waterbottom >>= 1 as libc::c_int;
                                            (*ptera).cvmem >>= 1 as libc::c_int;
                                            if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                                as libc::c_long
                                                != S_PLAY_FALL as libc::c_int as libc::c_long
                                            {
                                                P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
                                            }
                                            current_block = 14303212209785889906;
                                        }
                                    }
                                }
                            }
                        }
                        match current_block {
                            14303212209785889906 => {}
                            _ => {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                                P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                                (*ptera).movefactor = 35 as libc::c_int;
                                (*ptera).extravalue1 |= 4 as libc::c_int;
                            }
                        }
                    }
                }
            }
            1 => {
                current_block = 17702298541784679949;
                match current_block {
                    576355610076403033 => {
                        let mut tails: *mut mobj_t = (*(*player).mo).tracer;
                        (*(*player).mo)
                            .height = FixedDiv(
                            FixedMul((*player).height, (*(*player).mo).scale),
                            FixedDiv(
                                14 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                10 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                            ),
                        );
                        if !((*tails).player).is_null()
                            && (*(*tails).player).pflags as libc::c_uint
                                & PF_CANCARRY as libc::c_int as libc::c_uint == 0
                        {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int != 0
                        {
                            if (*tails).z + (*tails).height + (*(*player).mo).height
                                + FixedMul(
                                    (1 as libc::c_int) << 16 as libc::c_int,
                                    (*(*player).mo).scale,
                                ) <= (*tails).ceilingz
                                && (*tails).eflags as libc::c_int
                                    & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                (*(*player).mo)
                                    .z = (*tails).z + (*tails).height
                                    + 12 as libc::c_int * (*(*player).mo).scale;
                            } else {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                            }
                        } else if (*tails).z - (*(*player).mo).height
                            - FixedMul(
                                (1 as libc::c_int) << 16 as libc::c_int,
                                (*(*player).mo).scale,
                            ) >= (*tails).floorz
                            && (*tails).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int == 0
                        {
                            (*(*player).mo)
                                .z = (*tails).z - (*(*player).mo).height
                                - 12 as libc::c_int * (*(*player).mo).scale;
                        } else {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*tails).health <= 0 as libc::c_int {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        } else {
                            if !((*tails).player).is_null() {
                                P_TryMove(
                                    (*player).mo,
                                    (*tails).x
                                        + P_ReturnThrustX(
                                            tails,
                                            (*(*tails).player).drawangle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    (*tails).y
                                        + P_ReturnThrustY(
                                            tails,
                                            (*(*tails).player).drawangle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    true_0 as libc::c_int,
                                );
                            } else {
                                P_TryMove(
                                    (*player).mo,
                                    (*tails).x
                                        + P_ReturnThrustX(
                                            tails,
                                            (*tails).angle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    (*tails).y
                                        + P_ReturnThrustY(
                                            tails,
                                            (*tails).angle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    true_0 as libc::c_int,
                                );
                            }
                            (*(*player).mo).momx = (*tails).momx;
                            (*(*player).mo).momy = (*tails).momy;
                            (*(*player).mo).momz = (*tails).momz;
                        }
                        if G_CoopGametype() != 0 && !((*tails).player).is_null()
                            && (*(*tails).player).bot as libc::c_int
                                != BOT_2PAI as libc::c_int
                        {
                            (*(*player).mo).angle = (*tails).angle;
                            if demoplayback == 0
                                || (if (*player).pflags as libc::c_uint
                                    & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                {
                                    CS_LMAOGALOG as libc::c_int
                                } else {
                                    0 as libc::c_int
                                })
                                    | (if (*player).pflags as libc::c_uint
                                        & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                    {
                                        CS_STANDARD as libc::c_int
                                    } else {
                                        0 as libc::c_int
                                    }) == CS_LMAOGALOG as libc::c_int
                            {
                                P_SetPlayerAngle(player, (*(*player).mo).angle);
                            }
                        }
                        if P_AproxDistance(
                            (*(*player).mo).x - (*tails).x,
                            (*(*player).mo).y - (*tails).y,
                        ) > (*(*player).mo).radius
                        {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*player).powers[pw_carry as libc::c_int as usize]
                            as libc::c_int == CR_PLAYER as libc::c_int
                        {
                            if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                as libc::c_long
                                != S_PLAY_RIDE as libc::c_int as libc::c_long
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
                            }
                            if !((*tails).player).is_null()
                                && (!((*tails).skin).is_null()
                                    && (*((*tails).skin as *mut skin_t))
                                        .sprites[SPR2_SWIM as libc::c_int as usize]
                                        .numframes != 0)
                                && (*tails).eflags as libc::c_int
                                    & MFE_UNDERWATER as libc::c_int != 0
                            {
                                (*(*tails).player)
                                    .powers[pw_tailsfly as libc::c_int
                                    as usize] = 0 as libc::c_int as uint16_t;
                            }
                        } else if (*player).powers[pw_carry as libc::c_int as usize]
                            as libc::c_int == CR_NONE as libc::c_int
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                        }
                        if player.offset_from(players.as_mut_ptr()) as libc::c_long
                            == consoleplayer as libc::c_long && botingame != 0
                        {
                            CV_SetValue(
                                &mut *cv_analog
                                    .as_mut_ptr()
                                    .offset(1 as libc::c_int as isize),
                                ((*player).powers[pw_carry as libc::c_int as usize]
                                    as libc::c_int != CR_PLAYER as libc::c_int) as libc::c_int,
                            );
                        }
                    }
                    12265727859147633668 => {
                        let mut mo_1: *mut mobj_t = (*player).mo;
                        let mut rock: *mut mobj_t = (*(*player).mo).tracer;
                        let mut walktics: uint8_t = ((*(*mo_1).state).tics
                            - P_GetPlayerControlDirection(player)) as uint8_t;
                        if rock.is_null() || P_MobjWasRemoved(rock) != 0 {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        } else {
                            if (*player).cmd.forwardmove as libc::c_int != 0
                                || (*player).cmd.sidemove as libc::c_int != 0
                            {
                                (*rock).flags2 |= MF2_STRONGBOX as libc::c_int as uint32_t;
                                if maptol & TOL_2D as libc::c_int as uint32_t != 0
                                    || (*mo_1).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0
                                {
                                    (*rock).movedir = (*mo_1).angle;
                                } else {
                                    (*rock)
                                        .movedir = ((((*player).cmd.angleturn as libc::c_int)
                                        << 16 as libc::c_int) as angle_t)
                                        .wrapping_add(
                                            R_PointToAngle2(
                                                0 as libc::c_int,
                                                0 as libc::c_int,
                                                ((*player).cmd.forwardmove as libc::c_int)
                                                    << 16 as libc::c_int,
                                                -((*player).cmd.sidemove as libc::c_int)
                                                    << 16 as libc::c_int,
                                            ),
                                        );
                                }
                                P_Thrust(
                                    rock,
                                    (*rock).movedir,
                                    (*rock).scale >> 1 as libc::c_int,
                                );
                            } else {
                                (*rock).flags2
                                    &= !(MF2_STRONGBOX as libc::c_int) as uint32_t;
                            }
                            (*mo_1).momx = (*rock).momx;
                            (*mo_1).momy = (*rock).momy;
                            (*mo_1).momz = 0 as libc::c_int;
                            if (*player).panim as libc::c_uint
                                == PA_IDLE as libc::c_int as libc::c_uint
                                && ((*mo_1).momx != 0 || (*mo_1).momy != 0)
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
                            }
                            if (*player).panim as libc::c_uint
                                == PA_WALK as libc::c_int as libc::c_uint
                                && (*mo_1).tics > walktics as libc::c_int
                            {
                                (*mo_1).tics = walktics as int32_t;
                            }
                            P_MoveOrigin(
                                (*player).mo,
                                (*rock).x,
                                (*rock).y,
                                (*rock).z
                                    + (if (*mo_1).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int != 0
                                    {
                                        -(*mo_1).height
                                    } else {
                                        (*rock).height
                                    }),
                            );
                        }
                    }
                    4367251730605750521 => {
                        let mut zdist: fixed_t = 0;
                        let mut mo_0: *mut mobj_t = (*player).mo;
                        let mut fan: *mut mobj_t = (*(*player).mo).tracer;
                        if (*player).pflags as libc::c_uint
                            & PF_JUMPSTASIS as libc::c_int as libc::c_uint == 0
                        {
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    | PF_JUMPSTASIS as libc::c_int as libc::c_uint,
                            );
                        }
                        if (*fan).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                            != 0
                        {
                            zdist = (*mo_0).z + (*mo_0).height
                                - ((*fan).z + (*fan).height);
                        } else {
                            zdist = (*mo_0).z - (*fan).z;
                        }
                        if (*fan).type_0 as libc::c_uint
                            != MT_FAN as libc::c_int as libc::c_uint
                            && (P_PlayerTouchingSectorSpecialFlag(player, SSF_FAN))
                                .is_null()
                            || (*fan).type_0 as libc::c_uint
                                == MT_FAN as libc::c_int as libc::c_uint
                                && (abs((*mo_0).x - (*fan).x) > (*fan).radius
                                    || abs((*mo_0).y - (*fan).y) > (*fan).radius
                                    || zdist > (*fan).health << 16 as libc::c_int)
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    & !(PF_JUMPSTASIS as libc::c_int) as libc::c_uint,
                            );
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                    }
                    10601179871800211547 => {
                        let mut mo: *mut mobj_t = (*player).mo;
                        let mut dustdevil: *mut mobj_t = (*(*player).mo).tracer;
                        if abs((*mo).x - (*dustdevil).x) > (*dustdevil).radius
                            || abs((*mo).y - (*dustdevil).y) > (*dustdevil).radius
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                    }
                    17392506108461345148 => {
                        let mut chain: *mut mobj_t = 0 as *mut mobj_t;
                        let mut macecenter: *mut mobj_t = 0 as *mut mobj_t;
                        if !((*(*(*player).mo).tracer).tracer).is_null() {
                            chain = (*(*player).mo).tracer;
                            macecenter = (*(*(*player).mo).tracer).tracer;
                            (*(*player).mo)
                                .height = FixedMul(
                                (*player).spinheight,
                                (*(*player).mo).scale,
                            );
                            (*(*player).mo)
                                .momx = ((*chain).x - (*(*player).mo).x) * 2 as libc::c_int;
                            (*(*player).mo)
                                .momy = ((*chain).y - (*(*player).mo).y) * 2 as libc::c_int;
                            (*(*player).mo)
                                .momz = ((*chain).z
                                - ((*(*player).mo).height
                                    - (*chain).height / 2 as libc::c_int) - (*(*player).mo).z)
                                * 2 as libc::c_int;
                            P_MoveOrigin(
                                (*player).mo,
                                (*chain).x,
                                (*chain).y,
                                (*chain).z
                                    - ((*(*player).mo).height
                                        - (*chain).height / 2 as libc::c_int),
                            );
                            if (*player).powers[pw_flashing as libc::c_int as usize] == 0
                            {
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        | PF_JUMPED as libc::c_int as libc::c_uint,
                                );
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        & !(PF_NOJUMPDAMAGE as libc::c_int) as libc::c_uint,
                                );
                                (*player).secondjump = 0 as libc::c_int as uint8_t;
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        & !(PF_THOKKED as libc::c_int) as libc::c_uint,
                                );
                                if (*macecenter).flags
                                    & MF_SLIDEME as libc::c_int as uint32_t != 0
                                    && !(maptol & TOL_2D as libc::c_int as uint32_t != 0
                                        || (*(*player).mo).flags2
                                            & MF2_TWOD as libc::c_int as uint32_t != 0)
                                {
                                    (*macecenter)
                                        .angle = ((*macecenter).angle)
                                        .wrapping_add(
                                            (((*cmd).sidemove as libc::c_int) << 19 as libc::c_int)
                                                as angle_t,
                                        );
                                    (*(*player).mo)
                                        .angle = ((*(*player).mo).angle)
                                        .wrapping_add(
                                            (((*cmd).sidemove as libc::c_int) << 19 as libc::c_int)
                                                as angle_t,
                                        );
                                    if demoplayback == 0
                                        || (if (*player).pflags as libc::c_uint
                                            & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                        {
                                            CS_LMAOGALOG as libc::c_int
                                        } else {
                                            0 as libc::c_int
                                        })
                                            | (if (*player).pflags as libc::c_uint
                                                & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                            {
                                                CS_STANDARD as libc::c_int
                                            } else {
                                                0 as libc::c_int
                                            }) == CS_LMAOGALOG as libc::c_int
                                    {
                                        P_SetPlayerAngle(player, (*(*player).mo).angle);
                                    }
                                }
                            }
                        }
                    }
                    17702298541784679949 => {
                        let mut item: *mut mobj_t = (*(*player).mo).tracer;
                        P_UnsetThingPosition((*player).mo);
                        (*(*player).mo).x = (*item).x;
                        (*(*player).mo).y = (*item).y;
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int != 0
                        {
                            (*(*player).mo)
                                .z = (*item).z + (*item).height
                                - FixedDiv(
                                    (*(*player).mo).height,
                                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                );
                        } else {
                            (*(*player).mo)
                                .z = (*item).z
                                - FixedDiv(
                                    (*(*player).mo).height,
                                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                                        / 2 as libc::c_int,
                                );
                        }
                        (*(*player).mo).momz = 0 as libc::c_int;
                        (*(*player).mo).momy = (*(*player).mo).momz;
                        (*(*player).mo).momx = (*(*player).mo).momy;
                        P_SetThingPosition((*player).mo);
                        if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                            as libc::c_long != S_PLAY_RIDE as libc::c_int as libc::c_long
                        {
                            P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
                        }
                        if (*item).type_0 as libc::c_uint
                            == MT_BLACKEGGMAN_MISSILE as libc::c_int as libc::c_uint
                        {
                            if (*cmd).forwardmove as libc::c_int > 0 as libc::c_int {
                                (*item).momz
                                    += FixedMul(
                                        ((1 as libc::c_int) << 16 as libc::c_int)
                                            / 4 as libc::c_int,
                                        (*item).scale,
                                    );
                            } else if ((*cmd).forwardmove as libc::c_int)
                                < 0 as libc::c_int
                            {
                                (*item).momz
                                    -= FixedMul(
                                        ((1 as libc::c_int) << 16 as libc::c_int)
                                            / 4 as libc::c_int,
                                        (*item).scale,
                                    );
                            }
                            (*item).angle = (*(*player).mo).angle;
                            P_InstaThrust(
                                item,
                                (*item).angle,
                                FixedMul((*(*item).info).speed, (*item).scale),
                            );
                            if (*(*player).mo).z <= (*(*player).mo).floorz
                                || (*item).health <= 0 as libc::c_int
                            {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                                P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            }
                        }
                    }
                    _ => {
                        let mut ptera: *mut mobj_t = (*(*player).mo).tracer;
                        let mut spawnpoint: *mut mobj_t = (*(*ptera).tracer).tracer;
                        (*(*player).mo)
                            .height = FixedDiv(
                            FixedMul((*player).height, (*(*player).mo).scale),
                            FixedDiv(
                                14 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                10 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                            ),
                        );
                        if (*ptera).health <= 0 as libc::c_int {
                            current_block = 5258314151820362308;
                        } else if P_MobjAboveLava(ptera) != 0
                            && (*ptera).movefactor < 35 as libc::c_int
                        {
                            current_block = 5258314151820362308;
                        } else {
                            if (*(*player).mo).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                if (*ptera).z + (*ptera).height + (*(*player).mo).height
                                    + FixedMul(
                                        (1 as libc::c_int) << 16 as libc::c_int,
                                        (*(*player).mo).scale,
                                    ) <= (*ptera).ceilingz
                                    && (*ptera).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int != 0
                                {
                                    (*(*player).mo)
                                        .z = (*ptera).z + (*ptera).height
                                        + FixedMul(
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                            (*(*player).mo).scale,
                                        );
                                }
                                if (*ptera).ceilingz - (*ptera).z
                                    > (*spawnpoint).ceilingz - (*spawnpoint).z
                                        + 512 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int)
                                    && (*ptera).movefactor < 35 as libc::c_int
                                {
                                    current_block = 5258314151820362308;
                                } else {
                                    current_block = 13391418783698890455;
                                }
                            } else {
                                if (*ptera).z - (*(*player).mo).height
                                    - FixedMul(
                                        (1 as libc::c_int) << 16 as libc::c_int,
                                        (*(*player).mo).scale,
                                    ) >= (*ptera).floorz
                                    && (*ptera).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int == 0
                                {
                                    (*(*player).mo)
                                        .z = (*ptera).z - (*(*player).mo).height
                                        - FixedMul(
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                            (*(*player).mo).scale,
                                        );
                                }
                                if (*ptera).z - (*ptera).floorz
                                    > (*spawnpoint).z - (*spawnpoint).floorz
                                        + 512 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int)
                                    && (*ptera).movefactor < 35 as libc::c_int
                                {
                                    current_block = 5258314151820362308;
                                } else {
                                    current_block = 13391418783698890455;
                                }
                            }
                            match current_block {
                                5258314151820362308 => {}
                                _ => {
                                    (*ptera).movefactor -= 1;
                                    (*ptera).movefactor;
                                    if (*ptera).movefactor == 0 {
                                        current_block = 5258314151820362308;
                                    } else if (*ptera).cusval >= 50 as libc::c_int {
                                        (*player)
                                            .powers[pw_carry as libc::c_int
                                            as usize] = CR_NONE as libc::c_int as uint16_t;
                                        P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                                        P_KillMobj(
                                            ptera,
                                            (*player).mo,
                                            (*player).mo,
                                            0 as libc::c_int as uint8_t,
                                        );
                                        P_SetObjectMomZ(
                                            (*player).mo,
                                            12 as libc::c_int
                                                * ((1 as libc::c_int) << 16 as libc::c_int),
                                            false_0 as libc::c_int,
                                        );
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | (PF_APPLYAUTOBRAKE as libc::c_int
                                                    | PF_JUMPED as libc::c_int | PF_THOKKED as libc::c_int)
                                                    as libc::c_uint,
                                        );
                                        P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                                        current_block = 14303212209785889906;
                                    } else {
                                        if (*ptera).cusval != 0 {
                                            (*ptera).cusval -= 1;
                                            (*ptera).cusval;
                                        }
                                        P_TryMove(
                                            (*player).mo,
                                            (*ptera).x + (*ptera).watertop,
                                            (*ptera).y + (*ptera).waterbottom,
                                            true_0 as libc::c_int,
                                        );
                                        (*(*player).mo).z += (*ptera).cvmem;
                                        (*(*player).mo).momx = (*ptera).momx;
                                        (*(*player).mo).momy = (*ptera).momy;
                                        (*(*player).mo).momz = (*ptera).momz;
                                        if P_AproxDistance(
                                            (*(*player).mo).x - (*ptera).x - (*ptera).watertop,
                                            (*(*player).mo).y - (*ptera).y - (*ptera).waterbottom,
                                        ) > (*(*player).mo).radius
                                        {
                                            current_block = 5258314151820362308;
                                        } else {
                                            (*ptera).watertop >>= 1 as libc::c_int;
                                            (*ptera).waterbottom >>= 1 as libc::c_int;
                                            (*ptera).cvmem >>= 1 as libc::c_int;
                                            if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                                as libc::c_long
                                                != S_PLAY_FALL as libc::c_int as libc::c_long
                                            {
                                                P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
                                            }
                                            current_block = 14303212209785889906;
                                        }
                                    }
                                }
                            }
                        }
                        match current_block {
                            14303212209785889906 => {}
                            _ => {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                                P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                                (*ptera).movefactor = 35 as libc::c_int;
                                (*ptera).extravalue1 |= 4 as libc::c_int;
                            }
                        }
                    }
                }
            }
            8 => {
                current_block = 17392506108461345148;
                match current_block {
                    576355610076403033 => {
                        let mut tails: *mut mobj_t = (*(*player).mo).tracer;
                        (*(*player).mo)
                            .height = FixedDiv(
                            FixedMul((*player).height, (*(*player).mo).scale),
                            FixedDiv(
                                14 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                10 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                            ),
                        );
                        if !((*tails).player).is_null()
                            && (*(*tails).player).pflags as libc::c_uint
                                & PF_CANCARRY as libc::c_int as libc::c_uint == 0
                        {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int != 0
                        {
                            if (*tails).z + (*tails).height + (*(*player).mo).height
                                + FixedMul(
                                    (1 as libc::c_int) << 16 as libc::c_int,
                                    (*(*player).mo).scale,
                                ) <= (*tails).ceilingz
                                && (*tails).eflags as libc::c_int
                                    & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                (*(*player).mo)
                                    .z = (*tails).z + (*tails).height
                                    + 12 as libc::c_int * (*(*player).mo).scale;
                            } else {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                            }
                        } else if (*tails).z - (*(*player).mo).height
                            - FixedMul(
                                (1 as libc::c_int) << 16 as libc::c_int,
                                (*(*player).mo).scale,
                            ) >= (*tails).floorz
                            && (*tails).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int == 0
                        {
                            (*(*player).mo)
                                .z = (*tails).z - (*(*player).mo).height
                                - 12 as libc::c_int * (*(*player).mo).scale;
                        } else {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*tails).health <= 0 as libc::c_int {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        } else {
                            if !((*tails).player).is_null() {
                                P_TryMove(
                                    (*player).mo,
                                    (*tails).x
                                        + P_ReturnThrustX(
                                            tails,
                                            (*(*tails).player).drawangle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    (*tails).y
                                        + P_ReturnThrustY(
                                            tails,
                                            (*(*tails).player).drawangle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    true_0 as libc::c_int,
                                );
                            } else {
                                P_TryMove(
                                    (*player).mo,
                                    (*tails).x
                                        + P_ReturnThrustX(
                                            tails,
                                            (*tails).angle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    (*tails).y
                                        + P_ReturnThrustY(
                                            tails,
                                            (*tails).angle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    true_0 as libc::c_int,
                                );
                            }
                            (*(*player).mo).momx = (*tails).momx;
                            (*(*player).mo).momy = (*tails).momy;
                            (*(*player).mo).momz = (*tails).momz;
                        }
                        if G_CoopGametype() != 0 && !((*tails).player).is_null()
                            && (*(*tails).player).bot as libc::c_int
                                != BOT_2PAI as libc::c_int
                        {
                            (*(*player).mo).angle = (*tails).angle;
                            if demoplayback == 0
                                || (if (*player).pflags as libc::c_uint
                                    & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                {
                                    CS_LMAOGALOG as libc::c_int
                                } else {
                                    0 as libc::c_int
                                })
                                    | (if (*player).pflags as libc::c_uint
                                        & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                    {
                                        CS_STANDARD as libc::c_int
                                    } else {
                                        0 as libc::c_int
                                    }) == CS_LMAOGALOG as libc::c_int
                            {
                                P_SetPlayerAngle(player, (*(*player).mo).angle);
                            }
                        }
                        if P_AproxDistance(
                            (*(*player).mo).x - (*tails).x,
                            (*(*player).mo).y - (*tails).y,
                        ) > (*(*player).mo).radius
                        {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*player).powers[pw_carry as libc::c_int as usize]
                            as libc::c_int == CR_PLAYER as libc::c_int
                        {
                            if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                as libc::c_long
                                != S_PLAY_RIDE as libc::c_int as libc::c_long
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
                            }
                            if !((*tails).player).is_null()
                                && (!((*tails).skin).is_null()
                                    && (*((*tails).skin as *mut skin_t))
                                        .sprites[SPR2_SWIM as libc::c_int as usize]
                                        .numframes != 0)
                                && (*tails).eflags as libc::c_int
                                    & MFE_UNDERWATER as libc::c_int != 0
                            {
                                (*(*tails).player)
                                    .powers[pw_tailsfly as libc::c_int
                                    as usize] = 0 as libc::c_int as uint16_t;
                            }
                        } else if (*player).powers[pw_carry as libc::c_int as usize]
                            as libc::c_int == CR_NONE as libc::c_int
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                        }
                        if player.offset_from(players.as_mut_ptr()) as libc::c_long
                            == consoleplayer as libc::c_long && botingame != 0
                        {
                            CV_SetValue(
                                &mut *cv_analog
                                    .as_mut_ptr()
                                    .offset(1 as libc::c_int as isize),
                                ((*player).powers[pw_carry as libc::c_int as usize]
                                    as libc::c_int != CR_PLAYER as libc::c_int) as libc::c_int,
                            );
                        }
                    }
                    12265727859147633668 => {
                        let mut mo_1: *mut mobj_t = (*player).mo;
                        let mut rock: *mut mobj_t = (*(*player).mo).tracer;
                        let mut walktics: uint8_t = ((*(*mo_1).state).tics
                            - P_GetPlayerControlDirection(player)) as uint8_t;
                        if rock.is_null() || P_MobjWasRemoved(rock) != 0 {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        } else {
                            if (*player).cmd.forwardmove as libc::c_int != 0
                                || (*player).cmd.sidemove as libc::c_int != 0
                            {
                                (*rock).flags2 |= MF2_STRONGBOX as libc::c_int as uint32_t;
                                if maptol & TOL_2D as libc::c_int as uint32_t != 0
                                    || (*mo_1).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0
                                {
                                    (*rock).movedir = (*mo_1).angle;
                                } else {
                                    (*rock)
                                        .movedir = ((((*player).cmd.angleturn as libc::c_int)
                                        << 16 as libc::c_int) as angle_t)
                                        .wrapping_add(
                                            R_PointToAngle2(
                                                0 as libc::c_int,
                                                0 as libc::c_int,
                                                ((*player).cmd.forwardmove as libc::c_int)
                                                    << 16 as libc::c_int,
                                                -((*player).cmd.sidemove as libc::c_int)
                                                    << 16 as libc::c_int,
                                            ),
                                        );
                                }
                                P_Thrust(
                                    rock,
                                    (*rock).movedir,
                                    (*rock).scale >> 1 as libc::c_int,
                                );
                            } else {
                                (*rock).flags2
                                    &= !(MF2_STRONGBOX as libc::c_int) as uint32_t;
                            }
                            (*mo_1).momx = (*rock).momx;
                            (*mo_1).momy = (*rock).momy;
                            (*mo_1).momz = 0 as libc::c_int;
                            if (*player).panim as libc::c_uint
                                == PA_IDLE as libc::c_int as libc::c_uint
                                && ((*mo_1).momx != 0 || (*mo_1).momy != 0)
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
                            }
                            if (*player).panim as libc::c_uint
                                == PA_WALK as libc::c_int as libc::c_uint
                                && (*mo_1).tics > walktics as libc::c_int
                            {
                                (*mo_1).tics = walktics as int32_t;
                            }
                            P_MoveOrigin(
                                (*player).mo,
                                (*rock).x,
                                (*rock).y,
                                (*rock).z
                                    + (if (*mo_1).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int != 0
                                    {
                                        -(*mo_1).height
                                    } else {
                                        (*rock).height
                                    }),
                            );
                        }
                    }
                    4367251730605750521 => {
                        let mut zdist: fixed_t = 0;
                        let mut mo_0: *mut mobj_t = (*player).mo;
                        let mut fan: *mut mobj_t = (*(*player).mo).tracer;
                        if (*player).pflags as libc::c_uint
                            & PF_JUMPSTASIS as libc::c_int as libc::c_uint == 0
                        {
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    | PF_JUMPSTASIS as libc::c_int as libc::c_uint,
                            );
                        }
                        if (*fan).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                            != 0
                        {
                            zdist = (*mo_0).z + (*mo_0).height
                                - ((*fan).z + (*fan).height);
                        } else {
                            zdist = (*mo_0).z - (*fan).z;
                        }
                        if (*fan).type_0 as libc::c_uint
                            != MT_FAN as libc::c_int as libc::c_uint
                            && (P_PlayerTouchingSectorSpecialFlag(player, SSF_FAN))
                                .is_null()
                            || (*fan).type_0 as libc::c_uint
                                == MT_FAN as libc::c_int as libc::c_uint
                                && (abs((*mo_0).x - (*fan).x) > (*fan).radius
                                    || abs((*mo_0).y - (*fan).y) > (*fan).radius
                                    || zdist > (*fan).health << 16 as libc::c_int)
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    & !(PF_JUMPSTASIS as libc::c_int) as libc::c_uint,
                            );
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                    }
                    10601179871800211547 => {
                        let mut mo: *mut mobj_t = (*player).mo;
                        let mut dustdevil: *mut mobj_t = (*(*player).mo).tracer;
                        if abs((*mo).x - (*dustdevil).x) > (*dustdevil).radius
                            || abs((*mo).y - (*dustdevil).y) > (*dustdevil).radius
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                    }
                    17392506108461345148 => {
                        let mut chain: *mut mobj_t = 0 as *mut mobj_t;
                        let mut macecenter: *mut mobj_t = 0 as *mut mobj_t;
                        if !((*(*(*player).mo).tracer).tracer).is_null() {
                            chain = (*(*player).mo).tracer;
                            macecenter = (*(*(*player).mo).tracer).tracer;
                            (*(*player).mo)
                                .height = FixedMul(
                                (*player).spinheight,
                                (*(*player).mo).scale,
                            );
                            (*(*player).mo)
                                .momx = ((*chain).x - (*(*player).mo).x) * 2 as libc::c_int;
                            (*(*player).mo)
                                .momy = ((*chain).y - (*(*player).mo).y) * 2 as libc::c_int;
                            (*(*player).mo)
                                .momz = ((*chain).z
                                - ((*(*player).mo).height
                                    - (*chain).height / 2 as libc::c_int) - (*(*player).mo).z)
                                * 2 as libc::c_int;
                            P_MoveOrigin(
                                (*player).mo,
                                (*chain).x,
                                (*chain).y,
                                (*chain).z
                                    - ((*(*player).mo).height
                                        - (*chain).height / 2 as libc::c_int),
                            );
                            if (*player).powers[pw_flashing as libc::c_int as usize] == 0
                            {
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        | PF_JUMPED as libc::c_int as libc::c_uint,
                                );
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        & !(PF_NOJUMPDAMAGE as libc::c_int) as libc::c_uint,
                                );
                                (*player).secondjump = 0 as libc::c_int as uint8_t;
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        & !(PF_THOKKED as libc::c_int) as libc::c_uint,
                                );
                                if (*macecenter).flags
                                    & MF_SLIDEME as libc::c_int as uint32_t != 0
                                    && !(maptol & TOL_2D as libc::c_int as uint32_t != 0
                                        || (*(*player).mo).flags2
                                            & MF2_TWOD as libc::c_int as uint32_t != 0)
                                {
                                    (*macecenter)
                                        .angle = ((*macecenter).angle)
                                        .wrapping_add(
                                            (((*cmd).sidemove as libc::c_int) << 19 as libc::c_int)
                                                as angle_t,
                                        );
                                    (*(*player).mo)
                                        .angle = ((*(*player).mo).angle)
                                        .wrapping_add(
                                            (((*cmd).sidemove as libc::c_int) << 19 as libc::c_int)
                                                as angle_t,
                                        );
                                    if demoplayback == 0
                                        || (if (*player).pflags as libc::c_uint
                                            & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                        {
                                            CS_LMAOGALOG as libc::c_int
                                        } else {
                                            0 as libc::c_int
                                        })
                                            | (if (*player).pflags as libc::c_uint
                                                & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                            {
                                                CS_STANDARD as libc::c_int
                                            } else {
                                                0 as libc::c_int
                                            }) == CS_LMAOGALOG as libc::c_int
                                    {
                                        P_SetPlayerAngle(player, (*(*player).mo).angle);
                                    }
                                }
                            }
                        }
                    }
                    17702298541784679949 => {
                        let mut item: *mut mobj_t = (*(*player).mo).tracer;
                        P_UnsetThingPosition((*player).mo);
                        (*(*player).mo).x = (*item).x;
                        (*(*player).mo).y = (*item).y;
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int != 0
                        {
                            (*(*player).mo)
                                .z = (*item).z + (*item).height
                                - FixedDiv(
                                    (*(*player).mo).height,
                                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                );
                        } else {
                            (*(*player).mo)
                                .z = (*item).z
                                - FixedDiv(
                                    (*(*player).mo).height,
                                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                                        / 2 as libc::c_int,
                                );
                        }
                        (*(*player).mo).momz = 0 as libc::c_int;
                        (*(*player).mo).momy = (*(*player).mo).momz;
                        (*(*player).mo).momx = (*(*player).mo).momy;
                        P_SetThingPosition((*player).mo);
                        if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                            as libc::c_long != S_PLAY_RIDE as libc::c_int as libc::c_long
                        {
                            P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
                        }
                        if (*item).type_0 as libc::c_uint
                            == MT_BLACKEGGMAN_MISSILE as libc::c_int as libc::c_uint
                        {
                            if (*cmd).forwardmove as libc::c_int > 0 as libc::c_int {
                                (*item).momz
                                    += FixedMul(
                                        ((1 as libc::c_int) << 16 as libc::c_int)
                                            / 4 as libc::c_int,
                                        (*item).scale,
                                    );
                            } else if ((*cmd).forwardmove as libc::c_int)
                                < 0 as libc::c_int
                            {
                                (*item).momz
                                    -= FixedMul(
                                        ((1 as libc::c_int) << 16 as libc::c_int)
                                            / 4 as libc::c_int,
                                        (*item).scale,
                                    );
                            }
                            (*item).angle = (*(*player).mo).angle;
                            P_InstaThrust(
                                item,
                                (*item).angle,
                                FixedMul((*(*item).info).speed, (*item).scale),
                            );
                            if (*(*player).mo).z <= (*(*player).mo).floorz
                                || (*item).health <= 0 as libc::c_int
                            {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                                P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            }
                        }
                    }
                    _ => {
                        let mut ptera: *mut mobj_t = (*(*player).mo).tracer;
                        let mut spawnpoint: *mut mobj_t = (*(*ptera).tracer).tracer;
                        (*(*player).mo)
                            .height = FixedDiv(
                            FixedMul((*player).height, (*(*player).mo).scale),
                            FixedDiv(
                                14 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                10 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                            ),
                        );
                        if (*ptera).health <= 0 as libc::c_int {
                            current_block = 5258314151820362308;
                        } else if P_MobjAboveLava(ptera) != 0
                            && (*ptera).movefactor < 35 as libc::c_int
                        {
                            current_block = 5258314151820362308;
                        } else {
                            if (*(*player).mo).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                if (*ptera).z + (*ptera).height + (*(*player).mo).height
                                    + FixedMul(
                                        (1 as libc::c_int) << 16 as libc::c_int,
                                        (*(*player).mo).scale,
                                    ) <= (*ptera).ceilingz
                                    && (*ptera).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int != 0
                                {
                                    (*(*player).mo)
                                        .z = (*ptera).z + (*ptera).height
                                        + FixedMul(
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                            (*(*player).mo).scale,
                                        );
                                }
                                if (*ptera).ceilingz - (*ptera).z
                                    > (*spawnpoint).ceilingz - (*spawnpoint).z
                                        + 512 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int)
                                    && (*ptera).movefactor < 35 as libc::c_int
                                {
                                    current_block = 5258314151820362308;
                                } else {
                                    current_block = 13391418783698890455;
                                }
                            } else {
                                if (*ptera).z - (*(*player).mo).height
                                    - FixedMul(
                                        (1 as libc::c_int) << 16 as libc::c_int,
                                        (*(*player).mo).scale,
                                    ) >= (*ptera).floorz
                                    && (*ptera).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int == 0
                                {
                                    (*(*player).mo)
                                        .z = (*ptera).z - (*(*player).mo).height
                                        - FixedMul(
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                            (*(*player).mo).scale,
                                        );
                                }
                                if (*ptera).z - (*ptera).floorz
                                    > (*spawnpoint).z - (*spawnpoint).floorz
                                        + 512 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int)
                                    && (*ptera).movefactor < 35 as libc::c_int
                                {
                                    current_block = 5258314151820362308;
                                } else {
                                    current_block = 13391418783698890455;
                                }
                            }
                            match current_block {
                                5258314151820362308 => {}
                                _ => {
                                    (*ptera).movefactor -= 1;
                                    (*ptera).movefactor;
                                    if (*ptera).movefactor == 0 {
                                        current_block = 5258314151820362308;
                                    } else if (*ptera).cusval >= 50 as libc::c_int {
                                        (*player)
                                            .powers[pw_carry as libc::c_int
                                            as usize] = CR_NONE as libc::c_int as uint16_t;
                                        P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                                        P_KillMobj(
                                            ptera,
                                            (*player).mo,
                                            (*player).mo,
                                            0 as libc::c_int as uint8_t,
                                        );
                                        P_SetObjectMomZ(
                                            (*player).mo,
                                            12 as libc::c_int
                                                * ((1 as libc::c_int) << 16 as libc::c_int),
                                            false_0 as libc::c_int,
                                        );
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | (PF_APPLYAUTOBRAKE as libc::c_int
                                                    | PF_JUMPED as libc::c_int | PF_THOKKED as libc::c_int)
                                                    as libc::c_uint,
                                        );
                                        P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                                        current_block = 14303212209785889906;
                                    } else {
                                        if (*ptera).cusval != 0 {
                                            (*ptera).cusval -= 1;
                                            (*ptera).cusval;
                                        }
                                        P_TryMove(
                                            (*player).mo,
                                            (*ptera).x + (*ptera).watertop,
                                            (*ptera).y + (*ptera).waterbottom,
                                            true_0 as libc::c_int,
                                        );
                                        (*(*player).mo).z += (*ptera).cvmem;
                                        (*(*player).mo).momx = (*ptera).momx;
                                        (*(*player).mo).momy = (*ptera).momy;
                                        (*(*player).mo).momz = (*ptera).momz;
                                        if P_AproxDistance(
                                            (*(*player).mo).x - (*ptera).x - (*ptera).watertop,
                                            (*(*player).mo).y - (*ptera).y - (*ptera).waterbottom,
                                        ) > (*(*player).mo).radius
                                        {
                                            current_block = 5258314151820362308;
                                        } else {
                                            (*ptera).watertop >>= 1 as libc::c_int;
                                            (*ptera).waterbottom >>= 1 as libc::c_int;
                                            (*ptera).cvmem >>= 1 as libc::c_int;
                                            if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                                as libc::c_long
                                                != S_PLAY_FALL as libc::c_int as libc::c_long
                                            {
                                                P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
                                            }
                                            current_block = 14303212209785889906;
                                        }
                                    }
                                }
                            }
                        }
                        match current_block {
                            14303212209785889906 => {}
                            _ => {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                                P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                                (*ptera).movefactor = 35 as libc::c_int;
                                (*ptera).extravalue1 |= 4 as libc::c_int;
                            }
                        }
                    }
                }
            }
            12 => {
                current_block = 10601179871800211547;
                match current_block {
                    576355610076403033 => {
                        let mut tails: *mut mobj_t = (*(*player).mo).tracer;
                        (*(*player).mo)
                            .height = FixedDiv(
                            FixedMul((*player).height, (*(*player).mo).scale),
                            FixedDiv(
                                14 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                10 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                            ),
                        );
                        if !((*tails).player).is_null()
                            && (*(*tails).player).pflags as libc::c_uint
                                & PF_CANCARRY as libc::c_int as libc::c_uint == 0
                        {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int != 0
                        {
                            if (*tails).z + (*tails).height + (*(*player).mo).height
                                + FixedMul(
                                    (1 as libc::c_int) << 16 as libc::c_int,
                                    (*(*player).mo).scale,
                                ) <= (*tails).ceilingz
                                && (*tails).eflags as libc::c_int
                                    & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                (*(*player).mo)
                                    .z = (*tails).z + (*tails).height
                                    + 12 as libc::c_int * (*(*player).mo).scale;
                            } else {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                            }
                        } else if (*tails).z - (*(*player).mo).height
                            - FixedMul(
                                (1 as libc::c_int) << 16 as libc::c_int,
                                (*(*player).mo).scale,
                            ) >= (*tails).floorz
                            && (*tails).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int == 0
                        {
                            (*(*player).mo)
                                .z = (*tails).z - (*(*player).mo).height
                                - 12 as libc::c_int * (*(*player).mo).scale;
                        } else {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*tails).health <= 0 as libc::c_int {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        } else {
                            if !((*tails).player).is_null() {
                                P_TryMove(
                                    (*player).mo,
                                    (*tails).x
                                        + P_ReturnThrustX(
                                            tails,
                                            (*(*tails).player).drawangle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    (*tails).y
                                        + P_ReturnThrustY(
                                            tails,
                                            (*(*tails).player).drawangle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    true_0 as libc::c_int,
                                );
                            } else {
                                P_TryMove(
                                    (*player).mo,
                                    (*tails).x
                                        + P_ReturnThrustX(
                                            tails,
                                            (*tails).angle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    (*tails).y
                                        + P_ReturnThrustY(
                                            tails,
                                            (*tails).angle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    true_0 as libc::c_int,
                                );
                            }
                            (*(*player).mo).momx = (*tails).momx;
                            (*(*player).mo).momy = (*tails).momy;
                            (*(*player).mo).momz = (*tails).momz;
                        }
                        if G_CoopGametype() != 0 && !((*tails).player).is_null()
                            && (*(*tails).player).bot as libc::c_int
                                != BOT_2PAI as libc::c_int
                        {
                            (*(*player).mo).angle = (*tails).angle;
                            if demoplayback == 0
                                || (if (*player).pflags as libc::c_uint
                                    & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                {
                                    CS_LMAOGALOG as libc::c_int
                                } else {
                                    0 as libc::c_int
                                })
                                    | (if (*player).pflags as libc::c_uint
                                        & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                    {
                                        CS_STANDARD as libc::c_int
                                    } else {
                                        0 as libc::c_int
                                    }) == CS_LMAOGALOG as libc::c_int
                            {
                                P_SetPlayerAngle(player, (*(*player).mo).angle);
                            }
                        }
                        if P_AproxDistance(
                            (*(*player).mo).x - (*tails).x,
                            (*(*player).mo).y - (*tails).y,
                        ) > (*(*player).mo).radius
                        {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*player).powers[pw_carry as libc::c_int as usize]
                            as libc::c_int == CR_PLAYER as libc::c_int
                        {
                            if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                as libc::c_long
                                != S_PLAY_RIDE as libc::c_int as libc::c_long
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
                            }
                            if !((*tails).player).is_null()
                                && (!((*tails).skin).is_null()
                                    && (*((*tails).skin as *mut skin_t))
                                        .sprites[SPR2_SWIM as libc::c_int as usize]
                                        .numframes != 0)
                                && (*tails).eflags as libc::c_int
                                    & MFE_UNDERWATER as libc::c_int != 0
                            {
                                (*(*tails).player)
                                    .powers[pw_tailsfly as libc::c_int
                                    as usize] = 0 as libc::c_int as uint16_t;
                            }
                        } else if (*player).powers[pw_carry as libc::c_int as usize]
                            as libc::c_int == CR_NONE as libc::c_int
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                        }
                        if player.offset_from(players.as_mut_ptr()) as libc::c_long
                            == consoleplayer as libc::c_long && botingame != 0
                        {
                            CV_SetValue(
                                &mut *cv_analog
                                    .as_mut_ptr()
                                    .offset(1 as libc::c_int as isize),
                                ((*player).powers[pw_carry as libc::c_int as usize]
                                    as libc::c_int != CR_PLAYER as libc::c_int) as libc::c_int,
                            );
                        }
                    }
                    12265727859147633668 => {
                        let mut mo_1: *mut mobj_t = (*player).mo;
                        let mut rock: *mut mobj_t = (*(*player).mo).tracer;
                        let mut walktics: uint8_t = ((*(*mo_1).state).tics
                            - P_GetPlayerControlDirection(player)) as uint8_t;
                        if rock.is_null() || P_MobjWasRemoved(rock) != 0 {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        } else {
                            if (*player).cmd.forwardmove as libc::c_int != 0
                                || (*player).cmd.sidemove as libc::c_int != 0
                            {
                                (*rock).flags2 |= MF2_STRONGBOX as libc::c_int as uint32_t;
                                if maptol & TOL_2D as libc::c_int as uint32_t != 0
                                    || (*mo_1).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0
                                {
                                    (*rock).movedir = (*mo_1).angle;
                                } else {
                                    (*rock)
                                        .movedir = ((((*player).cmd.angleturn as libc::c_int)
                                        << 16 as libc::c_int) as angle_t)
                                        .wrapping_add(
                                            R_PointToAngle2(
                                                0 as libc::c_int,
                                                0 as libc::c_int,
                                                ((*player).cmd.forwardmove as libc::c_int)
                                                    << 16 as libc::c_int,
                                                -((*player).cmd.sidemove as libc::c_int)
                                                    << 16 as libc::c_int,
                                            ),
                                        );
                                }
                                P_Thrust(
                                    rock,
                                    (*rock).movedir,
                                    (*rock).scale >> 1 as libc::c_int,
                                );
                            } else {
                                (*rock).flags2
                                    &= !(MF2_STRONGBOX as libc::c_int) as uint32_t;
                            }
                            (*mo_1).momx = (*rock).momx;
                            (*mo_1).momy = (*rock).momy;
                            (*mo_1).momz = 0 as libc::c_int;
                            if (*player).panim as libc::c_uint
                                == PA_IDLE as libc::c_int as libc::c_uint
                                && ((*mo_1).momx != 0 || (*mo_1).momy != 0)
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
                            }
                            if (*player).panim as libc::c_uint
                                == PA_WALK as libc::c_int as libc::c_uint
                                && (*mo_1).tics > walktics as libc::c_int
                            {
                                (*mo_1).tics = walktics as int32_t;
                            }
                            P_MoveOrigin(
                                (*player).mo,
                                (*rock).x,
                                (*rock).y,
                                (*rock).z
                                    + (if (*mo_1).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int != 0
                                    {
                                        -(*mo_1).height
                                    } else {
                                        (*rock).height
                                    }),
                            );
                        }
                    }
                    4367251730605750521 => {
                        let mut zdist: fixed_t = 0;
                        let mut mo_0: *mut mobj_t = (*player).mo;
                        let mut fan: *mut mobj_t = (*(*player).mo).tracer;
                        if (*player).pflags as libc::c_uint
                            & PF_JUMPSTASIS as libc::c_int as libc::c_uint == 0
                        {
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    | PF_JUMPSTASIS as libc::c_int as libc::c_uint,
                            );
                        }
                        if (*fan).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                            != 0
                        {
                            zdist = (*mo_0).z + (*mo_0).height
                                - ((*fan).z + (*fan).height);
                        } else {
                            zdist = (*mo_0).z - (*fan).z;
                        }
                        if (*fan).type_0 as libc::c_uint
                            != MT_FAN as libc::c_int as libc::c_uint
                            && (P_PlayerTouchingSectorSpecialFlag(player, SSF_FAN))
                                .is_null()
                            || (*fan).type_0 as libc::c_uint
                                == MT_FAN as libc::c_int as libc::c_uint
                                && (abs((*mo_0).x - (*fan).x) > (*fan).radius
                                    || abs((*mo_0).y - (*fan).y) > (*fan).radius
                                    || zdist > (*fan).health << 16 as libc::c_int)
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    & !(PF_JUMPSTASIS as libc::c_int) as libc::c_uint,
                            );
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                    }
                    10601179871800211547 => {
                        let mut mo: *mut mobj_t = (*player).mo;
                        let mut dustdevil: *mut mobj_t = (*(*player).mo).tracer;
                        if abs((*mo).x - (*dustdevil).x) > (*dustdevil).radius
                            || abs((*mo).y - (*dustdevil).y) > (*dustdevil).radius
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                    }
                    17392506108461345148 => {
                        let mut chain: *mut mobj_t = 0 as *mut mobj_t;
                        let mut macecenter: *mut mobj_t = 0 as *mut mobj_t;
                        if !((*(*(*player).mo).tracer).tracer).is_null() {
                            chain = (*(*player).mo).tracer;
                            macecenter = (*(*(*player).mo).tracer).tracer;
                            (*(*player).mo)
                                .height = FixedMul(
                                (*player).spinheight,
                                (*(*player).mo).scale,
                            );
                            (*(*player).mo)
                                .momx = ((*chain).x - (*(*player).mo).x) * 2 as libc::c_int;
                            (*(*player).mo)
                                .momy = ((*chain).y - (*(*player).mo).y) * 2 as libc::c_int;
                            (*(*player).mo)
                                .momz = ((*chain).z
                                - ((*(*player).mo).height
                                    - (*chain).height / 2 as libc::c_int) - (*(*player).mo).z)
                                * 2 as libc::c_int;
                            P_MoveOrigin(
                                (*player).mo,
                                (*chain).x,
                                (*chain).y,
                                (*chain).z
                                    - ((*(*player).mo).height
                                        - (*chain).height / 2 as libc::c_int),
                            );
                            if (*player).powers[pw_flashing as libc::c_int as usize] == 0
                            {
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        | PF_JUMPED as libc::c_int as libc::c_uint,
                                );
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        & !(PF_NOJUMPDAMAGE as libc::c_int) as libc::c_uint,
                                );
                                (*player).secondjump = 0 as libc::c_int as uint8_t;
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        & !(PF_THOKKED as libc::c_int) as libc::c_uint,
                                );
                                if (*macecenter).flags
                                    & MF_SLIDEME as libc::c_int as uint32_t != 0
                                    && !(maptol & TOL_2D as libc::c_int as uint32_t != 0
                                        || (*(*player).mo).flags2
                                            & MF2_TWOD as libc::c_int as uint32_t != 0)
                                {
                                    (*macecenter)
                                        .angle = ((*macecenter).angle)
                                        .wrapping_add(
                                            (((*cmd).sidemove as libc::c_int) << 19 as libc::c_int)
                                                as angle_t,
                                        );
                                    (*(*player).mo)
                                        .angle = ((*(*player).mo).angle)
                                        .wrapping_add(
                                            (((*cmd).sidemove as libc::c_int) << 19 as libc::c_int)
                                                as angle_t,
                                        );
                                    if demoplayback == 0
                                        || (if (*player).pflags as libc::c_uint
                                            & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                        {
                                            CS_LMAOGALOG as libc::c_int
                                        } else {
                                            0 as libc::c_int
                                        })
                                            | (if (*player).pflags as libc::c_uint
                                                & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                            {
                                                CS_STANDARD as libc::c_int
                                            } else {
                                                0 as libc::c_int
                                            }) == CS_LMAOGALOG as libc::c_int
                                    {
                                        P_SetPlayerAngle(player, (*(*player).mo).angle);
                                    }
                                }
                            }
                        }
                    }
                    17702298541784679949 => {
                        let mut item: *mut mobj_t = (*(*player).mo).tracer;
                        P_UnsetThingPosition((*player).mo);
                        (*(*player).mo).x = (*item).x;
                        (*(*player).mo).y = (*item).y;
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int != 0
                        {
                            (*(*player).mo)
                                .z = (*item).z + (*item).height
                                - FixedDiv(
                                    (*(*player).mo).height,
                                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                );
                        } else {
                            (*(*player).mo)
                                .z = (*item).z
                                - FixedDiv(
                                    (*(*player).mo).height,
                                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                                        / 2 as libc::c_int,
                                );
                        }
                        (*(*player).mo).momz = 0 as libc::c_int;
                        (*(*player).mo).momy = (*(*player).mo).momz;
                        (*(*player).mo).momx = (*(*player).mo).momy;
                        P_SetThingPosition((*player).mo);
                        if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                            as libc::c_long != S_PLAY_RIDE as libc::c_int as libc::c_long
                        {
                            P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
                        }
                        if (*item).type_0 as libc::c_uint
                            == MT_BLACKEGGMAN_MISSILE as libc::c_int as libc::c_uint
                        {
                            if (*cmd).forwardmove as libc::c_int > 0 as libc::c_int {
                                (*item).momz
                                    += FixedMul(
                                        ((1 as libc::c_int) << 16 as libc::c_int)
                                            / 4 as libc::c_int,
                                        (*item).scale,
                                    );
                            } else if ((*cmd).forwardmove as libc::c_int)
                                < 0 as libc::c_int
                            {
                                (*item).momz
                                    -= FixedMul(
                                        ((1 as libc::c_int) << 16 as libc::c_int)
                                            / 4 as libc::c_int,
                                        (*item).scale,
                                    );
                            }
                            (*item).angle = (*(*player).mo).angle;
                            P_InstaThrust(
                                item,
                                (*item).angle,
                                FixedMul((*(*item).info).speed, (*item).scale),
                            );
                            if (*(*player).mo).z <= (*(*player).mo).floorz
                                || (*item).health <= 0 as libc::c_int
                            {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                                P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            }
                        }
                    }
                    _ => {
                        let mut ptera: *mut mobj_t = (*(*player).mo).tracer;
                        let mut spawnpoint: *mut mobj_t = (*(*ptera).tracer).tracer;
                        (*(*player).mo)
                            .height = FixedDiv(
                            FixedMul((*player).height, (*(*player).mo).scale),
                            FixedDiv(
                                14 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                10 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                            ),
                        );
                        if (*ptera).health <= 0 as libc::c_int {
                            current_block = 5258314151820362308;
                        } else if P_MobjAboveLava(ptera) != 0
                            && (*ptera).movefactor < 35 as libc::c_int
                        {
                            current_block = 5258314151820362308;
                        } else {
                            if (*(*player).mo).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                if (*ptera).z + (*ptera).height + (*(*player).mo).height
                                    + FixedMul(
                                        (1 as libc::c_int) << 16 as libc::c_int,
                                        (*(*player).mo).scale,
                                    ) <= (*ptera).ceilingz
                                    && (*ptera).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int != 0
                                {
                                    (*(*player).mo)
                                        .z = (*ptera).z + (*ptera).height
                                        + FixedMul(
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                            (*(*player).mo).scale,
                                        );
                                }
                                if (*ptera).ceilingz - (*ptera).z
                                    > (*spawnpoint).ceilingz - (*spawnpoint).z
                                        + 512 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int)
                                    && (*ptera).movefactor < 35 as libc::c_int
                                {
                                    current_block = 5258314151820362308;
                                } else {
                                    current_block = 13391418783698890455;
                                }
                            } else {
                                if (*ptera).z - (*(*player).mo).height
                                    - FixedMul(
                                        (1 as libc::c_int) << 16 as libc::c_int,
                                        (*(*player).mo).scale,
                                    ) >= (*ptera).floorz
                                    && (*ptera).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int == 0
                                {
                                    (*(*player).mo)
                                        .z = (*ptera).z - (*(*player).mo).height
                                        - FixedMul(
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                            (*(*player).mo).scale,
                                        );
                                }
                                if (*ptera).z - (*ptera).floorz
                                    > (*spawnpoint).z - (*spawnpoint).floorz
                                        + 512 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int)
                                    && (*ptera).movefactor < 35 as libc::c_int
                                {
                                    current_block = 5258314151820362308;
                                } else {
                                    current_block = 13391418783698890455;
                                }
                            }
                            match current_block {
                                5258314151820362308 => {}
                                _ => {
                                    (*ptera).movefactor -= 1;
                                    (*ptera).movefactor;
                                    if (*ptera).movefactor == 0 {
                                        current_block = 5258314151820362308;
                                    } else if (*ptera).cusval >= 50 as libc::c_int {
                                        (*player)
                                            .powers[pw_carry as libc::c_int
                                            as usize] = CR_NONE as libc::c_int as uint16_t;
                                        P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                                        P_KillMobj(
                                            ptera,
                                            (*player).mo,
                                            (*player).mo,
                                            0 as libc::c_int as uint8_t,
                                        );
                                        P_SetObjectMomZ(
                                            (*player).mo,
                                            12 as libc::c_int
                                                * ((1 as libc::c_int) << 16 as libc::c_int),
                                            false_0 as libc::c_int,
                                        );
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | (PF_APPLYAUTOBRAKE as libc::c_int
                                                    | PF_JUMPED as libc::c_int | PF_THOKKED as libc::c_int)
                                                    as libc::c_uint,
                                        );
                                        P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                                        current_block = 14303212209785889906;
                                    } else {
                                        if (*ptera).cusval != 0 {
                                            (*ptera).cusval -= 1;
                                            (*ptera).cusval;
                                        }
                                        P_TryMove(
                                            (*player).mo,
                                            (*ptera).x + (*ptera).watertop,
                                            (*ptera).y + (*ptera).waterbottom,
                                            true_0 as libc::c_int,
                                        );
                                        (*(*player).mo).z += (*ptera).cvmem;
                                        (*(*player).mo).momx = (*ptera).momx;
                                        (*(*player).mo).momy = (*ptera).momy;
                                        (*(*player).mo).momz = (*ptera).momz;
                                        if P_AproxDistance(
                                            (*(*player).mo).x - (*ptera).x - (*ptera).watertop,
                                            (*(*player).mo).y - (*ptera).y - (*ptera).waterbottom,
                                        ) > (*(*player).mo).radius
                                        {
                                            current_block = 5258314151820362308;
                                        } else {
                                            (*ptera).watertop >>= 1 as libc::c_int;
                                            (*ptera).waterbottom >>= 1 as libc::c_int;
                                            (*ptera).cvmem >>= 1 as libc::c_int;
                                            if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                                as libc::c_long
                                                != S_PLAY_FALL as libc::c_int as libc::c_long
                                            {
                                                P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
                                            }
                                            current_block = 14303212209785889906;
                                        }
                                    }
                                }
                            }
                        }
                        match current_block {
                            14303212209785889906 => {}
                            _ => {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                                P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                                (*ptera).movefactor = 35 as libc::c_int;
                                (*ptera).extravalue1 |= 4 as libc::c_int;
                            }
                        }
                    }
                }
            }
            13 => {
                current_block = 4367251730605750521;
                match current_block {
                    576355610076403033 => {
                        let mut tails: *mut mobj_t = (*(*player).mo).tracer;
                        (*(*player).mo)
                            .height = FixedDiv(
                            FixedMul((*player).height, (*(*player).mo).scale),
                            FixedDiv(
                                14 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                10 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                            ),
                        );
                        if !((*tails).player).is_null()
                            && (*(*tails).player).pflags as libc::c_uint
                                & PF_CANCARRY as libc::c_int as libc::c_uint == 0
                        {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int != 0
                        {
                            if (*tails).z + (*tails).height + (*(*player).mo).height
                                + FixedMul(
                                    (1 as libc::c_int) << 16 as libc::c_int,
                                    (*(*player).mo).scale,
                                ) <= (*tails).ceilingz
                                && (*tails).eflags as libc::c_int
                                    & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                (*(*player).mo)
                                    .z = (*tails).z + (*tails).height
                                    + 12 as libc::c_int * (*(*player).mo).scale;
                            } else {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                            }
                        } else if (*tails).z - (*(*player).mo).height
                            - FixedMul(
                                (1 as libc::c_int) << 16 as libc::c_int,
                                (*(*player).mo).scale,
                            ) >= (*tails).floorz
                            && (*tails).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int == 0
                        {
                            (*(*player).mo)
                                .z = (*tails).z - (*(*player).mo).height
                                - 12 as libc::c_int * (*(*player).mo).scale;
                        } else {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*tails).health <= 0 as libc::c_int {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        } else {
                            if !((*tails).player).is_null() {
                                P_TryMove(
                                    (*player).mo,
                                    (*tails).x
                                        + P_ReturnThrustX(
                                            tails,
                                            (*(*tails).player).drawangle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    (*tails).y
                                        + P_ReturnThrustY(
                                            tails,
                                            (*(*tails).player).drawangle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    true_0 as libc::c_int,
                                );
                            } else {
                                P_TryMove(
                                    (*player).mo,
                                    (*tails).x
                                        + P_ReturnThrustX(
                                            tails,
                                            (*tails).angle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    (*tails).y
                                        + P_ReturnThrustY(
                                            tails,
                                            (*tails).angle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    true_0 as libc::c_int,
                                );
                            }
                            (*(*player).mo).momx = (*tails).momx;
                            (*(*player).mo).momy = (*tails).momy;
                            (*(*player).mo).momz = (*tails).momz;
                        }
                        if G_CoopGametype() != 0 && !((*tails).player).is_null()
                            && (*(*tails).player).bot as libc::c_int
                                != BOT_2PAI as libc::c_int
                        {
                            (*(*player).mo).angle = (*tails).angle;
                            if demoplayback == 0
                                || (if (*player).pflags as libc::c_uint
                                    & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                {
                                    CS_LMAOGALOG as libc::c_int
                                } else {
                                    0 as libc::c_int
                                })
                                    | (if (*player).pflags as libc::c_uint
                                        & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                    {
                                        CS_STANDARD as libc::c_int
                                    } else {
                                        0 as libc::c_int
                                    }) == CS_LMAOGALOG as libc::c_int
                            {
                                P_SetPlayerAngle(player, (*(*player).mo).angle);
                            }
                        }
                        if P_AproxDistance(
                            (*(*player).mo).x - (*tails).x,
                            (*(*player).mo).y - (*tails).y,
                        ) > (*(*player).mo).radius
                        {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*player).powers[pw_carry as libc::c_int as usize]
                            as libc::c_int == CR_PLAYER as libc::c_int
                        {
                            if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                as libc::c_long
                                != S_PLAY_RIDE as libc::c_int as libc::c_long
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
                            }
                            if !((*tails).player).is_null()
                                && (!((*tails).skin).is_null()
                                    && (*((*tails).skin as *mut skin_t))
                                        .sprites[SPR2_SWIM as libc::c_int as usize]
                                        .numframes != 0)
                                && (*tails).eflags as libc::c_int
                                    & MFE_UNDERWATER as libc::c_int != 0
                            {
                                (*(*tails).player)
                                    .powers[pw_tailsfly as libc::c_int
                                    as usize] = 0 as libc::c_int as uint16_t;
                            }
                        } else if (*player).powers[pw_carry as libc::c_int as usize]
                            as libc::c_int == CR_NONE as libc::c_int
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                        }
                        if player.offset_from(players.as_mut_ptr()) as libc::c_long
                            == consoleplayer as libc::c_long && botingame != 0
                        {
                            CV_SetValue(
                                &mut *cv_analog
                                    .as_mut_ptr()
                                    .offset(1 as libc::c_int as isize),
                                ((*player).powers[pw_carry as libc::c_int as usize]
                                    as libc::c_int != CR_PLAYER as libc::c_int) as libc::c_int,
                            );
                        }
                    }
                    12265727859147633668 => {
                        let mut mo_1: *mut mobj_t = (*player).mo;
                        let mut rock: *mut mobj_t = (*(*player).mo).tracer;
                        let mut walktics: uint8_t = ((*(*mo_1).state).tics
                            - P_GetPlayerControlDirection(player)) as uint8_t;
                        if rock.is_null() || P_MobjWasRemoved(rock) != 0 {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        } else {
                            if (*player).cmd.forwardmove as libc::c_int != 0
                                || (*player).cmd.sidemove as libc::c_int != 0
                            {
                                (*rock).flags2 |= MF2_STRONGBOX as libc::c_int as uint32_t;
                                if maptol & TOL_2D as libc::c_int as uint32_t != 0
                                    || (*mo_1).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0
                                {
                                    (*rock).movedir = (*mo_1).angle;
                                } else {
                                    (*rock)
                                        .movedir = ((((*player).cmd.angleturn as libc::c_int)
                                        << 16 as libc::c_int) as angle_t)
                                        .wrapping_add(
                                            R_PointToAngle2(
                                                0 as libc::c_int,
                                                0 as libc::c_int,
                                                ((*player).cmd.forwardmove as libc::c_int)
                                                    << 16 as libc::c_int,
                                                -((*player).cmd.sidemove as libc::c_int)
                                                    << 16 as libc::c_int,
                                            ),
                                        );
                                }
                                P_Thrust(
                                    rock,
                                    (*rock).movedir,
                                    (*rock).scale >> 1 as libc::c_int,
                                );
                            } else {
                                (*rock).flags2
                                    &= !(MF2_STRONGBOX as libc::c_int) as uint32_t;
                            }
                            (*mo_1).momx = (*rock).momx;
                            (*mo_1).momy = (*rock).momy;
                            (*mo_1).momz = 0 as libc::c_int;
                            if (*player).panim as libc::c_uint
                                == PA_IDLE as libc::c_int as libc::c_uint
                                && ((*mo_1).momx != 0 || (*mo_1).momy != 0)
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
                            }
                            if (*player).panim as libc::c_uint
                                == PA_WALK as libc::c_int as libc::c_uint
                                && (*mo_1).tics > walktics as libc::c_int
                            {
                                (*mo_1).tics = walktics as int32_t;
                            }
                            P_MoveOrigin(
                                (*player).mo,
                                (*rock).x,
                                (*rock).y,
                                (*rock).z
                                    + (if (*mo_1).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int != 0
                                    {
                                        -(*mo_1).height
                                    } else {
                                        (*rock).height
                                    }),
                            );
                        }
                    }
                    4367251730605750521 => {
                        let mut zdist: fixed_t = 0;
                        let mut mo_0: *mut mobj_t = (*player).mo;
                        let mut fan: *mut mobj_t = (*(*player).mo).tracer;
                        if (*player).pflags as libc::c_uint
                            & PF_JUMPSTASIS as libc::c_int as libc::c_uint == 0
                        {
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    | PF_JUMPSTASIS as libc::c_int as libc::c_uint,
                            );
                        }
                        if (*fan).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                            != 0
                        {
                            zdist = (*mo_0).z + (*mo_0).height
                                - ((*fan).z + (*fan).height);
                        } else {
                            zdist = (*mo_0).z - (*fan).z;
                        }
                        if (*fan).type_0 as libc::c_uint
                            != MT_FAN as libc::c_int as libc::c_uint
                            && (P_PlayerTouchingSectorSpecialFlag(player, SSF_FAN))
                                .is_null()
                            || (*fan).type_0 as libc::c_uint
                                == MT_FAN as libc::c_int as libc::c_uint
                                && (abs((*mo_0).x - (*fan).x) > (*fan).radius
                                    || abs((*mo_0).y - (*fan).y) > (*fan).radius
                                    || zdist > (*fan).health << 16 as libc::c_int)
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    & !(PF_JUMPSTASIS as libc::c_int) as libc::c_uint,
                            );
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                    }
                    10601179871800211547 => {
                        let mut mo: *mut mobj_t = (*player).mo;
                        let mut dustdevil: *mut mobj_t = (*(*player).mo).tracer;
                        if abs((*mo).x - (*dustdevil).x) > (*dustdevil).radius
                            || abs((*mo).y - (*dustdevil).y) > (*dustdevil).radius
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                    }
                    17392506108461345148 => {
                        let mut chain: *mut mobj_t = 0 as *mut mobj_t;
                        let mut macecenter: *mut mobj_t = 0 as *mut mobj_t;
                        if !((*(*(*player).mo).tracer).tracer).is_null() {
                            chain = (*(*player).mo).tracer;
                            macecenter = (*(*(*player).mo).tracer).tracer;
                            (*(*player).mo)
                                .height = FixedMul(
                                (*player).spinheight,
                                (*(*player).mo).scale,
                            );
                            (*(*player).mo)
                                .momx = ((*chain).x - (*(*player).mo).x) * 2 as libc::c_int;
                            (*(*player).mo)
                                .momy = ((*chain).y - (*(*player).mo).y) * 2 as libc::c_int;
                            (*(*player).mo)
                                .momz = ((*chain).z
                                - ((*(*player).mo).height
                                    - (*chain).height / 2 as libc::c_int) - (*(*player).mo).z)
                                * 2 as libc::c_int;
                            P_MoveOrigin(
                                (*player).mo,
                                (*chain).x,
                                (*chain).y,
                                (*chain).z
                                    - ((*(*player).mo).height
                                        - (*chain).height / 2 as libc::c_int),
                            );
                            if (*player).powers[pw_flashing as libc::c_int as usize] == 0
                            {
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        | PF_JUMPED as libc::c_int as libc::c_uint,
                                );
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        & !(PF_NOJUMPDAMAGE as libc::c_int) as libc::c_uint,
                                );
                                (*player).secondjump = 0 as libc::c_int as uint8_t;
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        & !(PF_THOKKED as libc::c_int) as libc::c_uint,
                                );
                                if (*macecenter).flags
                                    & MF_SLIDEME as libc::c_int as uint32_t != 0
                                    && !(maptol & TOL_2D as libc::c_int as uint32_t != 0
                                        || (*(*player).mo).flags2
                                            & MF2_TWOD as libc::c_int as uint32_t != 0)
                                {
                                    (*macecenter)
                                        .angle = ((*macecenter).angle)
                                        .wrapping_add(
                                            (((*cmd).sidemove as libc::c_int) << 19 as libc::c_int)
                                                as angle_t,
                                        );
                                    (*(*player).mo)
                                        .angle = ((*(*player).mo).angle)
                                        .wrapping_add(
                                            (((*cmd).sidemove as libc::c_int) << 19 as libc::c_int)
                                                as angle_t,
                                        );
                                    if demoplayback == 0
                                        || (if (*player).pflags as libc::c_uint
                                            & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                        {
                                            CS_LMAOGALOG as libc::c_int
                                        } else {
                                            0 as libc::c_int
                                        })
                                            | (if (*player).pflags as libc::c_uint
                                                & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                            {
                                                CS_STANDARD as libc::c_int
                                            } else {
                                                0 as libc::c_int
                                            }) == CS_LMAOGALOG as libc::c_int
                                    {
                                        P_SetPlayerAngle(player, (*(*player).mo).angle);
                                    }
                                }
                            }
                        }
                    }
                    17702298541784679949 => {
                        let mut item: *mut mobj_t = (*(*player).mo).tracer;
                        P_UnsetThingPosition((*player).mo);
                        (*(*player).mo).x = (*item).x;
                        (*(*player).mo).y = (*item).y;
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int != 0
                        {
                            (*(*player).mo)
                                .z = (*item).z + (*item).height
                                - FixedDiv(
                                    (*(*player).mo).height,
                                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                );
                        } else {
                            (*(*player).mo)
                                .z = (*item).z
                                - FixedDiv(
                                    (*(*player).mo).height,
                                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                                        / 2 as libc::c_int,
                                );
                        }
                        (*(*player).mo).momz = 0 as libc::c_int;
                        (*(*player).mo).momy = (*(*player).mo).momz;
                        (*(*player).mo).momx = (*(*player).mo).momy;
                        P_SetThingPosition((*player).mo);
                        if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                            as libc::c_long != S_PLAY_RIDE as libc::c_int as libc::c_long
                        {
                            P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
                        }
                        if (*item).type_0 as libc::c_uint
                            == MT_BLACKEGGMAN_MISSILE as libc::c_int as libc::c_uint
                        {
                            if (*cmd).forwardmove as libc::c_int > 0 as libc::c_int {
                                (*item).momz
                                    += FixedMul(
                                        ((1 as libc::c_int) << 16 as libc::c_int)
                                            / 4 as libc::c_int,
                                        (*item).scale,
                                    );
                            } else if ((*cmd).forwardmove as libc::c_int)
                                < 0 as libc::c_int
                            {
                                (*item).momz
                                    -= FixedMul(
                                        ((1 as libc::c_int) << 16 as libc::c_int)
                                            / 4 as libc::c_int,
                                        (*item).scale,
                                    );
                            }
                            (*item).angle = (*(*player).mo).angle;
                            P_InstaThrust(
                                item,
                                (*item).angle,
                                FixedMul((*(*item).info).speed, (*item).scale),
                            );
                            if (*(*player).mo).z <= (*(*player).mo).floorz
                                || (*item).health <= 0 as libc::c_int
                            {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                                P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            }
                        }
                    }
                    _ => {
                        let mut ptera: *mut mobj_t = (*(*player).mo).tracer;
                        let mut spawnpoint: *mut mobj_t = (*(*ptera).tracer).tracer;
                        (*(*player).mo)
                            .height = FixedDiv(
                            FixedMul((*player).height, (*(*player).mo).scale),
                            FixedDiv(
                                14 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                10 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                            ),
                        );
                        if (*ptera).health <= 0 as libc::c_int {
                            current_block = 5258314151820362308;
                        } else if P_MobjAboveLava(ptera) != 0
                            && (*ptera).movefactor < 35 as libc::c_int
                        {
                            current_block = 5258314151820362308;
                        } else {
                            if (*(*player).mo).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                if (*ptera).z + (*ptera).height + (*(*player).mo).height
                                    + FixedMul(
                                        (1 as libc::c_int) << 16 as libc::c_int,
                                        (*(*player).mo).scale,
                                    ) <= (*ptera).ceilingz
                                    && (*ptera).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int != 0
                                {
                                    (*(*player).mo)
                                        .z = (*ptera).z + (*ptera).height
                                        + FixedMul(
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                            (*(*player).mo).scale,
                                        );
                                }
                                if (*ptera).ceilingz - (*ptera).z
                                    > (*spawnpoint).ceilingz - (*spawnpoint).z
                                        + 512 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int)
                                    && (*ptera).movefactor < 35 as libc::c_int
                                {
                                    current_block = 5258314151820362308;
                                } else {
                                    current_block = 13391418783698890455;
                                }
                            } else {
                                if (*ptera).z - (*(*player).mo).height
                                    - FixedMul(
                                        (1 as libc::c_int) << 16 as libc::c_int,
                                        (*(*player).mo).scale,
                                    ) >= (*ptera).floorz
                                    && (*ptera).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int == 0
                                {
                                    (*(*player).mo)
                                        .z = (*ptera).z - (*(*player).mo).height
                                        - FixedMul(
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                            (*(*player).mo).scale,
                                        );
                                }
                                if (*ptera).z - (*ptera).floorz
                                    > (*spawnpoint).z - (*spawnpoint).floorz
                                        + 512 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int)
                                    && (*ptera).movefactor < 35 as libc::c_int
                                {
                                    current_block = 5258314151820362308;
                                } else {
                                    current_block = 13391418783698890455;
                                }
                            }
                            match current_block {
                                5258314151820362308 => {}
                                _ => {
                                    (*ptera).movefactor -= 1;
                                    (*ptera).movefactor;
                                    if (*ptera).movefactor == 0 {
                                        current_block = 5258314151820362308;
                                    } else if (*ptera).cusval >= 50 as libc::c_int {
                                        (*player)
                                            .powers[pw_carry as libc::c_int
                                            as usize] = CR_NONE as libc::c_int as uint16_t;
                                        P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                                        P_KillMobj(
                                            ptera,
                                            (*player).mo,
                                            (*player).mo,
                                            0 as libc::c_int as uint8_t,
                                        );
                                        P_SetObjectMomZ(
                                            (*player).mo,
                                            12 as libc::c_int
                                                * ((1 as libc::c_int) << 16 as libc::c_int),
                                            false_0 as libc::c_int,
                                        );
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | (PF_APPLYAUTOBRAKE as libc::c_int
                                                    | PF_JUMPED as libc::c_int | PF_THOKKED as libc::c_int)
                                                    as libc::c_uint,
                                        );
                                        P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                                        current_block = 14303212209785889906;
                                    } else {
                                        if (*ptera).cusval != 0 {
                                            (*ptera).cusval -= 1;
                                            (*ptera).cusval;
                                        }
                                        P_TryMove(
                                            (*player).mo,
                                            (*ptera).x + (*ptera).watertop,
                                            (*ptera).y + (*ptera).waterbottom,
                                            true_0 as libc::c_int,
                                        );
                                        (*(*player).mo).z += (*ptera).cvmem;
                                        (*(*player).mo).momx = (*ptera).momx;
                                        (*(*player).mo).momy = (*ptera).momy;
                                        (*(*player).mo).momz = (*ptera).momz;
                                        if P_AproxDistance(
                                            (*(*player).mo).x - (*ptera).x - (*ptera).watertop,
                                            (*(*player).mo).y - (*ptera).y - (*ptera).waterbottom,
                                        ) > (*(*player).mo).radius
                                        {
                                            current_block = 5258314151820362308;
                                        } else {
                                            (*ptera).watertop >>= 1 as libc::c_int;
                                            (*ptera).waterbottom >>= 1 as libc::c_int;
                                            (*ptera).cvmem >>= 1 as libc::c_int;
                                            if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                                as libc::c_long
                                                != S_PLAY_FALL as libc::c_int as libc::c_long
                                            {
                                                P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
                                            }
                                            current_block = 14303212209785889906;
                                        }
                                    }
                                }
                            }
                        }
                        match current_block {
                            14303212209785889906 => {}
                            _ => {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                                P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                                (*ptera).movefactor = 35 as libc::c_int;
                                (*ptera).extravalue1 |= 4 as libc::c_int;
                            }
                        }
                    }
                }
            }
            10 => {
                current_block = 12265727859147633668;
                match current_block {
                    576355610076403033 => {
                        let mut tails: *mut mobj_t = (*(*player).mo).tracer;
                        (*(*player).mo)
                            .height = FixedDiv(
                            FixedMul((*player).height, (*(*player).mo).scale),
                            FixedDiv(
                                14 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                10 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                            ),
                        );
                        if !((*tails).player).is_null()
                            && (*(*tails).player).pflags as libc::c_uint
                                & PF_CANCARRY as libc::c_int as libc::c_uint == 0
                        {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int != 0
                        {
                            if (*tails).z + (*tails).height + (*(*player).mo).height
                                + FixedMul(
                                    (1 as libc::c_int) << 16 as libc::c_int,
                                    (*(*player).mo).scale,
                                ) <= (*tails).ceilingz
                                && (*tails).eflags as libc::c_int
                                    & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                (*(*player).mo)
                                    .z = (*tails).z + (*tails).height
                                    + 12 as libc::c_int * (*(*player).mo).scale;
                            } else {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                            }
                        } else if (*tails).z - (*(*player).mo).height
                            - FixedMul(
                                (1 as libc::c_int) << 16 as libc::c_int,
                                (*(*player).mo).scale,
                            ) >= (*tails).floorz
                            && (*tails).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int == 0
                        {
                            (*(*player).mo)
                                .z = (*tails).z - (*(*player).mo).height
                                - 12 as libc::c_int * (*(*player).mo).scale;
                        } else {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*tails).health <= 0 as libc::c_int {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        } else {
                            if !((*tails).player).is_null() {
                                P_TryMove(
                                    (*player).mo,
                                    (*tails).x
                                        + P_ReturnThrustX(
                                            tails,
                                            (*(*tails).player).drawangle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    (*tails).y
                                        + P_ReturnThrustY(
                                            tails,
                                            (*(*tails).player).drawangle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    true_0 as libc::c_int,
                                );
                            } else {
                                P_TryMove(
                                    (*player).mo,
                                    (*tails).x
                                        + P_ReturnThrustX(
                                            tails,
                                            (*tails).angle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    (*tails).y
                                        + P_ReturnThrustY(
                                            tails,
                                            (*tails).angle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    true_0 as libc::c_int,
                                );
                            }
                            (*(*player).mo).momx = (*tails).momx;
                            (*(*player).mo).momy = (*tails).momy;
                            (*(*player).mo).momz = (*tails).momz;
                        }
                        if G_CoopGametype() != 0 && !((*tails).player).is_null()
                            && (*(*tails).player).bot as libc::c_int
                                != BOT_2PAI as libc::c_int
                        {
                            (*(*player).mo).angle = (*tails).angle;
                            if demoplayback == 0
                                || (if (*player).pflags as libc::c_uint
                                    & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                {
                                    CS_LMAOGALOG as libc::c_int
                                } else {
                                    0 as libc::c_int
                                })
                                    | (if (*player).pflags as libc::c_uint
                                        & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                    {
                                        CS_STANDARD as libc::c_int
                                    } else {
                                        0 as libc::c_int
                                    }) == CS_LMAOGALOG as libc::c_int
                            {
                                P_SetPlayerAngle(player, (*(*player).mo).angle);
                            }
                        }
                        if P_AproxDistance(
                            (*(*player).mo).x - (*tails).x,
                            (*(*player).mo).y - (*tails).y,
                        ) > (*(*player).mo).radius
                        {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*player).powers[pw_carry as libc::c_int as usize]
                            as libc::c_int == CR_PLAYER as libc::c_int
                        {
                            if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                as libc::c_long
                                != S_PLAY_RIDE as libc::c_int as libc::c_long
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
                            }
                            if !((*tails).player).is_null()
                                && (!((*tails).skin).is_null()
                                    && (*((*tails).skin as *mut skin_t))
                                        .sprites[SPR2_SWIM as libc::c_int as usize]
                                        .numframes != 0)
                                && (*tails).eflags as libc::c_int
                                    & MFE_UNDERWATER as libc::c_int != 0
                            {
                                (*(*tails).player)
                                    .powers[pw_tailsfly as libc::c_int
                                    as usize] = 0 as libc::c_int as uint16_t;
                            }
                        } else if (*player).powers[pw_carry as libc::c_int as usize]
                            as libc::c_int == CR_NONE as libc::c_int
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                        }
                        if player.offset_from(players.as_mut_ptr()) as libc::c_long
                            == consoleplayer as libc::c_long && botingame != 0
                        {
                            CV_SetValue(
                                &mut *cv_analog
                                    .as_mut_ptr()
                                    .offset(1 as libc::c_int as isize),
                                ((*player).powers[pw_carry as libc::c_int as usize]
                                    as libc::c_int != CR_PLAYER as libc::c_int) as libc::c_int,
                            );
                        }
                    }
                    12265727859147633668 => {
                        let mut mo_1: *mut mobj_t = (*player).mo;
                        let mut rock: *mut mobj_t = (*(*player).mo).tracer;
                        let mut walktics: uint8_t = ((*(*mo_1).state).tics
                            - P_GetPlayerControlDirection(player)) as uint8_t;
                        if rock.is_null() || P_MobjWasRemoved(rock) != 0 {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        } else {
                            if (*player).cmd.forwardmove as libc::c_int != 0
                                || (*player).cmd.sidemove as libc::c_int != 0
                            {
                                (*rock).flags2 |= MF2_STRONGBOX as libc::c_int as uint32_t;
                                if maptol & TOL_2D as libc::c_int as uint32_t != 0
                                    || (*mo_1).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0
                                {
                                    (*rock).movedir = (*mo_1).angle;
                                } else {
                                    (*rock)
                                        .movedir = ((((*player).cmd.angleturn as libc::c_int)
                                        << 16 as libc::c_int) as angle_t)
                                        .wrapping_add(
                                            R_PointToAngle2(
                                                0 as libc::c_int,
                                                0 as libc::c_int,
                                                ((*player).cmd.forwardmove as libc::c_int)
                                                    << 16 as libc::c_int,
                                                -((*player).cmd.sidemove as libc::c_int)
                                                    << 16 as libc::c_int,
                                            ),
                                        );
                                }
                                P_Thrust(
                                    rock,
                                    (*rock).movedir,
                                    (*rock).scale >> 1 as libc::c_int,
                                );
                            } else {
                                (*rock).flags2
                                    &= !(MF2_STRONGBOX as libc::c_int) as uint32_t;
                            }
                            (*mo_1).momx = (*rock).momx;
                            (*mo_1).momy = (*rock).momy;
                            (*mo_1).momz = 0 as libc::c_int;
                            if (*player).panim as libc::c_uint
                                == PA_IDLE as libc::c_int as libc::c_uint
                                && ((*mo_1).momx != 0 || (*mo_1).momy != 0)
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
                            }
                            if (*player).panim as libc::c_uint
                                == PA_WALK as libc::c_int as libc::c_uint
                                && (*mo_1).tics > walktics as libc::c_int
                            {
                                (*mo_1).tics = walktics as int32_t;
                            }
                            P_MoveOrigin(
                                (*player).mo,
                                (*rock).x,
                                (*rock).y,
                                (*rock).z
                                    + (if (*mo_1).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int != 0
                                    {
                                        -(*mo_1).height
                                    } else {
                                        (*rock).height
                                    }),
                            );
                        }
                    }
                    4367251730605750521 => {
                        let mut zdist: fixed_t = 0;
                        let mut mo_0: *mut mobj_t = (*player).mo;
                        let mut fan: *mut mobj_t = (*(*player).mo).tracer;
                        if (*player).pflags as libc::c_uint
                            & PF_JUMPSTASIS as libc::c_int as libc::c_uint == 0
                        {
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    | PF_JUMPSTASIS as libc::c_int as libc::c_uint,
                            );
                        }
                        if (*fan).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                            != 0
                        {
                            zdist = (*mo_0).z + (*mo_0).height
                                - ((*fan).z + (*fan).height);
                        } else {
                            zdist = (*mo_0).z - (*fan).z;
                        }
                        if (*fan).type_0 as libc::c_uint
                            != MT_FAN as libc::c_int as libc::c_uint
                            && (P_PlayerTouchingSectorSpecialFlag(player, SSF_FAN))
                                .is_null()
                            || (*fan).type_0 as libc::c_uint
                                == MT_FAN as libc::c_int as libc::c_uint
                                && (abs((*mo_0).x - (*fan).x) > (*fan).radius
                                    || abs((*mo_0).y - (*fan).y) > (*fan).radius
                                    || zdist > (*fan).health << 16 as libc::c_int)
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    & !(PF_JUMPSTASIS as libc::c_int) as libc::c_uint,
                            );
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                    }
                    10601179871800211547 => {
                        let mut mo: *mut mobj_t = (*player).mo;
                        let mut dustdevil: *mut mobj_t = (*(*player).mo).tracer;
                        if abs((*mo).x - (*dustdevil).x) > (*dustdevil).radius
                            || abs((*mo).y - (*dustdevil).y) > (*dustdevil).radius
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                    }
                    17392506108461345148 => {
                        let mut chain: *mut mobj_t = 0 as *mut mobj_t;
                        let mut macecenter: *mut mobj_t = 0 as *mut mobj_t;
                        if !((*(*(*player).mo).tracer).tracer).is_null() {
                            chain = (*(*player).mo).tracer;
                            macecenter = (*(*(*player).mo).tracer).tracer;
                            (*(*player).mo)
                                .height = FixedMul(
                                (*player).spinheight,
                                (*(*player).mo).scale,
                            );
                            (*(*player).mo)
                                .momx = ((*chain).x - (*(*player).mo).x) * 2 as libc::c_int;
                            (*(*player).mo)
                                .momy = ((*chain).y - (*(*player).mo).y) * 2 as libc::c_int;
                            (*(*player).mo)
                                .momz = ((*chain).z
                                - ((*(*player).mo).height
                                    - (*chain).height / 2 as libc::c_int) - (*(*player).mo).z)
                                * 2 as libc::c_int;
                            P_MoveOrigin(
                                (*player).mo,
                                (*chain).x,
                                (*chain).y,
                                (*chain).z
                                    - ((*(*player).mo).height
                                        - (*chain).height / 2 as libc::c_int),
                            );
                            if (*player).powers[pw_flashing as libc::c_int as usize] == 0
                            {
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        | PF_JUMPED as libc::c_int as libc::c_uint,
                                );
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        & !(PF_NOJUMPDAMAGE as libc::c_int) as libc::c_uint,
                                );
                                (*player).secondjump = 0 as libc::c_int as uint8_t;
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        & !(PF_THOKKED as libc::c_int) as libc::c_uint,
                                );
                                if (*macecenter).flags
                                    & MF_SLIDEME as libc::c_int as uint32_t != 0
                                    && !(maptol & TOL_2D as libc::c_int as uint32_t != 0
                                        || (*(*player).mo).flags2
                                            & MF2_TWOD as libc::c_int as uint32_t != 0)
                                {
                                    (*macecenter)
                                        .angle = ((*macecenter).angle)
                                        .wrapping_add(
                                            (((*cmd).sidemove as libc::c_int) << 19 as libc::c_int)
                                                as angle_t,
                                        );
                                    (*(*player).mo)
                                        .angle = ((*(*player).mo).angle)
                                        .wrapping_add(
                                            (((*cmd).sidemove as libc::c_int) << 19 as libc::c_int)
                                                as angle_t,
                                        );
                                    if demoplayback == 0
                                        || (if (*player).pflags as libc::c_uint
                                            & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                        {
                                            CS_LMAOGALOG as libc::c_int
                                        } else {
                                            0 as libc::c_int
                                        })
                                            | (if (*player).pflags as libc::c_uint
                                                & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                            {
                                                CS_STANDARD as libc::c_int
                                            } else {
                                                0 as libc::c_int
                                            }) == CS_LMAOGALOG as libc::c_int
                                    {
                                        P_SetPlayerAngle(player, (*(*player).mo).angle);
                                    }
                                }
                            }
                        }
                    }
                    17702298541784679949 => {
                        let mut item: *mut mobj_t = (*(*player).mo).tracer;
                        P_UnsetThingPosition((*player).mo);
                        (*(*player).mo).x = (*item).x;
                        (*(*player).mo).y = (*item).y;
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int != 0
                        {
                            (*(*player).mo)
                                .z = (*item).z + (*item).height
                                - FixedDiv(
                                    (*(*player).mo).height,
                                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                );
                        } else {
                            (*(*player).mo)
                                .z = (*item).z
                                - FixedDiv(
                                    (*(*player).mo).height,
                                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                                        / 2 as libc::c_int,
                                );
                        }
                        (*(*player).mo).momz = 0 as libc::c_int;
                        (*(*player).mo).momy = (*(*player).mo).momz;
                        (*(*player).mo).momx = (*(*player).mo).momy;
                        P_SetThingPosition((*player).mo);
                        if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                            as libc::c_long != S_PLAY_RIDE as libc::c_int as libc::c_long
                        {
                            P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
                        }
                        if (*item).type_0 as libc::c_uint
                            == MT_BLACKEGGMAN_MISSILE as libc::c_int as libc::c_uint
                        {
                            if (*cmd).forwardmove as libc::c_int > 0 as libc::c_int {
                                (*item).momz
                                    += FixedMul(
                                        ((1 as libc::c_int) << 16 as libc::c_int)
                                            / 4 as libc::c_int,
                                        (*item).scale,
                                    );
                            } else if ((*cmd).forwardmove as libc::c_int)
                                < 0 as libc::c_int
                            {
                                (*item).momz
                                    -= FixedMul(
                                        ((1 as libc::c_int) << 16 as libc::c_int)
                                            / 4 as libc::c_int,
                                        (*item).scale,
                                    );
                            }
                            (*item).angle = (*(*player).mo).angle;
                            P_InstaThrust(
                                item,
                                (*item).angle,
                                FixedMul((*(*item).info).speed, (*item).scale),
                            );
                            if (*(*player).mo).z <= (*(*player).mo).floorz
                                || (*item).health <= 0 as libc::c_int
                            {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                                P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            }
                        }
                    }
                    _ => {
                        let mut ptera: *mut mobj_t = (*(*player).mo).tracer;
                        let mut spawnpoint: *mut mobj_t = (*(*ptera).tracer).tracer;
                        (*(*player).mo)
                            .height = FixedDiv(
                            FixedMul((*player).height, (*(*player).mo).scale),
                            FixedDiv(
                                14 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                10 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                            ),
                        );
                        if (*ptera).health <= 0 as libc::c_int {
                            current_block = 5258314151820362308;
                        } else if P_MobjAboveLava(ptera) != 0
                            && (*ptera).movefactor < 35 as libc::c_int
                        {
                            current_block = 5258314151820362308;
                        } else {
                            if (*(*player).mo).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                if (*ptera).z + (*ptera).height + (*(*player).mo).height
                                    + FixedMul(
                                        (1 as libc::c_int) << 16 as libc::c_int,
                                        (*(*player).mo).scale,
                                    ) <= (*ptera).ceilingz
                                    && (*ptera).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int != 0
                                {
                                    (*(*player).mo)
                                        .z = (*ptera).z + (*ptera).height
                                        + FixedMul(
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                            (*(*player).mo).scale,
                                        );
                                }
                                if (*ptera).ceilingz - (*ptera).z
                                    > (*spawnpoint).ceilingz - (*spawnpoint).z
                                        + 512 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int)
                                    && (*ptera).movefactor < 35 as libc::c_int
                                {
                                    current_block = 5258314151820362308;
                                } else {
                                    current_block = 13391418783698890455;
                                }
                            } else {
                                if (*ptera).z - (*(*player).mo).height
                                    - FixedMul(
                                        (1 as libc::c_int) << 16 as libc::c_int,
                                        (*(*player).mo).scale,
                                    ) >= (*ptera).floorz
                                    && (*ptera).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int == 0
                                {
                                    (*(*player).mo)
                                        .z = (*ptera).z - (*(*player).mo).height
                                        - FixedMul(
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                            (*(*player).mo).scale,
                                        );
                                }
                                if (*ptera).z - (*ptera).floorz
                                    > (*spawnpoint).z - (*spawnpoint).floorz
                                        + 512 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int)
                                    && (*ptera).movefactor < 35 as libc::c_int
                                {
                                    current_block = 5258314151820362308;
                                } else {
                                    current_block = 13391418783698890455;
                                }
                            }
                            match current_block {
                                5258314151820362308 => {}
                                _ => {
                                    (*ptera).movefactor -= 1;
                                    (*ptera).movefactor;
                                    if (*ptera).movefactor == 0 {
                                        current_block = 5258314151820362308;
                                    } else if (*ptera).cusval >= 50 as libc::c_int {
                                        (*player)
                                            .powers[pw_carry as libc::c_int
                                            as usize] = CR_NONE as libc::c_int as uint16_t;
                                        P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                                        P_KillMobj(
                                            ptera,
                                            (*player).mo,
                                            (*player).mo,
                                            0 as libc::c_int as uint8_t,
                                        );
                                        P_SetObjectMomZ(
                                            (*player).mo,
                                            12 as libc::c_int
                                                * ((1 as libc::c_int) << 16 as libc::c_int),
                                            false_0 as libc::c_int,
                                        );
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | (PF_APPLYAUTOBRAKE as libc::c_int
                                                    | PF_JUMPED as libc::c_int | PF_THOKKED as libc::c_int)
                                                    as libc::c_uint,
                                        );
                                        P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                                        current_block = 14303212209785889906;
                                    } else {
                                        if (*ptera).cusval != 0 {
                                            (*ptera).cusval -= 1;
                                            (*ptera).cusval;
                                        }
                                        P_TryMove(
                                            (*player).mo,
                                            (*ptera).x + (*ptera).watertop,
                                            (*ptera).y + (*ptera).waterbottom,
                                            true_0 as libc::c_int,
                                        );
                                        (*(*player).mo).z += (*ptera).cvmem;
                                        (*(*player).mo).momx = (*ptera).momx;
                                        (*(*player).mo).momy = (*ptera).momy;
                                        (*(*player).mo).momz = (*ptera).momz;
                                        if P_AproxDistance(
                                            (*(*player).mo).x - (*ptera).x - (*ptera).watertop,
                                            (*(*player).mo).y - (*ptera).y - (*ptera).waterbottom,
                                        ) > (*(*player).mo).radius
                                        {
                                            current_block = 5258314151820362308;
                                        } else {
                                            (*ptera).watertop >>= 1 as libc::c_int;
                                            (*ptera).waterbottom >>= 1 as libc::c_int;
                                            (*ptera).cvmem >>= 1 as libc::c_int;
                                            if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                                as libc::c_long
                                                != S_PLAY_FALL as libc::c_int as libc::c_long
                                            {
                                                P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
                                            }
                                            current_block = 14303212209785889906;
                                        }
                                    }
                                }
                            }
                        }
                        match current_block {
                            14303212209785889906 => {}
                            _ => {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                                P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                                (*ptera).movefactor = 35 as libc::c_int;
                                (*ptera).extravalue1 |= 4 as libc::c_int;
                            }
                        }
                    }
                }
            }
            11 => {
                current_block = 13718575627189773797;
                match current_block {
                    576355610076403033 => {
                        let mut tails: *mut mobj_t = (*(*player).mo).tracer;
                        (*(*player).mo)
                            .height = FixedDiv(
                            FixedMul((*player).height, (*(*player).mo).scale),
                            FixedDiv(
                                14 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                10 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                            ),
                        );
                        if !((*tails).player).is_null()
                            && (*(*tails).player).pflags as libc::c_uint
                                & PF_CANCARRY as libc::c_int as libc::c_uint == 0
                        {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int != 0
                        {
                            if (*tails).z + (*tails).height + (*(*player).mo).height
                                + FixedMul(
                                    (1 as libc::c_int) << 16 as libc::c_int,
                                    (*(*player).mo).scale,
                                ) <= (*tails).ceilingz
                                && (*tails).eflags as libc::c_int
                                    & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                (*(*player).mo)
                                    .z = (*tails).z + (*tails).height
                                    + 12 as libc::c_int * (*(*player).mo).scale;
                            } else {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                            }
                        } else if (*tails).z - (*(*player).mo).height
                            - FixedMul(
                                (1 as libc::c_int) << 16 as libc::c_int,
                                (*(*player).mo).scale,
                            ) >= (*tails).floorz
                            && (*tails).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int == 0
                        {
                            (*(*player).mo)
                                .z = (*tails).z - (*(*player).mo).height
                                - 12 as libc::c_int * (*(*player).mo).scale;
                        } else {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*tails).health <= 0 as libc::c_int {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        } else {
                            if !((*tails).player).is_null() {
                                P_TryMove(
                                    (*player).mo,
                                    (*tails).x
                                        + P_ReturnThrustX(
                                            tails,
                                            (*(*tails).player).drawangle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    (*tails).y
                                        + P_ReturnThrustY(
                                            tails,
                                            (*(*tails).player).drawangle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    true_0 as libc::c_int,
                                );
                            } else {
                                P_TryMove(
                                    (*player).mo,
                                    (*tails).x
                                        + P_ReturnThrustX(
                                            tails,
                                            (*tails).angle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    (*tails).y
                                        + P_ReturnThrustY(
                                            tails,
                                            (*tails).angle,
                                            4 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                        ),
                                    true_0 as libc::c_int,
                                );
                            }
                            (*(*player).mo).momx = (*tails).momx;
                            (*(*player).mo).momy = (*tails).momy;
                            (*(*player).mo).momz = (*tails).momz;
                        }
                        if G_CoopGametype() != 0 && !((*tails).player).is_null()
                            && (*(*tails).player).bot as libc::c_int
                                != BOT_2PAI as libc::c_int
                        {
                            (*(*player).mo).angle = (*tails).angle;
                            if demoplayback == 0
                                || (if (*player).pflags as libc::c_uint
                                    & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                {
                                    CS_LMAOGALOG as libc::c_int
                                } else {
                                    0 as libc::c_int
                                })
                                    | (if (*player).pflags as libc::c_uint
                                        & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                    {
                                        CS_STANDARD as libc::c_int
                                    } else {
                                        0 as libc::c_int
                                    }) == CS_LMAOGALOG as libc::c_int
                            {
                                P_SetPlayerAngle(player, (*(*player).mo).angle);
                            }
                        }
                        if P_AproxDistance(
                            (*(*player).mo).x - (*tails).x,
                            (*(*player).mo).y - (*tails).y,
                        ) > (*(*player).mo).radius
                        {
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                        if (*player).powers[pw_carry as libc::c_int as usize]
                            as libc::c_int == CR_PLAYER as libc::c_int
                        {
                            if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                as libc::c_long
                                != S_PLAY_RIDE as libc::c_int as libc::c_long
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
                            }
                            if !((*tails).player).is_null()
                                && (!((*tails).skin).is_null()
                                    && (*((*tails).skin as *mut skin_t))
                                        .sprites[SPR2_SWIM as libc::c_int as usize]
                                        .numframes != 0)
                                && (*tails).eflags as libc::c_int
                                    & MFE_UNDERWATER as libc::c_int != 0
                            {
                                (*(*tails).player)
                                    .powers[pw_tailsfly as libc::c_int
                                    as usize] = 0 as libc::c_int as uint16_t;
                            }
                        } else if (*player).powers[pw_carry as libc::c_int as usize]
                            as libc::c_int == CR_NONE as libc::c_int
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                        }
                        if player.offset_from(players.as_mut_ptr()) as libc::c_long
                            == consoleplayer as libc::c_long && botingame != 0
                        {
                            CV_SetValue(
                                &mut *cv_analog
                                    .as_mut_ptr()
                                    .offset(1 as libc::c_int as isize),
                                ((*player).powers[pw_carry as libc::c_int as usize]
                                    as libc::c_int != CR_PLAYER as libc::c_int) as libc::c_int,
                            );
                        }
                    }
                    12265727859147633668 => {
                        let mut mo_1: *mut mobj_t = (*player).mo;
                        let mut rock: *mut mobj_t = (*(*player).mo).tracer;
                        let mut walktics: uint8_t = ((*(*mo_1).state).tics
                            - P_GetPlayerControlDirection(player)) as uint8_t;
                        if rock.is_null() || P_MobjWasRemoved(rock) != 0 {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        } else {
                            if (*player).cmd.forwardmove as libc::c_int != 0
                                || (*player).cmd.sidemove as libc::c_int != 0
                            {
                                (*rock).flags2 |= MF2_STRONGBOX as libc::c_int as uint32_t;
                                if maptol & TOL_2D as libc::c_int as uint32_t != 0
                                    || (*mo_1).flags2 & MF2_TWOD as libc::c_int as uint32_t != 0
                                {
                                    (*rock).movedir = (*mo_1).angle;
                                } else {
                                    (*rock)
                                        .movedir = ((((*player).cmd.angleturn as libc::c_int)
                                        << 16 as libc::c_int) as angle_t)
                                        .wrapping_add(
                                            R_PointToAngle2(
                                                0 as libc::c_int,
                                                0 as libc::c_int,
                                                ((*player).cmd.forwardmove as libc::c_int)
                                                    << 16 as libc::c_int,
                                                -((*player).cmd.sidemove as libc::c_int)
                                                    << 16 as libc::c_int,
                                            ),
                                        );
                                }
                                P_Thrust(
                                    rock,
                                    (*rock).movedir,
                                    (*rock).scale >> 1 as libc::c_int,
                                );
                            } else {
                                (*rock).flags2
                                    &= !(MF2_STRONGBOX as libc::c_int) as uint32_t;
                            }
                            (*mo_1).momx = (*rock).momx;
                            (*mo_1).momy = (*rock).momy;
                            (*mo_1).momz = 0 as libc::c_int;
                            if (*player).panim as libc::c_uint
                                == PA_IDLE as libc::c_int as libc::c_uint
                                && ((*mo_1).momx != 0 || (*mo_1).momy != 0)
                            {
                                P_SetPlayerMobjState((*player).mo, S_PLAY_WALK);
                            }
                            if (*player).panim as libc::c_uint
                                == PA_WALK as libc::c_int as libc::c_uint
                                && (*mo_1).tics > walktics as libc::c_int
                            {
                                (*mo_1).tics = walktics as int32_t;
                            }
                            P_MoveOrigin(
                                (*player).mo,
                                (*rock).x,
                                (*rock).y,
                                (*rock).z
                                    + (if (*mo_1).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int != 0
                                    {
                                        -(*mo_1).height
                                    } else {
                                        (*rock).height
                                    }),
                            );
                        }
                    }
                    4367251730605750521 => {
                        let mut zdist: fixed_t = 0;
                        let mut mo_0: *mut mobj_t = (*player).mo;
                        let mut fan: *mut mobj_t = (*(*player).mo).tracer;
                        if (*player).pflags as libc::c_uint
                            & PF_JUMPSTASIS as libc::c_int as libc::c_uint == 0
                        {
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    | PF_JUMPSTASIS as libc::c_int as libc::c_uint,
                            );
                        }
                        if (*fan).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                            != 0
                        {
                            zdist = (*mo_0).z + (*mo_0).height
                                - ((*fan).z + (*fan).height);
                        } else {
                            zdist = (*mo_0).z - (*fan).z;
                        }
                        if (*fan).type_0 as libc::c_uint
                            != MT_FAN as libc::c_int as libc::c_uint
                            && (P_PlayerTouchingSectorSpecialFlag(player, SSF_FAN))
                                .is_null()
                            || (*fan).type_0 as libc::c_uint
                                == MT_FAN as libc::c_int as libc::c_uint
                                && (abs((*mo_0).x - (*fan).x) > (*fan).radius
                                    || abs((*mo_0).y - (*fan).y) > (*fan).radius
                                    || zdist > (*fan).health << 16 as libc::c_int)
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .pflags = ::core::mem::transmute::<
                                libc::c_uint,
                                pflags_t,
                            >(
                                (*player).pflags as libc::c_uint
                                    & !(PF_JUMPSTASIS as libc::c_int) as libc::c_uint,
                            );
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                    }
                    10601179871800211547 => {
                        let mut mo: *mut mobj_t = (*player).mo;
                        let mut dustdevil: *mut mobj_t = (*(*player).mo).tracer;
                        if abs((*mo).x - (*dustdevil).x) > (*dustdevil).radius
                            || abs((*mo).y - (*dustdevil).y) > (*dustdevil).radius
                        {
                            P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            (*player)
                                .powers[pw_carry as libc::c_int
                                as usize] = CR_NONE as libc::c_int as uint16_t;
                        }
                    }
                    17392506108461345148 => {
                        let mut chain: *mut mobj_t = 0 as *mut mobj_t;
                        let mut macecenter: *mut mobj_t = 0 as *mut mobj_t;
                        if !((*(*(*player).mo).tracer).tracer).is_null() {
                            chain = (*(*player).mo).tracer;
                            macecenter = (*(*(*player).mo).tracer).tracer;
                            (*(*player).mo)
                                .height = FixedMul(
                                (*player).spinheight,
                                (*(*player).mo).scale,
                            );
                            (*(*player).mo)
                                .momx = ((*chain).x - (*(*player).mo).x) * 2 as libc::c_int;
                            (*(*player).mo)
                                .momy = ((*chain).y - (*(*player).mo).y) * 2 as libc::c_int;
                            (*(*player).mo)
                                .momz = ((*chain).z
                                - ((*(*player).mo).height
                                    - (*chain).height / 2 as libc::c_int) - (*(*player).mo).z)
                                * 2 as libc::c_int;
                            P_MoveOrigin(
                                (*player).mo,
                                (*chain).x,
                                (*chain).y,
                                (*chain).z
                                    - ((*(*player).mo).height
                                        - (*chain).height / 2 as libc::c_int),
                            );
                            if (*player).powers[pw_flashing as libc::c_int as usize] == 0
                            {
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        | PF_JUMPED as libc::c_int as libc::c_uint,
                                );
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        & !(PF_NOJUMPDAMAGE as libc::c_int) as libc::c_uint,
                                );
                                (*player).secondjump = 0 as libc::c_int as uint8_t;
                                (*player)
                                    .pflags = ::core::mem::transmute::<
                                    libc::c_uint,
                                    pflags_t,
                                >(
                                    (*player).pflags as libc::c_uint
                                        & !(PF_THOKKED as libc::c_int) as libc::c_uint,
                                );
                                if (*macecenter).flags
                                    & MF_SLIDEME as libc::c_int as uint32_t != 0
                                    && !(maptol & TOL_2D as libc::c_int as uint32_t != 0
                                        || (*(*player).mo).flags2
                                            & MF2_TWOD as libc::c_int as uint32_t != 0)
                                {
                                    (*macecenter)
                                        .angle = ((*macecenter).angle)
                                        .wrapping_add(
                                            (((*cmd).sidemove as libc::c_int) << 19 as libc::c_int)
                                                as angle_t,
                                        );
                                    (*(*player).mo)
                                        .angle = ((*(*player).mo).angle)
                                        .wrapping_add(
                                            (((*cmd).sidemove as libc::c_int) << 19 as libc::c_int)
                                                as angle_t,
                                        );
                                    if demoplayback == 0
                                        || (if (*player).pflags as libc::c_uint
                                            & PF_ANALOGMODE as libc::c_int as libc::c_uint != 0
                                        {
                                            CS_LMAOGALOG as libc::c_int
                                        } else {
                                            0 as libc::c_int
                                        })
                                            | (if (*player).pflags as libc::c_uint
                                                & PF_DIRECTIONCHAR as libc::c_int as libc::c_uint != 0
                                            {
                                                CS_STANDARD as libc::c_int
                                            } else {
                                                0 as libc::c_int
                                            }) == CS_LMAOGALOG as libc::c_int
                                    {
                                        P_SetPlayerAngle(player, (*(*player).mo).angle);
                                    }
                                }
                            }
                        }
                    }
                    17702298541784679949 => {
                        let mut item: *mut mobj_t = (*(*player).mo).tracer;
                        P_UnsetThingPosition((*player).mo);
                        (*(*player).mo).x = (*item).x;
                        (*(*player).mo).y = (*item).y;
                        if (*(*player).mo).eflags as libc::c_int
                            & MFE_VERTICALFLIP as libc::c_int != 0
                        {
                            (*(*player).mo)
                                .z = (*item).z + (*item).height
                                - FixedDiv(
                                    (*(*player).mo).height,
                                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int),
                                );
                        } else {
                            (*(*player).mo)
                                .z = (*item).z
                                - FixedDiv(
                                    (*(*player).mo).height,
                                    3 as libc::c_int * ((1 as libc::c_int) << 16 as libc::c_int)
                                        / 2 as libc::c_int,
                                );
                        }
                        (*(*player).mo).momz = 0 as libc::c_int;
                        (*(*player).mo).momy = (*(*player).mo).momz;
                        (*(*player).mo).momx = (*(*player).mo).momy;
                        P_SetThingPosition((*player).mo);
                        if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                            as libc::c_long != S_PLAY_RIDE as libc::c_int as libc::c_long
                        {
                            P_SetPlayerMobjState((*player).mo, S_PLAY_RIDE);
                        }
                        if (*item).type_0 as libc::c_uint
                            == MT_BLACKEGGMAN_MISSILE as libc::c_int as libc::c_uint
                        {
                            if (*cmd).forwardmove as libc::c_int > 0 as libc::c_int {
                                (*item).momz
                                    += FixedMul(
                                        ((1 as libc::c_int) << 16 as libc::c_int)
                                            / 4 as libc::c_int,
                                        (*item).scale,
                                    );
                            } else if ((*cmd).forwardmove as libc::c_int)
                                < 0 as libc::c_int
                            {
                                (*item).momz
                                    -= FixedMul(
                                        ((1 as libc::c_int) << 16 as libc::c_int)
                                            / 4 as libc::c_int,
                                        (*item).scale,
                                    );
                            }
                            (*item).angle = (*(*player).mo).angle;
                            P_InstaThrust(
                                item,
                                (*item).angle,
                                FixedMul((*(*item).info).speed, (*item).scale),
                            );
                            if (*(*player).mo).z <= (*(*player).mo).floorz
                                || (*item).health <= 0 as libc::c_int
                            {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                                P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                            }
                        }
                    }
                    _ => {
                        let mut ptera: *mut mobj_t = (*(*player).mo).tracer;
                        let mut spawnpoint: *mut mobj_t = (*(*ptera).tracer).tracer;
                        (*(*player).mo)
                            .height = FixedDiv(
                            FixedMul((*player).height, (*(*player).mo).scale),
                            FixedDiv(
                                14 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                                10 as libc::c_int
                                    * ((1 as libc::c_int) << 16 as libc::c_int),
                            ),
                        );
                        if (*ptera).health <= 0 as libc::c_int {
                            current_block = 5258314151820362308;
                        } else if P_MobjAboveLava(ptera) != 0
                            && (*ptera).movefactor < 35 as libc::c_int
                        {
                            current_block = 5258314151820362308;
                        } else {
                            if (*(*player).mo).eflags as libc::c_int
                                & MFE_VERTICALFLIP as libc::c_int != 0
                            {
                                if (*ptera).z + (*ptera).height + (*(*player).mo).height
                                    + FixedMul(
                                        (1 as libc::c_int) << 16 as libc::c_int,
                                        (*(*player).mo).scale,
                                    ) <= (*ptera).ceilingz
                                    && (*ptera).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int != 0
                                {
                                    (*(*player).mo)
                                        .z = (*ptera).z + (*ptera).height
                                        + FixedMul(
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                            (*(*player).mo).scale,
                                        );
                                }
                                if (*ptera).ceilingz - (*ptera).z
                                    > (*spawnpoint).ceilingz - (*spawnpoint).z
                                        + 512 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int)
                                    && (*ptera).movefactor < 35 as libc::c_int
                                {
                                    current_block = 5258314151820362308;
                                } else {
                                    current_block = 13391418783698890455;
                                }
                            } else {
                                if (*ptera).z - (*(*player).mo).height
                                    - FixedMul(
                                        (1 as libc::c_int) << 16 as libc::c_int,
                                        (*(*player).mo).scale,
                                    ) >= (*ptera).floorz
                                    && (*ptera).eflags as libc::c_int
                                        & MFE_VERTICALFLIP as libc::c_int == 0
                                {
                                    (*(*player).mo)
                                        .z = (*ptera).z - (*(*player).mo).height
                                        - FixedMul(
                                            (1 as libc::c_int) << 16 as libc::c_int,
                                            (*(*player).mo).scale,
                                        );
                                }
                                if (*ptera).z - (*ptera).floorz
                                    > (*spawnpoint).z - (*spawnpoint).floorz
                                        + 512 as libc::c_int
                                            * ((1 as libc::c_int) << 16 as libc::c_int)
                                    && (*ptera).movefactor < 35 as libc::c_int
                                {
                                    current_block = 5258314151820362308;
                                } else {
                                    current_block = 13391418783698890455;
                                }
                            }
                            match current_block {
                                5258314151820362308 => {}
                                _ => {
                                    (*ptera).movefactor -= 1;
                                    (*ptera).movefactor;
                                    if (*ptera).movefactor == 0 {
                                        current_block = 5258314151820362308;
                                    } else if (*ptera).cusval >= 50 as libc::c_int {
                                        (*player)
                                            .powers[pw_carry as libc::c_int
                                            as usize] = CR_NONE as libc::c_int as uint16_t;
                                        P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                                        P_KillMobj(
                                            ptera,
                                            (*player).mo,
                                            (*player).mo,
                                            0 as libc::c_int as uint8_t,
                                        );
                                        P_SetObjectMomZ(
                                            (*player).mo,
                                            12 as libc::c_int
                                                * ((1 as libc::c_int) << 16 as libc::c_int),
                                            false_0 as libc::c_int,
                                        );
                                        (*player)
                                            .pflags = ::core::mem::transmute::<
                                            libc::c_uint,
                                            pflags_t,
                                        >(
                                            (*player).pflags as libc::c_uint
                                                | (PF_APPLYAUTOBRAKE as libc::c_int
                                                    | PF_JUMPED as libc::c_int | PF_THOKKED as libc::c_int)
                                                    as libc::c_uint,
                                        );
                                        P_SetPlayerMobjState((*player).mo, S_PLAY_ROLL);
                                        current_block = 14303212209785889906;
                                    } else {
                                        if (*ptera).cusval != 0 {
                                            (*ptera).cusval -= 1;
                                            (*ptera).cusval;
                                        }
                                        P_TryMove(
                                            (*player).mo,
                                            (*ptera).x + (*ptera).watertop,
                                            (*ptera).y + (*ptera).waterbottom,
                                            true_0 as libc::c_int,
                                        );
                                        (*(*player).mo).z += (*ptera).cvmem;
                                        (*(*player).mo).momx = (*ptera).momx;
                                        (*(*player).mo).momy = (*ptera).momy;
                                        (*(*player).mo).momz = (*ptera).momz;
                                        if P_AproxDistance(
                                            (*(*player).mo).x - (*ptera).x - (*ptera).watertop,
                                            (*(*player).mo).y - (*ptera).y - (*ptera).waterbottom,
                                        ) > (*(*player).mo).radius
                                        {
                                            current_block = 5258314151820362308;
                                        } else {
                                            (*ptera).watertop >>= 1 as libc::c_int;
                                            (*ptera).waterbottom >>= 1 as libc::c_int;
                                            (*ptera).cvmem >>= 1 as libc::c_int;
                                            if ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                                                as libc::c_long
                                                != S_PLAY_FALL as libc::c_int as libc::c_long
                                            {
                                                P_SetPlayerMobjState((*player).mo, S_PLAY_FALL);
                                            }
                                            current_block = 14303212209785889906;
                                        }
                                    }
                                }
                            }
                        }
                        match current_block {
                            14303212209785889906 => {}
                            _ => {
                                (*player)
                                    .powers[pw_carry as libc::c_int
                                    as usize] = CR_NONE as libc::c_int as uint16_t;
                                P_SetTarget2(&mut (*(*player).mo).tracer, 0 as *mut mobj_t);
                                (*ptera).movefactor = 35 as libc::c_int;
                                (*ptera).extravalue1 |= 4 as libc::c_int;
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    if !thiscam.is_null() {
        if (*thiscam).chase == 0 {
            P_CalcHeight(player);
            P_CalcPostImg(player);
        } else {
            (*player).deltaviewheight = 0 as libc::c_int;
            (*player)
                .viewheight = FixedMul(
                41 as libc::c_int * (*player).height / 48 as libc::c_int,
                (*(*player).mo).scale,
            );
            if (*(*player).mo).eflags as libc::c_int & MFE_VERTICALFLIP as libc::c_int
                != 0
            {
                (*player)
                    .viewz = (*(*player).mo).z + (*(*player).mo).height
                    - (*player).viewheight;
            } else {
                (*player).viewz = (*(*player).mo).z + (*player).viewheight;
            }
            if server != 0 || addedtogame != 0 {
                P_MoveChaseCamera(player, thiscam, false_0 as libc::c_int);
            }
        }
    }
    if (netgame != 0 || multiplayer != 0) && (*player).spectator != 0 {
        (*(*player).mo).flags2 |= MF2_DONTDRAW as libc::c_int as uint32_t;
        (*(*player).mo).flags |= MF_NOGRAVITY as libc::c_int as uint32_t;
    }
    if (*player).powers[pw_dye as libc::c_int as usize] != 0 {
        (*(*player).mo).colorized = true_0 as libc::c_int;
        (*(*player).mo).color = (*player).powers[pw_dye as libc::c_int as usize];
    }
    if !((*player).followmobj).is_null()
        && ((*player).spectator != 0 || (*(*player).mo).health <= 0 as libc::c_int
            || (*(*player).followmobj).type_0 as libc::c_uint
                != (*player).followitem as libc::c_uint)
    {
        P_RemoveMobj((*player).followmobj);
        P_SetTarget2(&mut (*player).followmobj, 0 as *mut mobj_t);
    }
    if (*player).spectator == 0 && (*(*player).mo).health != 0
        && (*player).followitem as libc::c_uint != 0
    {
        if ((*player).followmobj).is_null()
            || P_MobjWasRemoved((*player).followmobj) != 0
        {
            P_SetTarget2(
                &mut (*player).followmobj,
                P_SpawnMobjFromMobj(
                    (*player).mo,
                    0 as libc::c_int,
                    0 as libc::c_int,
                    0 as libc::c_int,
                    (*player).followitem,
                ),
            );
            P_SetTarget2(&mut (*(*player).followmobj).tracer, (*player).mo);
            match (*(*player).followmobj).type_0 as libc::c_uint {
                5 => {
                    (*(*player).followmobj).colorized = true_0 as libc::c_int;
                }
                _ => {
                    (*(*player).followmobj).flags2
                        |= MF2_LINKDRAW as libc::c_int as uint32_t;
                }
            }
        }
        if !((*player).followmobj).is_null() {
            if !(LUA_HookFollowMobj(player, (*player).followmobj) != 0
                || P_MobjWasRemoved((*player).followmobj) != 0)
            {
                match (*(*player).followmobj).type_0 as libc::c_uint {
                    4 => {
                        P_DoTailsOverlay(player, (*player).followmobj);
                    }
                    5 => {
                        P_DoMetalJetFume(player, (*player).followmobj);
                    }
                    _ => {
                        var1 = 1 as libc::c_int;
                        var2 = 0 as libc::c_int;
                        A_CapeChase((*player).followmobj);
                    }
                }
            }
        }
    }
    P_DoPlayerHeadSigns(player);
}
#[no_mangle]
pub unsafe extern "C" fn P_SetPlayerAngle(
    mut player: *mut player_t,
    mut angle: angle_t,
) {
    let mut delta: int16_t = ((angle >> 16 as libc::c_int) as int16_t as libc::c_int
        - (*player).angleturn as libc::c_int) as int16_t;
    P_ForceLocalAngle(
        player,
        (P_GetLocalAngle(player))
            .wrapping_add(((delta as libc::c_int) << 16 as libc::c_int) as angle_t),
    );
    (*player)
        .angleturn = ((*player).angleturn as libc::c_int + delta as libc::c_int)
        as int16_t;
}
#[no_mangle]
pub unsafe extern "C" fn P_SetLocalAngle(mut player: *mut player_t, mut angle: angle_t) {
    let mut delta: int16_t = (angle.wrapping_sub(P_GetLocalAngle(player))
        >> 16 as libc::c_int) as int16_t;
    P_ForceLocalAngle(
        player,
        (P_GetLocalAngle(player))
            .wrapping_add(((delta as libc::c_int) << 16 as libc::c_int) as angle_t),
    );
    if player
        == &mut *players.as_mut_ptr().offset(consoleplayer as isize) as *mut player_t
    {
        ticcmd_oldangleturn[0 as libc::c_int
            as usize] = (ticcmd_oldangleturn[0 as libc::c_int as usize] as libc::c_int
            + delta as libc::c_int) as int16_t;
    } else if player
        == &mut *players.as_mut_ptr().offset(secondarydisplayplayer as isize)
            as *mut player_t
    {
        ticcmd_oldangleturn[1 as libc::c_int
            as usize] = (ticcmd_oldangleturn[1 as libc::c_int as usize] as libc::c_int
            + delta as libc::c_int) as int16_t;
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_GetLocalAngle(mut player: *mut player_t) -> angle_t {
    if player
        == &mut *players.as_mut_ptr().offset(consoleplayer as isize) as *mut player_t
    {
        return localangle
    } else if player
        == &mut *players.as_mut_ptr().offset(secondarydisplayplayer as isize)
            as *mut player_t
    {
        return localangle2
    } else {
        return 0 as libc::c_int as angle_t
    };
}
#[no_mangle]
pub unsafe extern "C" fn P_ForceLocalAngle(
    mut player: *mut player_t,
    mut angle: angle_t,
) {
    angle = angle & !(65535 as libc::c_int) as angle_t;
    if player
        == &mut *players.as_mut_ptr().offset(consoleplayer as isize) as *mut player_t
    {
        localangle = angle;
    } else if player
        == &mut *players.as_mut_ptr().offset(secondarydisplayplayer as isize)
            as *mut player_t
    {
        localangle2 = angle;
    }
}
#[no_mangle]
pub unsafe extern "C" fn P_PlayerFullbright(mut player: *mut player_t) -> boolean {
    return ((*player).powers[pw_super as libc::c_int as usize] as libc::c_int != 0
        || (*player).powers[pw_carry as libc::c_int as usize] as libc::c_int
            == CR_NIGHTSMODE as libc::c_int
            && (*((*(*player).mo).skin as *mut skin_t)).flags as libc::c_uint
                & (SF_SUPER as libc::c_int | SF_NONIGHTSSUPER as libc::c_int)
                    as libc::c_uint == SF_SUPER as libc::c_int as libc::c_uint
            && ((*player).exiting != 0
                || !((*(*player).mo).state
                    >= &mut *states
                        .as_mut_ptr()
                        .offset(S_PLAY_NIGHTS_TRANS1 as libc::c_int as isize)
                        as *mut state_t
                    && (*(*player).mo).state
                        < &mut *states
                            .as_mut_ptr()
                            .offset(S_PLAY_NIGHTS_TRANS6 as libc::c_int as isize)
                            as *mut state_t))) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_PlayerCanEnterSpinGaps(mut player: *mut player_t) -> boolean {
    let mut canEnter: uint8_t = LUA_HookPlayerCanEnterSpinGaps(player) as uint8_t;
    if canEnter as libc::c_int == 1 as libc::c_int {
        return true_0 as libc::c_int
    } else if canEnter as libc::c_int == 2 as libc::c_int {
        return false_0 as libc::c_int
    }
    return ((*player).pflags as libc::c_uint
        & (PF_SPINNING as libc::c_int | PF_SLIDING as libc::c_int
            | PF_GLIDING as libc::c_int) as libc::c_uint != 0
        || (*player).charability as libc::c_int == CA_GLIDEANDCLIMB as libc::c_int
            && ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
                == S_PLAY_GLIDE_LANDING as libc::c_int as libc::c_long
        || (*player).charflags
            & (SF_DASHMODE as libc::c_int | SF_MACHINE as libc::c_int) as uint32_t
            == (SF_DASHMODE as libc::c_int | SF_MACHINE as libc::c_int) as uint32_t
            && (*player).dashmode >= (3 as libc::c_int * 35 as libc::c_int) as tic_t
            && ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
                == S_PLAY_DASH as libc::c_int as libc::c_long
        || (*player).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint
            != 0 && (*player).charflags & SF_NOJUMPSPIN as libc::c_int as uint32_t == 0
            && ((*player).panim as libc::c_uint == PA_JUMP as libc::c_int as libc::c_uint
                || (*player).panim as libc::c_uint
                    == PA_ROLL as libc::c_int as libc::c_uint)) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn P_PlayerShouldUseSpinHeight(
    mut player: *mut player_t,
) -> boolean {
    return ((*player).pflags as libc::c_uint
        & (PF_SPINNING as libc::c_int | PF_SLIDING as libc::c_int
            | PF_GLIDING as libc::c_int) as libc::c_uint != 0
        || (*(*player).mo).state
            == &mut *states
                .as_mut_ptr()
                .offset((*(*(*player).mo).info).painstate as isize) as *mut state_t
        || (*player).panim as libc::c_uint == PA_ROLL as libc::c_int as libc::c_uint
        || ((*player).powers[pw_tailsfly as libc::c_int as usize] as libc::c_int != 0
            || (*player).charability as libc::c_int == CA_FLY as libc::c_int
                && ((*(*player).mo).state).offset_from(states.as_mut_ptr())
                    as libc::c_long == S_PLAY_FLY_TIRED as libc::c_int as libc::c_long)
            && (*player).charflags & SF_NOJUMPSPIN as libc::c_int as uint32_t == 0
        || (*player).charability as libc::c_int == CA_GLIDEANDCLIMB as libc::c_int
            && ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
                == S_PLAY_GLIDE_LANDING as libc::c_int as libc::c_long
        || (*player).charflags
            & (SF_DASHMODE as libc::c_int | SF_MACHINE as libc::c_int) as uint32_t
            == (SF_DASHMODE as libc::c_int | SF_MACHINE as libc::c_int) as uint32_t
            && (*player).dashmode >= (3 as libc::c_int * 35 as libc::c_int) as tic_t
            && ((*(*player).mo).state).offset_from(states.as_mut_ptr()) as libc::c_long
                == S_PLAY_DASH as libc::c_int as libc::c_long
        || (*player).pflags as libc::c_uint & PF_JUMPED as libc::c_int as libc::c_uint
            != 0 && (*player).charflags & SF_NOJUMPSPIN as libc::c_int as uint32_t == 0
            && ((*player).panim as libc::c_uint == PA_JUMP as libc::c_int as libc::c_uint
                || (*player).panim as libc::c_uint
                    == PA_ROLL as libc::c_int as libc::c_uint)) as libc::c_int;
}
